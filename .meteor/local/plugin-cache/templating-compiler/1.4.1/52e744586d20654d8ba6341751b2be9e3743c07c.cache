{"head":"","body":"","js":"\nTemplate.__checkName(\"editProperty\");\nTemplate[\"editProperty\"] = new Template(\"Template.editProperty\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isSubsLoaded\"));\n  }, function() {\n    return [ \"\\n\\n\", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userLoggedIn\"));\n    }, function() {\n      return [ \"\\n\\n\", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"propertyFound\"));\n      }, function() {\n        return [ \"\\n    \", HTML.SECTION({\n          class: \"unitspage-holder\"\n        }, \"\\n        \", HTML.SECTION({\n          class: \"logo-below-div\"\n        }, \"\\n            \", HTML.DIV({\n          class: \"container\"\n        }, \"\\n                \", HTML.DIV({\n          class: \"logo-holder-div\"\n        }, \"\\n                    \", HTML.DIV({\n          class: \"logo-holder\"\n        }, \"\\n                        \", HTML.UL(\"\\n                            \", HTML.LI(HTML.SPAN({\n          class: \"backBtn\",\n          style: \"cursor: pointer;\"\n        }, HTML.IMG({\n          src: function() {\n            return Spacebars.mustache(view.lookup(\"cdnPath\"), \"/images/back-arrow.png\");\n          }\n        }))), \"\\n                            \", HTML.LI({\n          class: \"longTitle\"\n        }, HTML.H3(Blaze.View(\"lookup:propertyData.address.address\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyData\"), \"address\", \"address\"));\n        }), \" \", Blaze.If(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"address\", \"area\"));\n        }, function() {\n          return [ \", \", Blaze.View(\"lookup:propertyData.address.area\", function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyData\"), \"address\", \"area\"));\n          }), \" \" ];\n        }), Blaze.If(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"address\", \"county\"));\n        }, function() {\n          return [ \", \", Blaze.View(\"lookup:propertyData.address.county\", function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyData\"), \"address\", \"county\"));\n          }), \" \" ];\n        }), \" \"), \"\\n                            \", Blaze.If(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"auction\"));\n        }, function() {\n          return [ \"\\n                                \", HTML.H4(\"PROPERTY KEY : \", Blaze.View(\"lookup:propertyData.auction.lettingAuctionCode\", function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyData\"), \"auction\", \"lettingAuctionCode\"));\n          }), \"\\n                                    \", HTML.SPAN({\n            class: \"auction-number pad-left-15\"\n          }, HTML.A({\n            target: \"_blank\",\n            href: function() {\n              return Spacebars.mustache(view.lookup(\"pathFor\"), Spacebars.kw({\n                route: \"letting\",\n                key: Spacebars.dot(view.lookup(\"propertyData\"), \"auction\", \"lettingAuctionCode\")\n              }));\n            },\n            class: \"viewListing\",\n            style: \"font-size:11px;\"\n          }, \"VIEW ADVERT\")), HTML.Raw('\\n                                    <span class=\"auction-number pad-left-15\"><a href=\"javascript:void(0);\" class=\"showCopyDlg\" style=\"font-size:11px;\"><i class=\"glyphicon glyphicon-thumbs-up\" aria-hidden=\"true\" style=\"font-size: 11px;\"></i> SHARE</a></span>\\n                                ')), \"\\n                            \" ];\n        }), \"\\n                            \"), \"\\n                        \"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n          class: \"menu\"\n        }, \"\\n                        \", Blaze.If(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"auctionId\"));\n        }, function() {\n          return HTML.Raw('\\n                            <button class=\"transparent-btn btns deactivatePropertyBtn\" type=\"button\"><span class=\"glyphicon glyphicon-off\" aria-hidden=\"true\"></span> Deactivate</button>\\n                        ');\n        }), HTML.Raw('\\n                            <button class=\"transparent-btn btns archivePropertyBtn\" type=\"button\"><span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span> Archive</button>\\n\\n                    ')), \"\\n                \"), \"\\n            \"), \"\\n        \"), \"\\n\\n\\n        \", HTML.SECTION({\n          class: \"mar-top-20 \"\n        }, \"\\n            \", HTML.DIV({\n          class: \"container\"\n        }, \"\\n                \", HTML.DIV({\n          class: \"filter-holder\"\n        }, \"\\n                    \", HTML.DIV({\n          class: \"head-border-bottom\"\n        }, \"\\n                        \", HTML.DIV({\n          class: \"apt-info1 background-white clearfix showEditAuctionForm autoFrm\"\n        }, \"\\n                            \", Spacebars.include(view.lookupTemplate(\"editPropertyForm\")), \"\\n\\n\\n                        \"), \"\\n\\n                    \"), \"\\n                \"), \"\\n            \"), \"\\n        \"), HTML.Raw('\\n\\n        <div class=\"verification-div1\" id=\"propertyLinkDlg\" style=\"display:none;\">\\n            <div class=\"refund-div\"><h2>Share Property</h2></div>\\n            <div class=\"profile-text text-left\">\\n                <p class=\"no-capitalize\">Please use this email to use in daft.ie, rent.ie etc ads.</p>\\n\\n                <form class=\"form-inline\" style=\"overflow: hidden;\" onsubmit=\"return false;\">\\n                    <div class=\"form-group col-sm-10\" style=\"padding: 0;\">\\n                        <input type=\"text\" class=\"form-control\" placeholder=\"\" name=\"agentPropertyEmailField\" id=\"agentPropertyEmailField\" readonly=\"\" style=\"width: 100%;padding: 0;\">\\n                    </div>\\n                    <button type=\"submit\" class=\"btn btn-primary col-sm-2 copyEmailBtn\">Copy</button>\\n                </form>\\n\\n                <p class=\"no-capitalize mar-top-15\">Please use this link to share in facebook, twitter etc. </p>\\n\\n                <form class=\"form-inline\" style=\"overflow: hidden;\" onsubmit=\"return false;\">\\n                    <div class=\"form-group col-sm-10\" style=\"padding: 0;\">\\n                        <input type=\"text\" class=\"form-control\" placeholder=\"\" name=\"propertyLinkField\" id=\"propertyLinkField\" readonly=\"\" style=\"width: 100%;padding: 0;\">\\n                    </div>\\n                    <button type=\"submit\" class=\"btn btn-primary col-sm-2 copyLinkBtn\">Copy</button>\\n                </form>\\n\\n                <form class=\"signin-form\">\\n\\n                    <div class=\"signup-btn\">\\n                        <button class=\"transparent-btn btns cancelBtn\" type=\"button\">CLOSE</button>\\n                    </div>\\n\\n                </form>\\n\\n            </div>\\n\\n        </div>\\n        '), HTML.DIV({\n          id: \"conf-dactivate-pop\",\n          class: \"confPopup\",\n          style: \"display:none;\"\n        }, HTML.Raw('\\n\\n            <div class=\"refund-div\"><h2>Confirm Deactivate?</h2></div>\\n            '), HTML.DIV({\n          class: \"profile-text\"\n        }, HTML.Raw(\"\\n                <h3>Are sure you want to deactivate ?</h3>\\n                \"), Blaze.If(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"applicationsActiveCount\"));\n        }, function() {\n          return [ HTML.P(\"This property has \", Blaze.View(\"lookup:propertyData.applicationsActiveCount\", function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyData\"), \"applicationsActiveCount\"));\n          }), \" active applications. You will not be able to choose any application if deactivated. \"), \"\\n                \" ];\n        }, function() {\n          return HTML.Raw(\"\\n                    <p></p>\\n                \");\n        }), \"\\n\\n                \", HTML.UL(\"\\n                    \", HTML.LI(HTML.BUTTON({\n          class: \"transparent-btn btns deactivateConfirmBtn\",\n          type: \"button\"\n        }, Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"deactivateInProgress\"));\n        }, function() {\n          return \"Deactivating...\";\n        }, function() {\n          return \"Deactivate\";\n        }))), HTML.Raw('\\n                    <li><button class=\"blue-btn btns closePopupBtn\" type=\"button\">Cancel</button></li>\\n                ')), \"\\n            \"), \"\\n        \"), \"\\n        \", HTML.DIV({\n          id: \"conf-archive-pop\",\n          class: \"confPopup\",\n          style: \"display:none;\"\n        }, HTML.Raw('\\n\\n            <div class=\"refund-div\"><h2>Confirm Archive?</h2></div>\\n            '), HTML.DIV({\n          class: \"profile-text\"\n        }, HTML.Raw(\"\\n                <h3>Are sure you want to archive? </h3>\\n                \"), Blaze.If(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"applicationsActiveCount\"));\n        }, function() {\n          return [ HTML.P(\"This property has \", Blaze.View(\"lookup:propertyData.applicationsActiveCount\", function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyData\"), \"applicationsActiveCount\"));\n          }), \" active applications. You will not be able to choose any application if deactivated. \"), \"\\n                \" ];\n        }, function() {\n          return HTML.Raw(\"\\n                    <p></p>\\n                \");\n        }), HTML.Raw(\"\\n                <p>Please note that archiving will also deactivate it and will disable all the applications received on it.</p>\\n\\n                \"), HTML.UL(\"\\n                    \", HTML.LI(HTML.BUTTON({\n          class: \"transparent-btn btns archiveConfirmBtn\",\n          type: \"button\"\n        }, Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"archiveInProgress\"));\n        }, function() {\n          return \"Archiving...\";\n        }, function() {\n          return \"Archive\";\n        }))), HTML.Raw('\\n                    <li><button class=\"blue-btn btns closePopupBtn\" type=\"button\">Cancel</button></li>\\n                ')), \"\\n            \"), \"\\n        \"), \"\\n\\n    \"), \"\\n\" ];\n      }, function() {\n        return HTML.Raw('\\n    <section class=\"mar-top-20 \">\\n        <div class=\"container text-center mar-top-20 pad-btm-30\">\\n            <div class=\"filter-holder\">\\n                <div class=\"mar-top-30\">\\n                        <strong>This property is not found. Please try again.</strong><br><br>\\n                        <button class=\"blue-btn btns backBtn\" type=\"button\">Try again</button>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n');\n      }), \"\\n\" ];\n    }, function() {\n      return [ \"\\n    \", HTML.SECTION({\n        class: \"mar-top-20 mar-btm-20 no-print loginPageHorizontal\"\n      }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"loginPageHorizontal\")), \"\\n    \"), \"\\n\" ];\n    }), \"\\n\" ];\n  }, function() {\n    return [ \"\\n    \", HTML.SECTION({\n      class: \"mar-top-20 mar-btm-20 no-print loginPageHorizontal\"\n    }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"loading\")), \"\\n    \"), \"\\n\" ];\n  });\n}));\n\nTemplate.__checkName(\"imageEditView\");\nTemplate[\"imageEditView\"] = new Template(\"Template.imageEditView\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"row\"\n  }, \"\\n        \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"images\"));\n  }, function() {\n    return [ \"\\n            \", Spacebars.include(view.lookupTemplate(\"imgEditTag\")), \"\\n        \" ];\n  }), \"\\n\\n    \");\n}));\n\nTemplate.__checkName(\"imgEditTag\");\nTemplate[\"imgEditTag\"] = new Template(\"Template.imgEditTag\", (function() {\n  var view = this;\n  return [ HTML.Raw('<!--<div class=\"col-sm-3 col-xs-6\">-->\\n        '), HTML.DIV({\n    class: \"thumbnail\"\n  }, HTML.Raw('\\n            <div class=\"frow\">\\n                <a href=\"javascript:void(0)\" class=\"editImgBtn\"><span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span> Edit</a>\\n                <a href=\"javascript:void(0)\" class=\"deleteImgBtn\"><span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span> Delete</a>\\n            </div>\\n            '), HTML.DIV({\n    class: \"secrow\"\n  }, \"\\n                \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"handle\"));\n  }, function() {\n    return [ \"\\n                    \", HTML.IMG({\n      src: function() {\n        return [ \"https://process.filestackapi.com/resize=width:250/\", Spacebars.mustache(view.lookup(\"handle\")) ];\n      },\n      alt: \"\",\n      class: \"img-responsive\"\n    }), \"\\n                \" ];\n  }, function() {\n    return [ \"\\n                    \", HTML.IMG({\n      src: function() {\n        return [ \"https://process.filestackapi.com/AIPACLEs7ShGwwPh6fMTxz/resize=width:250/\", Spacebars.mustache(view.lookup(\"url\")) ];\n      },\n      alt: \"\",\n      class: \"img-responsive\"\n    }), \"\\n                \" ];\n  }), \"\\n            \"), \"\\n        \"), HTML.Raw(\"\\n    <!--</div>-->\") ];\n}));\n\nTemplate.__checkName(\"oldAddPropertyFormData\");\nTemplate[\"oldAddPropertyFormData\"] = new Template(\"Template.oldAddPropertyFormData\", (function() {\n  var view = this;\n  return [ Blaze._TemplateWith(function() {\n    return {\n      collection: Spacebars.call(\"Collections.Properties\"),\n      id: Spacebars.call(\"editPropertiesForm\"),\n      type: Spacebars.call(\"update\"),\n      doc: Spacebars.call(view.lookup(\"propertyData\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n      return [ \"\\n        \", Blaze.Each(function() {\n        return Spacebars.call(view.lookup(\"afFieldNames\"));\n      }, function() {\n        return [ \"\\n            \", Blaze.Unless(function() {\n          return Spacebars.dataMustache(view.lookup(\"inIgnoreList\"), Spacebars.dot(view.lookup(\".\"), \"name\"));\n        }, function() {\n          return [ \"\\n                \", Blaze._TemplateWith(function() {\n            return {\n              name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),\n              options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))\n            };\n          }, function() {\n            return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n          }), \"\\n            \" ];\n        }), \"\\n        \" ];\n      }), HTML.Raw('\\n\\n        <div class=\"form-group\">\\n            <label for=\"selectPropertyImages\">Property images</label>\\n            <input type=\"file\" multiple=\"true\" class=\"selectPropertyImages\" id=\"selectPropertyImages\">\\n            <!--<p class=\"help-block\">Example block-level help text here.</p>-->\\n        </div>\\n        '), Spacebars.include(view.lookupTemplate(\"imageEditView\")), HTML.Raw('\\n\\n        <ul class=\"bid-button-div pull-left\">\\n            <li>\\n                <button type=\"submit\" class=\"btns green-btn color-white \">Save</button>\\n            </li>\\n            <li>\\n                <button class=\"transparent-btn btns backBtn\" type=\"button\">Cancel</button>\\n            </li>\\n        </ul>\\n    ') ];\n    });\n  }), HTML.Raw(\"\\n    <br><br><br><br>\\n    <h2>Activation details</h2>\\n    <br>\\n    \"), Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"auction\"));\n  }, function() {\n    return [ \"\\n        \", Blaze._TemplateWith(function() {\n      return {\n        collection: Spacebars.call(\"Collections.Auctions\"),\n        id: Spacebars.call(\"editAuctionsForm\"),\n        type: Spacebars.call(\"update\"),\n        doc: Spacebars.call(Spacebars.dot(view.lookup(\"propertyData\"), \"auction\"))\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n        return [ \"\\n            \", Blaze.Each(function() {\n          return Spacebars.call(view.lookup(\"afFieldNames\"));\n        }, function() {\n          return [ \"\\n                \", Blaze.Unless(function() {\n            return Spacebars.dataMustache(view.lookup(\"inIgnoreList\"), Spacebars.dot(view.lookup(\".\"), \"name\"));\n          }, function() {\n            return [ \"\\n                    \", Blaze._TemplateWith(function() {\n              return {\n                name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),\n                options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))\n              };\n            }, function() {\n              return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n            }), \"\\n                \" ];\n          }), \"\\n            \" ];\n        }), HTML.Raw('\\n\\n            <ul class=\"bid-button-div pull-left\">\\n                <li>\\n                    <button type=\"submit\" class=\"btns green-btn color-white \">Save</button>\\n                </li>\\n                <li>\\n                    <button class=\"transparent-btn btns backBtn\" type=\"button\">Cancel</button>\\n                </li>\\n            </ul>\\n        ') ];\n      });\n    }), \"\\n    \" ];\n  }, function() {\n    return HTML.Raw('\\n        <p class=\"pull-left\">This property is not active yet. Activate it first from My Properties page.</p>\\n        <br>\\n        <button class=\"transparent-btn btns backBtn\" type=\"button\">Activate</button>\\n    ');\n  }) ];\n}));\n\nTemplate.__checkName(\"editPropertyForm\");\nTemplate[\"editPropertyForm\"] = new Template(\"Template.editPropertyForm\", (function() {\n  var view = this;\n  return HTML.FORM({\n    class: \"signin-form cf-1\",\n    id: \"editPropertyFormCF\"\n  }, \"\\n        \", Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\"data\"), \"auction\"));\n  }, function() {\n    return [ HTML.Raw('\\n            <h2 style=\"margin-bottom: 30px\">Edit Advertisement</h2>\\n        <input type=\"hidden\" name=\"advertiseFormActive\" value=\"yes\">\\n        <input type=\"hidden\" name=\"currency\" value=\"eur\">\\n        '), HTML.INPUT({\n      type: \"hidden\",\n      name: \"propertyId\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"_id\"));\n      }\n    }), \"\\n        \", HTML.DIV({\n      class: \"clearfix\"\n    }, \"\\n            \", HTML.DIV({\n      class: \"styled-input \"\n    }, \"\\n                \", HTML.INPUT({\n      type: \"text\",\n      name: \"price\",\n      id: \"rent\",\n      required: \"\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"data\"), \"auction\", \"price\"));\n      }\n    }), HTML.Raw('\\n                <label id=\"rent\" class=\"error\" for=\"rent\">This field is required.</label>\\n                <br>\\n                <label>Rent *</label>\\n                <span></span>\\n            ')), \"\\n\\n            \", HTML.DIV({\n      class: \"styled-input \"\n    }, \"\\n                \", HTML.INPUT({\n      type: \"text\",\n      name: \"readyFrom\",\n      id: \"readyFrom\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"dateTimeFormat\"), Spacebars.dot(view.lookup(\"data\"), \"auction\", \"readyFrom\"));\n      }\n    }), HTML.Raw('\\n                <label class=\"\" for=\"rent\"></label>\\n                <br>\\n                <label>Ready to move in from?</label>\\n                <span></span>\\n            ')), \"\\n\\n            \", HTML.DIV({\n      class: \"styled-input styled-input-select\"\n    }, HTML.Raw(\"\\n                <label>Lease until?</label>\\n                \"), HTML.SELECT({\n      name: \"lease\",\n      autocomplete: \"\"\n    }, HTML.Raw('\\n                    <option value=\"\">(Select One)</option>\\n                    '), Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"leaseUntil\"));\n    }, function() {\n      return [ \"\\n                        \", HTML.OPTION(HTML.Attrs({\n        value: function() {\n          return Spacebars.mustache(view.lookup(\".\"));\n        }\n      }, function() {\n        return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"auction\", \"lease\"), view.lookup(\".\"));\n      }), Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      })), \"\\n                    \" ];\n    }), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), \"\\n\\n            \", HTML.DIV({\n      class: \"styled-input styled-input-select\"\n    }, HTML.Raw(\"\\n                <label>Rent type</label>\\n                \"), HTML.SELECT({\n      name: \"rentType\",\n      autocomplete: \"\"\n    }, HTML.Raw('\\n                    <option value=\"\">(Select One)</option>\\n                    '), HTML.OPTION(HTML.Attrs({\n      value: \"weekly\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"auction\", \"rentType\"), \"weekly\");\n    }), \"Weekly\"), \"\\n                    \", HTML.OPTION(HTML.Attrs({\n      value: \"monthly\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"auction\", \"rentType\"), \"monthly\");\n    }), \"Monthly\"), \"\\n                    \", HTML.OPTION(HTML.Attrs({\n      value: \"other\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"auction\", \"rentType\"), \"other\");\n    }), \"Other\"), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), HTML.Raw('\\n\\n            <div class=\"w-100\"></div>\\n\\n            '), HTML.DIV({\n      class: \"sep-section\"\n    }, HTML.Raw('\\n                <label class=\"sep-label\">Contact person for this advertisement</label>\\n                '), HTML.DIV({\n      class: \"styled-input underline\"\n    }, \"\\n                    \", HTML.INPUT({\n      type: \"text\",\n      name: \"advertContacts.0.name\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"advertisementContact\"), \"name\"));\n      }\n    }), HTML.Raw(\"\\n                    <label>Name</label>\\n                    <span></span>\\n                \")), \"\\n                \", HTML.DIV({\n      class: \"styled-input underline\"\n    }, \"\\n                    \", HTML.INPUT({\n      type: \"text\",\n      name: \"advertContacts.0.phone\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"advertisementContact\"), \"phone\"));\n      }\n    }), HTML.Raw(\"\\n                    <label>Mobile</label>\\n                    <span></span>\\n                \")), \"\\n                \", HTML.DIV({\n      class: \"styled-input underline\"\n    }, \"\\n                    \", HTML.INPUT({\n      type: \"email\",\n      name: \"advertContacts.0.email\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"advertisementContact\"), \"email\"));\n      }\n    }), HTML.Raw(\"\\n                    <label>Email</label>\\n                    <span></span>\\n                \")), \"\\n            \"), HTML.Raw('\\n\\n            <div class=\"w-100\"></div>\\n\\n\\n            '), HTML.DIV({\n      class: \"styled-full-width\"\n    }, \"\\n                \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"editPropertyFormSaving\"));\n    }, function() {\n      return HTML.Raw('\\n                    <button type=\"button\" class=\"btns transparent-btn\">Saving</button>\\n                ');\n    }, function() {\n      return HTML.Raw('\\n                    <button type=\"submit\" class=\"btns blue-btn editPropertyFormSaveBtn\">Save</button>\\n                ');\n    }), HTML.Raw('\\n                <!--<button type=\"button\" class=\"btns blue-btn addPropertyFormSaveActivateBtn\">Save and Activate</button>-->\\n                <button type=\"button\" class=\"btns transparent-btn editPropertyFormCancelBtn\">Cancel</button>\\n            ')), HTML.Raw('\\n\\n            <div class=\"w-100\"></div>\\n        ')), \"\\n            \" ];\n  }, function() {\n    return HTML.Raw('\\n            <h2 style=\"margin-bottom: 30px\">Edit Advertisement</h2>\\n            <p>This property is not advertised. <a href=\"javascript:void(0)\" class=\"backBtn\">Visit</a> previous page to advertise. </p>\\n        ');\n  }), HTML.Raw('\\n\\n        <h2 style=\"margin-bottom: 30px\">Edit Property</h2>\\n\\n        '), HTML.DIV({\n    class: \"clearfix\"\n  }, \"\\n            \", HTML.DIV({\n    class: \"styled-input \"\n  }, \"\\n                \", HTML.INPUT({\n    type: \"text\",\n    name: \"address.address\",\n    id: \"address.address\",\n    required: \"\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"data\"), \"address\", \"address\"));\n    }\n  }), HTML.Raw('\\n                <label id=\"address.address-error\" class=\"error\" for=\"address.address\">This field is required.</label>\\n                <br>\\n                <label>Name and Street *</label>\\n                <span></span>\\n            ')), \"\\n            \", HTML.DIV({\n    class: \"styled-input styled-input-select\"\n  }, HTML.Raw(\"\\n                <label>Country</label>\\n                \"), HTML.SELECT({\n    name: \"address.country\",\n    required: \"\",\n    autocomplete: \"\"\n  }, \"\\n                    \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"countries\"));\n  }, function() {\n    return [ \"\\n                        \", HTML.OPTION(HTML.Attrs({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"address\", \"country\"), view.lookup(\"value\"));\n    }), Blaze.View(\"lookup:label\", function() {\n      return Spacebars.mustache(view.lookup(\"label\"));\n    })), \"\\n                    \" ];\n  }), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), \"\\n            \", HTML.DIV({\n    class: \"styled-input styled-input-select\"\n  }, HTML.Raw(\"\\n                <label>County</label>\\n                \"), HTML.SELECT({\n    name: \"address.county\",\n    required: \"\",\n    autocomplete: \"\",\n    class: \"countySelected\"\n  }, HTML.Raw('\\n                    <option value=\"\">(Select One)</option>\\n                    '), Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"counties\"));\n  }, function() {\n    return [ \"\\n                        \", HTML.OPTION(HTML.Attrs({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"address\", \"county\"), view.lookup(\"value\"));\n    }), Blaze.View(\"lookup:label\", function() {\n      return Spacebars.mustache(view.lookup(\"label\"));\n    })), \"\\n                    \" ];\n  }), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), \"\\n\\n            \", HTML.DIV({\n    class: \"styled-input styled-input-select\"\n  }, HTML.Raw(\"\\n                <label>Area *</label>\\n                \"), HTML.SELECT({\n    name: \"address.area\",\n    required: \"\",\n    autocomplete: \"\",\n    class: \"\"\n  }, HTML.Raw('\\n                    <option value=\"\">(Select One)</option>\\n                    '), Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"areas\"));\n  }, function() {\n    return [ \"\\n                        \", HTML.OPTION(HTML.Attrs({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"address\", \"area\"), view.lookup(\"value\"));\n    }), Blaze.View(\"lookup:label\", function() {\n      return Spacebars.mustache(view.lookup(\"label\"));\n    })), \"\\n                    \" ];\n  }), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), \"\\n\\n            \", HTML.DIV({\n    class: \"styled-input styled-input-select\"\n  }, HTML.Raw(\"\\n                <label>Property type *</label>\\n                \"), HTML.SELECT({\n    name: \"type\",\n    required: \"\",\n    autocomplete: \"\"\n  }, HTML.Raw('\\n                    <option value=\"\">(Select One)</option>\\n                    '), Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"propertyTypes\"));\n  }, function() {\n    return [ \"\\n                        \", HTML.OPTION(HTML.Attrs({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"isEqualSelect\"), Spacebars.dot(view.lookup(\"data\"), \"type\"), view.lookup(\"value\"));\n    }), Blaze.View(\"lookup:label\", function() {\n      return Spacebars.mustache(view.lookup(\"label\"));\n    })), \"\\n                    \" ];\n  }), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), \"\\n\\n\\n            \", HTML.DIV({\n    class: \"styled-input styled-input-select\"\n  }, HTML.Raw(\"\\n                <label>Furnished? *</label>\\n                \"), HTML.SELECT({\n    name: \"furnished\",\n    required: \"\",\n    autocomplete: \"\"\n  }, \"\\n                    \", Blaze.Each(function() {\n    return Spacebars.dataMustache(view.lookup(\"furnishedOptions\"), Spacebars.dot(view.lookup(\"data\"), \"furnished\"));\n  }, function() {\n    return [ \"\\n                        \", HTML.OPTION(HTML.Attrs({\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"selected\"));\n    }), Blaze.View(\"lookup:label\", function() {\n      return Spacebars.mustache(view.lookup(\"label\"));\n    })), \"\\n                    \" ];\n  }), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), \"\\n\\n            \", HTML.DIV({\n    class: \"styled-input underline\"\n  }, \"\\n                \", HTML.INPUT({\n    type: \"number\",\n    name: \"baths\",\n    id: \"baths\",\n    required: \"\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"data\"), \"baths\"));\n    }\n  }), HTML.Raw(\"\\n                <label>Number of bathrooms</label>\\n                <span></span>\\n            \")), \"\\n\\n            \", HTML.DIV({\n    class: \"styled-input underline\"\n  }, \"\\n                \", HTML.INPUT({\n    type: \"number\",\n    name: \"numBedRoomCount\",\n    id: \"numBedRoomCount\",\n    required: \"\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"arrLength\"), Spacebars.dot(view.lookup(\"data\"), \"bedrooms\"));\n    }\n  }), HTML.Raw(\"\\n                <label>Number of bedrooms</label>\\n                <span></span>\\n            \")), \"\\n\\n            \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"numBedRoomCount\"));\n  }, function() {\n    return [ \"\\n                \", HTML.DIV({\n      class: \"styled-full-width\"\n    }, HTML.Raw('\\n                    <label class=\"sep-label\">Ensuite? </label>\\n\\n                    '), Blaze.Each(function() {\n      return Spacebars.dataMustache(view.lookup(\"ensuiteLoop\"), view.lookup(\"numBedRoomCount\"));\n    }, function() {\n      return [ \"\\n                        \", HTML.DIV({\n        class: \"styled-input-select styled-input-checkbox max-20\"\n      }, \"\\n                            \", HTML.DIV({\n        class: function() {\n          return [ \"checkbox \", Blaze.Unless(function() {\n            return Spacebars.dataMustache(view.lookup(\"ensuiteLoopCheckbox\"), view.lookup(\"@index\"));\n          }, function() {\n            return \"disabled\";\n          }) ];\n        }\n      }, \"\\n                                \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n        type: \"checkbox\",\n        name: function() {\n          return [ \"bedrooms.\", Spacebars.mustache(view.lookup(\"@index\")), \".ensuite\" ];\n        }\n      }, function() {\n        return Spacebars.attrMustache(view.lookup(\"ensuiteLoopCheckbox\"), view.lookup(\"@index\"));\n      })), \"Bedroom \", Blaze.View(\"lookup:i\", function() {\n        return Spacebars.mustache(view.lookup(\"i\"));\n      }), \" Ensuite?\"), \"\\n                            \"), HTML.Raw(\"\\n                            <label>Bed Type</label>\\n                            \"), HTML.SELECT({\n        required: \"\",\n        autocomplete: \"\",\n        name: function() {\n          return [ \"bedrooms.\", Spacebars.mustache(view.lookup(\"@index\")), \".bedType\" ];\n        }\n      }, \"\\n                                \", Blaze.Each(function() {\n        return Spacebars.dataMustache(view.lookup(\"ensuiteLoopBedTypeOptions\"), view.lookup(\"@index\"));\n      }, function() {\n        return [ \"\\n                                    \", HTML.OPTION(HTML.Attrs({\n          value: function() {\n            return Spacebars.mustache(view.lookup(\"value\"));\n          },\n          jns: \"\",\n          nha: \"\"\n        }, function() {\n          return Spacebars.attrMustache(view.lookup(\"sel\"));\n        }), Blaze.View(\"lookup:label\", function() {\n          return Spacebars.mustache(view.lookup(\"label\"));\n        })), \"\\n                                \" ];\n      }), \"\\n                            \"), HTML.Raw(\"\\n                            <span></span>\\n                        \")), \"\\n                    \" ];\n    }), \"\\n\\n                \"), HTML.Raw('<div class=\"w-100\"></div>\\n            ') ];\n  }), \"\\n\\n            \", HTML.DIV({\n    class: \"styled-full-width\"\n  }, HTML.Raw('\\n                <label class=\"cf-title\">About</label><br>\\n                '), HTML.TEXTAREA({\n    name: \"about\",\n    class: \"styled-input-textarea autoGrowTA\",\n    placeholder: \"Enter any additional info about this letting.\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"data\"), \"about\"));\n    }\n  }), \"\\n\\n            \"), HTML.Raw('\\n\\n            <div class=\"w-100\"></div>\\n\\n            '), HTML.DIV({\n    class: \"styled-full-width styled-input-checkbox\"\n  }, HTML.Raw('\\n                <label class=\"cf-title\">Amenities</label><br>\\n                '), HTML.DIV({\n    class: \"cb-subsec\"\n  }, \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Parking\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Parking\");\n  })), \"Parking\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Club House\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Club House\");\n  })), \"Club House\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Swimming Pool\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Swimming Pool\");\n  })), \"Swimming Pool\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Mini Theater\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Mini Theater\");\n  })), \"Mini Theater\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Gym\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Gym\");\n  })), \"Gym\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Meditation Hall\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Meditation Hall\");\n  })), \"Meditation Hall\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Cable Television\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Cable Television\");\n  })), \"Cable Television\"), \"\\n                    \"), \"\\n                \"), \"\\n                \", HTML.DIV({\n    class: \"cb-subsec\"\n  }, \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Dishwasher\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Dishwasher\");\n  })), \"Dishwasher\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Garden / Patio / Balcony\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Garden / Patio / Balcony\");\n  })), \"Garden / Patio / Balcony\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Internet\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Internet\");\n  })), \"Internet\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Serviced Property\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Serviced Property\");\n  })), \"Serviced Property\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Washing Machine\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Washing Machine\");\n  })), \"Washing Machine\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Central Heating\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Central Heating\");\n  })), \"Central Heating\"), \"\\n                    \"), \"\\n                \"), \"\\n                \", HTML.DIV({\n    class: \"cb-subsec\"\n  }, \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Dryer\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Dryer\");\n  })), \"Dryer\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"House Alarm\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"House Alarm\");\n  })), \"House Alarm\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Microwave\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Microwave\");\n  })), \"Microwave\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Pets Allowed\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Pets Allowed\");\n  })), \"Pets Allowed\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Smoking\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Smoking\");\n  })), \"Smoking\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    class: \"checkbox disabled\"\n  }, \"\\n                        \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    name: \"amenities\",\n    value: \"Wheelchair Access\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"hasAmenityCheckbox\"), \"Wheelchair Access\");\n  })), \"Wheelchair Access\"), \"\\n                    \"), \"\\n                \"), HTML.Raw(\"\\n                <span></span>\\n            \")), HTML.Raw('\\n\\n            <div class=\"w-100\"></div>\\n\\n            '), HTML.DIV({\n    class: \"sep-section\"\n  }, HTML.Raw('\\n                <label class=\"sep-label\">Contact details of the property owner if any</label>\\n                '), HTML.DIV({\n    class: \"styled-input underline\"\n  }, \"\\n                    \", HTML.INPUT({\n    type: \"text\",\n    name: \"contacts.0.name\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyContact\"), \"name\"));\n    }\n  }), HTML.Raw('\\n                    <label>Owners Name <i title=\"This info will not be displayed to users. It confidential and will be used only for record purpose.\">(Private)</i></label>\\n                    <span></span>\\n                ')), \"\\n                \", HTML.DIV({\n    class: \"styled-input underline\"\n  }, \"\\n                    \", HTML.INPUT({\n    type: \"text\",\n    name: \"contacts.0.phone\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyContact\"), \"phone\"));\n    }\n  }), HTML.Raw('\\n                    <label>Owners Mobile <i title=\"This info will not be displayed to users. It confidential and will be used only for record purpose.\">(Private)</i></label>\\n                    <span></span>\\n                ')), \"\\n                \", HTML.DIV({\n    class: \"styled-input underline\"\n  }, \"\\n                    \", HTML.INPUT({\n    type: \"email\",\n    name: \"contacts.0.email\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\"propertyContact\"), \"email\"));\n    }\n  }), HTML.Raw('\\n                    <label>Owners Email <i title=\"This info will not be displayed to users. It confidential and will be used only for record purpose.\">(Private)</i></label>\\n                    <span></span>\\n                ')), \"\\n            \"), HTML.Raw('\\n\\n            <div class=\"w-100\"></div>\\n\\n\\n            <div class=\"styled-full-width\">\\n                <button class=\"btns blue-btn openFileUploader\">Add Images</button>\\n                <!--<label for=\"selectPropertyImages\">Property images</label>-->\\n                <!--<input type=\"file\" multiple=\"true\" class=\"selectPropertyImages\"  id=\"selectPropertyImages\"/>-->\\n                <!--<p class=\"help-block\">Example block-level help text here.</p>-->\\n            </div>\\n\\n            <div class=\"w-100\"></div>\\n\\n\\n            '), Spacebars.include(view.lookupTemplate(\"imageEditView\")), \"\\n\\n            \", HTML.DIV({\n    class: \"styled-full-width\"\n  }, \"\\n                \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"editPropertyFormSaving\"));\n  }, function() {\n    return HTML.Raw('\\n                    <button type=\"button\" class=\"btns transparent-btn\">Saving</button>\\n                ');\n  }, function() {\n    return HTML.Raw('\\n                    <button type=\"submit\" class=\"btns blue-btn editPropertyFormSaveBtn\">Save</button>\\n                ');\n  }), HTML.Raw('\\n                <!--<button type=\"button\" class=\"btns blue-btn addPropertyFormSaveActivateBtn\">Save and Activate</button>-->\\n                <button type=\"button\" class=\"btns transparent-btn editPropertyFormCancelBtn\">Cancel</button>\\n            ')), HTML.Raw('\\n\\n            <div class=\"w-100\"></div>\\n        ')), \"\\n    \");\n}));\n","bodyAttrs":{}}