{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/client/triggers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/jns:flow-router-ssr/client/triggers.js","filename":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/client/triggers.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/client/triggers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jns:flow-router-ssr/client/triggers.js"}},"code":"// a set of utility functions for triggers\nTriggers = {}; // Apply filters for a set of triggers\n// @triggers - a set of triggers\n// @filter - filter with array fileds with `only` and `except`\n//           support only either `only` or `except`, but not both\n\nTriggers.applyFilters = (triggers, filter) => {\n  if (!(triggers instanceof Array)) {\n    triggers = [triggers];\n  }\n\n  if (!filter) {\n    return triggers;\n  }\n\n  if (filter.only && filter.except) {\n    throw new Error(\"Triggers don't support only and except filters at once\");\n  }\n\n  if (filter.only && !(filter.only instanceof Array)) {\n    throw new Error('only filters needs to be an array');\n  }\n\n  if (filter.except && !(filter.except instanceof Array)) {\n    throw new Error('except filters needs to be an array');\n  }\n\n  if (filter.only) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);\n  }\n\n  if (filter.except) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);\n  }\n\n  throw new Error('Provided a filter but not supported');\n}; //  create triggers by bounding them to a set of route names\n//  @triggers - a set of triggers\n//  @names - list of route names to be bound (trigger runs only for these names)\n//  @negate - negate the result (triggers won't run for above names)\n\n\nTriggers.createRouteBoundTriggers = (triggers, names, negate) => {\n  const namesMap = {};\n  names.forEach(name => {\n    namesMap[name] = true;\n  });\n  const filteredTriggers = triggers.map(originalTrigger => {\n    const modifiedTrigger = (context, next) => {\n      const routeName = context.route.name;\n      let matched = namesMap[routeName] ? 1 : -1;\n      matched = negate ? matched * -1 : matched;\n\n      if (matched === 1) {\n        originalTrigger(context, next);\n      }\n    };\n\n    return modifiedTrigger;\n  });\n  return filteredTriggers;\n}; //  run triggers and abort if redirected or callback stopped\n//  @triggers - a set of triggers\n//  @context - context we need to pass (it must have the route)\n//  @redirectFn - function which used to redirect\n//  @after - called after if only all the triggers runs\n\n\nTriggers.runTriggers = (triggers, context, redirectFn, after) => {\n  let abort = false;\n  let inCurrentLoop = true;\n  let alreadyRedirected = false;\n\n  for (let lc = 0; lc < triggers.length; lc++) {\n    const trigger = triggers[lc];\n    trigger(context, doRedirect, doStop);\n\n    if (abort) {\n      return;\n    }\n  } // mark that, we've exceeds the currentEventloop for\n  // this set of triggers.\n\n\n  inCurrentLoop = false;\n  after();\n\n  function doRedirect(url, params, queryParams) {\n    if (alreadyRedirected) {\n      throw new Error('already redirected');\n    }\n\n    if (!inCurrentLoop) {\n      throw new Error('redirect needs to be done in sync');\n    }\n\n    if (!url) {\n      throw new Error('trigger redirect requires an URL');\n    }\n\n    abort = true;\n    alreadyRedirected = true;\n    redirectFn(url, params, queryParams);\n  }\n\n  function doStop() {\n    abort = true;\n  }\n};","map":{"version":3,"sources":["packages/jns:flow-router-ssr/client/triggers.js"],"names":["Triggers","applyFilters","triggers","filter","Array","only","except","Error","createRouteBoundTriggers","names","negate","namesMap","forEach","name","filteredTriggers","map","originalTrigger","modifiedTrigger","context","next","routeName","route","matched","runTriggers","redirectFn","after","abort","inCurrentLoop","alreadyRedirected","lc","length","trigger","doRedirect","doStop","url","params","queryParams"],"mappings":"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","sourcesContent":["// a set of utility functions for triggers\n\nTriggers = {};\n\n// Apply filters for a set of triggers\n// @triggers - a set of triggers\n// @filter - filter with array fileds with `only` and `except`\n//           support only either `only` or `except`, but not both\nTriggers.applyFilters = (triggers, filter) => {\n  if (!(triggers instanceof Array)) {\n    triggers = [triggers];\n  }\n\n  if (!filter) {\n    return triggers;\n  }\n\n  if (filter.only && filter.except) {\n    throw new Error(\"Triggers don't support only and except filters at once\");\n  }\n\n  if (filter.only && !(filter.only instanceof Array)) {\n    throw new Error('only filters needs to be an array');\n  }\n\n  if (filter.except && !(filter.except instanceof Array)) {\n    throw new Error('except filters needs to be an array');\n  }\n\n  if (filter.only) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);\n  }\n\n  if (filter.except) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);\n  }\n\n  throw new Error('Provided a filter but not supported');\n};\n\n//  create triggers by bounding them to a set of route names\n//  @triggers - a set of triggers\n//  @names - list of route names to be bound (trigger runs only for these names)\n//  @negate - negate the result (triggers won't run for above names)\nTriggers.createRouteBoundTriggers = (triggers, names, negate) => {\n  const namesMap = {};\n\n  names.forEach((name) => {\n    namesMap[name] = true;\n  });\n\n  const filteredTriggers = triggers.map((originalTrigger) => {\n    const modifiedTrigger = (context, next) => {\n      const routeName = context.route.name;\n      let matched = namesMap[routeName] ? 1 : -1;\n      matched = negate ? matched * -1 : matched;\n\n      if (matched === 1) {\n        originalTrigger(context, next);\n      }\n    };\n    return modifiedTrigger;\n  });\n\n  return filteredTriggers;\n};\n\n//  run triggers and abort if redirected or callback stopped\n//  @triggers - a set of triggers\n//  @context - context we need to pass (it must have the route)\n//  @redirectFn - function which used to redirect\n//  @after - called after if only all the triggers runs\nTriggers.runTriggers = (triggers, context, redirectFn, after) => {\n  let abort = false;\n  let inCurrentLoop = true;\n  let alreadyRedirected = false;\n\n  for (let lc = 0; lc < triggers.length; lc++) {\n    const trigger = triggers[lc];\n    trigger(context, doRedirect, doStop);\n\n    if (abort) {\n      return;\n    }\n  }\n\n  // mark that, we've exceeds the currentEventloop for\n  // this set of triggers.\n  inCurrentLoop = false;\n  after();\n\n  function doRedirect(url, params, queryParams) {\n    if (alreadyRedirected) {\n      throw new Error('already redirected');\n    }\n\n    if (!inCurrentLoop) {\n      throw new Error('redirect needs to be done in sync');\n    }\n\n    if (!url) {\n      throw new Error('trigger redirect requires an URL');\n    }\n\n    abort = true;\n    alreadyRedirected = true;\n    redirectFn(url, params, queryParams);\n  }\n\n  function doStop() {\n    abort = true;\n  }\n};\n"]},"sourceType":"module","hash":"45926a4f015e702d3802e42e57362b6774ca43b9"}
