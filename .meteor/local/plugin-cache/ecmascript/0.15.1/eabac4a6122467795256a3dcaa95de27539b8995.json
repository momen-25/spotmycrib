{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/jcbernack:reactive-aggregate/aggregate.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/jcbernack:reactive-aggregate/aggregate.js","filename":"/home/momen/projects/spotmycrib-master/packages/jcbernack:reactive-aggregate/aggregate.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/jcbernack:reactive-aggregate/aggregate.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jcbernack:reactive-aggregate/aggregate.js"}},"code":"var _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ReactiveAggregate: function () {\n    return ReactiveAggregate;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\n\nvar defaultOptions = function (_ref) {\n  var collection = _ref.collection,\n      options = _ref.options;\n  return _objectSpread({\n    observeSelector: {},\n    observeOptions: {},\n    delay: 250,\n    lookupCollections: {},\n    clientCollection: collection._name\n  }, options);\n};\n\nvar ReactiveAggregate = function (subscription, collection) {\n  var pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  // fill out default options\n  var _defaultOptions = defaultOptions({\n    collection: collection,\n    options: options\n  }),\n      observeSelector = _defaultOptions.observeSelector,\n      observeOptions = _defaultOptions.observeOptions,\n      delay = _defaultOptions.delay,\n      lookupCollections = _defaultOptions.lookupCollections,\n      clientCollection = _defaultOptions.clientCollection; // run, or re-run, the aggregation pipeline\n\n\n  var throttledUpdate = _.throttle(Meteor.bindEnvironment(function () {\n    // add and update documents on the client\n    collection.aggregate(safePipeline).forEach(function (doc) {\n      if (!subscription._ids[doc._id]) {\n        subscription.added(clientCollection, doc._id, doc);\n      } else {\n        subscription.changed(clientCollection, doc._id, doc);\n      }\n\n      subscription._ids[doc._id] = subscription._iteration;\n    }); // remove documents not in the result anymore\n\n    _.each(subscription._ids, function (iteration, key) {\n      if (iteration != subscription._iteration) {\n        delete subscription._ids[key];\n        subscription.removed(clientCollection, key);\n      }\n    });\n\n    subscription._iteration++;\n  }), delay);\n\n  var update = function () {\n    return !initializing ? throttledUpdate() : null;\n  }; // don't update the subscription until __after__ the initial hydrating of our collection\n\n\n  var initializing = true; // mutate the subscription to ensure it updates as we version it\n\n  subscription._ids = {};\n  subscription._iteration = 1; // create a list of collections to watch and make sure\n  // we create a sanitized \"strings-only\" version of our pipeline\n\n  var observerHandles = [createObserver(collection, {\n    observeSelector: observeSelector,\n    observeOptions: observeOptions\n  })]; // look for $lookup collections passed in as Mongo.Collection instances\n  // and create observers for them\n  // if any $lookup.from stages are passed in as strings they will be omitted\n  // from this process. the aggregation will still work, but those collections\n  // will not force an update to this query if changed.\n\n  var safePipeline = pipeline.map(function (stage) {\n    if (stage.$lookup && stage.$lookup.from instanceof Mongo.Collection) {\n      var _collection = stage.$lookup.from;\n      observerHandles.push(createObserver(_collection, lookupCollections[_collection._name]));\n      return _objectSpread(_objectSpread({}, stage), {}, {\n        $lookup: _objectSpread(_objectSpread({}, stage.$lookup), {}, {\n          from: _collection._name\n        })\n      });\n    }\n\n    return stage;\n  }); // observeChanges() will immediately fire an \"added\" event for each document in the query\n  // these are skipped using the initializing flag\n\n  initializing = false; // send an initial result set to the client\n\n  update(); // mark the subscription as ready\n\n  subscription.ready(); // stop observing the cursor when the client unsubscribes\n\n  subscription.onStop(function () {\n    return observerHandles.map(function (handle) {\n      return handle.stop();\n    });\n  });\n  /**\n  * Create observer\n  * @param {Mongo.Collection|*} collection\n  * @returns {any|*|Meteor.LiveQueryHandle} Handle\n  */\n\n  function createObserver(collection) {\n    var queryOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var observeSelector = queryOptions.observeSelector,\n        observeOptions = queryOptions.observeOptions;\n    var selector = observeSelector || {};\n    var options = observeOptions || {};\n    var query = collection.find(selector, options);\n    return query.observeChanges({\n      added: update,\n      changed: update,\n      removed: update,\n      error: function (err) {\n        throw err;\n      }\n    });\n  }\n};","map":{"version":3,"sources":["packages/jcbernack:reactive-aggregate/aggregate.js"],"names":["_objectSpread","module","link","default","v","export","ReactiveAggregate","Meteor","Mongo","defaultOptions","collection","options","observeSelector","observeOptions","delay","lookupCollections","clientCollection","_name","subscription","pipeline","throttledUpdate","_","throttle","bindEnvironment","aggregate","safePipeline","forEach","doc","_ids","_id","added","changed","_iteration","each","iteration","key","removed","update","initializing","observerHandles","createObserver","map","stage","$lookup","from","Collection","push","ready","onStop","handle","stop","queryOptions","selector","query","find","observeChanges","error","err"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nconst defaultOptions = ({\n  collection, options\n}) => ({\n  observeSelector: {},\n  observeOptions: {},\n  delay: 250,\n  lookupCollections: {},\n  clientCollection: collection._name,\n  ...options\n});\n\nexport const ReactiveAggregate = function (subscription, collection, pipeline = [], options = {}) {\n  // fill out default options\n  const {\n    observeSelector, observeOptions, delay, lookupCollections, clientCollection\n  } = defaultOptions({\n    collection,\n    options\n  });\n\n  // run, or re-run, the aggregation pipeline\n  const throttledUpdate = _.throttle(Meteor.bindEnvironment(() => {\n    // add and update documents on the client\n    collection.aggregate(safePipeline).forEach((doc) => {\n      if (!subscription._ids[doc._id]) {\n        subscription.added(clientCollection, doc._id, doc);\n      } else {\n        subscription.changed(clientCollection, doc._id, doc);\n      }\n      subscription._ids[doc._id] = subscription._iteration;\n    });\n    // remove documents not in the result anymore\n    _.each(subscription._ids, (iteration, key) => {\n      if (iteration != subscription._iteration) {\n        delete subscription._ids[key];\n        subscription.removed(clientCollection, key);\n      }\n    });\n    subscription._iteration++;\n  }), delay);\n  const update = () => !initializing ? throttledUpdate() : null;\n\n  // don't update the subscription until __after__ the initial hydrating of our collection\n  let initializing = true;\n  // mutate the subscription to ensure it updates as we version it\n  subscription._ids = {};\n  subscription._iteration = 1;\n\n  // create a list of collections to watch and make sure\n  // we create a sanitized \"strings-only\" version of our pipeline\n  const observerHandles = [createObserver(collection, { observeSelector, observeOptions })];\n  // look for $lookup collections passed in as Mongo.Collection instances\n  // and create observers for them\n  // if any $lookup.from stages are passed in as strings they will be omitted\n  // from this process. the aggregation will still work, but those collections\n  // will not force an update to this query if changed.\n  const safePipeline = pipeline.map((stage) => {\n    if (stage.$lookup && stage.$lookup.from instanceof Mongo.Collection) {\n      const collection = stage.$lookup.from;\n      observerHandles.push(createObserver(collection, lookupCollections[collection._name]));\n      return {\n        ...stage,\n        $lookup: {\n          ...stage.$lookup,\n          from: collection._name\n        }\n      };\n    }\n    return stage;\n  });\n\n  // observeChanges() will immediately fire an \"added\" event for each document in the query\n  // these are skipped using the initializing flag\n  initializing = false;\n  // send an initial result set to the client\n  update();\n  // mark the subscription as ready\n  subscription.ready();\n  // stop observing the cursor when the client unsubscribes\n  subscription.onStop(() => observerHandles.map((handle) => handle.stop()));\n\n  /**\n\t * Create observer\n\t * @param {Mongo.Collection|*} collection\n\t * @returns {any|*|Meteor.LiveQueryHandle} Handle\n\t */\n  function createObserver(collection, queryOptions = {}) {\n    const { observeSelector, observeOptions } = queryOptions;\n    const selector = observeSelector || {};\n    const options = observeOptions || {};\n    const query = collection.find(selector, options);\n    return query.observeChanges({\n      added: update,\n      changed: update,\n      removed: update,\n      error: (err) => {\n        throw err;\n      }\n    });\n  }\n};\n"]},"sourceType":"module","hash":"eabac4a6122467795256a3dcaa95de27539b8995"}
