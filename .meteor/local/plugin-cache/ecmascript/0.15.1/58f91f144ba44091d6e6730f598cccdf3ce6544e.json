{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/lib/router.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/jns:flow-router-ssr/lib/router.js","filename":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/lib/router.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/lib/router.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jns:flow-router-ssr/lib/router.js"}},"code":"let Qs;\nmodule.link(\"qs\", {\n  default(v) {\n    Qs = v;\n  }\n\n}, 0);\nlet PathToRegexp;\nmodule.link(\"path-to-regexp\", {\n  default(v) {\n    PathToRegexp = v;\n  }\n\n}, 1);\nSharedRouter = class {\n  constructor() {\n    this._routes = [];\n    this._routesMap = {}; // holds onRoute callbacks\n\n    this._onRouteCallbacks = [];\n    this.env = {};\n    this.env.trailingSlash = new Meteor.EnvironmentVariable();\n  }\n\n  route(pathDef, options, group) {\n    if (!/^\\/.*/.test(pathDef)) {\n      const message = \"route's path must start with '/'\";\n      throw new Error(message);\n    }\n\n    options = options || {};\n    const currentRoute = new Route(this, pathDef, options, group);\n\n    currentRoute._init();\n\n    this._routes.push(currentRoute);\n\n    if (options.name) {\n      this._routesMap[options.name] = currentRoute;\n    }\n\n    this._triggerRouteRegister(currentRoute);\n\n    return currentRoute;\n  } // XXX this function needs to be cleaned up if possible by removing `if (this.isServer)`\n  // and `if (this.isClient)` if possible\n\n\n  path(pathDef) {\n    let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (this._routesMap[pathDef]) {\n      pathDef = this._routesMap[pathDef].path;\n    }\n\n    let newPath = ''; // Prefix the path with the router global prefix\n\n    if (this._basePath) {\n      newPath += \"/\".concat(this._basePath, \"/\");\n    } // Encode query params\n\n\n    queryParams = this._encodeValues(queryParams);\n    const toPath = PathToRegexp.compile(pathDef);\n    newPath += toPath(fields); // If we have one optional parameter in path definition e.g.\n    // /:category?\n    // and the parameter isn't present, path will be an empty string.\n    // We have this check as a value for path is required by e.g. FlowRouter.go()\n\n    if (!newPath) {\n      newPath = '/';\n    } // Replace multiple slashes with single slash\n\n\n    newPath = newPath.replace(/\\/\\/+/g, '/'); // remove trailing slash\n    // but keep the root slash if it's the only one\n\n    newPath = newPath.match(/^\\/{1}$/) ? newPath : newPath.replace(/\\/$/, ''); // explictly asked to add a trailing slash\n\n    if (this.env.trailingSlash.get() && _.last(newPath) !== '/') {\n      newPath += '/';\n    }\n\n    const strQueryParams = Qs.stringify(queryParams || {});\n\n    if (strQueryParams) {\n      newPath += \"?\".concat(strQueryParams);\n    }\n\n    return newPath;\n  }\n\n  go() {// client only\n  }\n\n  watchPathChange() {// client only\n  }\n\n  group(options) {\n    return new Group(this, options);\n  }\n\n  url() {\n    // We need to remove the leading base path, or \"/\", as it will be inserted\n    // automatically by `Meteor.absoluteUrl` as documented in:\n    // http://docs.meteor.com/#/full/meteor_absoluteurl\n    const completePath = this.path(...arguments);\n    const basePath = this._basePath || '/';\n    const pathWithoutBase = completePath.replace(RegExp(\"^\".concat(basePath)), '');\n    return Meteor.absoluteUrl(pathWithoutBase);\n  } // For client:\n  // .current is not reactive on the client\n  // This is by design. use .getParam() instead\n  // If you really need to watch the path change, use .watchPathChange()\n\n\n  current() {\n    // We can't trust outside, that's why we clone this\n    // Anyway, we can't clone the whole object since it has non-jsonable values\n    // That's why we clone what's really needed.\n    const context = _.clone(this._getCurrentRouteContext());\n\n    context.queryParams = EJSON.clone(context.queryParams);\n    context.params = EJSON.clone(context.params);\n    return context;\n  }\n\n  onRouteRegister(cb) {\n    this._onRouteCallbacks.push(cb);\n  }\n\n  _encodeValues(obj) {\n    const newObj = {};\n    Object.keys(obj).forEach(key => {\n      const value = obj[key];\n      newObj[key] = typeof value !== 'undefined' ? encodeURIComponent(value) : value;\n    });\n    return newObj;\n  }\n\n  _triggerRouteRegister(currentRoute) {\n    // We should only need to send a safe set of fields on the route\n    // object.\n    // This is not to hide what's inside the route object, but to show\n    // these are the public APIs\n    const routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');\n\n    const omittingOptionFields = ['triggersEnter', 'triggersExit', 'name', 'action'];\n    routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);\n\n    this._onRouteCallbacks.forEach(cb => {\n      cb(routePublicApi);\n    });\n  }\n\n  _getCurrentRouteContext() {\n    throw new Error('Not implemented');\n  }\n\n  _init() {\n    throw new Error('Not implemented');\n  }\n\n  withTrailingSlash(fn) {\n    return this.env.trailingSlash.withValue(true, fn);\n  }\n\n};","map":{"version":3,"sources":["packages/jns:flow-router-ssr/lib/router.js"],"names":["Qs","module","link","default","v","PathToRegexp","SharedRouter","constructor","_routes","_routesMap","_onRouteCallbacks","env","trailingSlash","Meteor","EnvironmentVariable","route","pathDef","options","group","test","message","Error","currentRoute","Route","_init","push","name","_triggerRouteRegister","path","fields","queryParams","newPath","_basePath","_encodeValues","toPath","compile","replace","match","get","_","last","strQueryParams","stringify","go","watchPathChange","Group","url","completePath","basePath","pathWithoutBase","RegExp","absoluteUrl","current","context","clone","_getCurrentRouteContext","EJSON","params","onRouteRegister","cb","obj","newObj","Object","keys","forEach","key","value","encodeURIComponent","routePublicApi","pick","omittingOptionFields","omit","withTrailingSlash","fn","withValue"],"mappings":"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","sourcesContent":["import Qs from 'qs';\nimport PathToRegexp from 'path-to-regexp';\n\nSharedRouter = class {\n  constructor() {\n    this._routes = [];\n    this._routesMap = {};\n\n    // holds onRoute callbacks\n    this._onRouteCallbacks = [];\n\n    this.env = {};\n    this.env.trailingSlash = new Meteor.EnvironmentVariable();\n  }\n\n  route(pathDef, options, group) {\n    if (!/^\\/.*/.test(pathDef)) {\n      const message = \"route's path must start with '/'\";\n      throw new Error(message);\n    }\n\n    options = options || {};\n\n    const currentRoute = new Route(this, pathDef, options, group);\n    currentRoute._init();\n\n    this._routes.push(currentRoute);\n\n\n    if (options.name) {\n      this._routesMap[options.name] = currentRoute;\n    }\n\n    this._triggerRouteRegister(currentRoute);\n\n    return currentRoute;\n  }\n\n  // XXX this function needs to be cleaned up if possible by removing `if (this.isServer)`\n  // and `if (this.isClient)` if possible\n  path(pathDef, fields = {}, queryParams = {}) {\n    if (this._routesMap[pathDef]) {\n      pathDef = this._routesMap[pathDef].path;\n    }\n\n    let newPath = '';\n\n    // Prefix the path with the router global prefix\n    if (this._basePath) {\n      newPath += `/${this._basePath}/`;\n    }\n\n    // Encode query params\n    queryParams = this._encodeValues(queryParams);\n\n    const toPath = PathToRegexp.compile(pathDef);\n    newPath += toPath(fields);\n\n    // If we have one optional parameter in path definition e.g.\n    // /:category?\n    // and the parameter isn't present, path will be an empty string.\n    // We have this check as a value for path is required by e.g. FlowRouter.go()\n    if (!newPath) {\n      newPath = '/';\n    }\n\n    // Replace multiple slashes with single slash\n    newPath = newPath.replace(/\\/\\/+/g, '/');\n\n    // remove trailing slash\n    // but keep the root slash if it's the only one\n    newPath = newPath.match(/^\\/{1}$/) ? newPath : newPath.replace(/\\/$/, '');\n\n    // explictly asked to add a trailing slash\n    if (this.env.trailingSlash.get() && _.last(newPath) !== '/') {\n      newPath += '/';\n    }\n\n    const strQueryParams = Qs.stringify(queryParams || {});\n\n    if (strQueryParams) {\n      newPath += `?${strQueryParams}`;\n    }\n\n    return newPath;\n  }\n\n  go() {\n    // client only\n  }\n\n  watchPathChange() {\n    // client only\n  }\n\n  group(options) {\n    return new Group(this, options);\n  }\n\n  url(...args) {\n    // We need to remove the leading base path, or \"/\", as it will be inserted\n    // automatically by `Meteor.absoluteUrl` as documented in:\n    // http://docs.meteor.com/#/full/meteor_absoluteurl\n    const completePath = this.path(...args);\n    const basePath = this._basePath || '/';\n    const pathWithoutBase = completePath.replace(RegExp(`^${basePath}`), '');\n    return Meteor.absoluteUrl(pathWithoutBase);\n  }\n\n  // For client:\n  // .current is not reactive on the client\n  // This is by design. use .getParam() instead\n  // If you really need to watch the path change, use .watchPathChange()\n  current() {\n    // We can't trust outside, that's why we clone this\n    // Anyway, we can't clone the whole object since it has non-jsonable values\n    // That's why we clone what's really needed.\n    const context = _.clone(this._getCurrentRouteContext());\n\n    context.queryParams = EJSON.clone(context.queryParams);\n    context.params = EJSON.clone(context.params);\n\n    return context;\n  }\n\n  onRouteRegister(cb) {\n    this._onRouteCallbacks.push(cb);\n  }\n\n  _encodeValues(obj) {\n    const newObj = {};\n    Object.keys(obj).forEach(key => {\n      const value = obj[key];\n      newObj[key] = typeof value !== 'undefined' ? encodeURIComponent(value) : value;\n    });\n\n    return newObj;\n  }\n\n  _triggerRouteRegister(currentRoute) {\n    // We should only need to send a safe set of fields on the route\n    // object.\n    // This is not to hide what's inside the route object, but to show\n    // these are the public APIs\n    const routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');\n    const omittingOptionFields = [\n      'triggersEnter', 'triggersExit', 'name', 'action'\n    ];\n    routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);\n\n    this._onRouteCallbacks.forEach((cb) => {\n      cb(routePublicApi);\n    });\n  }\n\n  _getCurrentRouteContext() {\n    throw new Error('Not implemented');\n  }\n\n  _init() {\n    throw new Error('Not implemented');\n  }\n\n  withTrailingSlash(fn) {\n    return this.env.trailingSlash.withValue(true, fn);\n  }\n};\n"]},"sourceType":"module","hash":"58f91f144ba44091d6e6730f598cccdf3ce6544e"}
