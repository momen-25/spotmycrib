{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/models/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/mdg:meteor-apm-agent/lib/models/methods.js","filename":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/models/methods.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/models/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mdg:meteor-apm-agent/lib/models/methods.js"}},"code":"var METHOD_METRICS_FIELDS = ['wait', 'db', 'http', 'email', 'async', 'compute', 'total'];\n\nMethodsModel = function (metricsThreshold) {\n  var self = this;\n  this.methodMetricsByMinute = Object.create(null);\n  this.errorMap = Object.create(null);\n  this._metricsThreshold = Object.assign({\n    \"wait\": 100,\n    \"db\": 100,\n    \"http\": 1000,\n    \"email\": 100,\n    \"async\": 100,\n    \"compute\": 100,\n    \"total\": 200\n  }, metricsThreshold || Object.create(null)); //store max time elapsed methods for each method, event(metrics-field)\n\n  this.maxEventTimesForMethods = Object.create(null);\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60,\n    //process traces every minute\n    maxTotalPoints: 30,\n    //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n\n  });\n  this.tracerStore.start();\n};\n\nObject.assign(MethodsModel.prototype, KadiraModel.prototype);\n\nMethodsModel.prototype._getMetrics = function (timestamp, method) {\n  var dateId = this._getDateId(timestamp);\n\n  if (!this.methodMetricsByMinute[dateId]) {\n    this.methodMetricsByMinute[dateId] = {\n      methods: Object.create(null)\n    };\n  }\n\n  var methods = this.methodMetricsByMinute[dateId].methods; //initialize method\n\n  if (!methods[method]) {\n    methods[method] = {\n      count: 0,\n      errors: 0,\n      fetchedDocSize: 0,\n      sentMsgSize: 0\n    };\n    METHOD_METRICS_FIELDS.forEach(function (field) {\n      methods[method][field] = 0;\n    });\n  }\n\n  return this.methodMetricsByMinute[dateId].methods[method];\n};\n\nMethodsModel.prototype.setStartTime = function (timestamp) {\n  this.metricsByMinute[dateId].startTime = timestamp;\n};\n\nMethodsModel.prototype.processMethod = function (methodTrace) {\n  var dateId = this._getDateId(methodTrace.at); //append metrics to previous values\n\n\n  this._appendMetrics(dateId, methodTrace);\n\n  if (methodTrace.errored) {\n    this.methodMetricsByMinute[dateId].methods[methodTrace.name].errors++;\n  }\n\n  this.tracerStore.addTrace(methodTrace);\n};\n\nMethodsModel.prototype._appendMetrics = function (id, methodTrace) {\n  var methodMetrics = this._getMetrics(id, methodTrace.name); // startTime needs to be converted into serverTime before sending\n\n\n  if (!this.methodMetricsByMinute[id].startTime) {\n    this.methodMetricsByMinute[id].startTime = methodTrace.at;\n  } //merge\n\n\n  METHOD_METRICS_FIELDS.forEach(function (field) {\n    var value = methodTrace.metrics[field];\n\n    if (value > 0) {\n      methodMetrics[field] += value;\n    }\n  });\n  methodMetrics.count++;\n  this.methodMetricsByMinute[id].endTime = methodTrace.metrics.at;\n};\n\nMethodsModel.prototype.trackDocSize = function (method, size) {\n  var timestamp = Ntp._now();\n\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n\n  methodMetrics.fetchedDocSize += size;\n};\n\nMethodsModel.prototype.trackMsgSize = function (method, size) {\n  var timestamp = Ntp._now();\n\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n\n  methodMetrics.sentMsgSize += size;\n};\n/*\n  There are two types of data\n\n  1. methodMetrics - metrics about the methods (for every 10 secs)\n  2. methodRequests - raw method request. normally max, min for every 1 min and errors always\n*/\n\n\nMethodsModel.prototype.buildPayload = function (buildDetailedInfo) {\n  var payload = {\n    methodMetrics: [],\n    methodRequests: []\n  }; //handling metrics\n\n  var methodMetricsByMinute = this.methodMetricsByMinute;\n  this.methodMetricsByMinute = Object.create(null); //create final paylod for methodMetrics\n\n  for (var key in methodMetricsByMinute) {\n    var methodMetrics = methodMetricsByMinute[key]; // converting startTime into the actual serverTime\n\n    var startTime = methodMetrics.startTime;\n    methodMetrics.startTime = Kadira.syncedDate.syncTime(startTime);\n\n    for (var methodName in methodMetrics.methods) {\n      METHOD_METRICS_FIELDS.forEach(function (field) {\n        methodMetrics.methods[methodName][field] /= methodMetrics.methods[methodName].count;\n      });\n    }\n\n    payload.methodMetrics.push(methodMetricsByMinute[key]);\n  } //collect traces and send them with the payload\n\n\n  payload.methodRequests = this.tracerStore.collectTraces();\n  return payload;\n};","map":{"version":3,"sources":["packages/mdg:meteor-apm-agent/lib/models/methods.js"],"names":["METHOD_METRICS_FIELDS","MethodsModel","metricsThreshold","self","methodMetricsByMinute","Object","create","errorMap","_metricsThreshold","assign","maxEventTimesForMethods","tracerStore","TracerStore","interval","maxTotalPoints","archiveEvery","start","prototype","KadiraModel","_getMetrics","timestamp","method","dateId","_getDateId","methods","count","errors","fetchedDocSize","sentMsgSize","forEach","field","setStartTime","metricsByMinute","startTime","processMethod","methodTrace","at","_appendMetrics","errored","name","addTrace","id","methodMetrics","value","metrics","endTime","trackDocSize","size","Ntp","_now","trackMsgSize","buildPayload","buildDetailedInfo","payload","methodRequests","key","Kadira","syncedDate","syncTime","methodName","push","collectTraces"],"mappings":"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","sourcesContent":["var METHOD_METRICS_FIELDS = ['wait', 'db', 'http', 'email', 'async', 'compute', 'total'];\n\nMethodsModel = function (metricsThreshold) {\n  var self = this;\n\n  this.methodMetricsByMinute = Object.create(null);\n  this.errorMap = Object.create(null);\n\n  this._metricsThreshold = Object.assign({\n    \"wait\": 100,\n    \"db\": 100,\n    \"http\": 1000,\n    \"email\": 100,\n    \"async\": 100,\n    \"compute\": 100,\n    \"total\": 200\n  }, metricsThreshold || Object.create(null));\n\n  //store max time elapsed methods for each method, event(metrics-field)\n  this.maxEventTimesForMethods = Object.create(null);\n\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60, //process traces every minute\n    maxTotalPoints: 30, //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n  });\n\n  this.tracerStore.start();\n};\n\nObject.assign(MethodsModel.prototype, KadiraModel.prototype);\n\nMethodsModel.prototype._getMetrics = function(timestamp, method) {\n  var dateId = this._getDateId(timestamp);\n\n  if(!this.methodMetricsByMinute[dateId]) {\n    this.methodMetricsByMinute[dateId] = {\n      methods: Object.create(null),\n    };\n  }\n\n  var methods = this.methodMetricsByMinute[dateId].methods;\n\n  //initialize method\n  if(!methods[method]) {\n    methods[method] = {\n      count: 0,\n      errors: 0,\n      fetchedDocSize: 0,\n      sentMsgSize: 0\n    };\n\n    METHOD_METRICS_FIELDS.forEach(function(field) {\n      methods[method][field] = 0;\n    });\n  }\n\n  return this.methodMetricsByMinute[dateId].methods[method];\n};\n\nMethodsModel.prototype.setStartTime = function(timestamp) {\n  this.metricsByMinute[dateId].startTime = timestamp;\n}\n\nMethodsModel.prototype.processMethod = function(methodTrace) {\n  var dateId = this._getDateId(methodTrace.at);\n\n  //append metrics to previous values\n  this._appendMetrics(dateId, methodTrace);\n  if(methodTrace.errored) {\n    this.methodMetricsByMinute[dateId].methods[methodTrace.name].errors ++\n  }\n\n  this.tracerStore.addTrace(methodTrace);\n};\n\nMethodsModel.prototype._appendMetrics = function(id, methodTrace) {\n  var methodMetrics = this._getMetrics(id, methodTrace.name)\n\n  // startTime needs to be converted into serverTime before sending\n  if(!this.methodMetricsByMinute[id].startTime){\n    this.methodMetricsByMinute[id].startTime = methodTrace.at;\n  }\n\n  //merge\n  METHOD_METRICS_FIELDS.forEach(function(field) {\n    var value = methodTrace.metrics[field];\n    if(value > 0) {\n      methodMetrics[field] += value;\n    }\n  });\n\n  methodMetrics.count++;\n  this.methodMetricsByMinute[id].endTime = methodTrace.metrics.at;\n};\n\nMethodsModel.prototype.trackDocSize = function(method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.fetchedDocSize += size;\n}\n\nMethodsModel.prototype.trackMsgSize = function(method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.sentMsgSize += size;\n}\n\n/*\n  There are two types of data\n\n  1. methodMetrics - metrics about the methods (for every 10 secs)\n  2. methodRequests - raw method request. normally max, min for every 1 min and errors always\n*/\nMethodsModel.prototype.buildPayload = function(buildDetailedInfo) {\n  var payload = {\n    methodMetrics: [],\n    methodRequests: []\n  };\n\n  //handling metrics\n  var methodMetricsByMinute = this.methodMetricsByMinute;\n  this.methodMetricsByMinute = Object.create(null);\n\n  //create final paylod for methodMetrics\n  for(var key in methodMetricsByMinute) {\n    var methodMetrics = methodMetricsByMinute[key];\n    // converting startTime into the actual serverTime\n    var startTime = methodMetrics.startTime;\n    methodMetrics.startTime = Kadira.syncedDate.syncTime(startTime);\n\n    for(var methodName in methodMetrics.methods) {\n      METHOD_METRICS_FIELDS.forEach(function(field) {\n        methodMetrics.methods[methodName][field] /=\n          methodMetrics.methods[methodName].count;\n      });\n    }\n\n    payload.methodMetrics.push(methodMetricsByMinute[key]);\n  }\n\n  //collect traces and send them with the payload\n  payload.methodRequests = this.tracerStore.collectTraces();\n\n  return payload;\n};\n"]},"sourceType":"module","hash":"743de3552a99dc8ab15e0ab47f27f1c4eb66749c"}
