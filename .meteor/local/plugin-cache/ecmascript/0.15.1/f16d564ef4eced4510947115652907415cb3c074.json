{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/server/core/email.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/core/email.js","filename":"/home/momen/projects/spotmycrib-master/server/core/email.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/server/core/email.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/core/email.js"}},"code":"let check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nvar EMAIL_CONFIG = Meteor.settings.EMAIL_CONFIG;\nvar SUPPORT_DATA = Meteor.settings.SUPPORT_DATA;\nMeteor.methods({\n  requestEmail: function (mailData) {\n    this.unblock();\n    console.log('requestEmail method called');\n\n    switch (mailData.requestType) {\n      case 'emailEnquiryReceived':\n        //15 mns grouping\n        mailData.frequency = 15; //its a 15min grouping\n\n        if (!mailData.scheduledDate) mailData.scheduledDate = moment().add(15, 'm').toDate();\n        break;\n\n      case 'uploadRefsReminder':\n        //1440 mns grouping - 1 day\n        mailData.frequency = 1440; //its a 1 per day grouping\n\n        if (!mailData.scheduledDate) mailData.scheduledDate = moment().add(1, 'd').toDate();\n        break;\n\n      case 'reminderUploadReferences':\n        //1440 mns grouping - 1 day\n        mailData.frequency = 1440; //its a 1 per day grouping\n\n        if (!mailData.scheduledDate) mailData.scheduledDate = moment().add(1, 'd').toDate();\n        break;\n\n      default:\n        throw new Meteor.Error('Invalid requestType');\n    }\n\n    mailData.status = 'new';\n    mailData.isArchived = false;\n    Collections.EmailRequests.insert(mailData);\n  },\n  sendNotificationEmail: function (data) {\n    let serialMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    //Format as shown below\n    //data = {\n    //  template: \"bidSuccessfullyPlaced\",\n    //  subject: \"Welcome to SMC\"\n    //}\n    // check(args, [String]);\n    // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n    if (!serialMode) this.unblock();\n    console.log('sendNotificationEmail ' + (serialMode ? \"serialMode\" : \"\") + ' called for ' + data.mailTo); // don't send account emails unless email server configured\n    // if (!Meteor.settings.MAIL_URL) {\n\n    if (!process.env.MAIL_URL) {\n      console.log(\"Mail not configured: suppressing sendNotificationEmail output\");\n      console.log('no MAIL_URL in env vars');\n      return true;\n    }\n\n    SSR.compileTemplate(\"email/\" + data.template, Assets.getText(\"email/\" + data.template + \".html\"));\n    let renderArr = {\n      homepage: Meteor.isDevelopment ? 'https://www.spotmycrib.ie/' : Meteor.absoluteUrl(),\n      cdnHomepage: Meteor.isDevelopment ? 'https://www.spotmycrib.ie/' : CDN.get_cdn_url() + '/',\n      support: EMAIL_CONFIG,\n      headers: {}\n    };\n    renderArr.data = data;\n    let renderedTemplate = SSR.render(\"email/\" + data.template, renderArr);\n\n    if (Meteor.isDevelopment && !data.mailTo.endsWith('@spotmycrib.com')) {\n      data.mailTo = 'srikanth681@gmail.com';\n    }\n\n    if (data.mailTo.indexOf('daft.ie') != -1) {\n      console.log(\"Looks like a daft.ie email, supressing it.\");\n      console.log(data.mailTo);\n      return true;\n    }\n\n    var arr = {\n      to: data.mailTo,\n      // to: 'srikanth681@gmail.com',\n      from: EMAIL_CONFIG.name + \" <\" + EMAIL_CONFIG.email + \">\",\n      subject: data.subject,\n      html: renderedTemplate\n    };\n    if (data.replyTo) arr.replyTo = data.replyTo;\n    if (data['o:tag']) arr.headers['o:tag'] = data['o:tag'];\n\n    if (Meteor.isDevelopment && !data.mailTo.endsWith('@spotmycrib.com')) {\n      arr['o:testmode'] = true;\n    }\n\n    Email.send(arr);\n    return true;\n  },\n  sendEmail: function (to, from, subject, text) {\n    check([to, from, subject, text], [String]); // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n\n    this.unblock(); //actual email sending method\n\n    Email.send({\n      to: to,\n      from: from,\n      subject: subject,\n      text: text\n    });\n  },\n  knowMoreRequestReceived: function (email) {\n    console.log('in knowMoreRequestReceived');\n    console.log(email);\n    this.unblock();\n    Email.send({\n      to: 'srikanth681@gmail.com',\n      from: 'sales@spotmycrib.com',\n      subject: \"Know more request received\",\n      text: 'Email provided is: ' + email,\n      headers: {\n        'o:tag': 'notifySales'\n      }\n    });\n  },\n  notifyAdmin: function () {\n    let subject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let desc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    console.log('in notifyAdmin');\n    this.unblock();\n    if (Meteor.isDevelopment) return;\n    Email.send({\n      to: 'srikanth681@gmail.com',\n      // cc: 'divyarao807@gmail.com',\n      from: 'support@spotmycrib.com',\n      subject: \"Notify: \" + subject,\n      html: 'Content is: ' + desc,\n      headers: {\n        'o:tag': 'notifyAdmin'\n      }\n    });\n  },\n  introOfferRequestReceived: function (email, name, company, phone) {\n    console.log('in introOfferRequestReceived');\n    console.log(email + \" \" + name + \" \" + company + \" \" + phone);\n    this.unblock();\n    Email.send({\n      to: 'srikanth681@gmail.com',\n      from: 'sales@spotmycrib.com',\n      subject: \"Intro offer request received\",\n      text: 'Email provided is: ' + email + \"\\n   name: \" + name + \"\\n   company: \" + company + \"\\n   phone: \" + phone,\n      headers: {\n        'o:tag': 'notifySales'\n      }\n    });\n  },\n  sendWelcomeEmailCustom: function (args) {\n    // check(args, Match.Any);\n    var userId = args[0];\n    console.log(\"server method sendWelcomeEmailCustom called\");\n    console.log(userId);\n    var user = Accounts.users.findOne(userId); // console.log(user);\n\n    if (!user) {\n      throw new Meteor.Error(500, 'Error 500: Invalid user', 'User not found.');\n    }\n\n    let userFirstName = user.profile.name;\n\n    if (userFirstName) {\n      userFirstName = titleCase(userFirstName.split(' ')[0]);\n    }\n\n    var globalConfig = Collections.Config.findOne();\n    var mailData = {\n      template: 'welcomeEmail',\n      'o:tag': 'welcomeEmail',\n      subject: \"Welcome to SpotMyCrib\",\n      mailTo: user.profile.email,\n      user: user,\n      conf: globalConfig,\n      data: {\n        userFirstName: userFirstName\n      }\n    }; //debugger;\n    // Accounts.sendVerificationEmail(userId);\n\n    Meteor.call('sendNotificationEmailWithoutSSR', mailData);\n    /*\n     if( user.profile.isEmailVerified){\n     throw new Meteor.Error(500, 'Error 500: Email already verified. ', 'Your email is already verified.');\n     }\n      var newVerifyCode = randomString(32, '#a');//Random alpha numeric string of 32 chars\n     Meteor.users.update({\n     \"_id\": user._id\n     }, {\n     $currentDate: {\n     \"profile.emailVerificationSentOn\": { $type: \"timestamp\" }\n     },\n     $set: {\n     \"profile.emailVerificationValue\": newVerifyCode\n     }\n     });\n     */\n\n    return {\n      status: 'Success'\n    };\n  },\n  sendNotificationEmailWithoutSSR: function (mailData) {\n    //Format as shown below\n    //data = {\n    //  template: \"bidSuccessfullyPlaced\",\n    //  subject: \"Welcome to SMC\"\n    //}\n    // check(args, [String]);\n    // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n    this.unblock();\n    console.log('sendNotificationEmailWithoutSSR called for ' + mailData.user.profile.name); // don't send account emails unless email server configured\n    // if (!Meteor.settings.MAIL_URL) {\n\n    if (!process.env.MAIL_URL) {\n      console.log(\"Mail not configured: suppressing sendNotificationEmail output\");\n      console.log('no MAIL_URL in env vars');\n      return true;\n    }\n\n    mailData.data.homepage = Meteor.absoluteUrl();\n    if (Meteor.isDevelopment) mailData.data.homepage = 'https://www.spotmycrib.ie/';\n    mailData.data.cdnHomepage = CDN.get_cdn_url() + '/';\n    if (Meteor.isDevelopment) mailData.data.cdnHomepage = 'https://www.spotmycrib.ie/';\n    mailData.data.support = EMAIL_CONFIG;\n    let variableData = {};\n    variableData[mailData.mailTo] = mailData.data;\n    console.log(variableData);\n\n    if (Meteor.isDevelopment) {\n      mailData.mailTo = 'srikanth681@gmail.com';\n    }\n\n    let arr = {\n      to: mailData.mailTo,\n      from: EMAIL_CONFIG.name + \" <\" + EMAIL_CONFIG.email + \">\",\n      subject: mailData.subject,\n      html: Assets.getText(\"email/\" + mailData.template + \".html\"),\n      headers: {\n        'X-Mailgun-Recipient-Variables': JSON.stringify(variableData)\n      }\n    };\n    if (mailData.replyTo) arr.replyTo = mailData.replyTo;\n    if (mailData['o:tag']) arr.headers['o:tag'] = mailData['o:tag'];\n\n    if (Meteor.isDevelopment) {//   arr['o:testmode']=true;\n    }\n\n    Email.send(arr);\n    console.log({\n      to: mailData.mailTo,\n      from: EMAIL_CONFIG.name + \" <\" + EMAIL_CONFIG.email + \">\",\n      subject: mailData.subject\n    });\n    return true;\n  },\n  sendNotificationEmailWithTemplate: function (mailData) {\n    this.unblock();\n    console.log('sendNotificationEmailWithTemplate called'); // don't send account emails unless email server configured\n\n    if (!process.env.MAIL_URL) {\n      console.log(\"Mail not configured: suppressing sendNotificationEmail output\");\n      console.log('no MAIL_URL in env vars');\n      return true;\n    }\n\n    mailData.data.homepage = Meteor.absoluteUrl();\n    if (Meteor.isDevelopment) mailData.data.homepage = 'https://www.spotmycrib.ie/';\n    mailData.data.cdnHomepage = CDN.get_cdn_url() + '/';\n    if (Meteor.isDevelopment) mailData.data.cdnHomepage = 'https://www.spotmycrib.ie/';\n    mailData.data.support = EMAIL_CONFIG;\n    let arr = {\n      to: mailData.mailTo,\n      from: EMAIL_CONFIG.name + \" <\" + EMAIL_CONFIG.email + \">\",\n      subject: mailData.subject,\n      template: mailData.template // ,\n      // headers:{\n      //     // 'X-Mailgun-Recipient-Variables':JSON.stringify(variableData),\n      //     'X-Mailgun-Variables':JSON.stringify(mailData.data)\n      // }\n\n    };\n    if (mailData.replyTo) arr.replyTo = mailData.replyTo;\n    if (mailData['o:tag']) arr.headers['o:tag'] = mailData['o:tag']; // if(Meteor.isDevelopment){\n    //   arr['o:testmode']=true;\n    // }key-85cc066727dcada64aa3e70b96274e55\n\n    arr = {\n      to: 'srikanth681@gmail.com',\n      from: 'Mailgun Sandbox <postmaster@spotmycrib.com>',\n      subject: 'Hello Naga Srikanth',\n      template: 'propertyalerts' // ,\n      // headers:{\n      //     // 'X-Mailgun-Recipient-Variables':JSON.stringify(variableData),\n      //     'X-Mailgun-Variables':JSON.stringify(mailData.data)\n      // }\n\n    };\n    Email.send(arr);\n    console.log(arr);\n    return true;\n  }\n});\nAccounts.emailTemplates.siteName = EMAIL_CONFIG.companyName;\nAccounts.emailTemplates.from = Meteor.settings.NO_REPLY.name + ' <' + Meteor.settings.NO_REPLY.email + '>'; // Accounts.emailTemplates.enrollAccount.subject = (user) => {\n//     return `Welcome to Awesome Town, ${user.profile.name}`;\n// };\n// Accounts.emailTemplates.enrollAccount.text = (user, url) => {\n//     return 'You have been selected to participate in building a better future!'\n//         + ' To activate your account, simply click the link below:\\n\\n'\n//         + url;\n// };\n\nAccounts.emailTemplates.resetPassword = {\n  from: function () {\n    return Meteor.settings.NO_REPLY.name + ' Password Reset <' + Meteor.settings.NO_REPLY.email + '>';\n  },\n  subject: function (user) {\n    return titleCase(user.profile.name) + ', here\\'s the link to reset your password';\n  },\n  html: function (user, url) {\n    SSR.compileTemplate('email/forgotPassword', Assets.getText('email/forgotPassword.html'));\n    console.log(Meteor.absoluteUrl());\n    return SSR.render(\"email/forgotPassword\", {\n      homepage: Meteor.absoluteUrl(),\n      support: EMAIL_CONFIG,\n      user: user,\n      activationLink: url\n    });\n  }\n};\nAccounts.emailTemplates.verifyEmail = {\n  from: function () {\n    return Meteor.settings.NO_REPLY.name + ' <' + Meteor.settings.NO_REPLY.email + '>';\n  },\n  subject: function () {\n    return 'Activate your account now!';\n  },\n  html: function (user, url) {\n    SSR.compileTemplate('email/verifyEmail', Assets.getText('email/verifyEmail.html'));\n    return SSR.render(\"email/verifyEmail\", {\n      homepage: Meteor.absoluteUrl(),\n      support: EMAIL_CONFIG,\n      user: user,\n      activationLink: url\n    });\n  }\n}; // Accounts.emailTemplates.verifyEmail = {\n//     subject() {\n//         return \"Activate your account now!\";\n//     },\n//     text(user, url) {\n//         return `Hey ${user}! Verify your e-mail by following this link: ${url}`;\n//     }\n// };\n\nfunction titleCase(str) {\n  if (!str) return;\n  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);\n}","map":{"version":3,"sources":["server/core/email.js"],"names":["check","module","link","v","EMAIL_CONFIG","Meteor","settings","SUPPORT_DATA","methods","requestEmail","mailData","unblock","console","log","requestType","frequency","scheduledDate","moment","add","toDate","Error","status","isArchived","Collections","EmailRequests","insert","sendNotificationEmail","data","serialMode","mailTo","process","env","MAIL_URL","SSR","compileTemplate","template","Assets","getText","renderArr","homepage","isDevelopment","absoluteUrl","cdnHomepage","CDN","get_cdn_url","support","headers","renderedTemplate","render","endsWith","indexOf","arr","to","from","name","email","subject","html","replyTo","Email","send","sendEmail","text","String","knowMoreRequestReceived","notifyAdmin","desc","introOfferRequestReceived","company","phone","sendWelcomeEmailCustom","args","userId","user","Accounts","users","findOne","userFirstName","profile","titleCase","split","globalConfig","Config","conf","call","sendNotificationEmailWithoutSSR","variableData","JSON","stringify","sendNotificationEmailWithTemplate","emailTemplates","siteName","companyName","NO_REPLY","resetPassword","url","activationLink","verifyEmail","str","charAt","toUpperCase","toLowerCase","substring"],"mappings":"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","sourcesContent":["/**\n * Created by srikanth681 on 24/02/16.\n */\nimport {check} from \"meteor/check\";\n\nvar EMAIL_CONFIG = Meteor.settings.EMAIL_CONFIG\nvar SUPPORT_DATA = Meteor.settings.SUPPORT_DATA\n\n\n\n\nMeteor.methods({\n    requestEmail: function (mailData) {\n        this.unblock();\n        console.log('requestEmail method called')\n\n        switch(mailData.requestType){\n            case 'emailEnquiryReceived'://15 mns grouping\n                mailData.frequency = 15;//its a 15min grouping\n                if(!mailData.scheduledDate)mailData.scheduledDate = moment().add(15, 'm').toDate()\n                break;\n            case 'uploadRefsReminder'://1440 mns grouping - 1 day\n                mailData.frequency = 1440;//its a 1 per day grouping\n                if(!mailData.scheduledDate)mailData.scheduledDate = moment().add(1, 'd').toDate()\n                break;\n            case 'reminderUploadReferences'://1440 mns grouping - 1 day\n                mailData.frequency = 1440;//its a 1 per day grouping\n                if(!mailData.scheduledDate)mailData.scheduledDate = moment().add(1, 'd').toDate()\n                break;\n            default: throw new Meteor.Error('Invalid requestType');\n        }\n        mailData.status = 'new';\n        mailData.isArchived = false;\n\n        Collections.EmailRequests.insert(mailData)\n    },\n  sendNotificationEmail: function (data,serialMode=false) {\n    //Format as shown below\n    //data = {\n    //  template: \"bidSuccessfullyPlaced\",\n    //  subject: \"Welcome to SMC\"\n    //}\n    // check(args, [String]);\n\n    // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n    if(!serialMode)this.unblock();\n\n    console.log('sendNotificationEmail '+(serialMode?\"serialMode\":\"\")+' called for '+data.mailTo)\n\n    // don't send account emails unless email server configured\n    // if (!Meteor.settings.MAIL_URL) {\n    if (!process.env.MAIL_URL) {\n      console.log(\"Mail not configured: suppressing sendNotificationEmail output\");\n      console.log('no MAIL_URL in env vars')\n      return true;\n    }\n\n    SSR.compileTemplate(\"email/\"+data.template, Assets.getText(\"email/\"+data.template+\".html\"));\n    let renderArr = {\n        homepage: ( Meteor.isDevelopment ? 'https://www.spotmycrib.ie/' : Meteor.absoluteUrl() ),\n        cdnHomepage: ( Meteor.isDevelopment ? 'https://www.spotmycrib.ie/' : CDN.get_cdn_url()+'/' ),\n        support: EMAIL_CONFIG,\n        headers:{}\n    }\n\n    renderArr.data = data;\n    let renderedTemplate = SSR.render(\"email/\" + data.template, renderArr)\n\n    if(Meteor.isDevelopment && !data.mailTo.endsWith('@spotmycrib.com')){\n        data.mailTo = 'srikanth681@gmail.com'\n    }\n    if(data.mailTo.indexOf('daft.ie')!=-1){\n        console.log(\"Looks like a daft.ie email, supressing it.\");\n        console.log(data.mailTo)\n        return true;\n    }\n\n      var arr = {\n          to: data.mailTo,\n          // to: 'srikanth681@gmail.com',\n          from: EMAIL_CONFIG.name+\" <\"+EMAIL_CONFIG.email+\">\",\n          subject: data.subject,\n          html: renderedTemplate\n      }\n      if(data.replyTo)arr.replyTo = data.replyTo;\n      if(data['o:tag'])arr.headers['o:tag'] = data['o:tag'];\n      if(Meteor.isDevelopment && !data.mailTo.endsWith('@spotmycrib.com')){\n          arr['o:testmode']=true;\n      }\n\n      Email.send(arr);\n\n      return true;\n\n\n\n  },\n  sendEmail: function (to, from, subject, text) {\n    check([to, from, subject, text], [String]);\n\n    // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n    this.unblock();\n\n    //actual email sending method\n    Email.send({\n      to: to,\n      from: from,\n      subject: subject,\n      text: text\n    });\n  },\n  knowMoreRequestReceived:function (email) {\n      console.log('in knowMoreRequestReceived')\n      console.log(email)\n      this.unblock();\n      Email.send({\n          to: 'srikanth681@gmail.com',\n          from: 'sales@spotmycrib.com',\n          subject: \"Know more request received\",\n          text: 'Email provided is: '+email,\n          headers:{\n            'o:tag': 'notifySales',\n          }\n      });\n  },\n  notifyAdmin:function (subject='',desc='') {\n     console.log('in notifyAdmin')\n\n     this.unblock();\n     if(Meteor.isDevelopment)return ;\n     \n     Email.send({\n        to: 'srikanth681@gmail.com',\n        // cc: 'divyarao807@gmail.com',\n        from: 'support@spotmycrib.com',\n        subject: \"Notify: \"+subject,\n        html: 'Content is: '+desc,\n        headers:{\n            'o:tag': 'notifyAdmin',\n          }\n     });\n  },\n  introOfferRequestReceived:function (email,name,company,phone) {\n      console.log('in introOfferRequestReceived')\n      console.log(email+\" \"+ name+\" \"+ company+\" \"+ phone)\n      this.unblock();\n      Email.send({\n          to: 'srikanth681@gmail.com',\n          from: 'sales@spotmycrib.com',\n          subject: \"Intro offer request received\",\n          text: 'Email provided is: '+email+\"\\n   name: \"+name+\"\\n   company: \"+company+\"\\n   phone: \"+phone,\n          headers:{\n            'o:tag': 'notifySales',\n          }\n      });\n  },\n  sendWelcomeEmailCustom: function(args){\n        // check(args, Match.Any);\n        var userId = args[0];\n\n        console.log(\"server method sendWelcomeEmailCustom called\")\n        console.log(userId);\n        var user = Accounts.users.findOne(userId);\n        // console.log(user);\n        if(!user){\n            throw new Meteor.Error(500, 'Error 500: Invalid user', 'User not found.');\n        }\n\n        let userFirstName = user.profile.name;\n        if(userFirstName){\n            userFirstName = titleCase(userFirstName.split(' ')[0]);\n        }\n\n        var globalConfig = Collections.Config.findOne();\n        var mailData = {\n            template: 'welcomeEmail',\n            'o:tag': 'welcomeEmail',\n            subject: \"Welcome to SpotMyCrib\",\n            mailTo: user.profile.email,\n            user: user,\n            conf: globalConfig,\n            data : {\n                userFirstName: userFirstName\n            }\n        }\n        //debugger;\n        // Accounts.sendVerificationEmail(userId);\n        \n\n        Meteor.call('sendNotificationEmailWithoutSSR', mailData)\n\n      /*\n       if( user.profile.isEmailVerified){\n       throw new Meteor.Error(500, 'Error 500: Email already verified. ', 'Your email is already verified.');\n       }\n\n       var newVerifyCode = randomString(32, '#a');//Random alpha numeric string of 32 chars\n       Meteor.users.update({\n       \"_id\": user._id\n       }, {\n       $currentDate: {\n       \"profile.emailVerificationSentOn\": { $type: \"timestamp\" }\n       },\n       $set: {\n       \"profile.emailVerificationValue\": newVerifyCode\n       }\n       });\n       */\n\n\n        return {\n            status: 'Success'\n        }\n\n\n    },\n    sendNotificationEmailWithoutSSR: function (mailData) {\n        //Format as shown below\n        //data = {\n        //  template: \"bidSuccessfullyPlaced\",\n        //  subject: \"Welcome to SMC\"\n        //}\n        // check(args, [String]);\n    \n        // Let other method calls from the same client start running,\n        // without waiting for the email sending to complete.\n        this.unblock();\n    \n        console.log('sendNotificationEmailWithoutSSR called for '+mailData.user.profile.name)\n    \n        // don't send account emails unless email server configured\n        // if (!Meteor.settings.MAIL_URL) {\n        if (!process.env.MAIL_URL) {\n          console.log(\"Mail not configured: suppressing sendNotificationEmail output\");\n          console.log('no MAIL_URL in env vars')\n          return true;\n        }\n        mailData.data.homepage = Meteor.absoluteUrl();\n        if(Meteor.isDevelopment)mailData.data.homepage = 'https://www.spotmycrib.ie/';\n        mailData.data.cdnHomepage = CDN.get_cdn_url()+'/';\n        if(Meteor.isDevelopment)mailData.data.cdnHomepage = 'https://www.spotmycrib.ie/';\n        mailData.data.support = EMAIL_CONFIG;\n\n        let variableData = {}\n        variableData[mailData.mailTo]= mailData.data\n        console.log(variableData)\n\n        if(Meteor.isDevelopment){\n            mailData.mailTo = 'srikanth681@gmail.com'\n        }\n        \n        let arr = {\n            to: mailData.mailTo,\n            from: EMAIL_CONFIG.name+\" <\"+EMAIL_CONFIG.email+\">\",\n            subject: mailData.subject,\n            html: Assets.getText(\"email/\"+mailData.template+\".html\"),\n            headers:{\n                'X-Mailgun-Recipient-Variables':JSON.stringify(variableData)\n            }\n        }\n        if(mailData.replyTo)arr.replyTo = mailData.replyTo;\n        if(mailData['o:tag'])arr.headers['o:tag'] = mailData['o:tag'];\n        if(Meteor.isDevelopment){\n        //   arr['o:testmode']=true;\n        }\n\n          Email.send(arr);\n    \n          console.log({\n            to: mailData.mailTo,\n            from: EMAIL_CONFIG.name+\" <\"+EMAIL_CONFIG.email+\">\",\n            subject: mailData.subject,\n          })\n          return true;\n    \n    \n    \n    },\n    sendNotificationEmailWithTemplate: function (mailData) {\n    this.unblock();\n    console.log('sendNotificationEmailWithTemplate called')\n\n    // don't send account emails unless email server configured\n    if (!process.env.MAIL_URL) {\n        console.log(\"Mail not configured: suppressing sendNotificationEmail output\");\n        console.log('no MAIL_URL in env vars')\n        return true;\n    }\n    mailData.data.homepage = Meteor.absoluteUrl();\n    if(Meteor.isDevelopment)mailData.data.homepage = 'https://www.spotmycrib.ie/';\n    mailData.data.cdnHomepage = CDN.get_cdn_url()+'/';\n    if(Meteor.isDevelopment)mailData.data.cdnHomepage = 'https://www.spotmycrib.ie/';\n    mailData.data.support = EMAIL_CONFIG;\n    \n    let arr = {\n        to: mailData.mailTo,\n        from: EMAIL_CONFIG.name+\" <\"+EMAIL_CONFIG.email+\">\",\n        subject: mailData.subject,\n        template: mailData.template\n        // ,\n        // headers:{\n        //     // 'X-Mailgun-Recipient-Variables':JSON.stringify(variableData),\n        //     'X-Mailgun-Variables':JSON.stringify(mailData.data)\n        // }\n    }\n    if(mailData.replyTo)arr.replyTo = mailData.replyTo;\n    if(mailData['o:tag'])arr.headers['o:tag'] = mailData['o:tag'];\n    // if(Meteor.isDevelopment){\n    //   arr['o:testmode']=true;\n    // }key-85cc066727dcada64aa3e70b96274e55\n\n    arr = {\n        to: 'srikanth681@gmail.com',\n        from: 'Mailgun Sandbox <postmaster@spotmycrib.com>',\n        subject: 'Hello Naga Srikanth',\n        template: 'propertyalerts'\n        // ,\n        // headers:{\n        //     // 'X-Mailgun-Recipient-Variables':JSON.stringify(variableData),\n        //     'X-Mailgun-Variables':JSON.stringify(mailData.data)\n        // }\n    }\n\n    Email.send(arr);\n\n    console.log(arr)\n    return true;\n    },\n})\n\n\nAccounts.emailTemplates.siteName = EMAIL_CONFIG.companyName;\nAccounts.emailTemplates.from = Meteor.settings.NO_REPLY.name+' <'+Meteor.settings.NO_REPLY.email+'>';\n// Accounts.emailTemplates.enrollAccount.subject = (user) => {\n//     return `Welcome to Awesome Town, ${user.profile.name}`;\n// };\n// Accounts.emailTemplates.enrollAccount.text = (user, url) => {\n//     return 'You have been selected to participate in building a better future!'\n//         + ' To activate your account, simply click the link below:\\n\\n'\n//         + url;\n// };\nAccounts.emailTemplates.resetPassword = {\n    from:function(){\n        return Meteor.settings.NO_REPLY.name+' Password Reset <'+Meteor.settings.NO_REPLY.email+'>';\n    },\n    subject:function(user){\n        return titleCase(user.profile.name)+', here\\'s the link to reset your password';\n    },\n    html:function(user, url){\n        SSR.compileTemplate('email/forgotPassword', Assets.getText('email/forgotPassword.html'));\n        console.log(Meteor.absoluteUrl())\n\n        return SSR.render(\"email/forgotPassword\", {\n            homepage: Meteor.absoluteUrl(),\n            support: EMAIL_CONFIG,\n            user: user,\n            activationLink: url,\n        })\n    }\n}\nAccounts.emailTemplates.verifyEmail = {\n    from:function(){\n        return Meteor.settings.NO_REPLY.name+' <'+Meteor.settings.NO_REPLY.email+'>';\n    },\n    subject:function(){\n        return 'Activate your account now!';\n    },\n    html:function(user, url){\n        SSR.compileTemplate('email/verifyEmail', Assets.getText('email/verifyEmail.html'));\n\n        return SSR.render(\"email/verifyEmail\", {\n            homepage: Meteor.absoluteUrl(),\n            support: EMAIL_CONFIG,\n            user: user,\n            activationLink: url,\n        })\n    }\n}\n// Accounts.emailTemplates.verifyEmail = {\n//     subject() {\n//         return \"Activate your account now!\";\n//     },\n//     text(user, url) {\n//         return `Hey ${user}! Verify your e-mail by following this link: ${url}`;\n//     }\n// };\nfunction titleCase(str){\n    if(!str)return;\n    return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);\n}"]},"sourceType":"module","hash":"f16d564ef4eced4510947115652907415cb3c074"}
