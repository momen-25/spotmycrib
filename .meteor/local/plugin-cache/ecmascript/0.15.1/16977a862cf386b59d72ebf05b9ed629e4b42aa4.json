{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/wrap_observers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/montiapm:agent/lib/hijack/wrap_observers.js","filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/wrap_observers.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/wrap_observers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/montiapm:agent/lib/hijack/wrap_observers.js"}},"code":"wrapOplogObserveDriver = function (proto) {\n  // Track the polled documents. This is reflect to the RAM size and\n  // for the CPU usage directly\n  var originalPublishNewResults = proto._publishNewResults;\n\n  proto._publishNewResults = function (newResults, newBuffer) {\n    var coll = this._cursorDescription.collectionName;\n    var query = this._cursorDescription.selector;\n    var opts = this._cursorDescription.options;\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newResults);\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    var count = newResults.size() + newBuffer.size();\n\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize * count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize * count\n      };\n    }\n\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n\n  var originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n\n  proto._handleOplogEntryQuerying = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n\n  var originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n\n  proto._handleOplogEntrySteadyOrFetching = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  }; // track live updates\n\n\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function (fnName) {\n    var originalFn = proto[fnName];\n\n    proto[fnName] = function (a, b, c) {\n      if (this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n\n        if (fnName === \"_addPublished\") {\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"liveFetches\", docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if (!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n\n        this._liveUpdatesCounts._initialAdds++;\n\n        if (fnName === \"_addPublished\") {\n          if (!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n\n          if (!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          this._docSize.initialFetches += docSize;\n        }\n      }\n\n      return originalFn.call(this, a, b, c);\n    };\n  });\n  var originalStop = proto.stop;\n\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapPollingObserveDriver = function (proto) {\n  var originalPollMongo = proto._pollMongo;\n\n  proto._pollMongo = function () {\n    var start = Date.now();\n    originalPollMongo.call(this); // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n\n    var count = 0;\n    var docSize = 0;\n\n    if (this._results && this._results.size) {\n      count = this._results.size() || 0;\n      var coll = this._cursorDescription.collectionName;\n      var query = this._cursorDescription.selector;\n      var opts = this._cursorDescription.options;\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map) * count;\n    }\n\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n\n  var originalStop = proto.stop;\n\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapMultiplexer = function (proto) {\n  var originalInitalAdd = proto.addHandleAndSendInitialAdds;\n\n  proto.addHandleAndSendInitialAdds = function (handle) {\n    if (!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n\n    if (!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n\n    return originalInitalAdd.call(this, handle);\n  };\n};\n\nwrapForCountingObservers = function () {\n  // to count observers\n  var mongoConnectionProto = MeteorX.MongoConnection.prototype;\n  var originalObserveChanges = mongoConnectionProto._observeChanges;\n\n  mongoConnectionProto._observeChanges = function (cursorDescription, ordered, callbacks) {\n    var ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks); // get the Kadira Info via the Meteor.EnvironmentalVariable\n\n    var kadiraInfo = Kadira._getInfo(null, true);\n\n    if (kadiraInfo && ret._multiplexer) {\n      if (!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n\n        if (kadiraInfo.trace.type == 'sub') {\n          var ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: new Date().getTime()\n          };\n          var observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo); // We need to send initially polled documents if there are\n\n          if (observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          } // We need to send initially polled documents if there are\n\n\n          if (observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, \"polledFetches\", observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          } // Process _liveUpdatesCounts\n\n\n          _.each(observerDriver._liveUpdatesCounts, function (count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          }); // Process docSize\n\n\n          _.each(observerDriver._docSize, function (count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n\n    return ret;\n  };\n};","map":{"version":3,"sources":["packages/montiapm:agent/lib/hijack/wrap_observers.js"],"names":["wrapOplogObserveDriver","proto","originalPublishNewResults","_publishNewResults","newResults","newBuffer","coll","_cursorDescription","collectionName","query","selector","opts","options","docSize","Kadira","docSzCache","getSize","count","size","_ownerInfo","models","pubsub","trackPolledDocuments","trackDocSize","name","_polledDocuments","_docSize","polledFetches","call","originalHandleOplogEntryQuerying","_handleOplogEntryQuerying","op","trackDocumentChanges","originalHandleOplogEntrySteadyOrFetching","_handleOplogEntrySteadyOrFetching","forEach","fnName","originalFn","a","b","c","trackLiveUpdates","_liveUpdatesCounts","_initialAdds","initialFetches","originalStop","stop","type","EventBus","emit","trackDeletedObserver","wrapPollingObserveDriver","originalPollMongo","_pollMongo","start","Date","now","_results","_map","_polledDocSize","wrapMultiplexer","originalInitalAdd","addHandleAndSendInitialAdds","handle","_firstInitialAddTime","_wasMultiplexerReady","_ready","_queueLength","_queue","_taskHandles","length","_elapsedPollingTime","wrapForCountingObservers","mongoConnectionProto","MeteorX","MongoConnection","prototype","originalObserveChanges","_observeChanges","cursorDescription","ordered","callbacks","ret","kadiraInfo","_getInfo","_multiplexer","__kadiraTracked","trace","incrementHandleCount","ownerInfo","startTime","getTime","observerDriver","_observeDriver","trackCreatedObserver","_","each","key"],"mappings":"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","sourcesContent":["wrapOplogObserveDriver = function(proto) {\n  // Track the polled documents. This is reflect to the RAM size and\n  // for the CPU usage directly\n  var originalPublishNewResults = proto._publishNewResults;\n  proto._publishNewResults = function(newResults, newBuffer) {\n    var coll = this._cursorDescription.collectionName;\n    var query = this._cursorDescription.selector;\n    var opts = this._cursorDescription.options;\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newResults);\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    var count = newResults.size() + newBuffer.size();\n    if(this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize*count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize*count\n      }\n    }\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n\n  var originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n  proto._handleOplogEntryQuerying = function(op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n\n  var originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n  proto._handleOplogEntrySteadyOrFetching = function(op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  };\n\n  // track live updates\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function(fnName) {\n    var originalFn = proto[fnName];\n    proto[fnName] = function(a, b, c) {\n      if(this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n\n        if(fnName === \"_addPublished\") {\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"liveFetches\", docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if(!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n\n        this._liveUpdatesCounts._initialAdds++;\n\n        if(fnName === \"_addPublished\") {\n          if(!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n\n          if(!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          this._docSize.initialFetches += docSize;\n        }\n      }\n\n      return originalFn.call(this, a, b, c);\n    };\n  });\n\n  var originalStop = proto.stop;\n  proto.stop = function() {\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapPollingObserveDriver = function(proto) {\n  var originalPollMongo = proto._pollMongo;\n  proto._pollMongo = function() {\n    var start = Date.now();\n    originalPollMongo.call(this);\n\n    // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n    var count = 0;\n    var docSize = 0;\n\n    if(this._results && this._results.size) {\n      count = this._results.size() || 0;\n\n      var coll = this._cursorDescription.collectionName;\n      var query = this._cursorDescription.selector;\n      var opts = this._cursorDescription.options;\n\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map)*count;\n    }\n\n    if(this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n\n  var originalStop = proto.stop;\n  proto.stop = function() {\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapMultiplexer = function(proto) {\n  var originalInitalAdd = proto.addHandleAndSendInitialAdds;\n   proto.addHandleAndSendInitialAdds = function(handle) {\n    if(!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n\n    if(!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n    return originalInitalAdd.call(this, handle);\n  };\n};\n\nwrapForCountingObservers = function() {\n  // to count observers\n  var mongoConnectionProto = MeteorX.MongoConnection.prototype;\n  var originalObserveChanges = mongoConnectionProto._observeChanges;\n  mongoConnectionProto._observeChanges = function(cursorDescription, ordered, callbacks) {\n    var ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks);\n    // get the Kadira Info via the Meteor.EnvironmentalVariable\n    var kadiraInfo = Kadira._getInfo(null, true);\n\n    if(kadiraInfo && ret._multiplexer) {\n      if(!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n        if(kadiraInfo.trace.type == 'sub') {\n          var ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: (new Date()).getTime()\n          };\n\n          var observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo);\n\n          // We need to send initially polled documents if there are\n          if(observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          }\n\n          // We need to send initially polled documents if there are\n          if(observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, \"polledFetches\", observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          }\n\n          // Process _liveUpdatesCounts\n          _.each(observerDriver._liveUpdatesCounts, function(count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          });\n\n          // Process docSize\n          _.each(observerDriver._docSize, function(count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n\n    return ret;\n  }\n};"]},"sourceType":"module","hash":"16977a862cf386b59d72ebf05b9ed629e4b42aa4"}
