{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/msavin:mongol/server/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/msavin:mongol/server/methods.js","filename":"/home/momen/projects/spotmycrib-master/packages/msavin:mongol/server/methods.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/msavin:mongol/server/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/msavin:mongol/server/methods.js"}},"code":"let utilities;\nmodule.link(\"./utilities.js\", {\n  utilities(v) {\n    utilities = v;\n  }\n\n}, 0);\nlet ToyKit;\nmodule.link(\"meteor/meteortoys:toykit\", {\n  ToyKit(v) {\n    ToyKit = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\n\nvar _insertDoc = function (collectionName, documentData) {\n  var newId,\n      Collection = ToyKit.collection.get(collectionName);\n\n  if (documentData._id && Collection.findOne(documentData._id)) {\n    // console.log('Mongol: Duplicate _id found');\n    return null;\n  }\n\n  if (!documentData._id) {\n    documentData._id = Random.id();\n  }\n\n  if (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && typeof Collection.simpleSchema === \"function\" && Collection._c2) {\n    return Collection.insert(documentData, {\n      filter: false,\n      autoConvert: false,\n      removeEmptyStrings: false,\n      validate: false\n    });\n  } else {\n    return Collection.insert(documentData);\n  }\n};\n\nMeteor.methods({\n  Mongol_update: function (collectionName, documentData, originalDocumentData) {\n    // console.log(arguments)\n    check(collectionName, String);\n    check(documentData, Object);\n    check(originalDocumentData, Object);\n    var Collection = ToyKit.collection.get(collectionName),\n        documentID = documentData._id,\n        originalID = originalDocumentData._id;\n    var currentDbDoc = Collection.findOne({\n      _id: documentID\n    }, {\n      transform: null\n    }); // console.log(currentDbDoc)\n\n    if (!currentDbDoc) {\n      return _insertdoc(collectionName, documentData);\n    }\n\n    delete documentData._id;\n    delete originalDocumentData._id;\n    delete currentDbDoc._id;\n    var updatedDocumentData = Utilities.diffDocumentData(currentDbDoc, documentData, originalDocumentData);\n    delete updatedDocumentData._id; // console.log(updatedDocumentData)\n    // Check for packages\n\n    if (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && typeof Collection.simpleSchema === \"function\" && Collection._c2) {\n      if (typeof Collection.rawCollection) {\n        Collection.rawCollection().update({\n          _id: documentID\n        }, {\n          $set: updatedDocumentData\n        }, {\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          validate: false\n        });\n      } else {\n        Collection.update({\n          _id: documentID\n        }, {\n          $set: updatedDocumentData\n        }, {\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          validate: false\n        });\n      }\n\n      return;\n    } // Run the magic\n\n\n    Collection.update({\n      _id: documentID\n    }, {\n      $set: updatedDocumentData\n    });\n  },\n  Mongol_remove: function (collectionName, docId, skipTrashing) {\n    // console.log(arguments)\n    check(collectionName, String);\n    check(docId, String);\n    check(skipTrashing, Match.Any); // Get Original Document\n\n    var Collection = ToyKit.collection.get(collectionName); // // Move document to Trash Can\n\n    if (!skipTrashing) {\n      var trash = Collection.findOne(docId, {\n        transform: null\n      });\n      trash[\"Mongol_origin\"] = String(collectionName);\n      trash[\"Mongol_date\"] = new Date();\n\n      _insertDoc(\"MeteorToys.Mongol\", trash);\n    } // remove the document\n\n\n    return Collection.remove({\n      _id: docId\n    });\n  },\n  Mongol_duplicate: function (collectionName, docId) {\n    check(collectionName, String);\n    check(docId, String); // console.log(docId)\n\n    var Collection = ToyKit.collection.get(collectionName);\n    var Document = Collection.findOne(docId, {\n      transform: null\n    });\n\n    if (Document) {\n      delete Document._id;\n      return _insertDoc(collectionName, Document);\n    }\n  },\n  Mongol_insert: function (collectionName, documentData) {\n    check(collectionName, String);\n    check(documentData, Object);\n    return _insertDoc(collectionName, documentData);\n  },\n  Mongol_getCollections: function () {\n    return ToyKit.collection.getList();\n  },\n  Mongol_resetCollection: function (name) {\n    check(name, Match.Any);\n    return Mongo.Collection.get(name).remove({});\n  },\n  Mongol_resetAll: function () {\n    var collectionsList = ToyKit.collection.getList() || [];\n    return collectionsList.map(function (name) {\n      return {\n        name: name,\n        result: ToyKit.collection.get(name).remove({})\n      };\n    });\n  }\n});","map":{"version":3,"sources":["packages/msavin:mongol/server/methods.js"],"names":["utilities","module","link","v","ToyKit","Random","_insertDoc","collectionName","documentData","newId","Collection","collection","get","_id","findOne","id","Package","simpleSchema","_c2","insert","filter","autoConvert","removeEmptyStrings","validate","Meteor","methods","Mongol_update","originalDocumentData","check","String","Object","documentID","originalID","currentDbDoc","transform","_insertdoc","updatedDocumentData","Utilities","diffDocumentData","rawCollection","update","$set","Mongol_remove","docId","skipTrashing","Match","Any","trash","Date","remove","Mongol_duplicate","Document","Mongol_insert","Mongol_getCollections","getList","Mongol_resetCollection","name","Mongo","Mongol_resetAll","collectionsList","map","result"],"mappings":"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","sourcesContent":["import { utilities } from \"./utilities.js\"\nimport { ToyKit } from \"meteor/meteortoys:toykit\";\nimport { Random } from \"meteor/random\"\nvar _insertDoc = function (collectionName, documentData) {\n\tvar newId, Collection = ToyKit.collection.get(collectionName);\n\n\tif (documentData._id && Collection.findOne(documentData._id)) {\n\t\t// console.log('Mongol: Duplicate _id found');\n\t\treturn null;\n\t}\n\n\tif (!documentData._id) {\n\t\tdocumentData._id = Random.id()\n\t}\n\n\tif (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && typeof Collection.simpleSchema === \"function\" && Collection._c2) {\n\t\treturn Collection.insert(documentData, {\n\t\t\tfilter: false,\n\t\t\tautoConvert: false,\n\t\t\tremoveEmptyStrings: false,\n\t\t\tvalidate: false\n\t\t});\n\t} else {\n\t\treturn Collection.insert(documentData);\n\t}\n}\n\n\nMeteor.methods({\n\tMongol_update: function (collectionName, documentData, originalDocumentData) {\n\t\t// console.log(arguments)\n\t\tcheck(collectionName, String);\n\t\tcheck(documentData, Object);\n\t\tcheck(originalDocumentData, Object);\n\n\t\tvar Collection = ToyKit.collection.get(collectionName),\n\t\t\tdocumentID = documentData._id,\n\t\t\toriginalID = originalDocumentData._id;\n\n\t\tvar currentDbDoc = Collection.findOne({\n\t\t\t_id: documentID\n\t\t}, {\n\t\t\ttransform: null\n\t\t});\n\t\t// console.log(currentDbDoc)\n\t\tif (!currentDbDoc) {\n\t\t\treturn _insertdoc (collectionName, documentData)\n\t\t}\n\n\t\tdelete documentData._id;\n\t\tdelete originalDocumentData._id;\n\t\tdelete currentDbDoc._id;\n\n\t\tvar updatedDocumentData = Utilities.diffDocumentData(currentDbDoc, documentData, originalDocumentData);\n\t\tdelete updatedDocumentData._id;\n\t\t// console.log(updatedDocumentData)\n\t\t// Check for packages\n\n\t\tif (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && typeof Collection.simpleSchema === \"function\" && Collection._c2) {\n\t\t\tif (typeof Collection.rawCollection) {\n\t\t\t\tCollection.rawCollection().update({\n\t\t\t\t\t_id: documentID\n\t\t\t\t}, {\n\t\t\t\t\t$set: updatedDocumentData\n\t\t\t\t}, {\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tautoConvert: false,\n\t\t\t\t\tremoveEmptyStrings: false,\n\t\t\t\t\tvalidate: false\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tCollection.update({\n\t\t\t\t\t_id: documentID\n\t\t\t\t}, {\n\t\t\t\t\t$set: updatedDocumentData\n\t\t\t\t}, {\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tautoConvert: false,\n\t\t\t\t\tremoveEmptyStrings: false,\n\t\t\t\t\tvalidate: false\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Run the magic\n\t\tCollection.update({\n\t\t\t_id: documentID\n\t\t}, {\n\t\t\t$set: updatedDocumentData\n\t\t});\n\t},\n\tMongol_remove: function (collectionName, docId, skipTrashing) {\n\t\t// console.log(arguments)\n\t\tcheck(collectionName, String)\n\t\tcheck(docId, String)\n\t\tcheck(skipTrashing, Match.Any)\n\n\t\t// Get Original Document\n\t\tvar Collection = ToyKit.collection.get(collectionName)\n\t\t\n\t\t// // Move document to Trash Can\n\t\tif (!skipTrashing) {\n\t\t\tvar trash  = Collection.findOne(docId, {transform: null})\n\t\t\ttrash[\"Mongol_origin\"] = String(collectionName)\n\t\t\ttrash[\"Mongol_date\"] = new Date()\n\t\t\t_insertDoc(\"MeteorToys.Mongol\", trash)\n\t\t}\n\n\t\t// remove the document\n\t\treturn Collection.remove({_id: docId})\n\t},\n\tMongol_duplicate: function (collectionName, docId) {\n\t\tcheck(collectionName, String);\n\t\tcheck(docId, String);\n\t\t// console.log(docId)\n\n\t\tvar Collection = ToyKit.collection.get(collectionName);\n\t\tvar Document = Collection.findOne(docId, {transform: null});\n\n\t\tif (Document) {\n\t\t\tdelete Document._id;\n\t\t\treturn _insertDoc(collectionName, Document);\n\t\t}\n\t},\n\tMongol_insert: function(collectionName, documentData) {\n\t\tcheck(collectionName, String);\n\t\tcheck(documentData, Object);\n\n\t\treturn _insertDoc(collectionName, documentData);\n\t},\n\tMongol_getCollections: function () {\n\t\treturn ToyKit.collection.getList();\n\t},\n\tMongol_resetCollection: function(name) {\n\t\tcheck(name, Match.Any);\n\n\t\treturn Mongo.Collection.get(name).remove({});\n\t},\n\tMongol_resetAll: function () {\n\t\tvar collectionsList = ToyKit.collection.getList() || [];\n\n\t\treturn collectionsList.map(function(name) {\n\t\t\treturn {\n\t\t\t\tname: name,\n\t\t\t\tresult: ToyKit.collection.get(name).remove({})\n\t\t\t}\n\t\t});\n\t}\n});"]},"sourceType":"module","hash":"53998f144117fc3183cf807760954c7bf77129d4"}
