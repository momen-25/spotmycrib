{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/server/ssr_context.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/jns:flow-router-ssr/server/ssr_context.js","filename":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/server/ssr_context.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/jns:flow-router-ssr/server/ssr_context.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jns:flow-router-ssr/server/ssr_context.js"}},"code":"const deepMerge = require('deepmerge');\n\nSsrContext = class {\n  constructor() {\n    this._html = '';\n    this._head = '';\n    this._collections = {};\n  }\n\n  getCollection(collName) {\n    let collection = this._collections[collName];\n\n    if (!collection) {\n      const minimongo = Package.minimongo;\n      collection = this._collections[collName] = new minimongo.LocalCollection();\n    }\n\n    return collection;\n  }\n\n  setHtml(html) {\n    this._html = html;\n  }\n\n  getHtml() {\n    return this._html;\n  }\n\n  addToHead(headHtml) {\n    this._head += \"\\n\".concat(headHtml);\n  }\n\n  getHead() {\n    return this._head;\n  }\n\n  addSubscription(name, params) {\n    const fastRenderContext = FastRender.frContext.get();\n\n    if (!fastRenderContext) {\n      throw new Error(\"Cannot add a subscription: \".concat(name, \" without FastRender Context\"));\n    }\n\n    const args = [name].concat(params);\n    const data = fastRenderContext.subscribe(...args);\n    this.addData(data);\n  }\n\n  addData(data) {\n    _.each(data, (collDataCollection, collectionName) => {\n      const collection = this.getCollection(collectionName);\n      collDataCollection.forEach(collData => {\n        collData.forEach(item => {\n          const existingDoc = collection.findOne(item._id);\n\n          if (existingDoc) {\n            const newDoc = deepMerge(existingDoc, item);\n            delete newDoc._id;\n            collection.update(item._id, newDoc);\n          } else {\n            collection.insert(item);\n          }\n        });\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["packages/jns:flow-router-ssr/server/ssr_context.js"],"names":["deepMerge","require","SsrContext","constructor","_html","_head","_collections","getCollection","collName","collection","minimongo","Package","LocalCollection","setHtml","html","getHtml","addToHead","headHtml","getHead","addSubscription","name","params","fastRenderContext","FastRender","frContext","get","Error","args","concat","data","subscribe","addData","_","each","collDataCollection","collectionName","forEach","collData","item","existingDoc","findOne","_id","newDoc","update","insert"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEAC,UAAU,GAAG,MAAM;AACjBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,YAAL,GAAoB,EAApB;AACD;;AAEDC,EAAAA,aAAa,CAACC,QAAD,EAAW;AACtB,QAAIC,UAAU,GAAG,KAAKH,YAAL,CAAkBE,QAAlB,CAAjB;;AACA,QAAI,CAACC,UAAL,EAAiB;AACf,YAAMC,SAAS,GAAGC,OAAO,CAACD,SAA1B;AACAD,MAAAA,UAAU,GAAG,KAAKH,YAAL,CAAkBE,QAAlB,IAA8B,IAAIE,SAAS,CAACE,eAAd,EAA3C;AACD;;AAED,WAAOH,UAAP;AACD;;AAEDI,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,SAAKV,KAAL,GAAaU,IAAb;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKX,KAAZ;AACD;;AAEDY,EAAAA,SAAS,CAACC,QAAD,EAAW;AAClB,SAAKZ,KAAL,gBAAmBY,QAAnB;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKb,KAAZ;AACD;;AAEDc,EAAAA,eAAe,CAACC,IAAD,EAAOC,MAAP,EAAe;AAC5B,UAAMC,iBAAiB,GAAGC,UAAU,CAACC,SAAX,CAAqBC,GAArB,EAA1B;;AACA,QAAI,CAACH,iBAAL,EAAwB;AACtB,YAAM,IAAII,KAAJ,sCAC0BN,IAD1B,iCAAN;AAGD;;AAED,UAAMO,IAAI,GAAG,CAACP,IAAD,EAAOQ,MAAP,CAAcP,MAAd,CAAb;AACA,UAAMQ,IAAI,GAAGP,iBAAiB,CAACQ,SAAlB,CAA4B,GAAGH,IAA/B,CAAb;AACA,SAAKI,OAAL,CAAaF,IAAb;AACD;;AAEDE,EAAAA,OAAO,CAACF,IAAD,EAAO;AACZG,IAAAA,CAAC,CAACC,IAAF,CAAOJ,IAAP,EAAa,CAACK,kBAAD,EAAqBC,cAArB,KAAwC;AACnD,YAAM1B,UAAU,GAAG,KAAKF,aAAL,CAAmB4B,cAAnB,CAAnB;AACAD,MAAAA,kBAAkB,CAACE,OAAnB,CAA4BC,QAAD,IAAc;AACvCA,QAAAA,QAAQ,CAACD,OAAT,CAAkBE,IAAD,IAAU;AACzB,gBAAMC,WAAW,GAAG9B,UAAU,CAAC+B,OAAX,CAAmBF,IAAI,CAACG,GAAxB,CAApB;;AACA,cAAIF,WAAJ,EAAiB;AACf,kBAAMG,MAAM,GAAG1C,SAAS,CAACuC,WAAD,EAAcD,IAAd,CAAxB;AACA,mBAAOI,MAAM,CAACD,GAAd;AACAhC,YAAAA,UAAU,CAACkC,MAAX,CAAkBL,IAAI,CAACG,GAAvB,EAA4BC,MAA5B;AACD,WAJD,MAIO;AACLjC,YAAAA,UAAU,CAACmC,MAAX,CAAkBN,IAAlB;AACD;AACF,SATD;AAUD,OAXD;AAYD,KAdD;AAeD;;AA9DgB,CAAnB","sourcesContent":["const deepMerge = require('deepmerge');\n\nSsrContext = class {\n  constructor() {\n    this._html = '';\n    this._head = '';\n    this._collections = {};\n  }\n\n  getCollection(collName) {\n    let collection = this._collections[collName];\n    if (!collection) {\n      const minimongo = Package.minimongo;\n      collection = this._collections[collName] = new minimongo.LocalCollection();\n    }\n\n    return collection;\n  }\n\n  setHtml(html) {\n    this._html = html;\n  }\n\n  getHtml() {\n    return this._html;\n  }\n\n  addToHead(headHtml) {\n    this._head += `\\n${headHtml}`;\n  }\n\n  getHead() {\n    return this._head;\n  }\n\n  addSubscription(name, params) {\n    const fastRenderContext = FastRender.frContext.get();\n    if (!fastRenderContext) {\n      throw new Error(\n        `Cannot add a subscription: ${name} without FastRender Context`\n      );\n    }\n\n    const args = [name].concat(params);\n    const data = fastRenderContext.subscribe(...args);\n    this.addData(data);\n  }\n\n  addData(data) {\n    _.each(data, (collDataCollection, collectionName) => {\n      const collection = this.getCollection(collectionName);\n      collDataCollection.forEach((collData) => {\n        collData.forEach((item) => {\n          const existingDoc = collection.findOne(item._id);\n          if (existingDoc) {\n            const newDoc = deepMerge(existingDoc, item);\n            delete newDoc._id;\n            collection.update(item._id, newDoc);\n          } else {\n            collection.insert(item);\n          }\n        });\n      });\n    });\n  }\n};\n"]},"sourceType":"module","hash":"fdfadab50ba7c01432dfae30f2a5df0168ac4072"}
