{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/server/accounts.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/accounts.js","filename":"/home/momen/projects/spotmycrib-master/server/accounts.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/server/accounts.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/accounts.js"}},"code":"/**\n * Created by njanjanam on 08/04/2017.\n */\n// Deny all client-side updates to user documents\n// Meteor.users.deny({\n//     update() { return true; }\n// });\nMeteor.users.deny({\n  insert() {\n    return true;\n  },\n\n  update() {\n    return true;\n  },\n\n  remove() {\n    return true;\n  }\n\n});\nAccounts.onCreateUser(function (options, user) {\n  //@RELATIVE: imports/ui/templates/accounts/signUp/signUp.js\n  if (options.profile) {\n    if (user.services.facebook) {\n      options.profile.picture = \"http://graph.facebook.com/\" + user.services.facebook.id + \"/picture/?width=40\"; //?type=large\n\n      options.profile.email = user.services.facebook.email;\n    }\n\n    if (user.services.twitter) {\n      options.profile.picture = user.services.twitter.profile_image_url_https; //?type=large\n\n      options.profile.name = user.services.twitter.screenName;\n      options.profile.email = \"\"; //Twitter doesn' give email.\n    }\n\n    if (user.services.google) {\n      options.profile.picture = user.services.google.picture + \"?sz=40\";\n      options.profile.name = user.services.google.given_name + user.services.google.family_name;\n      options.profile.email = user.services.google.email;\n    }\n\n    if (user.services.linkedin) {\n      options.profile.picture = user.services.linkedin.pictureUrl;\n      options.profile.name = user.services.linkedin.firstName + user.services.linkedin.lastName;\n      options.profile.email = user.services.linkedin.emailAddress;\n    } // user.profile = options.profile; Dont overwrite like this\n\n\n    if (user.profile) {\n      if (options.profile.name) user.profile.name = options.profile.name;\n      user.profile.email = options.profile.email;\n      user.profile.picture = options.profile.picture;\n    } else user.profile = options.profile;\n  } // user.createdAt = new Date();\n\n\n  return user;\n}); // Meteor.users.before.insert(function (userId, user) {\n//\n// });\n//https://guide.meteor.com/accounts.html\n// https://github.com/lirbank/meteor-accounts-merge\n// Ensuring every user has an email address, should be in server-side code\n\nAccounts.validateNewUser(user => {\n  console.log('In validate new user');\n  console.log(user);\n\n  if (user.profile.email) {\n    var tmp = Meteor.users.findOne({\n      'profile.email': user.profile.email\n    });\n    var msg = '';\n    var t1 = [];\n    var t2 = [];\n    if (tmp) if (tmp.services) {\n      if (tmp.services.facebook) {\n        t1.push('Facebook');\n        t2.push('Facebook'); // msg = 'Existing Facebook account exists, please login with your Facebook account.'\n      }\n\n      if (tmp.services.twitter) {\n        t1.push('Twitter');\n        t2.push('Twitter');\n      }\n\n      if (tmp.services.google) {\n        t1.push('Google');\n        t2.push('Google');\n      }\n\n      if (tmp.services.linkedin) {\n        t1.push('LinkedIn');\n        t2.push('LinkedIn');\n      }\n\n      if (tmp.services.password) {\n        t1.push('Password');\n        t2.push('Username-password');\n      }\n    }\n\n    if (t1.length) {\n      var s = t1.length > 1 ? 's' : '';\n      msg = 'Existing ' + formatArray(t1) + ' account' + s + ' found, please login with your ' + formatArray(t2, 'or') + '.';\n      throw new Meteor.Error('account-exists', msg);\n    }\n  } // Return true to allow user creation to proceed\n\n\n  return true;\n});\n\nfunction formatArray(arr) {\n  let con = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'and';\n  var outStr = \"\";\n\n  if (arr.length === 1) {\n    outStr = arr[0];\n  } else if (arr.length === 2) {\n    //joins all with \"and\" but no commas\n    //example: \"bob and sam\"\n    outStr = arr.join(' ' + con + ' ');\n  } else if (arr.length > 2) {\n    //joins all with commas, but last one gets \", and\" (oxford comma!)\n    //example: \"bob, joe, and sam\"\n    outStr = arr.slice(0, -1).join(', ') + ' ' + con + ' ' + arr.slice(-1);\n  }\n\n  return outStr;\n}\n\nMeteor.users.after.insert(function (userId, user) {\n  console.log(user);\n  var toUpdate = {\n    \"profile.role\": \"agent\",\n    \"profile.personalMessage\": \"\",\n    \"lastLoginDate\": new Date(),\n    \"profile.isPublic\": false\n  };\n  if (!user.profile.picture) toUpdate[\"profile.picture\"] = \"\";\n  if (!user.profile.mobile) toUpdate[\"profile.mobile\"] = \"\";\n  if (!user.profile.email) toUpdate[\"profile.email\"] = \"\";\n  var references = {};\n  references.hasResume = false;\n  references.hasLandlordRef = false;\n  references.hasGovtID = false;\n  references.employerName = \"\";\n  references.employerTakeHome = \"\";\n  references.hasWorkRef = false;\n  references.hasPassport = false;\n  references.hasPPS = false;\n  references.hasFinancialRef = false;\n  references.others = [];\n  toUpdate[\"profile.references\"] = references;\n  console.log(\"Account Created hook: \");\n\n  if (user.profile.email) {\n    //Check if this user already has any emailEnquiry with us?\n    let req = Collections.EmailEnquiries.findOne({\n      email: user.profile.email,\n      message: {\n        $exists: true,\n        $gt: \"\"\n      }\n    }, {\n      sort: {\n        createdAt: -1\n      }\n    });\n\n    if (req) {\n      toUpdate['profile.personalMessage'] = req.message;\n    }\n  }\n\n  Meteor.users.update({\n    \"_id\": user._id\n  }, {\n    $set: toUpdate\n  }); // if(!user.services.password && user.profile.email){\n  //     Accounts.sendEnrollmentEmail(user._id);\n  // }\n  // Meteor.call('sendWelcomeEmailCustom',[userId]); Moved to server side in Accounts.onCreateUser\n  // var smsText = 'Hi '+fullName+'. Welcome to SpotMyCrib. ';//Please verify your mobile number and email id.\n  // Meteor.call('sendSMS',[mobile, smsText]);\n\n  Meteor.call('sendWelcomeEmailCustom', [user._id]);\n});\nMeteor.methods({\n  'setUserPwd': function (args) {\n    var clientUserId = args[0];\n    var newPassword = args[1];\n    const userId = Meteor.userId();\n    if (clientUserId != userId) throw new Meteor.Error(400, 'Invalid user, please re-login and try again. ');\n    Accounts.setPassword(userId, newPassword, {\n      logout: false\n    });\n  },\n  'togglePublicProfileSetting': function () {\n    console.log('togglePublicProfileSetting called.');\n    var currentUser = Meteor.user();\n\n    if (!currentUser) {\n      throw new Meteor.Error(500, 'Error 500: Invalid user', 'You need to login first.');\n    }\n\n    var update = currentUser.profile.isPublic;\n    if (update == undefined) update = true; //First time, users get the option of public to true.\n    else {\n        if (update) update = false;else update = true;\n      }\n    Meteor.users.update({\n      \"_id\": currentUser._id\n    }, {\n      $set: {\n        \"profile.isPublic\": update\n      }\n    });\n\n    if (update) {\n      //If its true\n      if (!currentUser.profile.username) {\n        //Check if user name doesnt exists\n        Meteor.call('generateUsername', currentUser._id);\n      }\n    }\n  },\n  'userLoggedIn': function () {\n    // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n    this.unblock();\n    var currentUser = Meteor.userId();\n\n    if (!currentUser) {\n      throw new Meteor.Error(500, 'Error 500: Invalid user', 'You need to login first.');\n    }\n\n    Meteor.users.update({\n      \"_id\": currentUser\n    }, {\n      $set: {\n        \"lastLoginDate\": new Date()\n      }\n    });\n  },\n\n  'generateUsername'(userId) {\n    this.unblock();\n    var currentUser = Meteor.userId();\n\n    if (!currentUser) {\n      throw new Meteor.Error(500, 'Error 500: Invalid user', 'You need to login first.');\n    }\n\n    var user = Meteor.user(userId);\n    if (!user) throw new Meteor.Error(500, 'Error 500: Invalid user', 'Please send a valid userID');\n    console.log('user found: ' + user._id);\n    let username = slugify(user.profile.name);\n    if (!username) return false;\n    let u1 = Meteor.users.findOne({\n      \"profile.username\": username\n    });\n    let number = 0;\n\n    while (u1) {\n      number++;\n      username = slugify(user.profile.name + number);\n      u1 = Meteor.users.findOne({\n        \"profile.username\": username\n      });\n    }\n\n    if (username) {\n      Accounts.users.update(user._id, {\n        $set: {\n          \"profile.username\": username\n        }\n      });\n    }\n\n    return username;\n  },\n\n  isSocialAccount: function (email) {\n    // new SimpleSchema({\n    //     email: { type: [email] }\n    // }).validate({ email });\n    // User has no password set\n    var user = Accounts.findUserByEmail(email);\n\n    if (!user) {\n      //Not found in generic way\n      var users = Meteor.users.find({\n        'profile.email': email\n      }).fetch();\n      if (users.length) user = users[0];\n    }\n\n    if (user) {\n      var social = '';\n      if (user.services.facebook) social = 'Facebook';\n      if (user.services.twitter) social = 'Twitter';\n      if (user.services.google) social = 'Google';\n      if (user.services.linkedin) social = 'LinkedIn';\n      if (social) return {\n        error: false,\n        reason: social + ' user found. Please try login with ' + social + '.'\n      };\n    }\n\n    return {\n      error: 'NoUser',\n      reason: 'User not found'\n    };\n  },\n  hasPasswordSet: function () {\n    // new SimpleSchema({\n    //     email: { type: [email] }\n    // }).validate({ email });\n    var user = Meteor.user();\n    if (!user) return false;\n\n    try {\n      if (user.services.password) return true;\n    } catch (e) {\n      console.log(e);\n    }\n\n    return false;\n  }\n});\n\nfunction slugify(text) {\n  if (!text) return '';\n  const a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';\n  const b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';\n  const p = new RegExp(a.split('').join('|'), 'g');\n  return text.toString().toLowerCase().replace(/\\s+/g, '') // Replace spaces with \"\"\n  .replace(p, c => b.charAt(a.indexOf(c))) // Replace special chars\n  .replace(/&/g, '-and-') // Replace & with ''\n  .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n  .replace(/\\-\\-+/g, '-') // Replace multiple - with single ''\n  .replace(/^-+/, '') // Trim - from start of text\n  .replace(/-+$/, ''); // Trim - from end of text\n}","map":{"version":3,"sources":["server/accounts.js"],"names":["Meteor","users","deny","insert","update","remove","Accounts","onCreateUser","options","user","profile","services","facebook","picture","id","email","twitter","profile_image_url_https","name","screenName","google","given_name","family_name","linkedin","pictureUrl","firstName","lastName","emailAddress","validateNewUser","console","log","tmp","findOne","msg","t1","t2","push","password","length","s","formatArray","Error","arr","con","outStr","join","slice","after","userId","toUpdate","Date","mobile","references","hasResume","hasLandlordRef","hasGovtID","employerName","employerTakeHome","hasWorkRef","hasPassport","hasPPS","hasFinancialRef","others","req","Collections","EmailEnquiries","message","$exists","$gt","sort","createdAt","_id","$set","call","methods","args","clientUserId","newPassword","setPassword","logout","currentUser","isPublic","undefined","username","unblock","slugify","u1","number","isSocialAccount","findUserByEmail","find","fetch","social","error","reason","hasPasswordSet","e","text","a","b","p","RegExp","split","toString","toLowerCase","replace","c","charAt","indexOf"],"mappings":"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","sourcesContent":["/**\n * Created by njanjanam on 08/04/2017.\n */\n\n// Deny all client-side updates to user documents\n// Meteor.users.deny({\n//     update() { return true; }\n// });\nMeteor.users.deny({\n    insert() { return true; },\n    update() { return true; },\n    remove() { return true; }\n});\nAccounts.onCreateUser(function(options, user) {\n    //@RELATIVE: imports/ui/templates/accounts/signUp/signUp.js\n\n    if (options.profile) {\n        if(user.services.facebook){\n            options.profile.picture = \"http://graph.facebook.com/\" + user.services.facebook.id + \"/picture/?width=40\";//?type=large\n            options.profile.email = user.services.facebook.email ;\n        }\n        if(user.services.twitter){\n            options.profile.picture = user.services.twitter.profile_image_url_https;//?type=large\n            options.profile.name = user.services.twitter.screenName ;\n            options.profile.email = \"\";//Twitter doesn' give email.\n        }\n        if(user.services.google){\n            options.profile.picture = user.services.google.picture+\"?sz=40\";\n            options.profile.name = user.services.google.given_name + user.services.google.family_name;\n            options.profile.email = user.services.google.email;\n        }\n        if(user.services.linkedin){\n            options.profile.picture = user.services.linkedin.pictureUrl;\n            options.profile.name = user.services.linkedin.firstName + user.services.linkedin.lastName;\n            options.profile.email = user.services.linkedin.emailAddress;\n        }\n        // user.profile = options.profile; Dont overwrite like this\n        if(user.profile){\n            if(options.profile.name)user.profile.name = options.profile.name\n            user.profile.email = options.profile.email\n            user.profile.picture = options.profile.picture\n        }else user.profile = options.profile;\n\n    }\n    // user.createdAt = new Date();\n\n    return user;\n});\n// Meteor.users.before.insert(function (userId, user) {\n//\n// });\n//https://guide.meteor.com/accounts.html\n// https://github.com/lirbank/meteor-accounts-merge\n// Ensuring every user has an email address, should be in server-side code\nAccounts.validateNewUser((user) => {\n    console.log('In validate new user');\n    console.log(user);\n\n    if(user.profile.email){\n        var tmp = Meteor.users.findOne({'profile.email':user.profile.email});\n        var msg = '';var t1 = []; var t2=[];\n        if(tmp)\n        if(tmp.services){\n            if(tmp.services.facebook){\n                t1.push('Facebook');\n                t2.push('Facebook');\n                // msg = 'Existing Facebook account exists, please login with your Facebook account.'\n            }\n            if(tmp.services.twitter){\n                t1.push('Twitter')\n                t2.push('Twitter')\n            }\n            if(tmp.services.google){\n                t1.push('Google')\n                t2.push('Google')\n            }\n            if(tmp.services.linkedin){\n                t1.push('LinkedIn')\n                t2.push('LinkedIn')\n            }\n            if(tmp.services.password){\n                t1.push('Password');\n                t2.push('Username-password');\n            }\n        }\n        if(t1.length){\n            var s = t1.length>1 ? 's' :''\n            msg = 'Existing '+formatArray(t1)+' account'+s+' found, please login with your '+formatArray(t2,'or')+'.'\n            throw new Meteor.Error('account-exists', msg);\n        }\n\n    }\n\n    // Return true to allow user creation to proceed\n    return true;\n});\nfunction formatArray(arr, con='and'){\n    var outStr = \"\";\n    if (arr.length === 1) {\n        outStr = arr[0];\n    } else if (arr.length === 2) {\n        //joins all with \"and\" but no commas\n        //example: \"bob and sam\"\n        outStr = arr.join(' '+con+' ');\n    } else if (arr.length > 2) {\n        //joins all with commas, but last one gets \", and\" (oxford comma!)\n        //example: \"bob, joe, and sam\"\n        outStr = arr.slice(0, -1).join(', ') + ' '+con+' ' + arr.slice(-1);\n    }\n    return outStr;\n}\nMeteor.users.after.insert(function (userId, user) {\n\n    console.log(user);\n\n    var toUpdate = {\n        \"profile.role\" : \"agent\",\n        \"profile.personalMessage\" : \"\",\n        \"lastLoginDate\": new Date(),\n        \"profile.isPublic\":false\n    }\n\n    if(!user.profile.picture)toUpdate[\"profile.picture\"] = \"\";\n    if(!user.profile.mobile)toUpdate[\"profile.mobile\"] = \"\";\n    if(!user.profile.email)toUpdate[\"profile.email\"] = \"\";\n\n\n    var references = {};\n    references.hasResume = false;\n    references.hasLandlordRef = false;\n    references.hasGovtID = false;\n    references.employerName = \"\";\n    references.employerTakeHome = \"\";\n    references.hasWorkRef = false;\n    references.hasPassport = false;\n    references.hasPPS = false;\n    references.hasFinancialRef = false;\n    references.others = [];\n\n    toUpdate[\"profile.references\"] = references ;\n\n    console.log(\"Account Created hook: \")\n\n    if(user.profile.email){//Check if this user already has any emailEnquiry with us?\n        let req = Collections.EmailEnquiries.findOne({email: user.profile.email,message:{$exists:true, $gt: \"\" } },{sort:{createdAt:-1}});\n        if(req){\n            toUpdate['profile.personalMessage'] = req.message;\n        }\n    }\n\n    Meteor.users.update({\n        \"_id\": user._id\n    }, {\n        $set: toUpdate\n    });\n\n    // if(!user.services.password && user.profile.email){\n    //     Accounts.sendEnrollmentEmail(user._id);\n    // }\n\n    // Meteor.call('sendWelcomeEmailCustom',[userId]); Moved to server side in Accounts.onCreateUser\n    // var smsText = 'Hi '+fullName+'. Welcome to SpotMyCrib. ';//Please verify your mobile number and email id.\n    // Meteor.call('sendSMS',[mobile, smsText]);\n\n    Meteor.call('sendWelcomeEmailCustom',[user._id]);\n});\n\nMeteor.methods({\n    'setUserPwd':function(args){\n        var clientUserId = args[0]\n        var newPassword = args[1]\n        const userId  = Meteor.userId();\n        if(clientUserId!=userId) throw new Meteor.Error(400, 'Invalid user, please re-login and try again. ');\n\n        Accounts.setPassword(userId, newPassword,{logout:false});\n    },\n    'togglePublicProfileSetting':function () {\n        console.log('togglePublicProfileSetting called.')\n        var currentUser = Meteor.user();\n        if(!currentUser){\n            throw new Meteor.Error(500, 'Error 500: Invalid user', 'You need to login first.');\n        }\n        var update =currentUser.profile.isPublic;\n\n        if(update==undefined)update = true;//First time, users get the option of public to true.\n        else{\n            if(update)update=false;\n            else update =true;\n        }\n\n        Meteor.users.update({\n            \"_id\": currentUser._id\n        }, {\n            $set: {\n                \"profile.isPublic\" :update\n            }\n        });\n\n        if(update){//If its true\n            if(!currentUser.profile.username) {//Check if user name doesnt exists\n                Meteor.call('generateUsername',currentUser._id);\n            }\n        }\n\n    },\n    'userLoggedIn':function () {\n        // Let other method calls from the same client start running,\n        // without waiting for the email sending to complete.\n        this.unblock();\n\n        var currentUser = Meteor.userId();\n        if(!currentUser){\n            throw new Meteor.Error(500, 'Error 500: Invalid user', 'You need to login first.');\n        }\n\n        Meteor.users.update({\n            \"_id\": currentUser\n        }, {\n            $set: {\n                \"lastLoginDate\" :new Date()\n            }\n        });\n\n    },\n    'generateUsername'(userId) {\n        this.unblock();\n        var currentUser = Meteor.userId();\n        if(!currentUser){\n            throw new Meteor.Error(500, 'Error 500: Invalid user', 'You need to login first.');\n        }\n        var user = Meteor.user(userId);\n        if(!user)throw new Meteor.Error(500, 'Error 500: Invalid user', 'Please send a valid userID');\n        console.log('user found: '+user._id)\n\n        let username = slugify(user.profile.name);\n        if(!username)return false;\n        let u1 = Meteor.users.findOne({ \"profile.username\":username });\n\n        let number = 0;\n\n        while(u1) {\n            number++;\n            username = slugify(user.profile.name+number);\n            u1 = Meteor.users.findOne({ \"profile.username\":username });\n        }\n        if(username){\n            Accounts.users.update(user._id,{\n                $set: {\n                    \"profile.username\" :username\n                }\n            });\n        }\n        return username;\n    },\n    isSocialAccount:function(email){\n        // new SimpleSchema({\n        //     email: { type: [email] }\n        // }).validate({ email });\n\n        // User has no password set\n        var user = Accounts.findUserByEmail(email)\n        if(!user){//Not found in generic way\n            var users = Meteor.users.find({'profile.email':email}).fetch()\n            if(users.length)user= users[0];\n        }\n        if(user){\n            var social = '';\n            if(user.services.facebook)social = 'Facebook';\n            if(user.services.twitter)social = 'Twitter';\n            if(user.services.google)social = 'Google';\n            if(user.services.linkedin)social = 'LinkedIn';\n\n            if(social) return {\n                error:false,\n                reason: social+' user found. Please try login with '+social+'.'\n            }\n        }\n        return {\n            error:'NoUser',\n            reason:'User not found'\n        }\n    },\n    hasPasswordSet:function(){\n        // new SimpleSchema({\n        //     email: { type: [email] }\n        // }).validate({ email });\n\n        var user = Meteor.user();\n        if(!user)return false;\n\n        try{\n            if(user.services.password) return true;\n        }catch(e){\n            console.log(e)\n        }\n        return false;\n    }\n})\nfunction slugify (text) {\n    if(!text)return '';\n    const a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;'\n    const b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------'\n    const p = new RegExp(a.split('').join('|'), 'g')\n\n    return text.toString().toLowerCase()\n        .replace(/\\s+/g, '')           // Replace spaces with \"\"\n        .replace(p, c =>\n            b.charAt(a.indexOf(c)))     // Replace special chars\n        .replace(/&/g, '-and-')         // Replace & with ''\n        .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n        .replace(/\\-\\-+/g, '-')         // Replace multiple - with single ''\n        .replace(/^-+/, '')             // Trim - from start of text\n        .replace(/-+$/, '')             // Trim - from end of text\n}"]},"sourceType":"module","hash":"2f3214210a155cef6999248845029a4649e8f09e"}
