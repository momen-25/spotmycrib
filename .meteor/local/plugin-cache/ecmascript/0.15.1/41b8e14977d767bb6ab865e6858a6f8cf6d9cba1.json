{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/imports/api/profile.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/api/profile.js","filename":"/home/momen/projects/spotmycrib-master/imports/api/profile.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/imports/api/profile.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/profile.js"}},"code":"module.link(\"./collections.js\");\nvar check;\nmodule.link(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 0);\nMeteor.methods({\n  updateReferenceFile: function (args) {\n    // check([], []);\n    console.log(\"server method updateReferenceFile called\");\n    var userId = Meteor.userId();\n    var p1 = '';\n    var p2 = '';\n\n    switch (args[0]) {\n      case \"Resume\":\n        p1 = \"hasResume\";\n        p2 = \"resume\";\n        break;\n\n      case \"Work Reference\":\n        p1 = \"hasWorkRef\";\n        p2 = \"workRef\";\n        break;\n\n      case \"Landlord Reference\":\n        p1 = \"hasLandlordRef\";\n        p2 = \"landlordRef\";\n        break;\n\n      case \"Financial Reference\":\n        p1 = \"hasFinancialRef\";\n        p2 = \"financialRef\";\n        break;\n\n      case \"Government ID\":\n        p1 = \"hasGovtID\";\n        p2 = \"govtID\";\n        break;\n\n      case \"Passport\":\n        p1 = \"hasPassport\";\n        p2 = \"passport\";\n        break;\n\n      case \"PPS\":\n        p1 = \"hasPPS\";\n        p2 = \"PPS\";\n        break;\n    }\n\n    if (p1 && p2) {\n      p1 = \"profile.references.\" + p1;\n      p2 = \"profile.references.\" + p2;\n      var setObj = {};\n      setObj[p1] = true;\n      setObj[p2] = args[1];\n      console.log(p1);\n      console.log(p2);\n      console.log(setObj);\n      Meteor.users.update(userId, {\n        $set: setObj\n      });\n    }\n\n    return {\n      status: 'Success'\n    };\n  },\n  updateMobile: function (newMobile) {\n    // check(newMobile, []);\n    console.log(\"server method updateMobile called\");\n    var userId = Meteor.userId();\n    Meteor.users.update({\n      \"_id\": userId\n    }, {\n      $set: {\n        \"profile.mobile\": newMobile,\n        \"profile.isMobileVerified\": false\n      }\n    });\n    return {\n      status: 'Success'\n    };\n  },\n  updateEmployerName: function (newEmp) {\n    check(newEmp, String);\n\n    if (!newEmp.length || newEmp.length < 2) {\n      throw new Meteor.Error(500, 'Invalid employee name', 'Employee name cannot be less then 2 characters.');\n    }\n\n    console.log(\"server method updateEmployerName called: \" + newEmp);\n    var userId = Meteor.userId();\n    Meteor.users.update({\n      \"_id\": userId\n    }, {\n      $set: {\n        \"profile.references.employerName\": newEmp\n      }\n    });\n    return {\n      status: 'Success'\n    };\n  },\n  updateEmployerTakeHome: function (salary) {\n    check(salary, Number);\n\n    if (salary < 0 || salary > Number.MAX_VALUE) {\n      throw new Meteor.Error(500, 'Invalid employee take home', 'Employee take home salary cannot be less then 0 or too large.');\n    }\n\n    console.log(\"server method updateEmployerTakeHome called: \" + salary);\n    var userId = Meteor.userId();\n    Meteor.users.update({\n      \"_id\": userId\n    }, {\n      $set: {\n        \"profile.references.employerTakeHome\": salary\n      }\n    });\n    return {\n      status: 'Success'\n    };\n  },\n  sendOTP: function (args) {\n    check(args, Match.Any);\n    console.log(\"server method sendOTP called\");\n\n    if (!isLoggedOn()) {\n      throw new Meteor.Error(500, 'Error 500: Login needed', 'Please login before you request.');\n    }\n\n    var user = Meteor.user();\n\n    if (user.profile.isMobileVerified) {\n      throw new Meteor.Error(500, 'Error 500: Mobile already verified. ', 'Your mobile is already verified.');\n    } //DON'T need below code as we will be using this method for both send and RESEND.\n    //if(user.profile.OTPValue){\n    //  var today = new Date();\n    //  var OTPSentOn = new Date(user.profile.OTPSentOn);\n    //  var diffMs = (OTPSentOn - today); // milliseconds between now & Christmas\n    //  var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); // minutes\n    //  if(diffMins > 15){//OTP has expired\n    //\n    //  }else{//OTP previous OTP is still valid.\n    //\n    //  }\n    //}\n\n\n    var newOTP = Math.floor(100000 + Math.random() * 900000);\n    var userEmail = user.profile.email;\n    var username = user.profile.name; //TODO separate SMS sending in an this.unblock method\n\n    /* Send OTP via email */\n\n    Meteor.call(\"sendNotificationEmail\", {\n      template: \"otpEmail\",\n      user: {\n        profile: {\n          username: username\n        }\n      },\n      otp: newOTP,\n      subject: \"IBidMyHome OTP: Verify your mobile number\",\n      mailTo: user.profile.email\n    });\n    /* Send OTP via mobile*/\n\n    var OPTsmsText = 'Your OTP is: ' + newOTP;\n    var APIURL = 'http://atrans.smscuppa.com/sendsms.jsp?user=mybids&password=mybids&mobiles=' + user.profile.mobile + '&general=' + OPTsmsText + '&senderid=MYBIDS&version=3';\n    var APIURL = 'http://atrans.smscuppa.com/sendsms.jsp';\n    var options = {\n      \"params\": {\n        \"user\": \"mybids\",\n        \"password\": \"mybids\",\n        \"mobiles\": user.profile.mobile,\n        \"sms\": OPTsmsText,\n        \"senderid\": \"MYBIDS\",\n        \"version\": \"3\"\n      },\n      \"headers\": {//\"X-API-KEY\" : APIKey,\n        //\"X-Auth-Token\" : AUTHToken\n      }\n    };\n    var response = HTTP.get(APIURL, options);\n    Meteor.users.update({\n      \"_id\": user._id\n    }, {\n      $currentDate: {\n        \"profile.OTPSentOn\": {\n          $type: \"timestamp\"\n        }\n      },\n      $set: {\n        \"profile.OTPValue\": newOTP\n      }\n    });\n    return {\n      status: 'Success'\n    };\n  },\n  verifyOTP: function (args) {\n    check(args, Match.Any);\n    var otp = args[0];\n    console.log(\"server method verifyOTP called\");\n\n    if (!isLoggedOn()) {\n      throw new Meteor.Error(500, 'Error 500: Login needed', 'Please login before you request.');\n    }\n\n    var user = Meteor.user();\n\n    if (user.profile.OTPValue) {\n      var today = new Date();\n      var OTPSentOn = new Date(user.profile.OTPSentOn);\n      var diffMs = OTPSentOn - today; // milliseconds between now & Christmas\n\n      var diffMins = Math.round(diffMs % 86400000 % 3600000 / 60000); // minutes\n\n      if (diffMins > 15) {\n        //OTP has expired\n        throw new Meteor.Error(500, 'Error 500: OTP has expired', 'Your OTP has expired.');\n      } else {//OTP previous OTP is still valid.\n      }\n    } else {\n      throw new Meteor.Error(500, 'Error 500: OTP is not valid', 'You need an OTP to verify.');\n    }\n\n    if (user.profile.OTPValue == otp) {\n      Meteor.users.update({\n        \"_id\": user._id\n      }, {\n        $set: {\n          \"profile.isMobileVerified\": true\n        }\n      });\n    } else {\n      throw new Meteor.Error(500, 'Error 500: OTP is not valid', 'OTP entered is wrong.');\n    }\n\n    return {\n      status: 'Success'\n    };\n  }\n});\n\nfunction randomString(length, chars) {\n  var mask = '';\n  if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';\n  if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  if (chars.indexOf('#') > -1) mask += '0123456789';\n  if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:\";\\'<>?,./|\\\\';\n  var result = '';\n\n  for (var i = length; i > 0; --i) {\n    result += mask[Math.floor(Math.random() * mask.length)];\n  }\n\n  return result;\n}","map":{"version":3,"sources":["imports/api/profile.js"],"names":["module","link","check","v","Meteor","methods","updateReferenceFile","args","console","log","userId","p1","p2","setObj","users","update","$set","status","updateMobile","newMobile","updateEmployerName","newEmp","String","length","Error","updateEmployerTakeHome","salary","Number","MAX_VALUE","sendOTP","Match","Any","isLoggedOn","user","profile","isMobileVerified","newOTP","Math","floor","random","userEmail","email","username","name","call","template","otp","subject","mailTo","OPTsmsText","APIURL","mobile","options","response","HTTP","get","_id","$currentDate","$type","verifyOTP","OTPValue","today","Date","OTPSentOn","diffMs","diffMins","round","randomString","chars","mask","indexOf","result","i"],"mappings":"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","sourcesContent":["import \"./collections.js\";\nimport {check} from \"meteor/check\";\n\nMeteor.methods({\n  updateReferenceFile: function(args){\n    // check([], []);\n    console.log(\"server method updateReferenceFile called\")\n\n    const userId = Meteor.userId();\n    var p1='';\n    var p2='';\n    switch (args[0]){\n        case \"Resume\": p1 = \"hasResume\"; p2 = \"resume\"; break;\n        case \"Work Reference\": p1 = \"hasWorkRef\"; p2 = \"workRef\"; break;\n        case \"Landlord Reference\": p1 = \"hasLandlordRef\"; p2 = \"landlordRef\"; break;\n        case \"Financial Reference\": p1 = \"hasFinancialRef\"; p2 = \"financialRef\"; break;\n        case \"Government ID\": p1 = \"hasGovtID\"; p2 = \"govtID\"; break;\n        case \"Passport\": p1 = \"hasPassport\"; p2 = \"passport\"; break;\n        case \"PPS\": p1 = \"hasPPS\"; p2 = \"PPS\"; break;\n       }\n\n    if(p1 && p2) {\n      p1 = \"profile.references.\"+p1\n      p2 = \"profile.references.\"+p2\n        var setObj = {}\n        setObj[p1] =true;\n        setObj[p2]= args[1]\n\n        console.log(p1);\n        console.log(p2);\n        console.log(setObj);\n        Meteor.users.update(userId, {\n            $set: setObj\n        });\n    }\n    return {\n      status: 'Success'\n    }\n\n  },\n  updateMobile: function(newMobile){\n    // check(newMobile, []);\n    console.log(\"server method updateMobile called\")\n    const userId = Meteor.userId();\n    Meteor.users.update({\n      \"_id\": userId\n    }, {\n      $set: {\n        \"profile.mobile\": newMobile,\n        \"profile.isMobileVerified\": false\n      }\n    });\n    return {\n      status: 'Success'\n    }\n\n  },\n  updateEmployerName: function(newEmp){\n    check(newEmp, String);\n    if(!newEmp.length || newEmp.length<2){\n        throw new Meteor.Error(500, 'Invalid employee name', 'Employee name cannot be less then 2 characters.');\n    }\n    console.log(\"server method updateEmployerName called: \"+newEmp)\n    const userId = Meteor.userId();\n    Meteor.users.update({\n      \"_id\": userId\n    }, {\n      $set: {\n        \"profile.references.employerName\": newEmp\n      }\n    });\n    return {\n      status: 'Success'\n    }\n\n  },\n  updateEmployerTakeHome: function(salary){\n    check(salary, Number);\n    if(salary<0 || salary > Number.MAX_VALUE){\n        throw new Meteor.Error(500, 'Invalid employee take home', 'Employee take home salary cannot be less then 0 or too large.');\n    }\n    console.log(\"server method updateEmployerTakeHome called: \"+salary)\n    const userId = Meteor.userId();\n    Meteor.users.update({\n      \"_id\": userId\n    }, {\n      $set: {\n        \"profile.references.employerTakeHome\": salary\n      }\n    });\n    return {\n      status: 'Success'\n    }\n\n  },\n  sendOTP: function(args){\n    check(args, Match.Any);\n    console.log(\"server method sendOTP called\")\n\n    if(!isLoggedOn()){\n      throw new Meteor.Error(500, 'Error 500: Login needed', 'Please login before you request.');\n    }\n\n    const user = Meteor.user();\n    if( user.profile.isMobileVerified){\n      throw new Meteor.Error(500, 'Error 500: Mobile already verified. ', 'Your mobile is already verified.');\n    }\n\n    //DON'T need below code as we will be using this method for both send and RESEND.\n    //if(user.profile.OTPValue){\n    //  var today = new Date();\n    //  var OTPSentOn = new Date(user.profile.OTPSentOn);\n    //  var diffMs = (OTPSentOn - today); // milliseconds between now & Christmas\n    //  var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); // minutes\n    //  if(diffMins > 15){//OTP has expired\n    //\n    //  }else{//OTP previous OTP is still valid.\n    //\n    //  }\n    //}\n\n    const newOTP    = Math.floor(100000 + Math.random() * 900000);\n    const userEmail = user.profile.email;\n    const username  = user.profile.name;\n\n    //TODO separate SMS sending in an this.unblock method\n\n    /* Send OTP via email */\n    Meteor.call(\"sendNotificationEmail\", {\n      template: \"otpEmail\",\n      user    : {\n        profile: {\n          username: username\n        }\n      },\n      otp     : newOTP,\n      subject : \"IBidMyHome OTP: Verify your mobile number\",\n      mailTo  : user.profile.email\n    });\n\n    /* Send OTP via mobile*/\n    var OPTsmsText = 'Your OTP is: ' + newOTP;\n\n    var APIURL = 'http://atrans.smscuppa.com/sendsms.jsp?user=mybids&password=mybids&mobiles='+user.profile.mobile+'&general='+OPTsmsText+'&senderid=MYBIDS&version=3';\n    var APIURL = 'http://atrans.smscuppa.com/sendsms.jsp';\n\n    var options = {\n      \"params\":{\n        \"user\" : \"mybids\",\n        \"password\" : \"mybids\",\n        \"mobiles\":user.profile.mobile,\n        \"sms\":OPTsmsText,\n        \"senderid\":\"MYBIDS\",\n        \"version\":\"3\"\n      },\n      \"headers\":{\n        //\"X-API-KEY\" : APIKey,\n        //\"X-Auth-Token\" : AUTHToken\n      }\n    }\n    var response  = HTTP.get(APIURL, options)\n\n\n    Meteor.users.update({\n      \"_id\": user._id\n    }, {\n      $currentDate: {\n        \"profile.OTPSentOn\": { $type: \"timestamp\" }\n      },\n      $set: {\n        \"profile.OTPValue\": newOTP\n      }\n    });\n\n\n    return {\n      status: 'Success'\n    }\n\n  },\n  verifyOTP: function(args){\n    check(args, Match.Any);\n    var otp = args[0];\n    console.log(\"server method verifyOTP called\")\n\n    if(!isLoggedOn()){\n      throw new Meteor.Error(500, 'Error 500: Login needed', 'Please login before you request.');\n    }\n\n    const user = Meteor.user();\n\n    if(user.profile.OTPValue){\n      var today = new Date();\n      var OTPSentOn = new Date(user.profile.OTPSentOn);\n      var diffMs = (OTPSentOn - today); // milliseconds between now & Christmas\n      var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); // minutes\n      if(diffMins > 15){//OTP has expired\n        throw new Meteor.Error(500, 'Error 500: OTP has expired', 'Your OTP has expired.');\n      }else{//OTP previous OTP is still valid.\n\n      }\n    }else{\n      throw new Meteor.Error(500, 'Error 500: OTP is not valid', 'You need an OTP to verify.');\n    }\n\n\n    if(user.profile.OTPValue == otp) {\n      Meteor.users.update({\n        \"_id\": user._id\n      }, {\n        $set: {\n          \"profile.isMobileVerified\": true\n        }\n      });\n    }else{\n      throw new Meteor.Error(500, 'Error 500: OTP is not valid', 'OTP entered is wrong.');\n    }\n\n    return {\n      status: 'Success'\n    }\n\n  }\n})\n\nfunction randomString(length, chars) {\n  var mask = '';\n  if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';\n  if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  if (chars.indexOf('#') > -1) mask += '0123456789';\n  if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:\";\\'<>?,./|\\\\';\n  var result = '';\n  for (var i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];\n  return result;\n}\n"]},"sourceType":"module","hash":"41b8e14977d767bb6ab865e6858a6f8cf6d9cba1"}
