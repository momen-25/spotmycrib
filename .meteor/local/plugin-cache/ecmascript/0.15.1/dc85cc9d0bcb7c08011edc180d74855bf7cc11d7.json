{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","filename":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js"}},"code":"wrapSession = function (sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n\n  sessionProto.processMessage = function (msg) {\n    if (true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n\n      if (msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id); //use JSON stringify to save the CPU\n\n        var startData = {\n          userId: this.userId,\n          params: JSON.stringify(msg.params)\n        };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n\n        if (msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      } // Update session last active time\n\n\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n\n    return originalProcessMessage.call(this, msg);\n  }; //adding the method context to the current fiber\n\n\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n\n  sessionProto.protocol_handlers.method = function (msg, unblock) {\n    var self = this; //add context\n\n    var kadiraInfo = msg.__kadiraInfo;\n\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo); // end wait event\n\n\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  }; //to capture the currently processing message\n\n\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n\n  sessionProto.protocol_handlers.sub = function (msg, unblock) {\n    var self = this; //add context\n\n    var kadiraInfo = msg.__kadiraInfo;\n\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo); // end wait event\n\n\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  }; //to capture the currently processing message\n\n\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n\n  sessionProto.protocol_handlers.unsub = function (msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  }; //track method ending (to get the result of error)\n\n\n  var originalSend = sessionProto.send;\n\n  sessionProto.send = function (msg) {\n    if (msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n\n      if (kadiraInfo) {\n        if (msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack']); // pick the error from the wrapped method handler\n\n\n          if (kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack']); // see wrapMethodHanderForErrors() method def for more info\n\n            if (error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {\n            error: error\n          });\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        } //processing the message\n\n\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace); // error may or may not exist and error tracking can be disabled\n\n        if (error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        } //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n\n\n        Kadira._setInfo(null);\n      }\n    }\n\n    return originalSend.call(this, msg);\n  };\n}; // wrap existing method handlers for capturing errors\n\n\n_.each(Meteor.server.method_handlers, function (handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n}); // wrap future method handlers for capturing errors\n\n\nvar originalMeteorMethods = Meteor.methods;\n\nMeteor.methods = function (methodMap) {\n  _.each(methodMap, function (handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n\n  originalMeteorMethods(methodMap);\n};\n\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function () {\n    try {\n      return originalHandler.apply(this, arguments);\n    } catch (ex) {\n      if (ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if (typeof ex !== 'object') {\n          ex = {\n            message: ex,\n            stack: ex\n          };\n        } // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n\n\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {\n            stack: ex.stack,\n            source: 'method'\n          };\n        }\n\n        Kadira._getInfo().currentError = ex;\n      }\n\n      throw ex;\n    }\n  };\n}","map":{"version":3,"sources":["packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js"],"names":["wrapSession","sessionProto","originalProcessMessage","processMessage","msg","kadiraInfo","session","id","userId","trace","Kadira","tracer","start","waitTimeBuilder","register","startData","params","JSON","stringify","event","waitEventId","_waitEventId","__kadiraInfo","EventBus","emit","models","pubsub","_trackSub","system","handleSessionActivity","call","originalMethodHandler","protocol_handlers","method","unblock","self","_setInfo","waitList","build","eventEnd","waitOn","trackWaitTime","response","env","withValue","orginalSubHandler","sub","orginalUnSubHandler","unsub","originalSend","send","_getInfo","error","_","pick","currentError","stack","endLastEvent","buildTrace","methods","processMethod","options","enableErrorTracking","trackError","each","Meteor","server","method_handlers","handler","name","wrapMethodHanderForErrors","originalMeteorMethods","methodMap","originalHandler","apply","arguments","ex","message","source"],"mappings":"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","sourcesContent":["wrapSession = function(sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n  sessionProto.processMessage = function(msg) {\n    if(true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n\n      if(msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id);\n\n        //use JSON stringify to save the CPU\n        var startData = { userId: this.userId, params: JSON.stringify(msg.params) };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n\n        if(msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      }\n\n      // Update session last active time\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n\n    return originalProcessMessage.call(this, msg);\n  };\n\n  //adding the method context to the current fiber\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n  sessionProto.protocol_handlers.method = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n  sessionProto.protocol_handlers.sub = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n  sessionProto.protocol_handlers.unsub = function(msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  };\n\n  //track method ending (to get the result of error)\n  var originalSend = sessionProto.send;\n  sessionProto.send = function(msg) {\n    if(msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n      if(kadiraInfo) {\n        if(msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack']);\n\n          // pick the error from the wrapped method handler\n          if(kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack']);\n            // see wrapMethodHanderForErrors() method def for more info\n            if(error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {error: error});\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        }\n\n        //processing the message\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace);\n\n        // error may or may not exist and error tracking can be disabled\n        if(error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        }\n\n        //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n        Kadira._setInfo(null);\n      }\n    }\n\n    return originalSend.call(this, msg);\n  };\n};\n\n// wrap existing method handlers for capturing errors\n_.each(Meteor.server.method_handlers, function(handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n});\n\n// wrap future method handlers for capturing errors\nvar originalMeteorMethods = Meteor.methods;\nMeteor.methods = function(methodMap) {\n  _.each(methodMap, function(handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n  originalMeteorMethods(methodMap);\n};\n\n\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function() {\n    try{\n      return originalHandler.apply(this, arguments);\n    } catch(ex) {\n      if(ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if(typeof ex !== 'object') {\n          ex = {message: ex, stack: ex};\n        }\n        // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {stack: ex.stack, source: 'method'};\n        }\n        Kadira._getInfo().currentError = ex;\n      }\n      throw ex;\n    }\n  }\n}\n"]},"sourceType":"module","hash":"dc85cc9d0bcb7c08011edc180d74855bf7cc11d7"}
