{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/wrap_session.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/montiapm:agent/lib/hijack/wrap_session.js","filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/wrap_session.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/wrap_session.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/montiapm:agent/lib/hijack/wrap_session.js"}},"code":"let MeteorDebugIgnore;\nmodule.link(\"./error\", {\n  MeteorDebugIgnore(v) {\n    MeteorDebugIgnore = v;\n  }\n\n}, 0);\nconst MAX_PARAMS_LENGTH = 4000;\n\nwrapSession = function (sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n\n  sessionProto.processMessage = function (msg) {\n    if (true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n\n      if (msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id);\n\n        let params = Kadira.tracer._applyObjectFilters(msg.params || []); // use JSON instead of EJSON to save the CPU\n\n\n        let stringifiedParams = JSON.stringify(params); // The params could be several mb or larger.\n        // Truncate if it is large\n\n        if (stringifiedParams.length > MAX_PARAMS_LENGTH) {\n          stringifiedParams = \"Monti APM: params are too big. First \".concat(MAX_PARAMS_LENGTH, \" characters: \").concat(stringifiedParams.slice(0, MAX_PARAMS_LENGTH));\n        }\n\n        var startData = {\n          userId: this.userId,\n          params: stringifiedParams\n        };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n\n        if (msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      } // Update session last active time\n\n\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n\n    return originalProcessMessage.call(this, msg);\n  }; // adding the method context to the current fiber\n\n\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n\n  sessionProto.protocol_handlers.method = function (msg, unblock) {\n    var self = this; //add context\n\n    var kadiraInfo = msg.__kadiraInfo;\n\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo); // end wait event\n\n\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  }; //to capture the currently processing message\n\n\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n\n  sessionProto.protocol_handlers.sub = function (msg, unblock) {\n    var self = this; //add context\n\n    var kadiraInfo = msg.__kadiraInfo;\n\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo); // end wait event\n\n\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  }; //to capture the currently processing message\n\n\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n\n  sessionProto.protocol_handlers.unsub = function (msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  }; //track method ending (to get the result of error)\n\n\n  var originalSend = sessionProto.send;\n\n  sessionProto.send = function (msg) {\n    if (msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n\n      if (kadiraInfo) {\n        if (msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack', 'details']); // pick the error from the wrapped method handler\n\n\n          if (kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack', 'details']); // see wrapMethodHanderForErrors() method def for more info\n\n            if (error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {\n            error: error\n          });\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        } //processing the message\n\n\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace); // error may or may not exist and error tracking can be disabled\n\n        if (error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        } //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n\n\n        Kadira._setInfo(null);\n      }\n    }\n\n    return originalSend.call(this, msg);\n  };\n}; // wrap existing method handlers for capturing errors\n\n\n_.each(Meteor.server.method_handlers, function (handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n}); // wrap future method handlers for capturing errors\n\n\nvar originalMeteorMethods = Meteor.methods;\n\nMeteor.methods = function (methodMap) {\n  _.each(methodMap, function (handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n\n  originalMeteorMethods(methodMap);\n};\n\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function () {\n    try {\n      return originalHandler.apply(this, arguments);\n    } catch (ex) {\n      if (ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if (typeof ex !== 'object') {\n          ex = {\n            message: ex,\n            stack: ex\n          };\n        } // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n        // If error tracking is disabled, we do not modify the stack since\n        // it would be shown as an object in the logs\n\n\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {\n            stack: ex.stack,\n            source: 'method',\n            [MeteorDebugIgnore]: true\n          };\n          Kadira._getInfo().currentError = ex;\n        }\n      }\n\n      throw ex;\n    }\n  };\n}","map":{"version":3,"sources":["packages/montiapm:agent/lib/hijack/wrap_session.js"],"names":["MeteorDebugIgnore","module","link","v","MAX_PARAMS_LENGTH","wrapSession","sessionProto","originalProcessMessage","processMessage","msg","kadiraInfo","session","id","userId","trace","Kadira","tracer","start","waitTimeBuilder","register","params","_applyObjectFilters","stringifiedParams","JSON","stringify","length","slice","startData","event","waitEventId","_waitEventId","__kadiraInfo","EventBus","emit","models","pubsub","_trackSub","system","handleSessionActivity","call","originalMethodHandler","protocol_handlers","method","unblock","self","_setInfo","waitList","build","eventEnd","waitOn","trackWaitTime","response","env","withValue","orginalSubHandler","sub","orginalUnSubHandler","unsub","originalSend","send","_getInfo","error","_","pick","currentError","stack","endLastEvent","buildTrace","methods","processMethod","options","enableErrorTracking","trackError","each","Meteor","server","method_handlers","handler","name","wrapMethodHanderForErrors","originalMeteorMethods","methodMap","originalHandler","apply","arguments","ex","message","source"],"mappings":"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","sourcesContent":["import { MeteorDebugIgnore } from \"./error\";\n\nconst MAX_PARAMS_LENGTH = 4000\n\nwrapSession = function(sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n  sessionProto.processMessage = function(msg) {\n    if(true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n\n      if(msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id);\n\n        let params = Kadira.tracer._applyObjectFilters(msg.params || []);\n        // use JSON instead of EJSON to save the CPU\n        let stringifiedParams = JSON.stringify(params);\n\n        // The params could be several mb or larger.\n        // Truncate if it is large\n        if (stringifiedParams.length > MAX_PARAMS_LENGTH) {\n          stringifiedParams = `Monti APM: params are too big. First ${MAX_PARAMS_LENGTH} characters: ${stringifiedParams.slice(0, MAX_PARAMS_LENGTH)}`;\n        }\n\n        var startData = { userId: this.userId, params: stringifiedParams };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n\n        if(msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      }\n\n      // Update session last active time\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n\n    return originalProcessMessage.call(this, msg);\n  };\n\n  // adding the method context to the current fiber\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n  sessionProto.protocol_handlers.method = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n  sessionProto.protocol_handlers.sub = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n  sessionProto.protocol_handlers.unsub = function(msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  };\n\n  //track method ending (to get the result of error)\n  var originalSend = sessionProto.send;\n  sessionProto.send = function(msg) {\n    if(msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n      if(kadiraInfo) {\n        if(msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack', 'details']);\n\n          // pick the error from the wrapped method handler\n          if(kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack', 'details']);\n            // see wrapMethodHanderForErrors() method def for more info\n            if(error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {error: error});\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        }\n\n        //processing the message\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace);\n\n        // error may or may not exist and error tracking can be disabled\n        if(error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        }\n\n        //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n        Kadira._setInfo(null);\n      }\n    }\n\n    return originalSend.call(this, msg);\n  };\n};\n\n// wrap existing method handlers for capturing errors\n_.each(Meteor.server.method_handlers, function(handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n});\n\n// wrap future method handlers for capturing errors\nvar originalMeteorMethods = Meteor.methods;\nMeteor.methods = function(methodMap) {\n  _.each(methodMap, function(handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n  originalMeteorMethods(methodMap);\n};\n\n\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function() {\n    try{\n      return originalHandler.apply(this, arguments);\n    } catch(ex) {\n      if(ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if(typeof ex !== 'object') {\n          ex = {message: ex, stack: ex};\n        }\n        // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n        // If error tracking is disabled, we do not modify the stack since\n        // it would be shown as an object in the logs\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {stack: ex.stack, source: 'method', [MeteorDebugIgnore]: true};\n          Kadira._getInfo().currentError = ex;\n        }\n      }\n      throw ex;\n    }\n  }\n}\n"]},"sourceType":"module","hash":"29a4075fb64a202ff8eaa9913666ee03e3c39d42"}
