{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/server/core/mybids.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/core/mybids.js","filename":"/home/momen/projects/spotmycrib-master/server/core/mybids.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/server/core/mybids.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/core/mybids.js"}},"code":"let check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\n\nfunction numDifferentiation(val) {\n  if (val >= 1000000000) val = (val / 1000000000).toFixed(2) + ' Billion';else if (val >= 1000000) val = (val / 1000000).toFixed(2) + ' Million';\n  return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction titleCase(str) {\n  if (!str) return;\n  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);\n}\n\nMeteor.methods({\n  placeBid: function (args) {\n    check(args[0], String);\n    check(args[1], Number);\n    check(args[2], String);\n    if (args[3]) check(args[3], String); // check(price, Number);\n\n    var auctionId = args[0];\n    var price = args[1];\n    var bidMessage = args[2];\n    let userIdPassed = false;\n    if (args[3]) userIdPassed = args[3];\n    bidMessage = bidMessage.substring(0, 500);\n    console.log(\"server method outBid called: \" + auctionId);\n    let userId = '';\n    if (!userIdPassed) userId = Meteor.userId();else userId = userIdPassed;\n    var biduser = Meteor.users.findOne({\n      _id: userId\n    });\n    const auction = Collections.Auctions.findOne(auctionId);\n    const property = Collections.Properties.findOne(auction.propertyId);\n    const bid = Collections.Bids.findOne({\n      \"auctionId\": auctionId,\n      \"userId\": userId\n    });\n    const emailEnquiry = Collections.EmailEnquiries.findOne({\n      \"auctionId\": auctionId,\n      \"email\": biduser.profile.email\n    });\n\n    if (bid) {\n      throw new Meteor.Error(500, 'Error 500: Bid exists', 'Please wait, there might be network lag.');\n    }\n\n    var bidData = {\n      \"auctionCode\": auction.lettingAuctionCode,\n      \"auctionId\": auctionId,\n      \"userId\": userId,\n      \"yourBid\": price,\n      \"bidMessage\": bidMessage,\n      \"isArchived\": false,\n      \"chosen\": false\n    };\n    let bidId = Collections.Bids.insert(bidData);\n\n    if (bidMessage) {\n      Accounts.users.update(userId, {\n        $set: {\n          \"profile.personalMessage\": bidMessage\n        }\n      });\n    }\n\n    if (emailEnquiry) {\n      //Enquiry exists, deactivate it as now it converted into an application.\n      Collections.EmailEnquiries.update({\n        _id: emailEnquiry._id\n      }, {\n        $set: {\n          isArchived: true,\n          bidId: bidId\n        }\n      });\n    }\n\n    const agent = Accounts.users.findOne(property.createdByAgent);\n    if (!agent.profile.totalBidsReceived) agent.profile.totalBidsReceived = 0;\n    if (!agent.profile.bidsReceivedActiveAuctions) agent.profile.bidsReceivedActiveAuctions = 0;\n    if (!agent.profile.bidProfitActive) agent.profile.bidProfitActive = 0;\n    if (!agent.profile.totalBidProfit) agent.profile.totalBidProfit = 0;\n    agent.profile.totalBidsReceived++;\n    agent.profile.bidsReceivedActiveAuctions++;\n\n    if (price > auction.price) {\n      //Its in profit\n      var profit = price - auction.price;\n      var oldProfit = auction.auctionBidProfit;\n      if (!oldProfit) oldProfit = 0;\n\n      if (profit > oldProfit) {\n        //Update auction with auctionProfit as we hv a new highest profit\n        Collections.Auctions.update(auction._id, {\n          $set: {\n            \"auctionBidProfit\": profit\n          }\n        });\n        agent.profile.bidProfitActive = agent.profile.bidProfitActive + (profit - oldProfit);\n        agent.profile.totalBidProfit = agent.profile.totalBidProfit + (profit - oldProfit);\n      } else {//U already hv highest added to auctionBidProfit and agents bidProfit, so do nothing\n      }\n    }\n\n    Collections.Auctions.update(auction._id, {\n      $inc: {\n        \"bids\": 1\n      }\n    });\n    Accounts.users.update(agent._id, {\n      $set: {\n        \"profile.totalBidsReceived\": agent.profile.totalBidsReceived,\n        \"profile.bidsReceivedActiveAuctions\": agent.profile.bidsReceivedActiveAuctions,\n        \"profile.bidProfitActive\": agent.profile.bidProfitActive,\n        \"profile.totalBidProfit\": agent.profile.totalBidProfit\n      }\n    }); // Meteor.call('requestEmail',{\n    //     userId: biduser._id,\n    //     requestType: 'reminderUploadReferences',//This is an Ack email for all the emailEnqueries placed by user in a group of 15mns.\n    //     propertyId: property._id\n    // });\n    ///////////////////////////MAIL CODE - Bid Successfully Placed\n\n    property.type = titleCase(property.type);\n    property.address.address = titleCase(property.address.address);\n    property.address.area = titleCase(property.address.area);\n    property.address.county = titleCase(property.address.county);\n    var globalConfig = Collections.Config.findOne();\n    let userFirstName = biduser.profile.name;\n\n    if (userFirstName) {\n      userFirstName = titleCase(userFirstName.split(' ')[0]);\n    }\n\n    let propertyImage = '';\n\n    if (property.gallery) {\n      if (property.gallery[0]) propertyImage = property.gallery[0];\n      propertyImage.titleText = 'Photo 1 of ' + property.address.address + (property.address.area ? \", \" + property.address.area : '') + (property.address.county ? \", \" + property.address.county : '');\n    }\n\n    var mailData = {\n      template: 'applicationPlaced',\n      subject: \"Application Successfully Placed\",\n      mailTo: biduser.profile.email,\n      // replyTo      : agent.profile.email,//He just placed the application, don't reveal the email yet, agent needs to start the communication first.\n      //mailTo: 'srikanth681@gmail.com',\n      // homepage    : Meteor.absoluteUrl(),//its done by sendNotificationEmail\n      propertyURL: FlowRouter.url('rent', {\n        slug: property.slug,\n        key: auction.lettingAuctionCode\n      }),\n      application: bidData,\n      auction: auction,\n      project: property,\n      user: biduser,\n      userFirstName: userFirstName,\n      propertyImage: propertyImage,\n      agentName: agent.profile.name,\n      agentEmail: agent.profile.email,\n      bedsCount: property.bedrooms.length,\n      offerFormated: numDifferentiation(bidData.yourBid),\n      rentFormated: numDifferentiation(auction.price)\n    };\n    Meteor.call('sendNotificationEmail', mailData);\n    var mailData = {\n      template: 'applicationReceived',\n      subject: \"Application Received\",\n      mailTo: agent.profile.email,\n      replyTo: biduser.profile.email,\n      //Agent can reach out to the person directly\n      //mailTo: 'srikanth681@gmail.com',\n      // homepage    : Meteor.absoluteUrl(),//its done by sendNotificationEmail\n      application: bidData,\n      auction: auction,\n      project: property,\n      user: biduser,\n      agent: agent,\n      bedsCount: property.bedrooms.length,\n      offerFormated: numDifferentiation(bidData.yourBid),\n      rentFormated: numDifferentiation(auction.price)\n    };\n    Meteor.call('sendNotificationEmail', mailData);\n    Meteor.call('addActivityHistory', {\n      propertyId: auction.propertyId,\n      auctionId: auction._id,\n      type: 'applicationReceived',\n      userId: biduser._id,\n      name: biduser.profile.name,\n      email: biduser.profile.email,\n      userIdPassed: userIdPassed\n    }); ///////////////////////////MAIL CODE END  - SMS CODE START ////\n\n    var smsText = 'Hi ' + biduser.profile.name + '. We have mailed your bid details and the total price to your registered mail id.'; // Meteor.call('sendSMS', [user.profile.mobile, smsText]);\n\n    return {\n      status: 'Success',\n      bidData: bidData\n    };\n  },\n  getDateFromServer: function (args) {\n    check(args, [Match.Any]);\n    return new Date();\n  },\n  updateViews: function (auctionId) {\n    // console.log(\"updateViews called for: \"+auctionId)\n    Collections.Auctions.update(auctionId, {\n      $inc: {\n        \"views\": 1\n      }\n    });\n  },\n  withdrawBid: function (auctionId) {\n    console.log('withdrawBid called');\n    check(auctionId, String);\n    var userId = Meteor.userId();\n    const bid = Collections.Bids.findOne({\n      auctionId: auctionId,\n      userId: userId\n    });\n\n    if (bid) {\n      throw new Meteor.Error(500, 'Error 500: Bid not found');\n    } //console.log(userId)\n    //console.log(bidId)\n\n\n    Collections.Bids.update({\n      \"_id\": bidId\n    }, {\n      $set: {\n        \"isArchived\": true\n      }\n    });\n    return {\n      status: 'success'\n    };\n  },\n  sendInviteForViewingEmail: function (args) {\n    // check(args, Match.Any);\n    var bidId = args[0];\n    console.log(\"server method sendInviteForViewingEmail called\");\n    console.log(bidId);\n    var bid = Collections.Bids.findOne(bidId, {\n      transform: function (data) {\n        data.user = Accounts.users.findOne(data.userId);\n        data.auction = Collections.Auctions.findOne({\n          _id: data.auctionId,\n          isArchived: false\n        });\n        data.property = Collections.Properties.findOne(data.auction.propertyId);\n        return data;\n      }\n    });\n    if (!bid) throw new Meteor.Error(500, 'Error 500: Invalid application', 'Application not found.');\n    if (bid.isArchived) throw new Meteor.Error('This application is withdrawn by the user. Please choose another application.');\n    if (!bid.user) throw new Meteor.Error(500, 'Error 500: Invalid user', 'User not found.');\n    if (!bid.auction) throw new Meteor.Error(500, 'Error 500: Property not active', 'Active property is needed to send an invite.');\n    if (!bid.property) throw new Meteor.Error(500, 'Error 500: Property not active', 'Active property is needed to send an invite.'); //In future we will have concept of archiving the property, so the same keywords like 'property not active' just like auction.\n\n    var d = new Date(args[1]);\n    if (!d) throw new Meteor.Error(500, 'Error 500: Invalid invite date', 'Please select a valid invite date.');\n    var property = bid.property;\n    var auction = bid.auction;\n    Collections.Bids.update(bidId, {\n      $set: {\n        invitedDate: new Date()\n      }\n    });\n    var options = {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    };\n    const agent = Meteor.user(); //////////// SEND MAIL to winning user\n\n    property.type = titleCase(property.type);\n    property.address.address = titleCase(property.address.address);\n    property.address.area = titleCase(property.address.area);\n    property.address.county = titleCase(property.address.county);\n    var mailData = {\n      template: 'inviteForViewing',\n      subject: \"Invite for viewing\",\n      mailTo: bid.user.profile.email,\n      replyTo: agent.profile.email,\n      inviteDateFormated: d.toLocaleTimeString(\"en-us\", options),\n      //mailTo: 'srikanth681@gmail.com',\n      homepage: Meteor.absoluteUrl(),\n      application: bid,\n      auction: auction,\n      project: property,\n      user: bid.user,\n      agent: Accounts.user(),\n      bedsCount: property.bedrooms.length,\n      offerFormated: numDifferentiation(bid.yourBid),\n      rentFormated: numDifferentiation(auction.price)\n    };\n    Meteor.call('sendNotificationEmail', mailData);\n    return {\n      status: 'Success'\n    };\n  },\n  sendInviteToApplyEmail: function (args) {\n    // check(args, Match.Any);\n    var advertisements = args[0];\n    var tenantId = args[1];\n    console.log(\"server method sendInviteToApplyEmail called\");\n    var tenant = Meteor.users.findOne(tenantId);\n    if (!tenant) throw new Meteor.Error(500, 'Error 500: Invalid tenant', 'Tenant not found.');\n    console.log(advertisements);\n    var results = Collections.Auctions.find({\n      _id: {\n        $in: advertisements\n      }\n    }, {\n      fields: {\n        lettingAuctionCode: 1,\n        propertyId: 1,\n        property: 1\n      },\n      transform: function (data) {\n        data.property = Collections.Properties.findOne(data.propertyId, {\n          fields: {\n            address: 1,\n            createdByAgent: 1,\n            createdAt: 1,\n            updatedAt: 1,\n            isArchived: 1,\n            auctionId: 1\n          }\n        });\n        return data;\n      }\n    }).fetch();\n    var advertisementCount = results.length;\n    console.log(advertisementCount);\n\n    if (!advertisementCount) {\n      //Nothing found.\n      throw new Meteor.Error(500, 'Error 500: Invalid advertisements', 'Advertisements not found.');\n    }\n\n    const agent = Meteor.user(); //////////// SEND MAIL to winning user\n\n    var mailData = {\n      template: 'inviteToApply',\n      subject: \"Invitation to apply for properties\",\n      mailTo: tenant.profile.email,\n      replyTo: agent.profile.email,\n      //mailTo: 'srikanth681@gmail.com',\n      homepage: Meteor.absoluteUrl(),\n      user: tenant,\n      agent: Accounts.user(),\n      advertisementCount: advertisementCount,\n      advertisements: results\n    }; // console.log('results are:');\n    // console.log(results);\n\n    Meteor.call('sendNotificationEmail', mailData);\n    return {\n      status: 'Success'\n    };\n  }\n});","map":{"version":3,"sources":["server/core/mybids.js"],"names":["check","module","link","v","Meteor","numDifferentiation","val","toFixed","toString","replace","titleCase","str","charAt","toUpperCase","toLowerCase","substring","methods","placeBid","args","String","Number","auctionId","price","bidMessage","userIdPassed","console","log","userId","biduser","users","findOne","_id","auction","Collections","Auctions","property","Properties","propertyId","bid","Bids","emailEnquiry","EmailEnquiries","profile","email","Error","bidData","lettingAuctionCode","bidId","insert","Accounts","update","$set","isArchived","agent","createdByAgent","totalBidsReceived","bidsReceivedActiveAuctions","bidProfitActive","totalBidProfit","profit","oldProfit","auctionBidProfit","$inc","type","address","area","county","globalConfig","Config","userFirstName","name","split","propertyImage","gallery","titleText","mailData","template","subject","mailTo","propertyURL","FlowRouter","url","slug","key","application","project","user","agentName","agentEmail","bedsCount","bedrooms","length","offerFormated","yourBid","rentFormated","call","replyTo","smsText","status","getDateFromServer","Match","Any","Date","updateViews","withdrawBid","sendInviteForViewingEmail","transform","data","d","invitedDate","options","weekday","year","month","day","hour","minute","inviteDateFormated","toLocaleTimeString","homepage","absoluteUrl","sendInviteToApplyEmail","advertisements","tenantId","tenant","results","find","$in","fields","createdAt","updatedAt","fetch","advertisementCount"],"mappings":"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","sourcesContent":["// import \"./collections.js\";\nimport {check} from \"meteor/check\";\nimport {Meteor} from \"meteor/meteor\";\n\nfunction numDifferentiation(val) {\n    if(val >= 1000000000) val = (val/1000000000).toFixed(2) + ' Billion';\n    else if(val >= 1000000) val = (val/1000000).toFixed(2) + ' Million';\n    return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\nfunction titleCase(str){\n    if(!str)return;\n    return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);\n}\n\nMeteor.methods({\n  placeBid: function(args){\n      check(args[0], String);\n      check(args[1], Number);\n      check(args[2], String);\n      if(args[3])check(args[3], String);\n      // check(price, Number);\n      var auctionId = args[0];\n      var price = args[1];\n      var bidMessage = args[2];\n      let userIdPassed = false;\n      if(args[3])userIdPassed = args[3];\n      bidMessage = bidMessage.substring(0,500);\n      console.log(\"server method outBid called: \" + auctionId)\n\n      let userId  = '';\n      if(!userIdPassed)userId = Meteor.userId();\n      else userId = userIdPassed;\n      var biduser         = Meteor.users.findOne({_id:userId})\n\n      const auction = Collections.Auctions.findOne(auctionId);\n      const property = Collections.Properties.findOne(auction.propertyId);\n\n      const bid = Collections.Bids.findOne({\n          \"auctionId\": auctionId,\n          \"userId\"   : userId\n      });\n      const emailEnquiry = Collections.EmailEnquiries.findOne({\n          \"auctionId\": auctionId,\n          \"email\"   : biduser.profile.email\n      });\n      if (bid) {\n          throw new Meteor.Error(500, 'Error 500: Bid exists', 'Please wait, there might be network lag.');\n      }\n\n      var bidData = {\n          \"auctionCode\"             : auction.lettingAuctionCode,\n          \"auctionId\"               : auctionId,\n          \"userId\"                  : userId,\n          \"yourBid\"                 : price,\n          \"bidMessage\"              : bidMessage,\n          \"isArchived\"              : false,\n          \"chosen\"                  : false\n      }\n      let bidId = Collections.Bids.insert(bidData);\n      if(bidMessage){\n          Accounts.users.update(userId,{\n              $set: {\n                  \"profile.personalMessage\" :bidMessage\n              }\n          });\n      }\n      if(emailEnquiry){//Enquiry exists, deactivate it as now it converted into an application.\n          Collections.EmailEnquiries.update({_id:emailEnquiry._id},{$set:{isArchived:true,bidId:bidId}})\n      }\n\n\n      const agent = Accounts.users.findOne(property.createdByAgent);\n      if(!agent.profile.totalBidsReceived)agent.profile.totalBidsReceived=0\n      if(!agent.profile.bidsReceivedActiveAuctions)agent.profile.bidsReceivedActiveAuctions=0\n      if(!agent.profile.bidProfitActive)agent.profile.bidProfitActive=0\n      if(!agent.profile.totalBidProfit)agent.profile.totalBidProfit=0\n      agent.profile.totalBidsReceived++;\n      agent.profile.bidsReceivedActiveAuctions++;\n      if(price>auction.price){//Its in profit\n          var profit = price -  auction.price;\n          var oldProfit = auction.auctionBidProfit;\n          if(!oldProfit)oldProfit = 0;\n\n          if(profit > oldProfit){\n              //Update auction with auctionProfit as we hv a new highest profit\n              Collections.Auctions.update(auction._id, {\n                  $set: {\n                      \"auctionBidProfit\": profit\n                  }\n              });\n              agent.profile.bidProfitActive = agent.profile.bidProfitActive + (profit - oldProfit);\n              agent.profile.totalBidProfit = agent.profile.totalBidProfit + (profit - oldProfit);\n          }else{\n              //U already hv highest added to auctionBidProfit and agents bidProfit, so do nothing\n          }\n\n      }\n      Collections.Auctions.update(auction._id, {\n          $inc: {\n              \"bids\": 1\n          }\n      });\n\n\n      Accounts.users.update(agent._id,{\n          $set: {\n              \"profile.totalBidsReceived\" :agent.profile.totalBidsReceived,\n              \"profile.bidsReceivedActiveAuctions\" :agent.profile.bidsReceivedActiveAuctions,\n              \"profile.bidProfitActive\" :agent.profile.bidProfitActive,\n              \"profile.totalBidProfit\" :agent.profile.totalBidProfit,\n          }\n      });\n\n      // Meteor.call('requestEmail',{\n      //     userId: biduser._id,\n      //     requestType: 'reminderUploadReferences',//This is an Ack email for all the emailEnqueries placed by user in a group of 15mns.\n      //     propertyId: property._id\n      // });\n\n      ///////////////////////////MAIL CODE - Bid Successfully Placed\n      property.type = titleCase(property.type);\n      property.address.address = titleCase(property.address.address);\n      property.address.area = titleCase(property.address.area);\n      property.address.county = titleCase(property.address.county);\n      var globalConfig = Collections.Config.findOne();\n      let userFirstName = biduser.profile.name;\n      if(userFirstName){\n          userFirstName = titleCase(userFirstName.split(' ')[0]);\n      }\n      let propertyImage = '';\n      if(property.gallery){\n          if(property.gallery[0])propertyImage = property.gallery[0]\n          propertyImage.titleText = 'Photo 1 of ' + property.address.address + (property.address.area ? \", \" + property.address.area : '') + (property.address.county ? \", \" + property.address.county : '');\n      }\n      var mailData     = {\n          template    : 'applicationPlaced',\n          subject     : \"Application Successfully Placed\",\n          mailTo      : biduser.profile.email,\n          // replyTo      : agent.profile.email,//He just placed the application, don't reveal the email yet, agent needs to start the communication first.\n          //mailTo: 'srikanth681@gmail.com',\n          // homepage    : Meteor.absoluteUrl(),//its done by sendNotificationEmail\n          propertyURL: FlowRouter.url('rent', {\n                          slug: property.slug,\n                          key: auction.lettingAuctionCode\n                      }),\n          application : bidData,\n          auction     : auction,\n          project     : property,\n          user        : biduser,\n          userFirstName      : userFirstName,\n          propertyImage      : propertyImage,\n          agentName        : agent.profile.name,\n          agentEmail        : agent.profile.email,\n          bedsCount   : property.bedrooms.length,\n          offerFormated: numDifferentiation(bidData.yourBid),\n          rentFormated: numDifferentiation(auction.price)\n      };\n      Meteor.call('sendNotificationEmail', mailData);\n      \n      var mailData     = {\n          template    : 'applicationReceived',\n          subject     : \"Application Received\",\n          mailTo      : agent.profile.email,\n          replyTo     : biduser.profile.email,//Agent can reach out to the person directly\n          //mailTo: 'srikanth681@gmail.com',\n          // homepage    : Meteor.absoluteUrl(),//its done by sendNotificationEmail\n          application : bidData,\n          auction     : auction,\n          project     : property,\n          user        : biduser,\n          agent        : agent,\n          bedsCount   : property.bedrooms.length,\n          offerFormated: numDifferentiation(bidData.yourBid),\n          rentFormated: numDifferentiation(auction.price)\n      };\n      Meteor.call('sendNotificationEmail', mailData);\n\n      Meteor.call('addActivityHistory', {propertyId:auction.propertyId,auctionId:auction._id,type:'applicationReceived',userId:biduser._id,name:biduser.profile.name,email:biduser.profile.email,userIdPassed:userIdPassed});\n\n\n      ///////////////////////////MAIL CODE END  - SMS CODE START ////\n\n      var smsText = 'Hi ' + biduser.profile.name + '. We have mailed your bid details and the total price to your registered mail id.';\n      // Meteor.call('sendSMS', [user.profile.mobile, smsText]);\n\n      return {\n          status : 'Success',\n          bidData: bidData\n      }\n\n\n  },\n  getDateFromServer: function (args) {\n    check(args, [Match.Any]);\n    return new Date;\n  },\n  updateViews:function (auctionId) {\n    // console.log(\"updateViews called for: \"+auctionId)\n      Collections.Auctions.update(auctionId,{\n          $inc:{\n              \"views\":1\n          }\n      })\n  },\n  withdrawBid: function(auctionId){\n    console.log('withdrawBid called')\n\n    check(auctionId, String);\n    var userId = Meteor.userId();\n\n    const bid = Collections.Bids.findOne({\n        auctionId: auctionId,\n        userId:userId\n    });\n\n      if (bid) {\n          throw new Meteor.Error(500, 'Error 500: Bid not found');\n      }\n\n    //console.log(userId)\n    //console.log(bidId)\n    Collections.Bids.update({\n      \"_id\": bidId\n    }, {\n      $set: {\n          \"isArchived\": true\n      }\n    });\n\n    return {\n      status: 'success'\n    }\n  },\n  sendInviteForViewingEmail: function(args){\n        // check(args, Match.Any);\n        var bidId = args[0];\n\n        console.log(\"server method sendInviteForViewingEmail called\")\n        console.log(bidId);\n        var bid = Collections.Bids.findOne(bidId,{\n            transform:function (data) {\n                data.user = Accounts.users.findOne( data.userId );\n                data.auction = Collections.Auctions.findOne( {_id:data.auctionId,isArchived:false });\n                data.property = Collections.Properties.findOne( data.auction.propertyId );\n                return data;\n            }\n        });\n\n        if(!bid) throw new Meteor.Error(500, 'Error 500: Invalid application', 'Application not found.');\n        if (bid.isArchived)throw new Meteor.Error('This application is withdrawn by the user. Please choose another application.');\n        if(!bid.user)throw new Meteor.Error(500, 'Error 500: Invalid user', 'User not found.');\n        if(!bid.auction)throw new Meteor.Error(500, 'Error 500: Property not active', 'Active property is needed to send an invite.');\n        if(!bid.property)throw new Meteor.Error(500, 'Error 500: Property not active', 'Active property is needed to send an invite.');//In future we will have concept of archiving the property, so the same keywords like 'property not active' just like auction.\n        var d = new Date(args[1]);\n        if(!d)throw new Meteor.Error(500, 'Error 500: Invalid invite date', 'Please select a valid invite date.');\n\n        var property = bid.property;\n        var auction = bid.auction;\n\n        Collections.Bids.update(bidId,{\n            $set: {\n                invitedDate: new Date()\n            }\n        });\n\n\n        var options = {\n            weekday: \"long\", year: \"numeric\", month: \"short\",\n            day: \"numeric\", hour: \"2-digit\", minute: \"2-digit\"\n        };\n\n        const agent = Meteor.user();\n        //////////// SEND MAIL to winning user\n        property.type = titleCase(property.type);\n        property.address.address = titleCase(property.address.address);\n        property.address.area = titleCase(property.address.area);\n        property.address.county = titleCase(property.address.county);\n        var mailData     = {\n            template    : 'inviteForViewing',\n            subject     : \"Invite for viewing\",\n            mailTo      : bid.user.profile.email,\n            replyTo      : agent.profile.email,\n            inviteDateFormated      : d.toLocaleTimeString(\"en-us\", options),\n            //mailTo: 'srikanth681@gmail.com',\n            homepage    : Meteor.absoluteUrl(),\n            application : bid,\n            auction     : auction,\n            project     : property,\n            user        : bid.user,\n            agent        : Accounts.user(),\n            bedsCount   : property.bedrooms.length,\n            offerFormated: numDifferentiation(bid.yourBid),\n            rentFormated: numDifferentiation(auction.price)\n        };\n        Meteor.call('sendNotificationEmail', mailData);\n\n\n        return {\n            status: 'Success'\n        }\n\n\n    },\n    sendInviteToApplyEmail: function(args){\n        // check(args, Match.Any);\n        var advertisements = args[0];\n        var tenantId = args[1];\n        console.log(\"server method sendInviteToApplyEmail called\")\n\n        var tenant = Meteor.users.findOne(tenantId);\n        if(!tenant)throw new Meteor.Error(500, 'Error 500: Invalid tenant', 'Tenant not found.');\n\n        console.log(advertisements);\n        var results = Collections.Auctions.find({_id : {$in: advertisements}},{\n            fields:{\n                lettingAuctionCode:1,\n                propertyId:1,\n                property:1\n            },\n            transform:function(data){\n                data.property = Collections.Properties.findOne(data.propertyId,{\n                    fields:{\n                        address:1,\n                        createdByAgent:1,\n                        createdAt:1,\n                        updatedAt:1,\n                        isArchived:1,\n                        auctionId:1\n                    }\n                });\n                return data;\n            }\n\n        }).fetch();\n        var advertisementCount = results.length;\n\n        console.log(advertisementCount);\n        if(!advertisementCount){//Nothing found.\n            throw new Meteor.Error(500, 'Error 500: Invalid advertisements', 'Advertisements not found.');\n        }\n\n\n        const agent = Meteor.user();\n        //////////// SEND MAIL to winning user\n        var mailData     = {\n            template    : 'inviteToApply',\n            subject     : \"Invitation to apply for properties\",\n            mailTo      : tenant.profile.email,\n            replyTo      : agent.profile.email,\n            //mailTo: 'srikanth681@gmail.com',\n            homepage    : Meteor.absoluteUrl(),\n            user        : tenant,\n            agent        : Accounts.user(),\n            advertisementCount   : advertisementCount,\n            advertisements   : results\n        };\n        // console.log('results are:');\n        // console.log(results);\n        Meteor.call('sendNotificationEmail', mailData);\n\n\n        return {\n            status: 'Success'\n        }\n\n\n    }\n})"]},"sourceType":"module","hash":"1522b6f540b70ee560433f13ec501f7d944ce203"}
