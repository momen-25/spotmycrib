{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/models/pubsub.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/montiapm:agent/lib/models/pubsub.js","filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/models/pubsub.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/models/pubsub.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/montiapm:agent/lib/models/pubsub.js"}},"code":"var logger = Npm.require('debug')('kadira:pubsub');\n\nconst {\n  DDSketch\n} = require('monti-apm-sketches-js');\n\nPubsubModel = function () {\n  this.metricsByMinute = Object.create(null);\n  this.subscriptions = Object.create(null);\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60,\n    //process traces every minute\n    maxTotalPoints: 30,\n    //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n\n  });\n  this.tracerStore.start();\n};\n\nPubsubModel.prototype._trackSub = function (session, msg) {\n  logger('SUB:', session.id, msg.id, msg.name, msg.params);\n\n  var publication = this._getPublicationName(msg.name);\n\n  var subscriptionId = msg.id;\n\n  var timestamp = Ntp._now();\n\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.subs++;\n  this.subscriptions[msg.id] = {\n    // We use localTime here, because when we used synedTime we might get\n    // minus or more than we've expected\n    //   (before serverTime diff changed overtime)\n    startTime: timestamp,\n    publication: publication,\n    params: msg.params,\n    id: msg.id\n  }; //set session startedTime\n\n  session._startTime = session._startTime || timestamp;\n};\n\n_.extend(PubsubModel.prototype, KadiraModel.prototype);\n\nPubsubModel.prototype._trackUnsub = function (session, sub) {\n  logger('UNSUB:', session.id, sub._subscriptionId);\n\n  var publication = this._getPublicationName(sub._name);\n\n  var subscriptionId = sub._subscriptionId;\n  var subscriptionState = this.subscriptions[subscriptionId];\n  var startTime = null; //sometime, we don't have these states\n\n  if (subscriptionState) {\n    startTime = subscriptionState.startTime;\n  } else {\n    //if this is null subscription, which is started automatically\n    //hence, we don't have a state\n    startTime = session._startTime;\n  } //in case, we can't get the startTime\n\n\n  if (startTime) {\n    var timestamp = Ntp._now();\n\n    var metrics = this._getMetrics(timestamp, publication); //track the count\n\n\n    if (sub._name != null) {\n      // we can't track subs for `null` publications.\n      // so we should not track unsubs too\n      metrics.unsubs++;\n    } //use the current date to get the lifeTime of the subscription\n\n\n    metrics.lifeTime += timestamp - startTime; //this is place we can clean the subscriptionState if exists\n\n    delete this.subscriptions[subscriptionId];\n  }\n};\n\nPubsubModel.prototype._trackReady = function (session, sub, trace) {\n  logger('READY:', session.id, sub._subscriptionId); //use the current time to track the response time\n\n  var publication = this._getPublicationName(sub._name);\n\n  var subscriptionId = sub._subscriptionId;\n\n  var timestamp = Ntp._now();\n\n  var metrics = this._getMetrics(timestamp, publication);\n\n  var subscriptionState = this.subscriptions[subscriptionId];\n\n  if (subscriptionState && !subscriptionState.readyTracked) {\n    var resTime = timestamp - subscriptionState.startTime;\n    metrics.resTime += resTime;\n    subscriptionState.readyTracked = true;\n    metrics.histogram.add(resTime);\n  }\n\n  if (trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._trackError = function (session, sub, trace) {\n  logger('ERROR:', session.id, sub._subscriptionId); //use the current time to track the response time\n\n  var publication = this._getPublicationName(sub._name);\n\n  var subscriptionId = sub._subscriptionId;\n\n  var timestamp = Ntp._now();\n\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.errors++;\n\n  if (trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._getMetrics = function (timestamp, publication) {\n  var dateId = this._getDateId(timestamp);\n\n  if (!this.metricsByMinute[dateId]) {\n    this.metricsByMinute[dateId] = {\n      // startTime needs to be convert to serverTime before sending to the server\n      startTime: timestamp,\n      pubs: Object.create(null)\n    };\n  }\n\n  if (!this.metricsByMinute[dateId].pubs[publication]) {\n    this.metricsByMinute[dateId].pubs[publication] = {\n      subs: 0,\n      unsubs: 0,\n      resTime: 0,\n      activeSubs: 0,\n      activeDocs: 0,\n      lifeTime: 0,\n      totalObservers: 0,\n      cachedObservers: 0,\n      createdObservers: 0,\n      deletedObservers: 0,\n      errors: 0,\n      observerLifetime: 0,\n      polledDocuments: 0,\n      oplogUpdatedDocuments: 0,\n      oplogInsertedDocuments: 0,\n      oplogDeletedDocuments: 0,\n      initiallyAddedDocuments: 0,\n      liveAddedDocuments: 0,\n      liveChangedDocuments: 0,\n      liveRemovedDocuments: 0,\n      polledDocSize: 0,\n      fetchedDocSize: 0,\n      initiallyFetchedDocSize: 0,\n      liveFetchedDocSize: 0,\n      initiallySentMsgSize: 0,\n      liveSentMsgSize: 0,\n      histogram: new DDSketch({\n        alpha: 0.02\n      })\n    };\n  }\n\n  return this.metricsByMinute[dateId].pubs[publication];\n};\n\nPubsubModel.prototype._getPublicationName = function (name) {\n  return name || \"null(autopublish)\";\n};\n\nPubsubModel.prototype._getSubscriptionInfo = function () {\n  var self = this;\n  var activeSubs = Object.create(null);\n  var activeDocs = Object.create(null);\n  var totalDocsSent = Object.create(null);\n  var totalDataSent = Object.create(null);\n  var totalObservers = Object.create(null);\n  var cachedObservers = Object.create(null);\n  iterate(Meteor.server.sessions, session => {\n    iterate(session._namedSubs, countSubData);\n    iterate(session._universalSubs, countSubData);\n  });\n  var avgObserverReuse = Object.create(null);\n\n  _.each(totalObservers, function (value, publication) {\n    avgObserverReuse[publication] = cachedObservers[publication] / totalObservers[publication];\n  });\n\n  return {\n    activeSubs: activeSubs,\n    activeDocs: activeDocs,\n    avgObserverReuse: avgObserverReuse\n  };\n\n  function countSubData(sub) {\n    var publication = self._getPublicationName(sub._name);\n\n    countSubscriptions(sub, publication);\n    countDocuments(sub, publication);\n    countObservers(sub, publication);\n  }\n\n  function countSubscriptions(sub, publication) {\n    activeSubs[publication] = activeSubs[publication] || 0;\n    activeSubs[publication]++;\n  }\n\n  function countDocuments(sub, publication) {\n    activeDocs[publication] = activeDocs[publication] || 0;\n    iterate(sub._documents, collection => {\n      activeDocs[publication] += countKeys(collection);\n    });\n  }\n\n  function countObservers(sub, publication) {\n    totalObservers[publication] = totalObservers[publication] || 0;\n    cachedObservers[publication] = cachedObservers[publication] || 0;\n    totalObservers[publication] += sub._totalObservers;\n    cachedObservers[publication] += sub._cachedObservers;\n  }\n};\n\nPubsubModel.prototype.buildPayload = function (buildDetailInfo) {\n  var metricsByMinute = this.metricsByMinute;\n  this.metricsByMinute = Object.create(null);\n  var payload = {\n    pubMetrics: []\n  };\n\n  var subscriptionData = this._getSubscriptionInfo();\n\n  var activeSubs = subscriptionData.activeSubs;\n  var activeDocs = subscriptionData.activeDocs;\n  var avgObserverReuse = subscriptionData.avgObserverReuse; //to the averaging\n\n  for (var dateId in metricsByMinute) {\n    var dateMetrics = metricsByMinute[dateId]; // We need to convert startTime into actual serverTime\n\n    dateMetrics.startTime = Kadira.syncedDate.syncTime(dateMetrics.startTime);\n\n    for (var publication in metricsByMinute[dateId].pubs) {\n      var singlePubMetrics = metricsByMinute[dateId].pubs[publication]; // We only calculate resTime for new subscriptions\n\n      singlePubMetrics.resTime /= singlePubMetrics.subs;\n      singlePubMetrics.resTime = singlePubMetrics.resTime || 0; // We only track lifeTime in the unsubs\n\n      singlePubMetrics.lifeTime /= singlePubMetrics.unsubs;\n      singlePubMetrics.lifeTime = singlePubMetrics.lifeTime || 0; // Count the average for observer lifetime\n\n      if (singlePubMetrics.deletedObservers > 0) {\n        singlePubMetrics.observerLifetime /= singlePubMetrics.deletedObservers;\n      } // If there are two ore more dateIds, we will be using the currentCount for all of them.\n      // We can come up with a better solution later on.\n\n\n      singlePubMetrics.activeSubs = activeSubs[publication] || 0;\n      singlePubMetrics.activeDocs = activeDocs[publication] || 0;\n      singlePubMetrics.avgObserverReuse = avgObserverReuse[publication] || 0;\n    }\n\n    payload.pubMetrics.push(metricsByMinute[dateId]);\n  } //collect traces and send them with the payload\n\n\n  payload.pubRequests = this.tracerStore.collectTraces();\n  return payload;\n};\n\nPubsubModel.prototype.incrementHandleCount = function (trace, isCached) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(trace.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  var session = getProperty(Meteor.server.sessions, trace.session);\n\n  if (session) {\n    var sub = getProperty(session._namedSubs, trace.id);\n\n    if (sub) {\n      sub._totalObservers = sub._totalObservers || 0;\n      sub._cachedObservers = sub._cachedObservers || 0;\n    }\n  } // not sure, we need to do this? But I don't need to break the however\n\n\n  sub = sub || {\n    _totalObservers: 0,\n    _cachedObservers: 0\n  };\n  publication.totalObservers++;\n  sub._totalObservers++;\n\n  if (isCached) {\n    publication.cachedObservers++;\n    sub._cachedObservers++;\n  }\n};\n\nPubsubModel.prototype.trackCreatedObserver = function (info) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  publication.createdObservers++;\n};\n\nPubsubModel.prototype.trackDeletedObserver = function (info) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  publication.deletedObservers++;\n  publication.observerLifetime += new Date().getTime() - info.startTime;\n};\n\nPubsubModel.prototype.trackDocumentChanges = function (info, op) {\n  // It's possibel that info to be null\n  // Specially when getting changes at the very begining.\n  // This may be false, but nice to have a check\n  if (!info) {\n    return;\n  }\n\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (op.op === \"d\") {\n    publication.oplogDeletedDocuments++;\n  } else if (op.op === \"i\") {\n    publication.oplogInsertedDocuments++;\n  } else if (op.op === \"u\") {\n    publication.oplogUpdatedDocuments++;\n  }\n};\n\nPubsubModel.prototype.trackPolledDocuments = function (info, count) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  publication.polledDocuments += count;\n};\n\nPubsubModel.prototype.trackLiveUpdates = function (info, type, count) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (type === \"_addPublished\") {\n    publication.liveAddedDocuments += count;\n  } else if (type === \"_removePublished\") {\n    publication.liveRemovedDocuments += count;\n  } else if (type === \"_changePublished\") {\n    publication.liveChangedDocuments += count;\n  } else if (type === \"_initialAdds\") {\n    publication.initiallyAddedDocuments += count;\n  } else {\n    throw new Error(\"Kadira: Unknown live update type\");\n  }\n};\n\nPubsubModel.prototype.trackDocSize = function (name, type, size) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (type === \"polledFetches\") {\n    publication.polledDocSize += size;\n  } else if (type === \"liveFetches\") {\n    publication.liveFetchedDocSize += size;\n  } else if (type === \"cursorFetches\") {\n    publication.fetchedDocSize += size;\n  } else if (type === \"initialFetches\") {\n    publication.initiallyFetchedDocSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n};\n\nPubsubModel.prototype.trackMsgSize = function (name, type, size) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (type === \"liveSent\") {\n    publication.liveSentMsgSize += size;\n  } else if (type === \"initialSent\") {\n    publication.initiallySentMsgSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n};","map":{"version":3,"sources":["packages/montiapm:agent/lib/models/pubsub.js"],"names":["logger","Npm","require","DDSketch","PubsubModel","metricsByMinute","Object","create","subscriptions","tracerStore","TracerStore","interval","maxTotalPoints","archiveEvery","start","prototype","_trackSub","session","msg","id","name","params","publication","_getPublicationName","subscriptionId","timestamp","Ntp","_now","metrics","_getMetrics","subs","startTime","_startTime","_","extend","KadiraModel","_trackUnsub","sub","_subscriptionId","_name","subscriptionState","unsubs","lifeTime","_trackReady","trace","readyTracked","resTime","histogram","add","addTrace","_trackError","errors","dateId","_getDateId","pubs","activeSubs","activeDocs","totalObservers","cachedObservers","createdObservers","deletedObservers","observerLifetime","polledDocuments","oplogUpdatedDocuments","oplogInsertedDocuments","oplogDeletedDocuments","initiallyAddedDocuments","liveAddedDocuments","liveChangedDocuments","liveRemovedDocuments","polledDocSize","fetchedDocSize","initiallyFetchedDocSize","liveFetchedDocSize","initiallySentMsgSize","liveSentMsgSize","alpha","_getSubscriptionInfo","self","totalDocsSent","totalDataSent","iterate","Meteor","server","sessions","_namedSubs","countSubData","_universalSubs","avgObserverReuse","each","value","countSubscriptions","countDocuments","countObservers","_documents","collection","countKeys","_totalObservers","_cachedObservers","buildPayload","buildDetailInfo","payload","pubMetrics","subscriptionData","dateMetrics","Kadira","syncedDate","syncTime","singlePubMetrics","push","pubRequests","collectTraces","incrementHandleCount","isCached","publicationName","getProperty","trackCreatedObserver","info","trackDeletedObserver","Date","getTime","trackDocumentChanges","op","trackPolledDocuments","count","trackLiveUpdates","type","Error","trackDocSize","size","trackMsgSize"],"mappings":"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","sourcesContent":["var logger = Npm.require('debug')('kadira:pubsub');\nconst { DDSketch } = require('monti-apm-sketches-js');\n\nPubsubModel = function() {\n  this.metricsByMinute = Object.create(null);\n  this.subscriptions = Object.create(null);\n\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60, //process traces every minute\n    maxTotalPoints: 30, //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n  });\n\n  this.tracerStore.start();\n}\n\nPubsubModel.prototype._trackSub = function(session, msg) {\n  logger('SUB:', session.id, msg.id, msg.name, msg.params);\n  var publication = this._getPublicationName(msg.name);\n  var subscriptionId = msg.id;\n  var timestamp = Ntp._now();\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.subs++;\n  this.subscriptions[msg.id] = {\n    // We use localTime here, because when we used synedTime we might get\n    // minus or more than we've expected\n    //   (before serverTime diff changed overtime)\n    startTime: timestamp,\n    publication: publication,\n    params: msg.params,\n    id: msg.id\n  };\n\n  //set session startedTime\n  session._startTime = session._startTime || timestamp;\n};\n\n_.extend(PubsubModel.prototype, KadiraModel.prototype);\n\nPubsubModel.prototype._trackUnsub = function(session, sub) {\n  logger('UNSUB:', session.id, sub._subscriptionId);\n  var publication = this._getPublicationName(sub._name);\n  var subscriptionId = sub._subscriptionId;\n  var subscriptionState = this.subscriptions[subscriptionId];\n\n  var startTime = null;\n  //sometime, we don't have these states\n  if(subscriptionState) {\n    startTime = subscriptionState.startTime;\n  } else {\n    //if this is null subscription, which is started automatically\n    //hence, we don't have a state\n    startTime = session._startTime;\n  }\n\n  //in case, we can't get the startTime\n  if(startTime) {\n    var timestamp = Ntp._now();\n    var metrics = this._getMetrics(timestamp, publication);\n    //track the count\n    if(sub._name != null) {\n      // we can't track subs for `null` publications.\n      // so we should not track unsubs too\n      metrics.unsubs++;\n    }\n    //use the current date to get the lifeTime of the subscription\n    metrics.lifeTime += timestamp - startTime;\n    //this is place we can clean the subscriptionState if exists\n    delete this.subscriptions[subscriptionId];\n  }\n};\n\nPubsubModel.prototype._trackReady = function(session, sub, trace) {\n  logger('READY:', session.id, sub._subscriptionId);\n  //use the current time to track the response time\n  var publication = this._getPublicationName(sub._name);\n  var subscriptionId = sub._subscriptionId;\n  var timestamp = Ntp._now();\n  var metrics = this._getMetrics(timestamp, publication);\n\n  var subscriptionState = this.subscriptions[subscriptionId];\n  if(subscriptionState && !subscriptionState.readyTracked) {\n    var resTime = timestamp - subscriptionState.startTime\n    metrics.resTime += resTime;\n    subscriptionState.readyTracked = true;\n    metrics.histogram.add(resTime);\n  }\n\n  if(trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._trackError = function(session, sub, trace) {\n  logger('ERROR:', session.id, sub._subscriptionId);\n  //use the current time to track the response time\n  var publication = this._getPublicationName(sub._name);\n  var subscriptionId = sub._subscriptionId;\n  var timestamp = Ntp._now();\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.errors++;\n\n  if(trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._getMetrics = function(timestamp, publication) {\n  var dateId = this._getDateId(timestamp);\n\n  if(!this.metricsByMinute[dateId]) {\n    this.metricsByMinute[dateId] = {\n      // startTime needs to be convert to serverTime before sending to the server\n      startTime: timestamp,\n      pubs: Object.create(null)\n    };\n  }\n\n  if(!this.metricsByMinute[dateId].pubs[publication]) {\n    this.metricsByMinute[dateId].pubs[publication] = {\n      subs: 0,\n      unsubs: 0,\n      resTime: 0,\n      activeSubs: 0,\n      activeDocs: 0,\n      lifeTime: 0,\n      totalObservers: 0,\n      cachedObservers: 0,\n      createdObservers: 0,\n      deletedObservers: 0,\n      errors: 0,\n      observerLifetime: 0,\n      polledDocuments: 0,\n      oplogUpdatedDocuments: 0,\n      oplogInsertedDocuments: 0,\n      oplogDeletedDocuments: 0,\n      initiallyAddedDocuments: 0,\n      liveAddedDocuments: 0,\n      liveChangedDocuments: 0,\n      liveRemovedDocuments: 0,\n      polledDocSize: 0,\n      fetchedDocSize: 0,\n      initiallyFetchedDocSize: 0,\n      liveFetchedDocSize: 0,\n      initiallySentMsgSize: 0,\n      liveSentMsgSize: 0,\n      histogram: new DDSketch({\n        alpha: 0.02\n      })\n    };\n  }\n\n  return this.metricsByMinute[dateId].pubs[publication];\n};\n\nPubsubModel.prototype._getPublicationName = function(name) {\n  return name || \"null(autopublish)\";\n};\n\nPubsubModel.prototype._getSubscriptionInfo = function() {\n  var self = this;\n  var activeSubs = Object.create(null);\n  var activeDocs = Object.create(null);\n  var totalDocsSent = Object.create(null);\n  var totalDataSent = Object.create(null);\n  var totalObservers = Object.create(null);\n  var cachedObservers = Object.create(null);\n\n  iterate(Meteor.server.sessions, session => {\n    iterate(session._namedSubs, countSubData);\n    iterate(session._universalSubs, countSubData);\n  });\n\n  var avgObserverReuse = Object.create(null);\n  _.each(totalObservers, function(value, publication) {\n    avgObserverReuse[publication] = cachedObservers[publication] / totalObservers[publication];\n  });\n\n  return {\n    activeSubs: activeSubs,\n    activeDocs: activeDocs,\n    avgObserverReuse: avgObserverReuse\n  };\n\n  function countSubData (sub) {\n    var publication = self._getPublicationName(sub._name);\n    countSubscriptions(sub, publication);\n    countDocuments(sub, publication);\n    countObservers(sub, publication);\n  }\n\n  function countSubscriptions (sub, publication) {\n    activeSubs[publication] = activeSubs[publication] || 0;\n    activeSubs[publication]++;\n  }\n\n  function countDocuments (sub, publication) {\n    activeDocs[publication] = activeDocs[publication] || 0;\n    iterate(sub._documents, collection => {\n      activeDocs[publication] += countKeys(collection);\n    });\n  }\n\n  function countObservers(sub, publication) {\n    totalObservers[publication] = totalObservers[publication] || 0;\n    cachedObservers[publication] = cachedObservers[publication] || 0;\n\n    totalObservers[publication] += sub._totalObservers;\n    cachedObservers[publication] += sub._cachedObservers;\n  }\n}\n\nPubsubModel.prototype.buildPayload = function(buildDetailInfo) {\n  var metricsByMinute = this.metricsByMinute;\n  this.metricsByMinute = Object.create(null);\n\n  var payload = {\n    pubMetrics: []\n  };\n\n  var subscriptionData = this._getSubscriptionInfo();\n  var activeSubs = subscriptionData.activeSubs;\n  var activeDocs = subscriptionData.activeDocs;\n  var avgObserverReuse = subscriptionData.avgObserverReuse;\n\n  //to the averaging\n  for(var dateId in metricsByMinute) {\n    var dateMetrics = metricsByMinute[dateId];\n    // We need to convert startTime into actual serverTime\n    dateMetrics.startTime = Kadira.syncedDate.syncTime(dateMetrics.startTime);\n\n    for(var publication in metricsByMinute[dateId].pubs) {\n      var singlePubMetrics = metricsByMinute[dateId].pubs[publication];\n      // We only calculate resTime for new subscriptions\n      singlePubMetrics.resTime /= singlePubMetrics.subs;\n      singlePubMetrics.resTime = singlePubMetrics.resTime || 0;\n      // We only track lifeTime in the unsubs\n      singlePubMetrics.lifeTime /= singlePubMetrics.unsubs;\n      singlePubMetrics.lifeTime = singlePubMetrics.lifeTime || 0;\n\n      // Count the average for observer lifetime\n      if(singlePubMetrics.deletedObservers > 0) {\n        singlePubMetrics.observerLifetime /= singlePubMetrics.deletedObservers;\n      }\n\n      // If there are two ore more dateIds, we will be using the currentCount for all of them.\n      // We can come up with a better solution later on.\n      singlePubMetrics.activeSubs = activeSubs[publication] || 0;\n      singlePubMetrics.activeDocs = activeDocs[publication] || 0;\n      singlePubMetrics.avgObserverReuse = avgObserverReuse[publication] || 0;\n    }\n\n    payload.pubMetrics.push(metricsByMinute[dateId]);\n  }\n\n  //collect traces and send them with the payload\n  payload.pubRequests = this.tracerStore.collectTraces();\n\n  return payload;\n};\n\nPubsubModel.prototype.incrementHandleCount = function(trace, isCached) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(trace.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  var session = getProperty(Meteor.server.sessions, trace.session);\n  if(session) {\n    var sub = getProperty(session._namedSubs, trace.id);\n    if(sub) {\n      sub._totalObservers = sub._totalObservers || 0;\n      sub._cachedObservers = sub._cachedObservers || 0;\n    }\n  }\n  // not sure, we need to do this? But I don't need to break the however\n  sub = sub || {_totalObservers:0 , _cachedObservers: 0};\n\n  publication.totalObservers++;\n  sub._totalObservers++;\n  if(isCached) {\n    publication.cachedObservers++;\n    sub._cachedObservers++;\n  }\n}\n\nPubsubModel.prototype.trackCreatedObserver = function(info) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  publication.createdObservers++;\n}\n\nPubsubModel.prototype.trackDeletedObserver = function(info) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  publication.deletedObservers++;\n  publication.observerLifetime += (new Date()).getTime() - info.startTime;\n}\n\nPubsubModel.prototype.trackDocumentChanges = function(info, op) {\n  // It's possibel that info to be null\n  // Specially when getting changes at the very begining.\n  // This may be false, but nice to have a check\n  if(!info) {\n    return\n  }\n\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  if(op.op === \"d\") {\n    publication.oplogDeletedDocuments++;\n  } else if(op.op === \"i\") {\n    publication.oplogInsertedDocuments++;\n  } else if(op.op === \"u\") {\n    publication.oplogUpdatedDocuments++;\n  }\n}\n\nPubsubModel.prototype.trackPolledDocuments = function(info, count) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  publication.polledDocuments += count;\n}\n\nPubsubModel.prototype.trackLiveUpdates = function(info, type, count) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if(type === \"_addPublished\") {\n    publication.liveAddedDocuments += count;\n  } else if(type === \"_removePublished\") {\n    publication.liveRemovedDocuments += count;\n  } else if(type === \"_changePublished\") {\n    publication.liveChangedDocuments += count;\n  } else if(type === \"_initialAdds\") {\n    publication.initiallyAddedDocuments += count;\n  } else {\n    throw new Error(\"Kadira: Unknown live update type\");\n  }\n}\n\nPubsubModel.prototype.trackDocSize = function(name, type, size) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if(type === \"polledFetches\") {\n    publication.polledDocSize += size;\n  } else if(type === \"liveFetches\") {\n    publication.liveFetchedDocSize += size;\n  } else if(type === \"cursorFetches\") {\n    publication.fetchedDocSize += size;\n  } else if(type === \"initialFetches\") {\n    publication.initiallyFetchedDocSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n}\n\nPubsubModel.prototype.trackMsgSize = function(name, type, size) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if(type === \"liveSent\") {\n    publication.liveSentMsgSize += size;\n  } else if(type === \"initialSent\") {\n    publication.initiallySentMsgSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n}\n"]},"sourceType":"module","hash":"f1ede9224d06e080f3a8fcc3dbd924967f8031d3"}
