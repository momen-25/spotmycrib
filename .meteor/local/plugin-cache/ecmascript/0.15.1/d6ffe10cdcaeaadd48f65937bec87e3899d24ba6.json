{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/fs.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/montiapm:agent/lib/hijack/fs.js","filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/fs.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/hijack/fs.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/montiapm:agent/lib/hijack/fs.js"}},"code":"module.export({\n  handleErrorEvent: () => handleErrorEvent,\n  wrapFs: () => wrapFs\n});\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\n\nconst Fibers = require('fibers');\n\nfunction wrapCallback(args, createWrapper) {\n  if (typeof args[args.length - 1] === 'function') {\n    args[args.length - 1] = createWrapper(args[args.length - 1]);\n  }\n}\n\nfunction handleErrorEvent(eventEmitter, trace, event) {\n  function handler(error) {\n    if (trace && event) {\n      Kadira.tracer.eventEnd(trace, event, {\n        error: error\n      });\n    } // Node throws the error if there are no listeners\n    // We want it to behave as if we are not listening to it\n\n\n    if (eventEmitter.listenerCount('error') === 1) {\n      eventEmitter.removeListener('error', handler);\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  eventEmitter.on('error', handler);\n}\n\nfunction wrapFs() {\n  // Some npm packages will do fs calls in the\n  // callback of another fs call.\n  // This variable is set with the kadiraInfo while\n  // a callback is run so we can track other fs calls\n  let fsKadiraInfo = null;\n  let originalStat = fs.stat;\n\n  fs.stat = function () {\n    const kadiraInfo = Kadira._getInfo() || fsKadiraInfo;\n\n    if (kadiraInfo) {\n      let event = Kadira.tracer.event(kadiraInfo.trace, 'fs', {\n        func: 'stat',\n        path: arguments[0],\n        options: typeof arguments[1] === 'object' ? arguments[1] : undefined\n      });\n      wrapCallback(arguments, cb => {\n        return function () {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, event);\n\n          if (!Fibers.current) {\n            fsKadiraInfo = kadiraInfo;\n          }\n\n          try {\n            cb.apply(null, arguments);\n          } finally {\n            fsKadiraInfo = null;\n          }\n        };\n      });\n    }\n\n    return originalStat.apply(fs, arguments);\n  };\n\n  let originalCreateReadStream = fs.createReadStream;\n\n  fs.createReadStream = function () {\n    const kadiraInfo = Kadira._getInfo() || fsKadiraInfo;\n    let stream = originalCreateReadStream.apply(this, arguments);\n\n    if (kadiraInfo) {\n      const event = Kadira.tracer.event(kadiraInfo.trace, 'fs', {\n        func: 'createReadStream',\n        path: arguments[0],\n        options: JSON.stringify(arguments[1])\n      });\n      stream.on('end', () => {\n        Kadira.tracer.eventEnd(kadiraInfo.trace, event);\n      });\n      handleErrorEvent(stream, kadiraInfo.trace, event);\n    }\n\n    return stream;\n  };\n}","map":{"version":3,"sources":["packages/montiapm:agent/lib/hijack/fs.js"],"names":["module","export","handleErrorEvent","wrapFs","fs","link","default","v","Fibers","require","wrapCallback","args","createWrapper","length","eventEmitter","trace","event","handler","error","Kadira","tracer","eventEnd","listenerCount","removeListener","emit","on","fsKadiraInfo","originalStat","stat","kadiraInfo","_getInfo","func","path","arguments","options","undefined","cb","current","apply","originalCreateReadStream","createReadStream","stream","JSON","stringify"],"mappings":"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","sourcesContent":["import fs from 'fs';\nconst Fibers = require('fibers');\n\nfunction wrapCallback(args, createWrapper) {\n  if (typeof args[args.length - 1] === 'function') {\n    args[args.length - 1] = createWrapper(args[args.length - 1])\n  }\n}\n\nexport function handleErrorEvent(eventEmitter, trace, event) {\n  function handler (error) {\n    if (trace && event) {\n      Kadira.tracer.eventEnd(trace, event, {\n        error: error\n      });\n    }\n\n    // Node throws the error if there are no listeners\n    // We want it to behave as if we are not listening to it\n    if (eventEmitter.listenerCount('error') === 1) {\n      eventEmitter.removeListener('error', handler);\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  eventEmitter.on('error', handler);\n}\n\nexport function wrapFs() {\n  // Some npm packages will do fs calls in the\n  // callback of another fs call.\n  // This variable is set with the kadiraInfo while\n  // a callback is run so we can track other fs calls\n  let fsKadiraInfo = null;\n  \n  let originalStat = fs.stat;\n  fs.stat = function () {\n    const kadiraInfo = Kadira._getInfo() || fsKadiraInfo;\n\n    if (kadiraInfo) {\n      let event = Kadira.tracer.event(kadiraInfo.trace, 'fs', {\n        func: 'stat',\n        path: arguments[0],\n        options: typeof arguments[1] === 'object' ? arguments[1] : undefined\n      });\n\n      wrapCallback(arguments, (cb) => {\n        return function () {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, event);\n\n          if (!Fibers.current) {\n            fsKadiraInfo = kadiraInfo;\n          }\n\n          try {\n            cb.apply(null, arguments)\n          } finally {\n            fsKadiraInfo = null;\n          }\n        }\n      });\n    }\n\n    return originalStat.apply(fs, arguments);\n  };\n\n  let originalCreateReadStream = fs.createReadStream;\n  fs.createReadStream = function () {\n    const kadiraInfo = Kadira._getInfo() || fsKadiraInfo;\n    let stream = originalCreateReadStream.apply(this, arguments);\n\n    if (kadiraInfo) {\n      const event = Kadira.tracer.event(kadiraInfo.trace, 'fs', {\n        func: 'createReadStream',\n        path: arguments[0],\n        options: JSON.stringify(arguments[1])\n      });\n\n      stream.on('end', () => {\n        Kadira.tracer.eventEnd(kadiraInfo.trace, event);\n      });\n\n      handleErrorEvent(stream, kadiraInfo.trace, event);\n    }\n\n    return stream;\n  };\n}\n"]},"sourceType":"module","hash":"d6ffe10cdcaeaadd48f65937bec87e3899d24ba6"}
