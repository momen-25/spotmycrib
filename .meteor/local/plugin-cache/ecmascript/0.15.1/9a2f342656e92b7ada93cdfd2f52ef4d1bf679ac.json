{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/imports/api/publications.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/api/publications.js","filename":"/home/momen/projects/spotmycrib-master/imports/api/publications.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/imports/api/publications.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/publications.js"}},"code":"module.link(\"./collections.js\");\n\nif (Meteor.isClient) {} //PUBLICATIONS\n\n\nif (Meteor.isServer) {\n  Meteor.publish(\"PropertyManage\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    return Collections.PropertyManage.find(parameters.find, parameters.options);\n  });\n  Meteor.publish(\"ActivityHistory\", function (terms) {\n    // console.log('ActivityHistory');\n    return Collections.ActivityHistory.find({\n      propertyId: terms.id\n    }, {\n      limit: terms.limit,\n      sort: {\n        createdAt: -1\n      }\n    });\n  });\n  Meteor.publish(\"avgOffer\", function (auctionId) {\n    // console.log(\"Subscribed: auctionId: \"+auctionId)\n    // var self = this;\n    // var handle = Collections.Bids.aggregate([\n    //     { $match : { \"auctionId\" : auctionId } },\n    //     { $group : {\n    //             '_id': this.userId,\n    //             'avgOffer': {\n    //                 // In this case, we're running summation.\n    //                 $avg: '$yourBid'\n    //             }\n    //         }\n    //     }\n    // ]).forEach(function(data) {\n    //     self.added('avgOffer', 'first', data);\n    // });\n    ReactiveAggregate(this, Collections.Bids, [{\n      $match: {\n        \"auctionId\": auctionId\n      }\n    }, {\n      $group: {\n        '_id': this.userId,\n        'avgOffer': {\n          // In this case, we're running summation.\n          $avg: '$yourBid'\n        }\n      }\n    }], {\n      clientCollection: \"avgOffer\"\n    });\n  });\n  Meteor.publish(\"Property\", function (terms) {\n    // console.log('Property');\n    var parameters = queryConstructor(terms); // console.log(parameters.find)\n    // console.log(parameters.options)\n    // console.log(Collections.Properties.find(parameters.find, parameters.options).count())\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    return Collections.Properties.find(parameters.find, parameters.options);\n  });\n  Meteor.publish(\"userData\", function () {\n    if (!this.userId) return []; //Need to login\n    // 'services.password':1,Don use this , we have a method for this\n\n    return Meteor.users.find({\n      _id: this.userId\n    }, {\n      limit: 1,\n      fields: {\n        'services.facebook.id': 1,\n        'services.twitter.screenName': 1,\n        'services.linkedin.publicProfileUrl': 1,\n        'services.google.id': 1,\n        'createdAt': 1,\n        'lastLoginDate': 1,\n        'profile': 1,\n        'isSA': 1\n      }\n    });\n  });\n  Meteor.publish(\"userDataUsername\", function (username) {\n    if (!username) return [];\n    var ret = Meteor.users.find({\n      \"profile.username\": username\n    }, {\n      limit: 1,\n      fields: {\n        'createdAt': 1,\n        'lastLoginDate': 1,\n        'profile.name': 1,\n        'profile.email': 1,\n        'profile.role': 1,\n        'profile.picture': 1,\n        'profile.mobile': 1,\n        'profile.isPublic': 1,\n        'profile.username': 1\n      }\n    });\n    var user = ret.fetch(); // console.log(username)\n    // console.log(user)\n\n    if (!user.length) {\n      return [];\n    }\n\n    try {\n      if (user[0].profile.isPublic) {\n        //If public then include social info as well.\n        return Meteor.users.find({\n          \"profile.username\": username\n        }, {\n          limit: 1,\n          fields: {\n            'createdAt': 1,\n            'lastLoginDate': 1,\n            'profile': 1,\n            'services.facebook.id': 1,\n            'services.twitter.screenName': 1,\n            'services.linkedin.publicProfileUrl': 1,\n            'services.google.id': 1\n          }\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n\n    return ret;\n  });\n  Meteor.publish(\"allUserData\", function () {\n    return Meteor.users.find({}, {\n      fields: {\n        'createdAt': 1,\n        'lastLoginDate': 1,\n        'profile': 1,\n        'services.facebook.id': 1,\n        'services.twitter.screenName': 1,\n        'services.linkedin.publicProfileUrl': 1,\n        'services.google.id': 1\n      }\n    }); //fields: {'nested.things': 1}\n  });\n  Meteor.publish(\"tenants\", function (pageno) {\n    var pg = 1;\n\n    try {\n      pg = parseInt(pageno);\n    } catch (e) {}\n\n    if (isNaN(pg)) pg = 1;\n    var resperpage = 10;\n    var skip = (pg - 1) * resperpage;\n    return Meteor.users.find({\n      \"profile.isPublic\": true\n    }, {\n      skip: skip,\n      limit: resperpage,\n      fields: {\n        'createdAt': 1,\n        'lastLoginDate': 1,\n        'profile.name': 1,\n        'profile.email': 1,\n        'profile.role': 1,\n        'profile.picture': 1,\n        'profile.mobile': 1,\n        'profile.isPublic': 1,\n        'services.facebook.id': 1,\n        'services.twitter.screenName': 1,\n        'services.linkedin.publicProfileUrl': 1,\n        'services.google.id': 1 // 'profile.username':1,\n\n      }\n    });\n  });\n  Meteor.publish(\"browseLettings\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    var auctions = [],\n        properties = [];\n    parameters.options.fields = {\n      address: 1,\n      createdByAgent: 1,\n      type: 1,\n      createdAt: 1,\n      updatedAt: 1,\n      isArchived: 1,\n      auctionId: 1,\n      slug: 1,\n      bedCount: 1,\n      baths: 1,\n      rent: 1,\n      rentType: 1,\n      gallery: 1\n    }; // console.log('property key is')\n    // console.log(parameters.propertykey)\n\n    if (parameters.propertykey) if (parameters.propertykey.length > 0) {\n      console.log('inside propertykey');\n      auctions = Collections.Auctions.find({\n        lettingAuctionCode: {\n          $in: parameters.propertykey\n        },\n        isArchived: false\n      }, parameters.options);\n      var tmp = auctions.fetch();\n      var propertyIds = [];\n\n      for (var i = 0; i < tmp.length; i++) {\n        propertyIds.push(tmp[i].propertyId);\n        if (i > parameters.options.limit) break;\n      }\n\n      properties = [];\n\n      if (propertyIds.length) {\n        properties = Collections.Properties.find({\n          _id: {\n            $in: propertyIds\n          }\n        }, {\n          limit: parameters.options.limit,\n          sort: parameters.options.sort\n        });\n      }\n\n      if (!propertyIds.length) return [];\n      return [properties, auctions];\n    }\n    parameters.find.isArchived = false;\n    parameters.find.auctionId = {\n      $exists: true,\n      $gt: \"\"\n    }; //if we don' put $gt, then its also giving results of records with empty vals - but we don' need deactivated properties\n\n    if (parameters.minRent && parameters.maxRent) {\n      parameters.find.rent = {\n        $gte: parseInt(parameters.minRent),\n        $lte: parseInt(parameters.maxRent)\n      };\n    } else if (parameters.minRent) {\n      parameters.find.rent = {\n        $gte: parseInt(parameters.minRent)\n      };\n    } else if (parameters.maxRent) {\n      parameters.find.rent = {\n        $lte: parseInt(parameters.maxRent)\n      };\n    }\n\n    if (parameters.minBeds && parameters.maxBeds) {\n      parameters.find.bedCount = {\n        $gte: parseInt(parameters.minBeds),\n        $lte: parseInt(parameters.maxBeds)\n      };\n    } else if (parameters.minBeds) {\n      parameters.find.bedCount = {\n        $gte: parseInt(parameters.minBeds)\n      };\n    } else if (parameters.maxBeds) {\n      parameters.find.bedCount = {\n        $lte: parseInt(parameters.maxBeds)\n      };\n    } else if (parameters.bedCount && !isNaN(parameters.bedCount)) {\n      parameters.find.bedCount = parseInt(parameters.bedCount);\n    } // console.log('In browseLettings start')\n    // console.log(parameters.find)\n    // console.log(parameters.options)\n    // console.log(Collections.Properties.find(parameters.find, parameters.options).count())\n    // console.log('In browseLettings end')\n\n\n    properties = Collections.Properties.find(parameters.find, parameters.options);\n    var tmp = properties.fetch();\n    var propertyIds = [];\n\n    for (var i = 0; i < tmp.length; i++) {\n      propertyIds.push(tmp[i].auctionId);\n      if (i > parameters.options.limit) break;\n    }\n\n    auctions = [];\n\n    if (propertyIds.length) {\n      auctions = Collections.Auctions.find({\n        _id: {\n          $in: propertyIds\n        }\n      }, {\n        limit: parameters.options.limit,\n        sort: parameters.options.sort\n      });\n    }\n\n    if (!propertyIds.length) return properties;\n    return [properties, auctions];\n  });\n  Meteor.publish(\"total-houses-for-rent-count\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    parameters.options.fields = {\n      _id: 1\n    };\n\n    if (parameters.propertykey) {\n      if (parameters.propertykey.length > 0) {\n        Counts.publish(this, \"total-houses-for-rent-count\", Collections.Auctions.find({\n          lettingAuctionCode: {\n            $in: parameters.propertykey\n          },\n          isArchived: false\n        }), parameters.options);\n      }\n    } else {\n      parameters.find.isArchived = false;\n      parameters.find.auctionId = {\n        $exists: true,\n        $gt: \"\"\n      }; //if we don' put $gt, then its also giving results of records with empty vals - but we don' need deactivated properties\n\n      if (parameters.minRent && parameters.maxRent) {\n        parameters.find.rent = {\n          $gte: parseInt(parameters.minRent),\n          $lte: parseInt(parameters.maxRent)\n        };\n      } else if (parameters.minRent) {\n        parameters.find.rent = {\n          $gte: parseInt(parameters.minRent)\n        };\n      } else if (parameters.maxRent) {\n        parameters.find.rent = {\n          $lte: parseInt(parameters.maxRent)\n        };\n      }\n\n      if (parameters.minBeds && parameters.maxBeds) {\n        parameters.find.bedCount = {\n          $gte: parseInt(parameters.minBeds),\n          $lte: parseInt(parameters.maxBeds)\n        };\n      } else if (parameters.minBeds) {\n        parameters.find.bedCount = {\n          $gte: parseInt(parameters.minBeds)\n        };\n      } else if (parameters.maxBeds) {\n        parameters.find.bedCount = {\n          $lte: parseInt(parameters.maxBeds)\n        };\n      } else if (parameters.bedCount && !isNaN(parameters.bedCount)) {\n        parameters.find.bedCount = parseInt(parameters.bedCount);\n      } // console.log('In count start')\n      // console.log(parameters.find)\n      // console.log(parameters.options)\n      // console.log(Collections.Properties.find(parameters.find, parameters.options).count())\n      // console.log('In count end')\n\n\n      Counts.publish(this, \"total-houses-for-rent-count\", Collections.Properties.find(parameters.find), parameters.options);\n    }\n  });\n  Meteor.publish(\"viewLetting\", function (key) {\n    // var auctions = Collections.Auctions.find({lettingAuctionCode:key,isArchived:false},{\n    var auctions = Collections.Auctions.find({\n      lettingAuctionCode: key\n    }, {\n      limit: 1\n    });\n    var tmp = auctions.fetch();\n    var properties = [],\n        bids = [],\n        mainProperty = {},\n        relatedPropsTmp = [],\n        maxRel = 5,\n        //Max rel always needs to be 1 number higher than the req, due to the logic below.\n    relPropIds = [],\n        relAuctionIds = [],\n        i = 0;\n\n    try {\n      relPropIds.push(tmp[0].propertyId);\n      relAuctionIds.push(tmp[0]._id);\n      bids = Collections.Bids.find({\n        auctionId: tmp[0]._id\n      }, {\n        limit: 100,\n        sort: {\n          updatedAt: -1\n        }\n      }); //////// RELATED PROPS\n\n      mainProperty = Collections.Properties.findOne({\n        _id: tmp[0].propertyId\n      });\n      var notArr = [mainProperty._id];\n      var filters = {\n        \"type\": mainProperty.type,\n        \"address.county\": mainProperty.address.county,\n        \"address.area\": mainProperty.address.area,\n        \"auctionId\": {\n          $exists: true,\n          $gt: \"\"\n        },\n        \"isArchived\": false,\n        \"_id\": {\n          $not: {\n            $in: relPropIds\n          }\n        }\n      };\n      relatedPropsTmp = Collections.Properties.find(filters, {\n        fields: {\n          _id: 1,\n          auctionId: 1\n        },\n        limit: maxRel\n      }).fetch();\n\n      for (i = 0; i < relatedPropsTmp.length; i++) {\n        relPropIds.push(relatedPropsTmp[i]._id);\n        relAuctionIds.push(relatedPropsTmp[i].auctionId);\n      }\n\n      if (relPropIds.length < maxRel) {\n        delete filters[\"address.area\"];\n        filters[\"_id\"] = {\n          $not: {\n            $in: relPropIds\n          }\n        };\n        relatedPropsTmp = Collections.Properties.find(filters, {\n          fields: {\n            _id: 1,\n            auctionId: 1\n          },\n          limit: maxRel - relPropIds.length\n        }).fetch();\n\n        for (i = 0; i < relatedPropsTmp.length; i++) {\n          relPropIds.push(relatedPropsTmp[i]._id);\n          relAuctionIds.push(relatedPropsTmp[i].auctionId);\n        }\n      }\n\n      if (relPropIds.length < maxRel) {\n        delete filters[\"address.county\"];\n        filters[\"_id\"] = {\n          $not: {\n            $in: relPropIds\n          }\n        };\n        relatedPropsTmp = Collections.Properties.find(filters, {\n          fields: {\n            _id: 1,\n            auctionId: 1\n          },\n          limit: maxRel - relPropIds.length\n        }).fetch();\n\n        for (i = 0; i < relatedPropsTmp.length; i++) {\n          relPropIds.push(relatedPropsTmp[i]._id);\n          relAuctionIds.push(relatedPropsTmp[i].auctionId);\n        }\n      }\n\n      if (relPropIds.length < maxRel) {\n        delete filters[\"type\"];\n        filters[\"_id\"] = {\n          $not: {\n            $in: relPropIds\n          }\n        };\n        relatedPropsTmp = Collections.Properties.find(filters, {\n          fields: {\n            _id: 1,\n            auctionId: 1\n          },\n          limit: maxRel - relPropIds.length\n        }).fetch();\n\n        for (i = 0; i < relatedPropsTmp.length; i++) {\n          relPropIds.push(relatedPropsTmp[i]._id);\n          relAuctionIds.push(relatedPropsTmp[i].auctionId);\n        }\n      }\n\n      properties = Collections.Properties.find({\n        _id: {\n          $in: relPropIds\n        }\n      }, {\n        limit: maxRel + 1\n      });\n      auctions = Collections.Auctions.find({\n        _id: {\n          $in: relAuctionIds\n        }\n      }, {\n        limit: maxRel + 1\n      });\n    } catch (e) {\n      console.log(e);\n    }\n\n    if (!tmp.length) return [];\n    return [properties, auctions, bids];\n  });\n\n  var transformMyActiveAdvertisements = function (data) {\n    // console.log('in transformMyActiveAdvertisements');\n    // console.log(data.propertyId)\n    data.property = Collections.Properties.findOne(data.propertyId, {\n      fields: {\n        address: 1,\n        createdByAgent: 1,\n        createdAt: 1,\n        updatedAt: 1,\n        isArchived: 1,\n        auctionId: 1\n      }\n    });\n    return data;\n  };\n\n  Meteor.publish(\"inviteToApply.MyActiveAdvertisements\", function () {\n    var _this = this;\n\n    if (!this.userId) return []; //Need to login\n\n    var self = this;\n    var subHandle = Collections.Auctions.find().observeChanges({\n      added: function (id, fields) {\n        fields = transformMyActiveAdvertisements(fields);\n\n        _this.added('Auctions', id, fields);\n      },\n      changed: function (id, fields) {\n        _this.changed('Auctions', id, fields);\n      },\n      removed: function (id) {\n        _this.removed('Auctions', id);\n      }\n    });\n    this.ready();\n    this.onStop(function () {\n      subHandle.stop();\n    });\n    self.ready();\n  });\n  Meteor.publish(\"MyProperties\", function (terms) {\n    console.log('In MyProperties Publish ');\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    if (!this.userId) return [];\n    find = {};\n    find['createdByAgent'] = {\n      $in: [this.userId, 'demoproperty']\n    };\n    find['isArchived'] = false;\n    if (terms.onlyActive) find.auctionId = {\n      $exists: true,\n      $gt: \"\"\n    };\n    var properties = Collections.Properties.find(find, parameters.options);\n    var relAuctionIds = [];\n    var props = properties.fetch();\n\n    for (var i = 0; i < props.length; i++) {\n      if (props[i].auctionId) relAuctionIds.push(props[i].auctionId);\n    }\n\n    var auctions = Collections.Auctions.find({\n      _id: {\n        $in: relAuctionIds\n      }\n    }, {\n      limit: parameters.options.limit ? parameters.options.limit + 2 : 22\n    });\n    var bids = Collections.Bids.find({\n      auctionId: {\n        $in: relAuctionIds\n      }\n    }, {\n      limit: parameters.options.limit ? parameters.options.limit + 2 : 22\n    });\n    return [properties, auctions, bids];\n    this.ready();\n  });\n  Meteor.publish(\"total-MyProperties\", function (terms) {\n    if (!this.userId) return [];\n    find = {};\n    find['createdByAgent'] = {\n      $in: [this.userId, 'demoproperty']\n    };\n    find['isArchived'] = false;\n    if (terms.onlyActive) find.auctionId = {\n      $exists: true,\n      $gt: \"\"\n    };\n    Counts.publish(this, \"total-MyProperties\", Collections.Properties.find(find));\n  });\n  Meteor.publish(\"PropertyApplications\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    if (!this.userId) return [];\n    find = {\n      _id: parameters.id\n    };\n    find['isArchived'] = false;\n    var properties = Collections.Properties.find(find, {\n      limit: 1\n    });\n    var tmp = properties.fetch();\n    if (tmp.length == 0) return [];\n    var auctionId = tmp[0].auctionId;\n    var propertyId = tmp[0]._id; // console.log('In PropertyApplications start')\n    // console.log(parameters)\n    // console.log('Auctions')\n    // console.log(Collections.Auctions.find({_id:auctionId,isArchived:false},{limit:1 } ).count())\n    // console.log(Collections.Bids.find({auctionId:auctionId,isArchived:false},parameters.propertyApplications.options ).count())\n    // console.log(Collections.EmailEnquiries.find({propertyId:propertyId,isArchived:false},parameters.emailEnquiries.options ).count())\n    // console.log('In PropertyApplications end')\n\n    var auctions = Collections.Auctions.find({\n      _id: auctionId,\n      isArchived: false\n    }, {\n      limit: 1\n    });\n    tmp = auctions.fetch();\n    if (tmp.length == 0) return [];\n    var bids = Collections.Bids.find({\n      auctionId: auctionId,\n      isArchived: false\n    }, parameters.propertyApplications.options);\n    var EmailEnquiries = Collections.EmailEnquiries.find({\n      propertyId: propertyId,\n      isArchived: false\n    }, parameters.emailEnquiries.options);\n    tmp = bids.fetch();\n    var userIds = [];\n\n    for (var j = 0; j < tmp.length; j++) {\n      userIds.push(tmp[j].userId);\n    }\n\n    var users = Meteor.users.find({\n      _id: this.userId\n    });\n    if (parameters.emailEnquiries) users = Meteor.users.find({\n      _id: {\n        $in: userIds\n      }\n    }, {\n      limit: parameters.emailEnquiries.options.limit,\n      fields: {\n        'services.facebook.id': 1,\n        'services.twitter.screenName': 1,\n        'services.linkedin.publicProfileUrl': 1,\n        'services.google.id': 1,\n        'createdAt': 1,\n        'lastLoginDate': 1,\n        'profile': 1,\n        'isSA': 1\n      }\n    }); // just need the limit from there.\n\n    return [properties, auctions, bids, EmailEnquiries, users];\n    this.ready();\n  });\n  Meteor.publish(\"total-PropertyApplications\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    if (!this.userId) return [];\n    find = {\n      _id: parameters.id\n    };\n    find['isArchived'] = false;\n    var properties = Collections.Properties.find(find, {\n      limit: 1\n    });\n    var tmp = properties.fetch();\n    if (tmp.length == 0) return [];\n    var auctionId = tmp[0].auctionId;\n    var propertyId = tmp[0]._id;\n    Counts.publish(this, \"total-PropertyApplications\", Collections.Bids.find({\n      auctionId: auctionId,\n      isArchived: false\n    }), parameters.propertyApplications.options);\n  });\n  Meteor.publish(\"total-EmailEnquiries\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    if (!this.userId) return [];\n    find = {\n      _id: parameters.id\n    };\n    find['isArchived'] = false;\n    var properties = Collections.Properties.find(find, {\n      limit: 1\n    });\n    var tmp = properties.fetch();\n    if (tmp.length == 0) return [];\n    var auctionId = tmp[0].auctionId;\n    var propertyId = tmp[0]._id;\n    Counts.publish(this, \"total-EmailEnquiries\", Collections.EmailEnquiries.find({\n      propertyId: propertyId,\n      isArchived: false\n    }), parameters.emailEnquiries.options);\n  });\n  Meteor.publish(\"Advertisement\", function (advertisementId) {\n    var validationSuccess = false;\n    if (advertisementId.length > 12 && advertisementId.length < 20) validationSuccess = true;\n    if (!validationSuccess) return [];else return Collections.Auctions.find({\n      _id: advertisementId,\n      isArchived: false\n    }, {\n      limit: 1\n    });\n    this.ready();\n  });\n  Meteor.publish(\"MyAdvertisements\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    if (!this.userId) return [];\n    return Collections.Auctions.find({\n      createdByAgent: {\n        $in: [this.userId, 'demoproperty']\n      },\n      isArchived: false\n    }, parameters.options);\n    this.ready();\n  });\n  Meteor.publish(\"editProperty\", function (propertyId) {\n    if (!this.userId) return [];\n    var auctions = Collections.Auctions.find({\n      isArchived: false,\n      propertyId: propertyId\n    }, {\n      transform: function (doc) {\n        if (doc.createdByAgent != this.userId) {\n          return {\n            _id: doc._id,\n            propertyId: doc.propertyId,\n            createdByAgent: doc.createdByAgent\n          };\n        }\n      },\n      limit: 1\n    });\n    var properties = Collections.Properties.find({\n      isArchived: false,\n      _id: propertyId\n    }, {\n      transform: function (doc) {\n        if (doc.createdByAgent != this.userId) {\n          return {\n            _id: doc._id,\n            propertyId: doc.propertyId\n          };\n        }\n      },\n      limit: 1\n    });\n    return [auctions, properties];\n  });\n  Meteor.publish(\"propertyApplication\", function (propertyId, auctionId) {\n    if (!this.userId) return [];\n    var properties = Collections.Properties.find({\n      isArchived: false,\n      _id: propertyId\n    }, {\n      transform: function (doc) {\n        if (doc.createdByAgent != this.userId) {\n          return {\n            _id: doc._id,\n            propertyId: doc.propertyId,\n            invalidAgent: true\n          };\n        }\n      },\n      limit: 1\n    });\n    var auctionIDTmp = '';\n    var invalidAgentProp = false;\n    var tmp = properties.fetch();\n\n    try {\n      auctionIDTmp = tmp[0].auctionId;\n      if (tmp[0].invalidAgent) invalidAgentProp = true;\n    } catch (e) {}\n\n    if (!tmp.length || invalidAgentProp) {\n      //Property not found, no need to find auction\n      console.log(\"invalidAgentProp: \" + invalidAgentProp);\n      console.log(\"tmp.length: \" + tmp.length);\n      return [];\n    }\n\n    if (auctionId) auctionIDTmp = auctionId;\n    var auctions = Collections.Auctions.find({\n      isArchived: false,\n      _id: auctionIDTmp\n    }, {\n      transform: function (doc) {\n        if (doc.createdByAgent != this.userId) {\n          return {\n            _id: doc._id,\n            propertyId: doc.propertyId,\n            createdByAgent: doc.createdByAgent\n          };\n        }\n      },\n      limit: 1\n    });\n    var tmp = properties.fetch();\n\n    if (!tmp.length) {\n      return [];\n    }\n\n    var bids = Collections.Bids.find({\n      isArchived: false,\n      _id: auctionIDTmp\n    }, {\n      transform: function (doc) {\n        if (doc.createdByAgent != this.userId) {\n          return {\n            _id: doc._id,\n            propertyId: doc.propertyId,\n            createdByAgent: doc.createdByAgent\n          };\n        }\n      },\n      limit: 1\n    });\n    return [auctions, properties];\n  });\n  Meteor.publish(\"Areas\", function (c1, c2, c3, c4, c5) {\n    // For ireland\n    // c1: Territory: like UK for ireland, its empty\n    // c2: Country => Ireland\n    // c3: County => Dublin / City\n    // c4: Sub County => Dublin 1\n    // c5: Area => Baltinglass\n    // console.log('Vals are c3: '+c3)\n    // return [];\n    var selector = {},\n        paramReceived = false;\n\n    if (c1) {\n      paramReceived = true;\n      selector['Territory'] = c1;\n    }\n\n    if (c2) {\n      paramReceived = true;\n      selector['Country'] = c2;\n    }\n\n    if (c3) {\n      paramReceived = true;\n      selector['County'] = c3;\n    }\n\n    if (c4) {\n      paramReceived = true;\n      selector['Sub County'] = c4;\n    }\n\n    if (c5) {\n      paramReceived = true;\n      selector['Area'] = c5;\n    }\n\n    if (!paramReceived) {\n      //Don't send all area info, for performance reasons. \n      // console.log('in if c3: '+c3)\n      return [];\n    } else {\n      // console.log('in else c3: '+c3)\n      // console.log(selector)\n      return Collections.Areas.find(selector, {});\n    }\n\n    this.ready();\n  });\n  Meteor.publish(\"browseBlogs\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    parameters.find.isArchived = false;\n    var Blogs = Collections.Blogs.find(parameters.find, parameters.options);\n    return Blogs;\n    this.ready();\n  });\n  Meteor.publish(\"total-blogs-count\", function (terms) {\n    var parameters = queryConstructor(terms);\n\n    if (parameters.fail) {\n      return [];\n      this.ready();\n    }\n\n    parameters.find.isArchived = false;\n    Counts.publish(this, \"total-blogs-count\", Collections.Blogs.find(parameters.find), {\n      fields: {\n        _id: 1\n      }\n    });\n  });\n  Meteor.publish(\"viewBlog\", function (key) {\n    if (!key) return [];\n    var tmp = Collections.Blogs.findOne({\n      slug: key\n    }, {\n      limit: 1\n    });\n\n    if (!tmp || !tmp._id) {\n      return []; //Blog not found.\n    }\n\n    var notArr = [],\n        Blogs = [],\n        recentBlogsTmp = [],\n        relBlogIds = [],\n        i = 0,\n        maxRecent = 4;\n\n    try {\n      notArr.push(tmp.wpId);\n      relBlogIds.push(tmp._id);\n\n      for (i = 0; i < tmp.related.length; i++) {\n        notArr.push(tmp.related[i].wpId);\n      }\n\n      var filters = {\n        \"isArchived\": false,\n        \"wpId\": {\n          $not: {\n            $in: notArr\n          }\n        }\n      };\n      recentBlogsTmp = Collections.Blogs.find(filters, {\n        fields: {\n          _id: 1,\n          wpId: 1\n        },\n        limit: maxRecent\n      }).fetch();\n\n      for (i = 0; i < recentBlogsTmp.length; i++) {\n        relBlogIds.push(recentBlogsTmp[i]._id);\n      }\n\n      Blogs = Collections.Blogs.find({\n        _id: {\n          $in: relBlogIds\n        }\n      }, {\n        limit: maxRecent + 1 // sort:{updatedAt : -1} // Not needed, anyway, it will send records to UI without order. and IDs are definitly specified.\n\n      });\n    } catch (e) {\n      console.log(e);\n    }\n\n    return Blogs;\n    this.ready();\n  });\n  Meteor.publish(\"Properties\", function () {\n    var Properties = Collections.Properties;\n    var selector = {};\n    return Properties.find(selector, {});\n    this.ready();\n  });\n  Meteor.publish(\"Bids\", function () {\n    //if (this.userId) {\n    //  let Projects = Collections.Bids;\n    //  //let selector = {\"userId\":this.userId};\n    //  let selector = {};//We need to query even when he isn't logged in.\n    //  return Projects.find(selector, {});\n    //}else {\n    //    // Declare that no data is being published. If you leave this line\n    //    // out, Meteor will never consider the subscription ready because\n    //    // it thinks you're using the added/changed/removed interface where\n    //    // you have to explicitly call this.ready().\n    //    return [];\n    //  }\n    var Projects = Collections.Bids;\n    var selector = {};\n    return Projects.find(selector, {});\n    this.ready();\n  });\n  Meteor.publish(\"MyBids\", function () {\n    if (this.userId) {\n      var Projects = Collections.Bids;\n      var selector = {\n        \"userId\": this.userId\n      }; //let selector = {};//We need to query even when he isn't logged in.\n\n      return Projects.find(selector, {});\n    } else {\n      // Declare that no data is being published. If you leave this line\n      // out, Meteor will never consider the subscription ready because\n      // it thinks you're using the added/changed/removed interface where\n      // you have to explicitly call this.ready().\n      return [];\n    }\n  });\n  Meteor.publish(\"Auctions\", function () {\n    var Projects = Collections.Auctions;\n    var selector = {};\n    return Projects.find(selector, {});\n    this.ready();\n  });\n  Meteor.publish(\"Config\", function () {\n    var Projects = Collections.Config;\n    var selector = {};\n    return Projects.find(selector, {});\n    this.ready();\n  }); // Meteor.publish(\"Payments\", function () {\n  //\n  //     if (this.userId) {\n  //         let Payments = Collections.Payments;\n  //         let selector = {\"userId\":this.userId};\n  //         //let selector = {};//We need to query even when he isn't logged in.\n  //         return Payments.find(selector, {});\n  //\n  //         this.ready();\n  //     }else {\n  //         let Payments = Collections.Payments;\n  //         let selector = {};\n  //         return Payments.find(selector, {});\n  //\n  //         this.ready();\n  //     }\n  // });\n  //Meteor.publish(\"MyBids\", function () {//NOT WORKING IN PUBLISH, HAS TO DO IN CLIENT\n  //\n  //  if (this.userId) {//userId is null if no user is logged in.\n  //    let Bids = Collections.Bids;\n  //    //const userId = Meteor.userId();\n  //    let selector = {\"userId\":this.userId};\n  //    return Bids.find(selector, {\n  //      transform: function(doc) {\n  //        doc.unit = Collections.Units.findOne({\n  //          _id: doc.unitId\n  //        });\n  //        doc.auction = Collections.Auctions.findOne({\n  //          _id: doc.auctionId\n  //        });\n  //        doc.project = Collections.Properties.findOne({\n  //          _id: doc.unit.projectId\n  //        });\n  //        return doc;\n  //      },\n  //      sort: {\n  //        createdAt: -1\n  //      }\n  //\n  //    });\n  //  } else {\n  //    // Declare that no data is being published. If you leave this line\n  //    // out, Meteor will never consider the subscription ready because\n  //    // it thinks you're using the added/changed/removed interface where\n  //    // you have to explicitly call this.ready().\n  //    return [];\n  //  }\n  //  this.ready();\n  //});\n  // Meteor.publish('Meteor.users.initials', function ({ userIds }) {\n  //     // Validate the arguments to be what we expect\n  //     new SimpleSchema({\n  //         userIds: { type: [String] }\n  //     }).validate({ userIds });\n  //\n  //     // Select only the users that match the array of IDs passed in\n  //     const selector = {\n  //         _id: { $in: userIds }\n  //     };\n  //\n  //     // Only return one field, `initials`\n  //     const options = {\n  //         fields: { initials: 1 }\n  //     };\n  //\n  //     return Meteor.users.find(selector, options);\n  // });\n}","map":{"version":3,"sources":["imports/api/publications.js"],"names":["module","link","Meteor","isClient","isServer","publish","terms","parameters","queryConstructor","fail","ready","Collections","PropertyManage","find","options","ActivityHistory","propertyId","id","limit","sort","createdAt","auctionId","ReactiveAggregate","Bids","$match","$group","userId","$avg","clientCollection","Properties","users","_id","fields","username","ret","user","fetch","length","profile","isPublic","e","console","log","pageno","pg","parseInt","isNaN","resperpage","skip","auctions","properties","address","createdByAgent","type","updatedAt","isArchived","slug","bedCount","baths","rent","rentType","gallery","propertykey","Auctions","lettingAuctionCode","$in","tmp","propertyIds","i","push","$exists","$gt","minRent","maxRent","$gte","$lte","minBeds","maxBeds","Counts","key","bids","mainProperty","relatedPropsTmp","maxRel","relPropIds","relAuctionIds","findOne","notArr","filters","county","area","$not","transformMyActiveAdvertisements","data","property","self","subHandle","observeChanges","added","changed","removed","onStop","stop","onlyActive","props","propertyApplications","EmailEnquiries","emailEnquiries","userIds","j","advertisementId","validationSuccess","transform","doc","invalidAgent","auctionIDTmp","invalidAgentProp","c1","c2","c3","c4","c5","selector","paramReceived","Areas","Blogs","recentBlogsTmp","relBlogIds","maxRecent","wpId","related","Projects","Config"],"mappings":"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","sourcesContent":["import \"./collections.js\";\n\nif (Meteor.isClient) {\n\n}\n\n//PUBLICATIONS\nif (Meteor.isServer) {\n    Meteor.publish(\"PropertyManage\", function (terms) {\n        var parameters = queryConstructor(terms);\n        if(parameters.fail) {return [];this.ready();}\n        return Collections.PropertyManage.find(parameters.find, parameters.options);\n    });\n    Meteor.publish(\"ActivityHistory\", function (terms) {\n        // console.log('ActivityHistory');\n\n        return Collections.ActivityHistory.find( {propertyId:terms.id}, {limit: terms.limit,sort: { createdAt : -1 }});\n    });\n    Meteor.publish(\"avgOffer\", function(auctionId) {\n        // console.log(\"Subscribed: auctionId: \"+auctionId)\n        // var self = this;\n        // var handle = Collections.Bids.aggregate([\n        //     { $match : { \"auctionId\" : auctionId } },\n        //     { $group : {\n        //             '_id': this.userId,\n        //             'avgOffer': {\n        //                 // In this case, we're running summation.\n        //                 $avg: '$yourBid'\n        //             }\n        //         }\n        //     }\n        // ]).forEach(function(data) {\n        //     self.added('avgOffer', 'first', data);\n        // });\n\n        ReactiveAggregate(this, Collections.Bids,[\n            { $match : { \"auctionId\" : auctionId } },\n            { $group : {\n                    '_id': this.userId,\n                    'avgOffer': {\n                        // In this case, we're running summation.\n                        $avg: '$yourBid'\n                    }\n                }\n            }\n        ] , { clientCollection: \"avgOffer\" }\n        );\n\n    });\n    Meteor.publish(\"Property\", function (terms) {\n        // console.log('Property');\n        var parameters = queryConstructor(terms);\n        // console.log(parameters.find)\n        // console.log(parameters.options)\n        // console.log(Collections.Properties.find(parameters.find, parameters.options).count())\n        if(parameters.fail) {return [];this.ready();}\n        return Collections.Properties.find(parameters.find, parameters.options);\n    });\n    Meteor.publish(\"userData\", function () {\n        if(!this.userId)return []; //Need to login\n        // 'services.password':1,Don use this , we have a method for this\n        return Meteor.users.find({_id: this.userId},{\n            limit:1, \n            fields: { \n            'services.facebook.id':1,\n            'services.twitter.screenName':1,\n            'services.linkedin.publicProfileUrl':1,\n            'services.google.id':1,\n            'createdAt':1, \n            'lastLoginDate':1, \n            'profile':1 ,\n            'isSA':1 ,\n            },\n        }\n        )\n    });\n    Meteor.publish(\"userDataUsername\", function (username) {\n        if(!username)return [];\n        var ret = Meteor.users.find({ \"profile.username\":username },{\n            limit:1,\n            fields: {\n                'createdAt':1,\n                'lastLoginDate':1,\n                'profile.name':1,\n                'profile.email':1,\n                'profile.role':1,\n                'profile.picture':1,\n                'profile.mobile':1,\n                'profile.isPublic':1,\n                'profile.username':1,\n            }\n        });\n        var user = ret.fetch();\n        // console.log(username)\n        // console.log(user)\n        if(!user.length){ return [];}\n        try{\n        if(user[0].profile.isPublic){//If public then include social info as well.\n            return  Meteor.users.find({ \"profile.username\":username },{\n                limit:1,\n                fields: {\n                    'createdAt':1,\n                    'lastLoginDate':1,\n                    'profile':1,\n                    'services.facebook.id':1,\n                    'services.twitter.screenName':1,\n                    'services.linkedin.publicProfileUrl':1,\n                    'services.google.id':1,\n                }\n            });\n        }\n        }catch(e){\n            console.log(e)\n        }\n        return ret;\n    });\n    Meteor.publish(\"allUserData\", function () {\n        return Meteor.users.find({}, {\n            fields: {\n                'createdAt':1,\n                'lastLoginDate':1,\n                'profile':1,\n                'services.facebook.id':1,\n                'services.twitter.screenName':1,\n                'services.linkedin.publicProfileUrl':1,\n                'services.google.id':1\n            }\n        });//fields: {'nested.things': 1}\n    });\n    Meteor.publish(\"tenants\", function (pageno) {\n        var pg = 1;\n        try{pg = parseInt(pageno);}catch(e){}\n        if(isNaN(pg))pg = 1;\n        var resperpage = 10;\n        var skip = (pg-1)*resperpage;\n\n        return Meteor.users.find({ \"profile.isPublic\":true },{\n            skip:skip,\n            limit:resperpage,\n            fields: {\n                'createdAt':1,\n                'lastLoginDate':1,\n                'profile.name':1,\n                'profile.email':1,\n                'profile.role':1,\n                'profile.picture':1,\n                'profile.mobile':1,\n                'profile.isPublic':1,\n                'services.facebook.id':1,\n                'services.twitter.screenName':1,\n                'services.linkedin.publicProfileUrl':1,\n                'services.google.id':1,\n                // 'profile.username':1,\n            }\n        });\n    });\n\n    Meteor.publish(\"browseLettings\", function (terms) {\n        var parameters = queryConstructor(terms);\n\n        if(parameters.fail) {return [];this.ready();}\n\n        var auctions = [],properties = [];\n        parameters.options.fields = {\n            address:1,\n            createdByAgent:1,\n            type:1,\n            createdAt:1,\n            updatedAt:1,\n            isArchived:1,\n            auctionId:1,\n            slug:1,\n            bedCount:1,\n            baths:1,\n            rent:1,\n            rentType:1,\n            gallery:1\n        };\n\n        // console.log('property key is')\n        // console.log(parameters.propertykey)\n        if(parameters.propertykey)\n        if(parameters.propertykey.length>0){\n            console.log('inside propertykey')\n            auctions = Collections.Auctions.find({lettingAuctionCode:{$in:parameters.propertykey},isArchived:false},parameters.options)\n            var tmp = auctions.fetch();\n\n            var propertyIds = [];\n            for(var i=0;i<tmp.length;i++){\n                propertyIds.push(tmp[i].propertyId);\n                if(i>parameters.options.limit)break;\n            }\n\n            properties = []\n            if(propertyIds.length){\n                properties = Collections.Properties.find({_id:{$in:propertyIds}},{\n                    limit:parameters.options.limit,\n                    sort:parameters.options.sort\n                })\n            }\n            if(!propertyIds.length)return [];\n            return [properties, auctions];\n        }\n\n        parameters.find.isArchived = false;\n        parameters.find.auctionId = {$exists:true, $gt: \"\" };//if we don' put $gt, then its also giving results of records with empty vals - but we don' need deactivated properties\n        if(parameters.minRent && parameters.maxRent){\n            parameters.find.rent = {$gte:parseInt(parameters.minRent),$lte:parseInt(parameters.maxRent)}\n        }else if (parameters.minRent){\n            parameters.find.rent = {$gte:parseInt(parameters.minRent)}\n        }else if (parameters.maxRent){\n            parameters.find.rent = {$lte:parseInt(parameters.maxRent)}\n        }\n        if(parameters.minBeds && parameters.maxBeds){\n            parameters.find.bedCount = {$gte:parseInt(parameters.minBeds),$lte:parseInt(parameters.maxBeds)}\n        }else if (parameters.minBeds){\n            parameters.find.bedCount = {$gte:parseInt(parameters.minBeds)}\n        }else if (parameters.maxBeds){\n            parameters.find.bedCount = {$lte:parseInt(parameters.maxBeds)}\n        }else if(parameters.bedCount && !isNaN(parameters.bedCount)){\n            parameters.find.bedCount = parseInt(parameters.bedCount)\n        }\n\n        // console.log('In browseLettings start')\n        // console.log(parameters.find)\n        // console.log(parameters.options)\n        // console.log(Collections.Properties.find(parameters.find, parameters.options).count())\n        // console.log('In browseLettings end')\n\n        properties = Collections.Properties.find(parameters.find,parameters.options)\n        var tmp = properties.fetch();\n\n        var propertyIds = [];\n        for(var i=0;i<tmp.length;i++){\n            propertyIds.push(tmp[i].auctionId);\n            if(i>parameters.options.limit)break;\n        }\n\n        auctions = []\n        if(propertyIds.length){\n            auctions = Collections.Auctions.find({_id:{$in:propertyIds}},{\n                limit:parameters.options.limit,\n                sort:parameters.options.sort\n            })\n        }\n\n        if(!propertyIds.length)return properties;\n        return [properties, auctions];\n    });\n    Meteor.publish(\"total-houses-for-rent-count\",function(terms){\n        var parameters = queryConstructor(terms);\n\n        if(parameters.fail) {return [];this.ready();}\n\n        parameters.options.fields = {_id:1};\n\n        if(parameters.propertykey) {\n            if (parameters.propertykey.length > 0) {\n\n                Counts.publish(this,\"total-houses-for-rent-count\",Collections.Auctions.find({\n                    lettingAuctionCode: {$in: parameters.propertykey},\n                    isArchived: false\n                }),parameters.options);\n\n            }\n        }else{\n            parameters.find.isArchived = false;\n            parameters.find.auctionId = {$exists:true, $gt: \"\" };//if we don' put $gt, then its also giving results of records with empty vals - but we don' need deactivated properties\n            if(parameters.minRent && parameters.maxRent){\n                parameters.find.rent = {$gte:parseInt(parameters.minRent),$lte:parseInt(parameters.maxRent)}\n            }else if (parameters.minRent){\n                parameters.find.rent = {$gte:parseInt(parameters.minRent)}\n            }else if (parameters.maxRent){\n                parameters.find.rent = {$lte:parseInt(parameters.maxRent)}\n            }\n            if(parameters.minBeds && parameters.maxBeds){\n                parameters.find.bedCount = {$gte:parseInt(parameters.minBeds),$lte:parseInt(parameters.maxBeds)}\n            }else if (parameters.minBeds){\n                parameters.find.bedCount = {$gte:parseInt(parameters.minBeds)}\n            }else if (parameters.maxBeds){\n                parameters.find.bedCount = {$lte:parseInt(parameters.maxBeds)}\n            }else if(parameters.bedCount && !isNaN(parameters.bedCount)){\n                parameters.find.bedCount = parseInt(parameters.bedCount)\n            }\n            // console.log('In count start')\n            // console.log(parameters.find)\n            // console.log(parameters.options)\n            // console.log(Collections.Properties.find(parameters.find, parameters.options).count())\n            // console.log('In count end')\n\n            Counts.publish(this,\"total-houses-for-rent-count\",Collections.Properties.find(parameters.find),parameters.options);\n        }\n    });\n\n    Meteor.publish(\"viewLetting\", function (key) {\n\n        // var auctions = Collections.Auctions.find({lettingAuctionCode:key,isArchived:false},{\n        var auctions = Collections.Auctions.find({lettingAuctionCode:key},{\n            limit:1\n        })\n        var tmp = auctions.fetch();\n\n        var properties = [],bids=[],mainProperty={},relatedPropsTmp=[],maxRel = 5,//Max rel always needs to be 1 number higher than the req, due to the logic below.\n            relPropIds = [],relAuctionIds = [],i=0\n        try{\n            relPropIds.push(tmp[0].propertyId);\n            relAuctionIds.push(tmp[0]._id);\n\n            bids = Collections.Bids.find({auctionId:tmp[0]._id},{\n                limit:100,\n                sort: {updatedAt: -1}\n            })\n\n            //////// RELATED PROPS\n            mainProperty = Collections.Properties.findOne({_id:tmp[0].propertyId});\n            var notArr = [mainProperty._id]\n            var filters = {\n                \"type\":mainProperty.type,\n                \"address.county\":mainProperty.address.county,\n                \"address.area\":mainProperty.address.area,\n                \"auctionId\": {$exists:true, $gt: \"\" },\n                \"isArchived\":false,\n                \"_id\": { $not: { $in: relPropIds } }\n            }\n\n            relatedPropsTmp = Collections.Properties.find(filters,{fields:{_id:1,auctionId:1},limit:maxRel}).fetch();\n            for(i=0;i<relatedPropsTmp.length;i++){\n                relPropIds.push(relatedPropsTmp[i]._id);\n                relAuctionIds.push(relatedPropsTmp[i].auctionId)\n            }\n\n            if(relPropIds.length<maxRel) {\n                delete filters[\"address.area\"];\n                filters[\"_id\"] = { $not: { $in: relPropIds } };\n                relatedPropsTmp = Collections.Properties.find(filters, {\n                    fields: {_id: 1,auctionId:1},\n                    limit: (maxRel - relPropIds.length)\n                }).fetch();\n                for (i = 0; i < relatedPropsTmp.length; i++){ relPropIds.push(relatedPropsTmp[i]._id); relAuctionIds.push(relatedPropsTmp[i].auctionId)}\n            }\n            if(relPropIds.length<maxRel) {\n                delete filters[\"address.county\"];\n                filters[\"_id\"] = { $not: { $in: relPropIds } };\n                relatedPropsTmp = Collections.Properties.find(filters, {\n                    fields: {_id: 1,auctionId:1},\n                    limit: (maxRel - relPropIds.length)\n                }).fetch();\n                for (i = 0; i < relatedPropsTmp.length; i++){ relPropIds.push(relatedPropsTmp[i]._id); relAuctionIds.push(relatedPropsTmp[i].auctionId)}\n            }\n            if(relPropIds.length<maxRel) {\n                delete filters[\"type\"];\n                filters[\"_id\"] = { $not: { $in: relPropIds } };\n                relatedPropsTmp = Collections.Properties.find(filters, {\n                    fields: {_id: 1,auctionId:1},\n                    limit: (maxRel - relPropIds.length)\n                }).fetch();\n                for (i = 0; i < relatedPropsTmp.length; i++){ relPropIds.push(relatedPropsTmp[i]._id); relAuctionIds.push(relatedPropsTmp[i].auctionId)}\n            }\n\n\n            properties = Collections.Properties.find({_id:{$in:relPropIds}},{\n                limit:(maxRel+1)})\n            auctions = Collections.Auctions.find({_id:{$in:relAuctionIds}},{\n                limit:(maxRel+1)})\n        }catch(e){\n            console.log(e);\n        }\n\n        if(!tmp.length)return [];\n        return [properties, auctions,bids];\n    });\n\n    let transformMyActiveAdvertisements = (data) => {\n        // console.log('in transformMyActiveAdvertisements');\n        // console.log(data.propertyId)\n        data.property = Collections.Properties.findOne(data.propertyId,{\n            fields:{\n                address:1,\n                createdByAgent:1,\n                createdAt:1,\n                updatedAt:1,\n                isArchived:1,\n                auctionId:1\n            }\n        });\n        return data;\n    };\n    Meteor.publish(\"inviteToApply.MyActiveAdvertisements\", function () {\n        if(!this.userId)return []; //Need to login\n\n        var self = this;\n        let subHandle = Collections.Auctions\n            .find()\n            .observeChanges({\n                added: (id, fields) => {\n                    fields = transformMyActiveAdvertisements(fields);\n                    this.added('Auctions', id, fields);\n                },\n                changed: (id, fields) => {\n                    this.changed('Auctions', id, fields);\n                },\n                removed: (id) => {\n                    this.removed('Auctions', id);\n                }\n            });\n        this.ready();\n        this.onStop(() => {\n            subHandle.stop();\n        });\n\n        self.ready();\n    });\n\n    Meteor.publish(\"MyProperties\", function (terms) {\n        console.log('In MyProperties Publish ');\n        var parameters = queryConstructor(terms);\n\n        if(parameters.fail) {return [];this.ready();}\n        if(!this.userId)return [];\n\n        find = {}\n        find['createdByAgent'] = {$in:[this.userId,'demoproperty']}\n        find['isArchived'] = false\n        if(terms.onlyActive)find.auctionId = {$exists:true, $gt: \"\" };\n\n        var properties = Collections.Properties.find(find, parameters.options)\n\n        var relAuctionIds = []\n        var props = properties.fetch();\n        for(var i=0;i<props.length;i++)if(props[i].auctionId)relAuctionIds.push(props[i].auctionId)\n\n        var auctions = Collections.Auctions.find({_id:{$in:relAuctionIds}},{limit:(parameters.options.limit?parameters.options.limit+2:22) } )\n        var bids = Collections.Bids.find({auctionId:{$in:relAuctionIds}},{limit:(parameters.options.limit?parameters.options.limit+2:22) } )\n\n        return [properties,\n            auctions,\n            bids\n        ];\n\n        this.ready();\n    });\n    Meteor.publish(\"total-MyProperties\", function (terms) {\n        if(!this.userId)return [];\n\n        find = {}\n        find['createdByAgent'] = {$in:[this.userId,'demoproperty']}\n        find['isArchived'] = false\n        if(terms.onlyActive)find.auctionId = {$exists:true, $gt: \"\" };\n\n        Counts.publish(this,\"total-MyProperties\",Collections.Properties.find(find));\n    });\n\n    Meteor.publish(\"PropertyApplications\", function (terms) {\n\n        var parameters = queryConstructor(terms);\n\n        if(parameters.fail) {return [];this.ready();}\n        if(!this.userId)return [];\n\n        find = {_id:parameters.id}\n        find['isArchived'] = false\n\n        let properties = Collections.Properties.find(find, {limit:1})\n        let tmp = properties.fetch();\n        if(tmp.length==0)return [];\n\n        let auctionId = tmp[0].auctionId;\n        let propertyId = tmp[0]._id;\n\n\n        // console.log('In PropertyApplications start')\n        // console.log(parameters)\n        // console.log('Auctions')\n        // console.log(Collections.Auctions.find({_id:auctionId,isArchived:false},{limit:1 } ).count())\n        // console.log(Collections.Bids.find({auctionId:auctionId,isArchived:false},parameters.propertyApplications.options ).count())\n        // console.log(Collections.EmailEnquiries.find({propertyId:propertyId,isArchived:false},parameters.emailEnquiries.options ).count())\n        // console.log('In PropertyApplications end')\n\n        let auctions = Collections.Auctions.find({_id:auctionId,isArchived:false},{limit:1 } )\n        tmp = auctions.fetch();\n        if(tmp.length==0)return [];\n\n        let bids = Collections.Bids.find({auctionId:auctionId,isArchived:false},parameters.propertyApplications.options )\n\n        let EmailEnquiries = Collections.EmailEnquiries.find({propertyId:propertyId,isArchived:false},parameters.emailEnquiries.options )\n\n        tmp = bids.fetch();\n        let userIds = []\n        for(let j=0; j< tmp.length ; j++){\n            userIds.push(tmp[j].userId);\n        }\n        let users = Meteor.users.find({_id:this.userId})\n        if(parameters.emailEnquiries)\n            users = Meteor.users.find({_id:{$in: userIds}},{limit: parameters.emailEnquiries.options.limit,fields: {\n                    'services.facebook.id':1,\n                    'services.twitter.screenName':1,\n                    'services.linkedin.publicProfileUrl':1,\n                    'services.google.id':1,\n                    'createdAt':1,\n                    'lastLoginDate':1,\n                    'profile':1 ,\n                    'isSA':1 ,\n                } })// just need the limit from there.\n\n\n        return [properties,\n            auctions,\n            bids,\n            EmailEnquiries,\n            users\n        ];\n\n        this.ready();\n    });\n    Meteor.publish(\"total-PropertyApplications\", function (terms) {\n\n        var parameters = queryConstructor(terms);\n\n        if(parameters.fail) {return [];this.ready();}\n        if(!this.userId)return [];\n\n        find = {_id:parameters.id}\n        find['isArchived'] = false\n\n        let properties = Collections.Properties.find(find, {limit:1})\n        let tmp = properties.fetch();\n        if(tmp.length==0)return [];\n\n        let auctionId = tmp[0].auctionId;\n        let propertyId = tmp[0]._id;\n\n        Counts.publish(this,\"total-PropertyApplications\",Collections.Bids.find({auctionId:auctionId,isArchived:false}),parameters.propertyApplications.options)\n    });\n    Meteor.publish(\"total-EmailEnquiries\", function (terms) {\n\n        var parameters = queryConstructor(terms);\n\n        if(parameters.fail) {return [];this.ready();}\n        if(!this.userId)return [];\n\n        find = {_id:parameters.id}\n        find['isArchived'] = false\n\n        let properties = Collections.Properties.find(find, {limit:1})\n        let tmp = properties.fetch();\n        if(tmp.length==0)return [];\n\n        let auctionId = tmp[0].auctionId;\n        let propertyId = tmp[0]._id;\n\n        Counts.publish(this,\"total-EmailEnquiries\",Collections.EmailEnquiries.find({propertyId:propertyId,isArchived:false}),parameters.emailEnquiries.options)\n    });\n    Meteor.publish(\"Advertisement\", function (advertisementId) {\n        let validationSuccess = false;\n        if(advertisementId.length > 12 && advertisementId.length < 20)validationSuccess=true\n\n        if(!validationSuccess) return [];\n        else return Collections.Auctions.find({_id:advertisementId,isArchived:false}, {limit:1});\n\n        this.ready();\n    });\n    Meteor.publish(\"MyAdvertisements\", function (terms) {\n\n        var parameters = queryConstructor(terms);\n\n        if(parameters.fail) {return [];this.ready();}\n        if(!this.userId)return [];\n\n        return Collections.Auctions.find({createdByAgent:{$in:[this.userId,'demoproperty']},isArchived:false}, parameters.options);\n\n        this.ready();\n    });\n    Meteor.publish(\"editProperty\", function (propertyId) {\n        if(!this.userId)return [];\n\n        var auctions = Collections.Auctions.find({isArchived:false,propertyId:propertyId},{\n            transform:function(doc){\n                if(doc.createdByAgent!=this.userId){\n                    return {\n                        _id:doc._id,\n                        propertyId:doc.propertyId,\n                        createdByAgent:doc.createdByAgent\n                    }\n                }\n            },\n            limit:1\n        })\n\n        var properties = Collections.Properties.find({isArchived:false,_id:propertyId},{\n            transform:function(doc){\n                if(doc.createdByAgent!=this.userId){\n                    return {\n                        _id:doc._id,\n                        propertyId:doc.propertyId\n                    }\n                }\n            },\n            limit:1\n        })\n\n        return [auctions,properties];\n    });\n    Meteor.publish(\"propertyApplication\", function (propertyId,auctionId) {\n        if(!this.userId)return [];\n\n        var properties = Collections.Properties.find({isArchived:false,_id:propertyId},{\n            transform:function(doc){\n                if(doc.createdByAgent!=this.userId){\n                    return {\n                        _id:doc._id,\n                        propertyId:doc.propertyId,\n                        invalidAgent:true\n                    }\n                }\n            },\n            limit:1\n        })\n\n        var auctionIDTmp = '';var invalidAgentProp = false;\n        var tmp = properties.fetch()\n        try{\n            auctionIDTmp = tmp[0].auctionId;\n            if(tmp[0].invalidAgent)invalidAgentProp=true\n        }catch(e){}\n\n        if(!tmp.length || invalidAgentProp){//Property not found, no need to find auction\n            console.log(\"invalidAgentProp: \"+invalidAgentProp)\n            console.log(\"tmp.length: \"+tmp.length)\n            return [];\n        }\n\n\n        if(auctionId)auctionIDTmp=auctionId\n\n        var auctions = Collections.Auctions.find({isArchived:false,_id:auctionIDTmp},{\n            transform:function(doc){\n                if(doc.createdByAgent!=this.userId){\n                    return {\n                        _id:doc._id,\n                        propertyId:doc.propertyId,\n                        createdByAgent:doc.createdByAgent\n                    }\n                }\n            },\n            limit:1\n        })\n\n        var tmp = properties.fetch()\n        if(!tmp.length){\n            return [];\n        }\n\n        var bids = Collections.Bids.find({isArchived:false, _id:auctionIDTmp},{\n            transform:function(doc){\n                if(doc.createdByAgent!=this.userId){\n                    return {\n                        _id:doc._id,\n                        propertyId:doc.propertyId,\n                        createdByAgent:doc.createdByAgent\n                    }\n                }\n            },\n            limit:1\n        })\n\n        return [auctions,properties];\n    });\n    Meteor.publish(\"Areas\", function (c1,c2,c3,c4,c5) {\n        // For ireland\n        // c1: Territory: like UK for ireland, its empty\n        // c2: Country => Ireland\n        // c3: County => Dublin / City\n        // c4: Sub County => Dublin 1\n        // c5: Area => Baltinglass\n        // console.log('Vals are c3: '+c3)\n        // return [];\n        var selector = {},paramReceived = false;\n        if(c1){paramReceived=true;selector['Territory']=c1;}\n        if(c2){paramReceived=true;selector['Country']=c2;}\n        if(c3){paramReceived=true;selector['County']=c3;}\n        if(c4){paramReceived=true;selector['Sub County']=c4;}\n        if(c5){paramReceived=true;selector['Area']=c5;}\n        if(!paramReceived){//Don't send all area info, for performance reasons. \n            // console.log('in if c3: '+c3)\n            return [];\n        }else{ \n            // console.log('in else c3: '+c3)\n            // console.log(selector)\n            return Collections.Areas.find(selector, {});}\n        this.ready();\n    });\n\n    Meteor.publish(\"browseBlogs\", function (terms) {\n        var parameters = queryConstructor(terms);\n        if(parameters.fail) {return [];this.ready();}\n\n        parameters.find.isArchived = false;\n\n        var Blogs = Collections.Blogs.find(parameters.find,parameters.options)\n        return Blogs;\n        this.ready();\n    });\n    Meteor.publish(\"total-blogs-count\",function(terms){\n        var parameters = queryConstructor(terms);\n        if(parameters.fail) {return [];this.ready();}\n\n        parameters.find.isArchived = false;\n\n        Counts.publish(this,\"total-blogs-count\",Collections.Blogs.find(parameters.find),{fields:{_id:1}});\n    });\n    Meteor.publish(\"viewBlog\", function (key) {\n\n        if(!key)return [];\n\n        var tmp = Collections.Blogs.findOne({slug:key},{\n            limit:1\n        })\n        if(!tmp || !tmp._id){\n            return []; //Blog not found.\n        }\n\n        let notArr = [], Blogs = [],recentBlogsTmp = [],relBlogIds=[],i=0,maxRecent = 4\n        try{\n            notArr.push(tmp.wpId);\n            relBlogIds.push(tmp._id);\n            for(i=0; i< tmp.related.length;i++ ){\n                notArr.push(tmp.related[i].wpId);\n            }\n            var filters = {\n                \"isArchived\":false,\n                \"wpId\": { $not: { $in: notArr } }\n            }\n            recentBlogsTmp = Collections.Blogs.find(filters,{fields:{_id:1,wpId:1},limit:maxRecent}).fetch();\n            for(i=0;i<recentBlogsTmp.length;i++){\n                relBlogIds.push(recentBlogsTmp[i]._id);\n            }\n\n            Blogs = Collections.Blogs.find({_id:{$in:relBlogIds}},{\n                limit:(maxRecent+1),\n                // sort:{updatedAt : -1} // Not needed, anyway, it will send records to UI without order. and IDs are definitly specified.\n            })\n        }catch(e){\n            console.log(e);\n        }\n\n        return Blogs;this.ready();\n\n    });\n\n\n    Meteor.publish(\"Properties\", function () {\n\n        let Properties = Collections.Properties;\n        let selector = {};\n        return Properties.find(selector, {});\n\n        this.ready();\n    });\n    Meteor.publish(\"Bids\", function () {\n        //if (this.userId) {\n        //  let Projects = Collections.Bids;\n        //  //let selector = {\"userId\":this.userId};\n        //  let selector = {};//We need to query even when he isn't logged in.\n        //  return Projects.find(selector, {});\n        //}else {\n        //    // Declare that no data is being published. If you leave this line\n        //    // out, Meteor will never consider the subscription ready because\n        //    // it thinks you're using the added/changed/removed interface where\n        //    // you have to explicitly call this.ready().\n        //    return [];\n        //  }\n        let Projects = Collections.Bids;\n        let selector = {};\n        return Projects.find(selector, {});\n        this.ready();\n    });\n    Meteor.publish(\"MyBids\", function () {\n        if (this.userId) {\n            let Projects = Collections.Bids;\n            let selector = {\"userId\":this.userId};\n            //let selector = {};//We need to query even when he isn't logged in.\n            return Projects.find(selector, {});\n        }else {\n            // Declare that no data is being published. If you leave this line\n            // out, Meteor will never consider the subscription ready because\n            // it thinks you're using the added/changed/removed interface where\n            // you have to explicitly call this.ready().\n            return [];\n        }\n    });\n    Meteor.publish(\"Auctions\", function () {\n\n        let Projects = Collections.Auctions;\n        let selector = {};\n        return Projects.find(selector, {});\n\n        this.ready();\n    });\n    Meteor.publish(\"Config\", function () {\n\n        let Projects = Collections.Config;\n        let selector = {};\n        return Projects.find(selector, {});\n\n        this.ready();\n    });\n    // Meteor.publish(\"Payments\", function () {\n    //\n    //     if (this.userId) {\n    //         let Payments = Collections.Payments;\n    //         let selector = {\"userId\":this.userId};\n    //         //let selector = {};//We need to query even when he isn't logged in.\n    //         return Payments.find(selector, {});\n    //\n    //         this.ready();\n    //     }else {\n    //         let Payments = Collections.Payments;\n    //         let selector = {};\n    //         return Payments.find(selector, {});\n    //\n    //         this.ready();\n    //     }\n    // });\n    //Meteor.publish(\"MyBids\", function () {//NOT WORKING IN PUBLISH, HAS TO DO IN CLIENT\n    //\n    //  if (this.userId) {//userId is null if no user is logged in.\n    //    let Bids = Collections.Bids;\n    //    //const userId = Meteor.userId();\n    //    let selector = {\"userId\":this.userId};\n    //    return Bids.find(selector, {\n    //      transform: function(doc) {\n    //        doc.unit = Collections.Units.findOne({\n    //          _id: doc.unitId\n    //        });\n    //        doc.auction = Collections.Auctions.findOne({\n    //          _id: doc.auctionId\n    //        });\n    //        doc.project = Collections.Properties.findOne({\n    //          _id: doc.unit.projectId\n    //        });\n    //        return doc;\n    //      },\n    //      sort: {\n    //        createdAt: -1\n    //      }\n    //\n    //    });\n    //  } else {\n    //    // Declare that no data is being published. If you leave this line\n    //    // out, Meteor will never consider the subscription ready because\n    //    // it thinks you're using the added/changed/removed interface where\n    //    // you have to explicitly call this.ready().\n    //    return [];\n    //  }\n    //  this.ready();\n    //});\n    // Meteor.publish('Meteor.users.initials', function ({ userIds }) {\n    //     // Validate the arguments to be what we expect\n    //     new SimpleSchema({\n    //         userIds: { type: [String] }\n    //     }).validate({ userIds });\n    //\n    //     // Select only the users that match the array of IDs passed in\n    //     const selector = {\n    //         _id: { $in: userIds }\n    //     };\n    //\n    //     // Only return one field, `initials`\n    //     const options = {\n    //         fields: { initials: 1 }\n    //     };\n    //\n    //     return Meteor.users.find(selector, options);\n    // });\n}"]},"sourceType":"module","hash":"9a2f342656e92b7ada93cdfd2f52ef4d1bf679ac"}
