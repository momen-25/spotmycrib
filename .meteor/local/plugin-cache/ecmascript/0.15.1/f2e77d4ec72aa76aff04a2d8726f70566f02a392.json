{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/sourcemaps.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/montiapm:agent/lib/sourcemaps.js","filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/sourcemaps.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/montiapm:agent/lib/sourcemaps.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/montiapm:agent/lib/sourcemaps.js"}},"code":"var url = Npm.require('url');\n\nvar path = Npm.require('path');\n\nvar fs = Npm.require('fs');\n\nvar logger = Npm.require('debug')('kadira:apm:sourcemaps'); // Meteor 1.7 and older used clientPaths\n\n\nvar clientPaths = __meteor_bootstrap__.configJson.clientPaths;\nvar clientArchs = __meteor_bootstrap__.configJson.clientArchs;\nvar serverDir = __meteor_bootstrap__.serverDir;\nvar absClientPaths;\n\nif (clientArchs) {\n  absClientPaths = clientArchs.reduce((result, arch) => {\n    result[arch] = path.resolve(path.dirname(serverDir), arch);\n    return result;\n  }, {});\n} else {\n  absClientPaths = Object.keys(clientPaths).reduce((result, key) => {\n    result[key] = path.resolve(serverDir, path.dirname(clientPaths[key]));\n    return result;\n  }, {});\n}\n\nhandleApiResponse = function () {\n  let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var unavailable = [];\n\n  if (typeof body === 'string') {\n    try {\n      body = JSON.parse(body);\n    } catch (e) {\n      logger('failed parsing body', e, body);\n      return;\n    }\n  }\n\n  var neededSourcemaps = body.neededSourcemaps || [];\n  logger('body', neededSourcemaps);\n  var promises = neededSourcemaps.map(sourcemap => {\n    if (!Kadira.options.uploadSourceMaps) {\n      return unavailable.push(sourcemap);\n    }\n\n    return getSourcemapPath(sourcemap.arch, sourcemap.file.path).then(function (sourceMapPath) {\n      if (sourceMapPath === null) {\n        unavailable.push(sourcemap);\n      } else {\n        sendSourcemap(sourcemap, sourceMapPath);\n      }\n    });\n  });\n  Promise.all(promises).then(function () {\n    if (unavailable.length > 0) {\n      logger('sending unavailable sourcemaps', unavailable);\n      Kadira.coreApi.sendData({\n        unavailableSourcemaps: unavailable\n      }).then(function (body) {\n        handleApiResponse(body);\n      }).catch(function (err) {\n        console.log('Monti APM: unable to send data', err);\n      });\n    }\n  });\n};\n\nfunction sendSourcemap(sourcemap, sourcemapPath) {\n  logger('Sending sourcemap', sourcemap, sourcemapPath);\n  var stream = fs.createReadStream(sourcemapPath);\n  stream.on('error', err => {\n    console.log('Monti APM: error while uploading sourcemap', err);\n  });\n  var arch = sourcemap.arch;\n  var archVersion = sourcemap.archVersion;\n  var file = encodeURIComponent(sourcemap.file.path);\n  Kadira.coreApi.sendStream(\"/sourcemap?arch=\".concat(arch, \"&archVersion=\").concat(archVersion, \"&file=\").concat(file), stream).catch(function (err) {\n    console.log('Monti APM: error uploading sourcemap', err);\n  });\n}\n\nfunction preparePath(urlPath) {\n  urlPath = path.posix.normalize(urlPath);\n\n  if (urlPath[0] === '/') {\n    urlPath = urlPath.slice(1);\n  }\n\n  return urlPath;\n}\n\nfunction checkForDynamicImport(arch, urlPath) {\n  const filePath = preparePath(urlPath);\n  return new Promise(function (resolve) {\n    const archPath = absClientPaths[arch];\n    const dynamicPath = path.join(archPath, 'dynamic', filePath) + '.map';\n    fs.stat(dynamicPath, function (err) {\n      resolve(err ? null : dynamicPath);\n    });\n  });\n}\n\nfunction getSourcemapPath(arch, urlPath) {\n  return new Promise((resolve, reject) => {\n    var clientProgram = WebApp.clientPrograms[arch];\n\n    if (!clientProgram || !clientProgram.manifest) {\n      return resolve(null);\n    }\n\n    var fileInfo = clientProgram.manifest.find(file => {\n      return file.url && file.url.startsWith(urlPath);\n    });\n\n    if (fileInfo && fileInfo.sourceMap) {\n      return resolve(path.join(absClientPaths[arch], fileInfo.sourceMap));\n    }\n\n    checkForDynamicImport(arch, urlPath).then(resolve).catch(reject);\n  });\n}","map":{"version":3,"sources":["packages/montiapm:agent/lib/sourcemaps.js"],"names":["url","Npm","require","path","fs","logger","clientPaths","__meteor_bootstrap__","configJson","clientArchs","serverDir","absClientPaths","reduce","result","arch","resolve","dirname","Object","keys","key","handleApiResponse","body","unavailable","JSON","parse","e","neededSourcemaps","promises","map","sourcemap","Kadira","options","uploadSourceMaps","push","getSourcemapPath","file","then","sourceMapPath","sendSourcemap","Promise","all","length","coreApi","sendData","unavailableSourcemaps","catch","err","console","log","sourcemapPath","stream","createReadStream","on","archVersion","encodeURIComponent","sendStream","preparePath","urlPath","posix","normalize","slice","checkForDynamicImport","filePath","archPath","dynamicPath","join","stat","reject","clientProgram","WebApp","clientPrograms","manifest","fileInfo","find","startsWith","sourceMap"],"mappings":"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","sourcesContent":["var url = Npm.require('url');\nvar path = Npm.require('path');\nvar fs = Npm.require('fs');\nvar logger = Npm.require('debug')('kadira:apm:sourcemaps');\n\n// Meteor 1.7 and older used clientPaths\nvar clientPaths = __meteor_bootstrap__.configJson.clientPaths;\nvar clientArchs =  __meteor_bootstrap__.configJson.clientArchs;\nvar serverDir = __meteor_bootstrap__.serverDir;\nvar absClientPaths\n\nif (clientArchs) {\n  absClientPaths = clientArchs.reduce((result, arch) => {\n    result[arch] = path.resolve(path.dirname(serverDir), arch)\n\n    return result\n  }, {})\n} else {\n  absClientPaths = Object.keys(clientPaths).reduce((result, key) => {\n    result[key] = path.resolve(serverDir, path.dirname(clientPaths[key]));\n\n    return result;\n  }, {});\n}\n\nhandleApiResponse = function (body = {}) {\n  var unavailable = [];\n\n  if (typeof body === 'string') {\n    try {\n      body = JSON.parse(body);\n    } catch (e) {\n      logger('failed parsing body', e, body)\n      return;\n    }\n  }\n\n  var neededSourcemaps = body.neededSourcemaps || []\n  logger('body', neededSourcemaps)\n\n  var promises = neededSourcemaps.map((sourcemap) => {\n    if (!Kadira.options.uploadSourceMaps) {\n      return unavailable.push(sourcemap)\n    }\n\n    return getSourcemapPath(sourcemap.arch, sourcemap.file.path)\n      .then(function (sourceMapPath) {\n        if (sourceMapPath === null) {\n          unavailable.push(sourcemap)\n        } else {\n          sendSourcemap(sourcemap, sourceMapPath)\n        }\n      })\n  })\n\n  Promise.all(promises).then(function () {\n    if (unavailable.length > 0) {\n      logger('sending unavailable sourcemaps', unavailable)\n      Kadira.coreApi.sendData({\n        unavailableSourcemaps: unavailable\n      })\n      .then(function (body) {\n        handleApiResponse(body);\n      })\n      .catch(function (err) {\n        console.log('Monti APM: unable to send data', err);\n      });\n    }\n  })\n\n}\n\nfunction sendSourcemap(sourcemap, sourcemapPath) {\n  logger('Sending sourcemap', sourcemap, sourcemapPath)\n\n  var stream = fs.createReadStream(sourcemapPath);\n\n  stream.on('error', (err) => {\n    console.log('Monti APM: error while uploading sourcemap', err)\n  });\n\n  var arch = sourcemap.arch;\n  var archVersion = sourcemap.archVersion;\n  var file = encodeURIComponent(sourcemap.file.path);\n  \n  Kadira.coreApi.sendStream(`/sourcemap?arch=${arch}&archVersion=${archVersion}&file=${file}`, stream)\n    .catch(function (err) {\n      console.log('Monti APM: error uploading sourcemap', err);\n    });\n}\n\nfunction preparePath (urlPath) {\n  urlPath = path.posix.normalize(urlPath);\n\n  if (urlPath[0] === '/') {\n    urlPath = urlPath.slice(1);\n  }\n\n  return urlPath;\n}\n\nfunction checkForDynamicImport (arch, urlPath) {\n  const filePath = preparePath(urlPath);\n\n  return new Promise(function (resolve) {\n    const archPath = absClientPaths[arch]\n    const dynamicPath = path.join(archPath, 'dynamic', filePath) + '.map'\n\n    fs.stat(dynamicPath, function (err) {\n      resolve(err ? null : dynamicPath);\n    });\n  });\n}\n\nfunction getSourcemapPath(arch, urlPath) {\n  return new Promise((resolve, reject) => {\n    var clientProgram = WebApp.clientPrograms[arch];\n  \n    if (!clientProgram || !clientProgram.manifest) {\n      return resolve(null);\n    }\n\n    var fileInfo = clientProgram.manifest.find((file) => {\n      return file.url && file.url.startsWith(urlPath);\n    });\n\n    if (fileInfo && fileInfo.sourceMap) {\n      return resolve(path.join(\n        absClientPaths[arch],\n        fileInfo.sourceMap\n      ));\n    }\n\n    checkForDynamicImport(arch, urlPath).then(resolve).catch(reject)\n  });\n}\n"]},"sourceType":"module","hash":"f2e77d4ec72aa76aff04a2d8726f70566f02a392"}
