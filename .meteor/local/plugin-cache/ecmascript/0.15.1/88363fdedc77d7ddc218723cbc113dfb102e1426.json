{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js","filename":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/momen/projects/spotmycrib-master","root":"/home/momen/projects/spotmycrib-master","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/momen/projects/spotmycrib-master/packages/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js"}},"code":"var Fiber = Npm.require('fibers');\n\nwrapSubscription = function (subscriptionProto) {\n  // If the ready event runs outside the Fiber, Kadira._getInfo() doesn't work.\n  // we need some other way to store kadiraInfo so we can use it at ready hijack.\n  var originalRunHandler = subscriptionProto._runHandler;\n\n  subscriptionProto._runHandler = function () {\n    var kadiraInfo = Kadira._getInfo();\n\n    if (kadiraInfo) {\n      this.__kadiraInfo = kadiraInfo;\n    }\n\n    ;\n    originalRunHandler.call(this);\n  };\n\n  var originalReady = subscriptionProto.ready;\n\n  subscriptionProto.ready = function () {\n    // meteor has a field called `_ready` which tracks this\n    // but we need to make it future proof\n    if (!this._apmReadyTracked) {\n      var kadiraInfo = Kadira._getInfo() || this.__kadiraInfo;\n\n      delete this.__kadiraInfo; //sometime .ready can be called in the context of the method\n      //then we have some problems, that's why we are checking this\n      //eg:- Accounts.createUser\n\n      if (kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n        Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n      }\n\n      Kadira.EventBus.emit('pubsub', 'subCompleted', trace, this._session, this);\n\n      Kadira.models.pubsub._trackReady(this._session, this, trace);\n\n      this._apmReadyTracked = true;\n    } // we still pass the control to the original implementation\n    // since multiple ready calls are handled by itself\n\n\n    originalReady.call(this);\n  };\n\n  var originalError = subscriptionProto.error;\n\n  subscriptionProto.error = function (err) {\n    if (err) {\n      var kadiraInfo = Kadira._getInfo();\n\n      if (kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n\n        var errorForApm = _.pick(err, 'message', 'stack');\n\n        Kadira.tracer.event(kadiraInfo.trace, 'error', {\n          error: errorForApm\n        });\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n\n        Kadira.models.pubsub._trackError(this._session, this, trace); // error tracking can be disabled and if there is a trace\n        // trace should be avaialble all the time, but it won't\n        // if something wrong happened on the trace building\n\n\n        if (Kadira.options.enableErrorTracking && trace) {\n          Kadira.models.error.trackError(err, trace);\n        }\n      } // wrap error stack so Meteor._debug can identify and ignore it\n\n\n      if (Kadira.options.enableErrorTracking) {\n        err.stack = {\n          stack: err.stack,\n          source: \"subscription\"\n        };\n      }\n\n      originalError.call(this, err);\n    }\n  };\n\n  var originalDeactivate = subscriptionProto._deactivate;\n\n  subscriptionProto._deactivate = function () {\n    Kadira.EventBus.emit('pubsub', 'subDeactivated', this._session, this);\n\n    Kadira.models.pubsub._trackUnsub(this._session, this);\n\n    originalDeactivate.call(this);\n  }; //adding the currenSub env variable\n\n\n  ['added', 'changed', 'removed'].forEach(function (funcName) {\n    var originalFunc = subscriptionProto[funcName];\n\n    subscriptionProto[funcName] = function (collectionName, id, fields) {\n      var self = this; // we need to run this code in a fiber and that's how we track\n      // subscription info. May be we can figure out, some other way to do this\n      // We use this currently to get the publication info when tracking message\n      // sizes at wrap_ddp_stringify.js\n\n      Kadira.env.currentSub = self;\n      var res = originalFunc.call(self, collectionName, id, fields);\n      Kadira.env.currentSub = null;\n      return res;\n    };\n  });\n};","map":{"version":3,"sources":["packages/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js"],"names":["Fiber","Npm","require","wrapSubscription","subscriptionProto","originalRunHandler","_runHandler","kadiraInfo","Kadira","_getInfo","__kadiraInfo","call","originalReady","ready","_apmReadyTracked","_subscriptionId","trace","id","tracer","endLastEvent","event","buildTrace","EventBus","emit","_session","models","pubsub","_trackReady","originalError","error","err","errorForApm","_","pick","_trackError","options","enableErrorTracking","trackError","stack","source","originalDeactivate","_deactivate","_trackUnsub","forEach","funcName","originalFunc","collectionName","fields","self","env","currentSub","res"],"mappings":"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","sourcesContent":["var Fiber = Npm.require('fibers');\n\nwrapSubscription = function(subscriptionProto) {\n  // If the ready event runs outside the Fiber, Kadira._getInfo() doesn't work.\n  // we need some other way to store kadiraInfo so we can use it at ready hijack.\n  var originalRunHandler = subscriptionProto._runHandler;\n  subscriptionProto._runHandler = function() {\n    var kadiraInfo = Kadira._getInfo();\n    if (kadiraInfo) {\n      this.__kadiraInfo = kadiraInfo;\n    };\n    originalRunHandler.call(this);\n  }\n\n  var originalReady = subscriptionProto.ready;\n  subscriptionProto.ready = function() {\n    // meteor has a field called `_ready` which tracks this\n    // but we need to make it future proof\n    if(!this._apmReadyTracked) {\n      var kadiraInfo = Kadira._getInfo() || this.__kadiraInfo;\n      delete this.__kadiraInfo;\n      //sometime .ready can be called in the context of the method\n      //then we have some problems, that's why we are checking this\n      //eg:- Accounts.createUser\n      if(kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n        Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n      }\n\n      Kadira.EventBus.emit('pubsub', 'subCompleted', trace, this._session, this);\n      Kadira.models.pubsub._trackReady(this._session, this, trace);\n      this._apmReadyTracked = true;\n    }\n\n    // we still pass the control to the original implementation\n    // since multiple ready calls are handled by itself\n    originalReady.call(this);\n  };\n\n  var originalError = subscriptionProto.error;\n  subscriptionProto.error = function(err) {\n    if (err) {\n      var kadiraInfo = Kadira._getInfo();\n\n      if(kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n\n        var errorForApm = _.pick(err, 'message', 'stack');\n        Kadira.tracer.event(kadiraInfo.trace, 'error', {error: errorForApm});\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n\n        Kadira.models.pubsub._trackError(this._session, this, trace);\n\n        // error tracking can be disabled and if there is a trace\n        // trace should be avaialble all the time, but it won't\n        // if something wrong happened on the trace building\n        if(Kadira.options.enableErrorTracking && trace) {\n          Kadira.models.error.trackError(err, trace);\n        }\n      }\n\n      // wrap error stack so Meteor._debug can identify and ignore it\n      if (Kadira.options.enableErrorTracking) {\n        err.stack = { stack: err.stack, source: \"subscription\" };\n      }\n      originalError.call(this, err);\n    }\n  };\n\n  var originalDeactivate = subscriptionProto._deactivate;\n  subscriptionProto._deactivate = function() {\n    Kadira.EventBus.emit('pubsub', 'subDeactivated', this._session, this);\n    Kadira.models.pubsub._trackUnsub(this._session, this);\n    originalDeactivate.call(this);\n  };\n\n  //adding the currenSub env variable\n  ['added', 'changed', 'removed'].forEach(function(funcName) {\n    var originalFunc = subscriptionProto[funcName];\n    subscriptionProto[funcName] = function(collectionName, id, fields) {\n      var self = this;\n\n      // we need to run this code in a fiber and that's how we track\n      // subscription info. May be we can figure out, some other way to do this\n      // We use this currently to get the publication info when tracking message\n      // sizes at wrap_ddp_stringify.js\n      Kadira.env.currentSub = self;\n      var res = originalFunc.call(self, collectionName, id, fields);\n      Kadira.env.currentSub = null;\n\n      return res;\n    };\n  });\n};\n"]},"sourceType":"module","hash":"88363fdedc77d7ddc218723cbc113dfb102e1426"}
