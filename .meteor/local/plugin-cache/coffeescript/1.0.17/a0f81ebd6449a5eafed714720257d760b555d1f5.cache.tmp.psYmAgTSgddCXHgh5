{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar uploadFile;\n\nthis.S3 = {\n  collection: new Meteor.Collection(null),\n  upload: function(ops, callback) {\n    if (ops == null) {\n      ops = {};\n    }\n    _.defaults(ops, {\n      expiration: 1800000,\n      path: \"\",\n      acl: \"public-read\",\n      uploader: \"default\",\n      unique_name: true,\n      connection: Meteor,\n      server_side_encryption: false,\n      content_disposition: \"inline\"\n    });\n    if (ops.file) {\n      return uploadFile(ops.file, ops, callback);\n    } else {\n      return _.each(ops.files, function(file) {\n        return uploadFile(file, ops, callback);\n      });\n    }\n  },\n  \"delete\": function(path, callback, connection) {\n    var conn;\n    conn = connection ? connection : Meteor;\n    return conn.call(\"_s3_delete\", path, callback);\n  },\n  b64toBlob: function(b64Data, contentType, sliceSize) {\n    var blob, byteArray, byteArrays, byteCharacters, byteNumbers, data, i, j, k, offset, ref, ref1, ref2, slice;\n    data = b64Data.split(\"base64,\");\n    if (!contentType) {\n      contentType = data[0].replace(\"data:\", \"\").replace(\";\", \"\");\n    }\n    contentType = contentType;\n    sliceSize = sliceSize || 512;\n    byteCharacters = atob(data[1]);\n    byteArrays = [];\n    for (offset = j = 0, ref = byteCharacters.length, ref1 = sliceSize; ref1 > 0 ? j < ref : j > ref; offset = j += ref1) {\n      slice = byteCharacters.slice(offset, offset + sliceSize);\n      byteNumbers = new Array(slice.length);\n      for (i = k = 0, ref2 = slice.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n};\n\nuploadFile = function(file, ops, callback) {\n  var extension, file_name, id, initial_file_data, ref;\n  if (ops.encoding === \"base64\") {\n    if (_.isString(file)) {\n      file = S3.b64toBlob(file);\n    }\n  }\n  if (ops.unique_name || ops.encoding === \"base64\") {\n    extension = _.last((ref = file.name) != null ? ref.split(\".\") : void 0);\n    if (!extension) {\n      extension = file.type.split(\"/\")[1];\n    }\n    file_name = (Random.id()) + \".\" + extension;\n  } else {\n    if (_.isFunction(file.upload_name)) {\n      file_name = file.upload_name(file);\n    } else if (!_.isEmpty(file.upload_name)) {\n      file_name = file.upload_name;\n    } else {\n      file_name = file.name;\n    }\n  }\n  initial_file_data = {\n    file: {\n      name: file_name,\n      type: file.type,\n      size: file.size,\n      original_name: file.name\n    },\n    loaded: 0,\n    total: file.size,\n    percent_uploaded: 0,\n    uploader: ops.uploader,\n    status: \"signing\"\n  };\n  id = S3.collection.insert(initial_file_data);\n  return ops.connection.call(\"_s3_sign\", {\n    path: ops.path,\n    file_name: initial_file_data.file.name,\n    file_type: file.type,\n    file_size: file.size,\n    acl: ops.acl,\n    bucket: ops.bucket,\n    region: ops.region,\n    expiration: ops.expiration,\n    server_side_encryption: ops.server_side_encryption,\n    content_disposition: ops.content_disposition\n  }, function(error, result) {\n    var form_data, xhr;\n    if (result) {\n      S3.collection.update(id, {\n        $set: {\n          status: \"uploading\"\n        }\n      });\n      form_data = new FormData();\n      form_data.append(\"key\", result.key);\n      form_data.append(\"acl\", result.acl);\n      form_data.append(\"Content-Type\", result.file_type);\n      if (ops.content_disposition) {\n        form_data.append(\"Content-Disposition\", ops.content_disposition);\n      }\n      form_data.append(\"X-Amz-Date\", result.meta_date);\n      if (ops.server_side_encryption) {\n        form_data.append(\"x-amz-server-side-encryption\", \"AES256\");\n      }\n      form_data.append(\"x-amz-meta-uuid\", result.meta_uuid);\n      form_data.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\n      form_data.append(\"X-Amz-Credential\", result.meta_credential);\n      form_data.append(\"X-Amz-Signature\", result.signature);\n      form_data.append(\"Policy\", result.policy);\n      form_data.append(\"file\", file);\n      xhr = new XMLHttpRequest();\n      xhr.upload.addEventListener(\"progress\", function(event) {\n        return S3.collection.update(id, {\n          $set: {\n            status: \"uploading\",\n            loaded: event.loaded,\n            total: event.total,\n            percent_uploaded: Math.floor((event.loaded / event.total) * 100)\n          }\n        });\n      }, false);\n      xhr.addEventListener(\"load\", function() {\n        if (xhr.status < 400) {\n          S3.collection.update(id, {\n            $set: {\n              status: \"complete\",\n              percent_uploaded: 100,\n              url: result.url,\n              secure_url: result.secure_url,\n              relative_url: result.relative_url\n            }\n          });\n          return callback && callback(null, S3.collection.findOne(id));\n        } else {\n          return callback && callback(true, null);\n        }\n      });\n      xhr.addEventListener(\"error\", function() {\n        return callback && callback(true, null);\n      });\n      xhr.addEventListener(\"abort\", function() {\n        return console.log(\"aborted by user\");\n      });\n      xhr.open(\"POST\", result.post_url, true);\n      return xhr.send(form_data);\n    } else {\n      return callback && callback(error, null);\n    }\n  });\n};\n","sourceMap":{"version":3,"file":"/client/functions.coffee.js","sourceRoot":"","sources":["/packages/lepozepo_s3/client/functions.coffee"],"names":[],"mappings":"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","sourcesContent":["@S3 =\n\tcollection: new Meteor.Collection(null)\n\t\t# file.name\n\t\t# file.type\n\t\t# file.size\n\t\t# loaded\n\t\t# total\n\t\t# percent_uploaded\n\t\t# uploader\n\t\t# status: [\"signing\",\"uploading\",\"complete\"]\n\t\t# url\n\t\t# secure_url\n\t\t# relative_url\n\n\tupload: (ops = {},callback) ->\n\t\t# ops.files [OPTIONAL]\n\t\t\t# each needs to run file.type, store in a variable, then send. Either files or ops.file must be provided.\n\t\t# ops.file [OPTIONAL]\n\t\t\t# single file upload of javascript type File\n\t\t# ops.path [DEFAULT: \"\"]\n\t\t\t# the folder to upload to: blank string for root folder \"\"\n\t\t# ops.unique_name [DEFAULT: true]\n\t\t\t# modifies the file name to a unique string, if false takes the name of the file. Uploads will overwrite existing files instead.\n\t\t# ops.encoding [OPTIONAL: only supports \"base64\"]\n\t\t\t# overrides file encoding, only supports base64 right now\n\t\t# ops.content_disposition [DEFAULT: \"inline\"]\n\t\t\t# overrides file disposition (inline or attachment)\n\t\t# ops.server_side_encryption\n\t\t\t# if true, use server side encryption\n\t\t# ops.expiration [DEFAULT: 1800000 (30 mins)]\n\t\t\t# How long before uploads to the file are disabled in ms\n\t\t# ops.acl [DEFAULT: \"public-read\"]\n\t\t\t# Access Control List. Describes who has access to the file. Any of these options:\n\t\t\t\t# \"private\",\n\t\t\t\t# \"public-read\",\n\t\t\t\t# \"public-read-write\",\n\t\t\t\t# \"authenticated-read\",\n\t\t\t\t# \"bucket-owner-read\",\n\t\t\t\t# \"bucket-owner-full-control\",\n\t\t\t\t# \"log-delivery-write\"\n\t\t# ops.bucket [OVERRIDE REQUIRED SERVER-SIDE]\n\t\t# ops.region [OVERRIDE DEFAULT: \"us-east-1\"]\n\t\t\t# Accepts the following regions:\n\t\t\t\t# \"us-west-2\"\n\t\t\t\t# \"us-west-1\"\n\t\t\t\t# \"eu-west-1\"\n\t\t\t\t# \"eu-central-1\"\n\t\t\t\t# \"ap-southeast-1\"\n\t\t\t\t# \"ap-southeast-2\"\n\t\t\t\t# \"ap-northeast-1\"\n\t\t\t\t# \"sa-east-1\"\n\t\t# ops.uploader [DEFAULT: \"default\"]\n\t\t\t# key to differentiate multiple uploaders on the same form\n\n\t\t_.defaults ops,\n\t\t\texpiration:1800000\n\t\t\tpath:\"\"\n\t\t\tacl:\"public-read\"\n\t\t\tuploader:\"default\"\n\t\t\tunique_name:true\n\t\t\tconnection:Meteor\n\t\t\tserver_side_encryption:false\n\t\t\tcontent_disposition:\"inline\"\n\n\t\tif ops.file\n\t\t\tuploadFile(ops.file, ops, callback)\n\t\telse\n\t\t\t_.each ops.files, (file) ->\n\t\t\t\tuploadFile(file, ops, callback)\n\n\tdelete: (path, callback, connection) ->\n\t\tconn = if connection then connection else Meteor\n\t\tconn.call \"_s3_delete\", path, callback\n\n\tb64toBlob: (b64Data, contentType, sliceSize) ->\n\t\tdata = b64Data.split(\"base64,\")\n\t\tif not contentType\n\t\t\tcontentType = data[0].replace(\"data:\",\"\").replace(\";\",\"\")\n\n\t\tcontentType = contentType\n\t\tsliceSize = sliceSize or 512\n\n\t\tbyteCharacters = atob data[1]\n\t\tbyteArrays = []\n\n\t\tfor offset in [0...byteCharacters.length] by sliceSize\n\t\t\tslice = byteCharacters.slice offset, offset + sliceSize\n\t\t\tbyteNumbers = new Array slice.length\n\n\t\t\tfor i in [0...slice.length]\n\t\t\t\tbyteNumbers[i] = slice.charCodeAt(i)\n\n\t\t\tbyteArray = new Uint8Array byteNumbers\n\n\t\t\tbyteArrays.push byteArray\n\n\t\tblob = new Blob(byteArrays, {type: contentType})\n\t\treturn blob\n\nuploadFile = (file, ops, callback) ->\n\tif ops.encoding is \"base64\"\n\t\tif _.isString file\n\t\t\tfile = S3.b64toBlob file\n\n\tif ops.unique_name or ops.encoding is \"base64\"\n\t\textension = _.last file.name?.split(\".\")\n\t\tif not extension\n\t\t\textension = file.type.split(\"/\")[1] # a library of extensions based on MIME types would be better\n\n\t\tfile_name = \"#{Random.id()}.#{extension}\"\n\telse\n\t\tif _.isFunction(file.upload_name)\n\t\t\tfile_name = file.upload_name(file)\n\t\telse if !_.isEmpty(file.upload_name)\n\t\t\tfile_name = file.upload_name\n\t\telse\n\t\t\tfile_name = file.name\n\n\tinitial_file_data =\n\t\tfile:\n\t\t\tname:file_name\n\t\t\ttype:file.type\n\t\t\tsize:file.size\n\t\t\toriginal_name:file.name\n\t\tloaded:0\n\t\ttotal:file.size\n\t\tpercent_uploaded:0\n\t\tuploader:ops.uploader\n\t\tstatus:\"signing\"\n\n\tid = S3.collection.insert initial_file_data\n\n\tops.connection.call \"_s3_sign\",\n\t\tpath:ops.path\n\t\tfile_name: initial_file_data.file.name\n\t\tfile_type:file.type\n\t\tfile_size:file.size\n\t\tacl:ops.acl\n\t\tbucket:ops.bucket\n\t\tregion:ops.region\n\t\texpiration:ops.expiration\n\t\tserver_side_encryption:ops.server_side_encryption\n\t\tcontent_disposition:ops.content_disposition\n\t\t(error,result) ->\n\t\t\tif result\n\t\t\t\t# Mark as signed\n\t\t\t\tS3.collection.update id,\n\t\t\t\t\t$set:\n\t\t\t\t\t\tstatus:\"uploading\"\n\n\t\t\t\t# Prepare data\n\t\t\t\tform_data = new FormData()\n\t\t\t\tform_data.append \"key\", result.key\n\t\t\t\tform_data.append \"acl\", result.acl\n\t\t\t\tform_data.append \"Content-Type\", result.file_type\n\t\t\t\tif ops.content_disposition\n\t\t\t\t\tform_data.append \"Content-Disposition\", ops.content_disposition\n\t\t\t\tform_data.append \"X-Amz-Date\", result.meta_date\n\t\t\t\tif ops.server_side_encryption\n\t\t\t\t\tform_data.append \"x-amz-server-side-encryption\", \"AES256\"\n\t\t\t\tform_data.append \"x-amz-meta-uuid\", result.meta_uuid\n\t\t\t\tform_data.append \"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\"\n\t\t\t\tform_data.append \"X-Amz-Credential\", result.meta_credential\n\t\t\t\tform_data.append \"X-Amz-Signature\",result.signature\n\n\t\t\t\tform_data.append \"Policy\",result.policy\n\n\t\t\t\tform_data.append \"file\",file\n\n\t\t\t\t# Send data\n\t\t\t\txhr = new XMLHttpRequest()\n\n\t\t\t\txhr.upload.addEventListener \"progress\", (event) ->\n\t\t\t\t\t\tS3.collection.update id,\n\t\t\t\t\t\t\t$set:\n\t\t\t\t\t\t\t\tstatus:\"uploading\"\n\t\t\t\t\t\t\t\tloaded:event.loaded\n\t\t\t\t\t\t\t\ttotal:event.total\n\t\t\t\t\t\t\t\tpercent_uploaded: Math.floor ((event.loaded / event.total) * 100)\n\t\t\t\t\t,false\n\n\t\t\t\txhr.addEventListener \"load\", ->\n\t\t\t\t\tif xhr.status < 400\n\t\t\t\t\t\tS3.collection.update id,\n\t\t\t\t\t\t\t$set:\n\t\t\t\t\t\t\t\tstatus:\"complete\"\n\t\t\t\t\t\t\t\tpercent_uploaded: 100\n\t\t\t\t\t\t\t\turl:result.url\n\t\t\t\t\t\t\t\tsecure_url:result.secure_url\n\t\t\t\t\t\t\t\trelative_url:result.relative_url\n\n\t\t\t\t\t\tcallback and callback null,S3.collection.findOne id\n\t\t\t\t\telse\n\t\t\t\t\t\tcallback and callback true,null\n\n\t\t\t\txhr.addEventListener \"error\", ->\n\t\t\t\t\tcallback and callback true,null\n\n\t\t\t\txhr.addEventListener \"abort\", ->\n\t\t\t\t\tconsole.log \"aborted by user\"\n\n\t\t\t\txhr.open \"POST\",result.post_url,true\n\n\t\t\t\txhr.send form_data\n\t\t\telse\n\t\t\t\tcallback and callback error,null\n"]}}