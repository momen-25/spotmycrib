{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar processBrowser;           \n\nKnox = Npm.require(\"knox\");\n\nprocessBrowser = process.browser;\n\nprocess.browser = false;\n\nAWS = Npm.require(\"aws-sdk\");\n\nprocess.browser = processBrowser;\n\nthis.S3 = {\n  config: {},\n  knox: {},\n  aws: {},\n  rules: {}\n};\n\nMeteor.startup(function() {\n  if (!_.has(S3.config, \"key\")) {\n    console.log(\"S3: AWS key is undefined\");\n  }\n  if (!_.has(S3.config, \"secret\")) {\n    console.log(\"S3: AWS secret is undefined\");\n  }\n  if (!_.has(S3.config, \"bucket\")) {\n    console.log(\"S3: AWS bucket is undefined\");\n  }\n  if (!_.has(S3.config, \"bucket\") || !_.has(S3.config, \"secret\") || !_.has(S3.config, \"key\")) {\n    return;\n  }\n  _.defaults(S3.config, {\n    region: \"us-east-1\"\n  });\n  S3.knox = Knox.createClient(S3.config);\n  return S3.aws = new AWS.S3({\n    accessKeyId: S3.config.key,\n    secretAccessKey: S3.config.secret,\n    region: S3.config.region\n  });\n});\n","sourceMap":{"version":3,"file":"/server/startup.coffee.js","sourceRoot":"","sources":["/packages/lepozepo_s3/server/startup.coffee"],"names":[],"mappings":";AACA,IAAA,yBAAA;;AAAA,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,MAAZ,CAAP,CAAA;;AAAA,cAEA,GAAiB,OAAO,CAAC,OAFzB,CAAA;;AAAA,OAGO,CAAC,OAAR,GAAkB,KAHlB,CAAA;;AAAA,GAIA,GAAM,GAAG,CAAC,OAAJ,CAAY,SAAZ,CAJN,CAAA;;AAAA,OAKO,CAAC,OAAR,GAAkB,cALlB,CAAA;;AAAA,IAQC,CAAA,EAAD,GACC;AAAA,EAAA,MAAA,EAAO,EAAP;AAAA,EACA,IAAA,EAAK,EADL;AAAA,EAEA,GAAA,EAAI,EAFJ;AAAA,EAGA,KAAA,EAAM,EAHN;CATD,CAAA;;AAAA,MAcM,CAAC,OAAP,CAAe,SAAA,GAAA;AACd,EAAA,IAAG,CAAA,CAAK,CAAC,GAAF,CAAM,EAAE,CAAC,MAAT,EAAgB,KAAhB,CAAP;AACC,IAAA,OAAO,CAAC,GAAR,CAAY,0BAAZ,CAAA,CADD;GAAA;AAGA,EAAA,IAAG,CAAA,CAAK,CAAC,GAAF,CAAM,EAAE,CAAC,MAAT,EAAgB,QAAhB,CAAP;AACC,IAAA,OAAO,CAAC,GAAR,CAAY,6BAAZ,CAAA,CADD;GAHA;AAMA,EAAA,IAAG,CAAA,CAAK,CAAC,GAAF,CAAM,EAAE,CAAC,MAAT,EAAgB,QAAhB,CAAP;AACC,IAAA,OAAO,CAAC,GAAR,CAAY,6BAAZ,CAAA,CADD;GANA;AASA,EAAA,IAAG,CAAA,CAAK,CAAC,GAAF,CAAM,EAAE,CAAC,MAAT,EAAgB,QAAhB,CAAJ,IAAiC,CAAA,CAAK,CAAC,GAAF,CAAM,EAAE,CAAC,MAAT,EAAgB,QAAhB,CAArC,IAAkE,CAAA,CAAK,CAAC,GAAF,CAAM,EAAE,CAAC,MAAT,EAAgB,KAAhB,CAAzE;AACC,UAAA,CADD;GATA;AAAA,EAYA,CAAC,CAAC,QAAF,CAAW,EAAE,CAAC,MAAd,EACC;AAAA,IAAA,MAAA,EAAO,WAAP;GADD,CAZA,CAAA;AAAA,EAeA,EAAE,CAAC,IAAH,GAAU,IAAI,CAAC,YAAL,CAAkB,EAAE,CAAC,MAArB,CAfV,CAAA;SAgBA,EAAE,CAAC,GAAH,GAAa,IAAA,GAAG,CAAC,EAAJ,CACZ;AAAA,IAAA,WAAA,EAAY,EAAE,CAAC,MAAM,CAAC,GAAtB;AAAA,IACA,eAAA,EAAgB,EAAE,CAAC,MAAM,CAAC,MAD1B;AAAA,IAEA,MAAA,EAAO,EAAE,CAAC,MAAM,CAAC,MAFjB;GADY,EAjBC;AAAA,CAAf,CAdA,CAAA","sourcesContent":["#Get Knox and AWS libraries\nKnox = Npm.require \"knox\"\n\nprocessBrowser = process.browser\nprocess.browser = false\nAWS = Npm.require \"aws-sdk\"\nprocess.browser = processBrowser\n\n#Server side configuration variables\n@S3 =\n\tconfig:{}\n\tknox:{}\n\taws:{}\n\trules:{}\n\nMeteor.startup ->\n\tif not _.has S3.config,\"key\"\n\t\tconsole.log \"S3: AWS key is undefined\"\n\n\tif not _.has S3.config,\"secret\"\n\t\tconsole.log \"S3: AWS secret is undefined\"\n\n\tif not _.has S3.config,\"bucket\"\n\t\tconsole.log \"S3: AWS bucket is undefined\"\n\n\tif not _.has(S3.config,\"bucket\") or not _.has(S3.config,\"secret\") or not _.has(S3.config,\"key\")\n\t\treturn\n\n\t_.defaults S3.config,\n\t\tregion:\"us-east-1\" # us-standard\n\n\tS3.knox = Knox.createClient S3.config\n\tS3.aws = new AWS.S3\n\t\taccessKeyId:S3.config.key\n\t\tsecretAccessKey:S3.config.secret\n\t\tregion:S3.config.region\n\n"]}}