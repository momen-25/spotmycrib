{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar Crypto, HmacSHA256, calculate_signature, moment;\n\nMeteor.methods({\n  _s3_sign: function(ops) {\n    var expiration, key, meta_credential, meta_date, meta_uuid, policy, post_url, signature;\n    if (ops == null) {\n      ops = {};\n    }\n    this.unblock();\n    _.defaults(ops, {\n      expiration: 1800000,\n      path: \"\",\n      bucket: S3.config.bucket,\n      acl: \"public-read\",\n      region: S3.config.region,\n      server_side_encryption: false,\n      content_disposition: \"inline\"\n    });\n    check(ops, {\n      expiration: Number,\n      path: String,\n      bucket: String,\n      acl: String,\n      region: String,\n      server_side_encryption: Boolean,\n      file_type: String,\n      file_name: String,\n      file_size: Number,\n      content_disposition: String\n    });\n    expiration = new Date(Date.now() + ops.expiration);\n    expiration = expiration.toISOString();\n    if (_.isEmpty(ops.path)) {\n      key = \"\" + ops.file_name;\n    } else {\n      key = ops.path + \"/\" + ops.file_name;\n    }\n    meta_uuid = Random.id();\n    meta_date = (moment().format('YYYYMMDD')) + \"T000000Z\";\n    meta_credential = S3.config.key + \"/\" + (moment().format('YYYYMMDD')) + \"/\" + ops.region + \"/s3/aws4_request\";\n    policy = {\n      \"expiration\": expiration,\n      \"conditions\": [\n        [\"content-length-range\", 0, ops.file_size], {\n          \"key\": key\n        }, {\n          \"bucket\": ops.bucket\n        }, {\n          \"Content-Type\": ops.file_type\n        }, {\n          \"acl\": ops.acl\n        }, {\n          \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\"\n        }, {\n          \"x-amz-credential\": meta_credential\n        }, {\n          \"x-amz-date\": meta_date\n        }, {\n          \"x-amz-meta-uuid\": meta_uuid\n        }\n      ]\n    };\n    if (ops.content_disposition) {\n      policy[\"conditions\"].push({\n        \"Content-Disposition\": ops.content_disposition\n      });\n    }\n    if (ops.server_side_encryption) {\n      policy[\"conditions\"].push({\n        \"x-amz-server-side-encryption\": \"AES256\"\n      });\n    }\n    policy = new Buffer(JSON.stringify(policy), \"utf-8\").toString(\"base64\");\n    signature = calculate_signature(policy, ops.region);\n    if (ops.region === \"us-east-1\" || ops.region === \"us-standard\") {\n      post_url = \"https://s3.amazonaws.com/\" + ops.bucket;\n    } else {\n      post_url = \"https://s3-\" + ops.region + \".amazonaws.com/\" + ops.bucket;\n    }\n    return {\n      policy: policy,\n      signature: signature,\n      access_key: S3.config.key,\n      post_url: post_url,\n      url: (post_url + \"/\" + key).replace(\"https://\", \"http://\"),\n      secure_url: post_url + \"/\" + key,\n      relative_url: \"/\" + key,\n      bucket: ops.bucket,\n      acl: ops.acl,\n      key: key,\n      file_type: ops.file_type,\n      file_name: ops.file_name,\n      meta_uuid: meta_uuid,\n      meta_date: meta_date,\n      meta_credential: meta_credential\n    };\n  }\n});\n\nCrypto = Npm.require(\"crypto-js\");\n\nmoment = Npm.require(\"moment\");\n\nHmacSHA256 = Crypto.HmacSHA256;\n\ncalculate_signature = function(policy, region) {\n  var kDate, kRegion, kService, signature_key;\n  kDate = HmacSHA256(moment().format(\"YYYYMMDD\"), \"AWS4\" + S3.config.secret);\n  kRegion = HmacSHA256(region, kDate);\n  kService = HmacSHA256(\"s3\", kRegion);\n  signature_key = HmacSHA256(\"aws4_request\", kService);\n  return HmacSHA256(policy, signature_key).toString(Crypto.enc.Hex);\n};\n","sourceMap":{"version":3,"file":"/server/sign_request.coffee.js","sourceRoot":"","sources":["/packages/lepozepo_s3/server/sign_request.coffee"],"names":[],"mappings":"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","sourcesContent":["Meteor.methods\n\t_s3_sign: (ops={}) ->\n\t\t@unblock()\n\t\t# ops.expiration: the signature expires after x milliseconds | defaults to 30 minutes\n\t\t# ops.path\n\t\t# ops.file_type\n\t\t# ops.file_name\n\t\t# ops.file_size\n\t\t# ops.acl\n\t\t# ops.bucket\n\t\t# ops.server_side_encryption\n\t\t# ops.content_disposition\n\n\t\t_.defaults ops,\n\t\t\texpiration:1800000\n\t\t\tpath:\"\"\n\t\t\tbucket:S3.config.bucket\n\t\t\tacl:\"public-read\"\n\t\t\tregion:S3.config.region\n\t\t\tserver_side_encryption:false\n\t\t\tcontent_disposition:\"inline\"\n\n\t\tcheck ops,\n\t\t\texpiration:Number\n\t\t\tpath:String\n\t\t\tbucket:String\n\t\t\tacl:String\n\t\t\tregion:String\n\t\t\tserver_side_encryption:Boolean\n\t\t\tfile_type:String\n\t\t\tfile_name:String\n\t\t\tfile_size:Number\n\t\t\tcontent_disposition:String\n\n\t\texpiration = new Date Date.now() + ops.expiration\n\t\texpiration = expiration.toISOString()\n\n\t\tif _.isEmpty ops.path\n\t\t\tkey = \"#{ops.file_name}\"\n\t\telse\n\t\t\tkey = \"#{ops.path}/#{ops.file_name}\"\n\n\t\tmeta_uuid = Random.id()\n\t\tmeta_date = \"#{moment().format('YYYYMMDD')}T000000Z\"\n\t\tmeta_credential = \"#{S3.config.key}/#{moment().format('YYYYMMDD')}/#{ops.region}/s3/aws4_request\"\n\t\tpolicy =\n\t\t\t\"expiration\":expiration\n\t\t\t\"conditions\":[\n\t\t\t\t[\"content-length-range\",0,ops.file_size]\n\t\t\t\t{\"key\":key}\n\t\t\t\t{\"bucket\":ops.bucket}\n\t\t\t\t{\"Content-Type\":ops.file_type}\n\t\t\t\t{\"acl\":ops.acl}\n\t\t\t\t{\"x-amz-algorithm\": \"AWS4-HMAC-SHA256\"}\n\t\t\t\t{\"x-amz-credential\": meta_credential}\n\t\t\t\t{\"x-amz-date\": meta_date }\n\t\t\t\t{\"x-amz-meta-uuid\": meta_uuid}\n\t\t\t]\n\t\tif ops.content_disposition\n\t\t\tpolicy[\"conditions\"].push({\"Content-Disposition\": ops.content_disposition})\n\t\tif ops.server_side_encryption\n\t\t\tpolicy[\"conditions\"].push({\"x-amz-server-side-encryption\": \"AES256\"})\n\n\t\t# Encode the policy\n\t\tpolicy = new Buffer(JSON.stringify(policy), \"utf-8\").toString(\"base64\")\n\n\t\t# Sign the policy\n\t\tsignature = calculate_signature policy, ops.region\n\n\t\t# Identify post_url\n\t\tif ops.region is \"us-east-1\" or ops.region is \"us-standard\"\n\t\t\tpost_url = \"https://s3.amazonaws.com/#{ops.bucket}\"\n\t\telse\n\t\t\tpost_url = \"https://s3-#{ops.region}.amazonaws.com/#{ops.bucket}\"\n\n\t\t# Return results\n\t\tpolicy:policy\n\t\tsignature:signature\n\t\taccess_key:S3.config.key\n\t\tpost_url:post_url\n\t\turl:\"#{post_url}/#{key}\".replace(\"https://\",\"http://\")\n\t\tsecure_url:\"#{post_url}/#{key}\"\n\t\trelative_url:\"/#{key}\"\n\t\tbucket:ops.bucket\n\t\tacl:ops.acl\n\t\tkey:key\n\t\tfile_type:ops.file_type\n\t\tfile_name:ops.file_name\n\t\tmeta_uuid:meta_uuid\n\t\tmeta_date:meta_date\n\t\tmeta_credential:meta_credential\n\n\n# crypto = Npm.require(\"crypto\")\nCrypto = Npm.require \"crypto-js\"\nmoment = Npm.require \"moment\"\n{HmacSHA256} = Crypto\n\ncalculate_signature = (policy, region) ->\n\tkDate = HmacSHA256(moment().format(\"YYYYMMDD\"), \"AWS4\" + S3.config.secret);\n\tkRegion = HmacSHA256(region, kDate);\n\tkService = HmacSHA256(\"s3\", kRegion);\n\tsignature_key = HmacSHA256(\"aws4_request\", kService);\n\n\tHmacSHA256 policy, signature_key\n\t\t.toString Crypto.enc.Hex\n\n\n"]}}