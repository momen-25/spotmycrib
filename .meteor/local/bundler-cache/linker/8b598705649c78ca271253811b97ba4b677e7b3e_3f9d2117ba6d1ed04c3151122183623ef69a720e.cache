[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Twitter = Package['twitter-oauth'].Twitter;\nvar HTTP = Package.http.HTTP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-twitter\":{\"notice.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/accounts-twitter/notice.js                                                                 //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nif (Package['accounts-ui'] && !Package['service-configuration'] && !Object.prototype.hasOwnProperty.call(Package, 'twitter-config-ui')) {\n  console.warn(\"Note: You're using accounts-ui and accounts-twitter,\\n\" + \"but didn't install the configuration UI for Twitter\\n\" + \"OAuth. You can install it with:\\n\" + \"\\n\" + \"    meteor add twitter-config-ui\" + \"\\n\");\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"twitter.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/accounts-twitter/twitter.js                                                                //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nAccounts.oauth.registerService('twitter');\n\nif (Meteor.isClient) {\n  var loginWithTwitter = function (options, callback) {\n    // support a callback without options\n    if (!callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Twitter.requestCredential(options, credentialRequestCompleteCallback);\n  };\n\n  Accounts.registerClientLoginFunction('twitter', loginWithTwitter);\n\n  Meteor.loginWithTwitter = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return Accounts.applyLoginFunction('twitter', args);\n  };\n} else {\n  var autopublishedFields = // don't send access token. https://dev.twitter.com/discussions/5025\n  Twitter.whitelistedFields.concat(['id', 'screenName']).map(function (subfield) {\n    return \"services.twitter.\" + subfield;\n  });\n  Accounts.addAutopublishFields({\n    forLoggedInUser: autopublishedFields,\n    forOtherUsers: autopublishedFields\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/accounts-twitter/notice.js\");\nrequire(\"/node_modules/meteor/accounts-twitter/twitter.js\");\n\n/* Exports */\nPackage._define(\"accounts-twitter\");\n\n})();\n","servePath":"/packages/accounts-twitter.js","sourceMap":{"version":3,"sources":["packages/accounts-twitter/notice.js","packages/accounts-twitter/twitter.js"],"names":["Package","Object","prototype","hasOwnProperty","call","console","warn","Accounts","oauth","registerService","Meteor","isClient","loginWithTwitter","options","callback","credentialRequestCompleteCallback","credentialRequestCompleteHandler","Twitter","requestCredential","registerClientLoginFunction","args","applyLoginFunction","autopublishedFields","whitelistedFields","concat","map","subfield","addAutopublishFields","forLoggedInUser","forOtherUsers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,OAAO,CAAC,aAAD,CAAP,IACG,CAACA,OAAO,CAAC,uBAAD,CADX,IAEG,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,OAArC,EAA8C,mBAA9C,CAFR,EAE4E;AAC1EK,SAAO,CAACC,IAAR,CACE,2DACA,uDADA,GAEA,mCAFA,GAGA,IAHA,GAIA,kCAJA,GAKA,IANF;AAQD,C;;;;;;;;;;;ACXDC,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+B,SAA/B;;AAEA,IAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,MAAMC,gBAAgB,GAAG,UAACC,OAAD,EAAUC,QAAV,EAAuB;AAC9C;AACA,QAAI,CAAEA,QAAF,IAAc,OAAOD,OAAP,KAAmB,UAArC,EAAiD;AAC/CC,cAAQ,GAAGD,OAAX;AACAA,aAAO,GAAG,IAAV;AACD;;AAED,QAAME,iCAAiC,GAAGR,QAAQ,CAACC,KAAT,CAAeQ,gCAAf,CAAgDF,QAAhD,CAA1C;AACAG,WAAO,CAACC,iBAAR,CAA0BL,OAA1B,EAAmCE,iCAAnC;AACD,GATD;;AAUAR,UAAQ,CAACY,2BAAT,CAAqC,SAArC,EAAgDP,gBAAhD;;AACAF,QAAM,CAACE,gBAAP,GAA0B;AAAA,sCAAIQ,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WACxBb,QAAQ,CAACc,kBAAT,CAA4B,SAA5B,EAAuCD,IAAvC,CADwB;AAAA,GAA1B;AAED,CAdD,MAcO;AACL,MAAME,mBAAmB,GACvB;AACAL,SAAO,CAACM,iBAAR,CAA0BC,MAA1B,CAAiC,CAAC,IAAD,EAAO,YAAP,CAAjC,EAAuDC,GAAvD,CACE,UAAAC,QAAQ;AAAA,iCAAwBA,QAAxB;AAAA,GADV,CAFF;AAMAnB,UAAQ,CAACoB,oBAAT,CAA8B;AAC5BC,mBAAe,EAAEN,mBADW;AAE5BO,iBAAa,EAAEP;AAFa,GAA9B;AAID,C","file":"/packages/accounts-twitter.js","sourcesContent":["if (Package['accounts-ui']\n    && !Package['service-configuration']\n    && !Object.prototype.hasOwnProperty.call(Package, 'twitter-config-ui')) {\n  console.warn(\n    \"Note: You're using accounts-ui and accounts-twitter,\\n\" +\n    \"but didn't install the configuration UI for Twitter\\n\" +\n    \"OAuth. You can install it with:\\n\" +\n    \"\\n\" +\n    \"    meteor add twitter-config-ui\" +\n    \"\\n\"\n  );\n}\n","Accounts.oauth.registerService('twitter');\n\nif (Meteor.isClient) {\n  const loginWithTwitter = (options, callback) => {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    const credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Twitter.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('twitter', loginWithTwitter);\n  Meteor.loginWithTwitter = (...args) =>\n    Accounts.applyLoginFunction('twitter', args);\n} else {\n  const autopublishedFields = \n    // don't send access token. https://dev.twitter.com/discussions/5025\n    Twitter.whitelistedFields.concat(['id', 'screenName']).map(\n      subfield => `services.twitter.${subfield}`\n    );\n\n  Accounts.addAutopublishFields({\n    forLoggedInUser: autopublishedFields,\n    forOtherUsers: autopublishedFields\n  });\n}\n"]}}]