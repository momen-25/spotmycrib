[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package['templating-runtime'].Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar CDN;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/nitrolabs_cdn/lib/template.js                                                               //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\n/**\n * CDN_URL\n * Return the CDN_URL environment variable or \"\"\n */\nTemplate.registerHelper(\"CDN_URL\", function () {\n    return __meteor_runtime_config__.CDN_URL || \"\";\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/nitrolabs_cdn/lib/client.js                                                                 //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\n\n/*\n * Monkey patch: Meteor._relativeToSiteRootUrl\n *\n * Meteor uses the function _relativeToSiteRootUrl internally\n * to add ROOT_URL_PATH_PREFIX to any path that starts with /.\n *\n * In production ROOT_URL_PATH_PREFIX is added to the compiled\n * css and js files, as well as the websocket info request (/sockjs/info).\n *\n * The desired behaviour is to use CDN_URL for the compiled\n * css and js files, while leaving the default behaviour unchanged for\n * all other requests.\n *\n * This code is particularly sensitive to two scenarios:\n * 1) Hot reloading js and css files from the CDN\n * 2) Re-establishing websocket connection after it is dropped (/sock/js call)\n *\n */\nconst STATIC = ['.css','.js'];\n\n\n\n/*\n * Overide the default Meteor._relativeToSiteRootUrl()\n *\n */\noverride(Meteor, '_relativeToSiteRootUrl', function(original) {\n  return function(link) {\n    var CDN_URL = __meteor_runtime_config__.CDN_URL;\n  \tvar extension = getExtension(link);\n  \tif (CDN_URL && STATIC.indexOf(extension) > -1) {\n      return pathJoin([CDN_URL, link]);\n  \t} else {\n  \t\treturn original.apply(this, arguments);\n  \t}\n  }\n});\n\n/* overide helper\n *\n * Abstract way to override a object method\n * @callback should return a function to be called in place of the\n * original method. @callback is passed the original method as the\n * first argument\n *\n * Inspired by http://me.dt.in.th/page/JavaScript-override/\n *\n */\nfunction override(object, methodName, callback) {\n  object[methodName] = callback(object[methodName]);\n}\n\n/* getExtension\n *\n * Return the file extension from url\n * File extensions include the '.'\n *\n * Handles the following cases elegantly:\n * getExtension(\"/somefile.css\") -> \".css\"\n * getExtension(\"/url/somefile.css\") -> \".css\"\n * getExtension(\"/url/somefile.css?version\") -> \".css\"\n * getExtension(\"/url/somefile.css?version=3.4.5\") -> \".css\"\n */\nfunction getExtension(url) {\n    return (url = url.substr(1 + url.lastIndexOf(\"/\")).split(/\\#|\\?/)[0]).substr(url.lastIndexOf(\".\"));\n}\n\n/**\n * pathJoin\n * Join multiple path components and avoid duplicate separators\n */\nfunction pathJoin(parts){\n  return parts.map(function(path){\n    if (path[0] === \"/\"){\n      path = path.slice(1);\n    }\n    if (path[path.length - 1] === \"/\"){\n      path = path.slice(0, path.length - 1);\n    }\n    return path;\n  }).join(\"/\");\n}\n\n// Export the CDN object\nCDN = {};\n\n// Add CDN_URL available through the CDN object\nCDN.get_cdn_url = function(){\n  return __meteor_runtime_config__.CDN_URL || \"\";\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"nitrolabs:cdn\", {\n  CDN: CDN\n});\n\n})();\n","servePath":"/packages/nitrolabs_cdn.js"}]