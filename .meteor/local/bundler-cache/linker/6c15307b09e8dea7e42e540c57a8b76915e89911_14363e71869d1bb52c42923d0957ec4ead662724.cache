[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar getClientArchVersion, Kadira, Monti, BaseErrorModel, Retry, Ntp, getBrowserInfo, getResolution, getErrorStack, getInfoArray, getTime, getClientArch, checkSizeAndPickFields, httpRequest, ErrorModel;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"montiapm:agent\":{\"lib\":{\"common\":{\"utils.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/common/utils.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\ngetClientArchVersion = function (arch) {\n  const autoupdate = __meteor_runtime_config__.autoupdate;\n\n  if (autoupdate) {\n    return autoupdate.versions[arch] ? autoupdate.versions[arch].version : 'none';\n  } // Meteor 1.7 and older did not have an `autoupdate` object.\n\n\n  switch (arch) {\n    case 'cordova.web':\n      return __meteor_runtime_config__.autoupdateVersionCordova;\n\n    case 'web.browser':\n    case 'web.browser.legacy':\n      // Meteor 1.7 always used the web.browser.legacy version\n      return __meteor_runtime_config__.autoupdateVersion;\n\n    default:\n      return 'none';\n  }\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"unify.js\":function module(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/common/unify.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nKadira = {};\nKadira.options = {};\nMonti = Kadira;\n\nif (Meteor.wrapAsync) {\n  Kadira._wrapAsync = Meteor.wrapAsync;\n} else {\n  Kadira._wrapAsync = Meteor._wrapAsync;\n}\n\nif (Meteor.isServer) {\n  var EventEmitter = Npm.require('events').EventEmitter;\n\n  var eventBus = new EventEmitter();\n  eventBus.setMaxListeners(0);\n\n  var buildArgs = function (args) {\n    var eventName = args[0] + '-' + args[1];\n    var args = args.slice(2);\n    args.unshift(eventName);\n    return args;\n  };\n\n  Kadira.EventBus = {};\n  ['on', 'emit', 'removeListener', 'removeAllListeners'].forEach(function (m) {\n    Kadira.EventBus[m] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var args = buildArgs(args);\n      return eventBus[m].apply(eventBus, args);\n    };\n  });\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"default_error_filters.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/common/default_error_filters.js                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar commonErrRegExps = [/connection timeout\\. no (\\w*) heartbeat received/i, /INVALID_STATE_ERR/i];\nKadira.errorFilters = {\n  filterValidationErrors: function (type, message, err) {\n    if (err && err instanceof Meteor.Error) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n  filterCommonMeteorErrors: function (type, message) {\n    for (var lc = 0; lc < commonErrRegExps.length; lc++) {\n      var regExp = commonErrRegExps[lc];\n\n      if (regExp.test(message)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"send.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/common/send.js                                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nKadira.send = function (payload, path, callback) {\n  if (!Kadira.connected) {\n    throw new Error(\"You need to connect with Kadira first, before sending messages!\");\n  }\n\n  path = path.substr(0, 1) != '/' ? \"/\" + path : path;\n  var endpoint = Kadira.options.endpoint + path;\n  var retryCount = 0;\n  var retry = new Retry({\n    minCount: 1,\n    minTimeout: 0,\n    baseTimeout: 1000 * 5,\n    maxTimeout: 1000 * 60\n  });\n\n  var sendFunction = Kadira._getSendFunction();\n\n  tryToSend();\n\n  function tryToSend(err) {\n    if (retryCount < 5) {\n      retry.retryLater(retryCount++, send);\n    } else {\n      console.warn('Error sending error traces to Monti APM server');\n      if (callback) callback(err);\n    }\n  }\n\n  function send() {\n    sendFunction(endpoint, payload, function (err, res) {\n      if (err && !res) {\n        tryToSend(err);\n      } else if (res.statusCode == 200) {\n        if (callback) callback(null, res.data);\n      } else {\n        if (callback) callback(new Meteor.Error(res.statusCode, res.content));\n      }\n    });\n  }\n};\n\nKadira._getSendFunction = function () {\n  return Meteor.isServer ? Kadira._serverSend : Kadira._clientSend;\n};\n\nKadira._clientSend = function (endpoint, payload, callback) {\n  httpRequest('POST', endpoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    content: JSON.stringify(payload)\n  }, callback);\n};\n\nKadira._serverSend = function () {\n  throw new Error('Kadira._serverSend is not supported. Use coreApi instead.');\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"base_error.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/models/base_error.js                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nBaseErrorModel = function (options) {\n  this._filters = [];\n};\n\nBaseErrorModel.prototype.addFilter = function (filter) {\n  if (typeof filter === 'function') {\n    this._filters.push(filter);\n  } else {\n    throw new Error(\"Error filter must be a function\");\n  }\n};\n\nBaseErrorModel.prototype.removeFilter = function (filter) {\n  var index = this._filters.indexOf(filter);\n\n  if (index >= 0) {\n    this._filters.splice(index, 1);\n  }\n};\n\nBaseErrorModel.prototype.applyFilters = function (type, message, error, subType) {\n  for (var lc = 0; lc < this._filters.length; lc++) {\n    var filter = this._filters[lc];\n\n    try {\n      var validated = filter(type, message, error, subType);\n      if (!validated) return false;\n    } catch (ex) {\n      // we need to remove this filter\n      // we may ended up in a error cycle\n      this._filters.splice(lc, 1);\n\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);\n    }\n  }\n\n  return true;\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"retry.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/retry.js                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n//TODO: remove this class and use Meteor Retry in a later version of meteor.\nRetry = class {\n  constructor() {\n    let {\n      baseTimeout = 1000,\n      // 1 second\n      exponent = 2.2,\n      // The default is high-ish to ensure a server can recover from a\n      // failure caused by load.\n      maxTimeout = 5 * 60000,\n      // 5 minutes\n      minTimeout = 10,\n      minCount = 2,\n      fuzz = 0.5 // +- 25%\n\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  } // Reset a pending retry, if any.\n\n\n  clear() {\n    if (this.retryTimer) clearTimeout(this.retryTimer);\n    this.retryTimer = null;\n  } // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n\n\n  _timeout(count) {\n    if (count < this.minCount) return this.minTimeout;\n    let timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)); // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n\n    timeout = timeout * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));\n    return Math.ceil(timeout);\n  } // Call `fn` after a delay, based on the `count` of which retry this is.\n\n\n  retryLater(count, fn) {\n    const timeout = this._timeout(count);\n\n    if (this.retryTimer) clearTimeout(this.retryTimer);\n    this.retryTimer = setTimeout(fn, timeout);\n    return timeout;\n  }\n\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ntp.js\":function module(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/ntp.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar logger = getLogger();\n\nNtp = function (endpoint) {\n  this.path = '/simplentp/sync';\n  this.setEndpoint(endpoint);\n  this.diff = 0;\n  this.synced = false;\n  this.reSyncCount = 0;\n  this.reSync = new Retry({\n    baseTimeout: 1000 * 60,\n    maxTimeout: 1000 * 60 * 10,\n    minCount: 0\n  });\n};\n\nNtp._now = function () {\n  var now = Date.now();\n\n  if (typeof now == 'number') {\n    return now;\n  } else if (now instanceof Date) {\n    // some extenal JS libraries override Date.now and returns a Date object\n    // which directly affect us. So we need to prepare for that\n    return now.getTime();\n  } else {\n    // trust me. I've seen now === undefined\n    return new Date().getTime();\n  }\n};\n\nNtp.prototype.setEndpoint = function (endpoint) {\n  this.endpoint = endpoint + this.path;\n};\n\nNtp.prototype.getTime = function () {\n  return Ntp._now() + Math.round(this.diff);\n};\n\nNtp.prototype.syncTime = function (localTime) {\n  return localTime + Math.ceil(this.diff);\n};\n\nNtp.prototype.sync = function () {\n  logger('init sync');\n  var self = this;\n  var retryCount = 0;\n  var retry = new Retry({\n    baseTimeout: 1000 * 20,\n    maxTimeout: 1000 * 60,\n    minCount: 1,\n    minTimeout: 0\n  });\n  syncTime();\n\n  function syncTime() {\n    if (retryCount < 5) {\n      logger('attempt time sync with server', retryCount); // if we send 0 to the retryLater, cacheDns will run immediately\n\n      retry.retryLater(retryCount++, cacheDns);\n    } else {\n      logger('maximum retries reached');\n      self.reSync.retryLater(self.reSyncCount++, function () {\n        var args = [].slice.call(arguments);\n        self.sync.apply(self, args);\n      });\n    }\n  } // first attempt is to cache dns. So, calculation does not\n  // include DNS resolution time\n\n\n  function cacheDns() {\n    self.getServerTime(function (err) {\n      if (!err) {\n        calculateTimeDiff();\n      } else {\n        syncTime();\n      }\n    });\n  }\n\n  function calculateTimeDiff() {\n    var clientStartTime = new Date().getTime();\n    self.getServerTime(function (err, serverTime) {\n      if (!err && serverTime) {\n        // (Date.now() + clientStartTime)/2 : Midpoint between req and res\n        var networkTime = (new Date().getTime() - clientStartTime) / 2;\n        var serverStartTime = serverTime - networkTime;\n        self.diff = serverStartTime - clientStartTime;\n        self.synced = true; // we need to send 1 into retryLater.\n\n        self.reSync.retryLater(self.reSyncCount++, function () {\n          var args = [].slice.call(arguments);\n          self.sync.apply(self, args);\n        });\n        logger('successfully updated diff value', self.diff);\n      } else {\n        syncTime();\n      }\n    });\n  }\n};\n\nNtp.prototype.getServerTime = function (callback) {\n  var self = this;\n\n  if (Meteor.isServer) {\n    Kadira.coreApi.get(self.path, {\n      noRetries: true\n    }).then(content => {\n      var serverTime = parseInt(content);\n      callback(null, serverTime);\n    }).catch(err => {\n      callback(err);\n    });\n  } else {\n    httpRequest('GET', self.endpoint + \"?noCache=\".concat(new Date().getTime(), \"-\").concat(Math.random()), function (err, res) {\n      if (err) {\n        callback(err);\n      } else {\n        var serverTime = parseInt(res.content);\n        callback(null, serverTime);\n      }\n    });\n  }\n};\n\nfunction getLogger() {\n  if (Meteor.isServer) {\n    return Npm.require('debug')(\"kadira:ntp\");\n  } else {\n    return function (message) {\n      var canLogKadira = Meteor._localStorage.getItem('LOG_KADIRA') !== null && typeof console !== 'undefined';\n\n      if (canLogKadira) {\n        if (message) {\n          message = \"kadira:ntp \" + message;\n          arguments[0] = message;\n        }\n\n        console.log.apply(console, arguments);\n      }\n    };\n  }\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client\":{\"utils.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/utils.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\ngetBrowserInfo = function () {\n  return {\n    browser: window.navigator.userAgent,\n    userId: Meteor.userId && Meteor.userId(),\n    url: location.href,\n    resolution: getResolution(),\n    clientArch: getClientArch()\n  };\n};\n\ngetResolution = function () {\n  if (screen && screen.width && screen.height) {\n    var resolution = screen.width + 'x' + screen.height;\n    return resolution;\n  }\n};\n\nconst toArray = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args;\n};\n\ngetErrorStack = function (zone, callback) {\n  var trace = [];\n  var eventMap = zone.eventMap || {};\n  var infoMap = zone.infoMap || {};\n  trace.push({\n    at: new Date().getTime(),\n    stack: zone.erroredStack.get()\n  });\n  processZone();\n\n  function processZone() {\n    // we assume, first two zones are not interesting\n    // bacause, they are some internal meteor loading stuffs\n    if (zone && zone.depth > 2) {\n      var stack = \"\";\n\n      if (zone.currentStack) {\n        stack = zone.currentStack.get();\n      }\n\n      var events = eventMap[zone.id] || [];\n      var info = getInfoArray(infoMap[zone.id]);\n      var ownerArgsEvent = events && events[0] && events[0].type == 'owner-args' && events.shift();\n      var runAt = ownerArgsEvent ? ownerArgsEvent.at : zone.runAt;\n      var ownerArgs = ownerArgsEvent ? toArray.apply(null, ownerArgsEvent.args) : []; // limiting\n\n      events = events.slice(-5).map(checkSizeAndPickFields(100));\n      info = info.slice(-5).map(checkSizeAndPickFields(100));\n      ownerArgs = checkSizeAndPickFields(200)(ownerArgs.slice(0, 5));\n      zone.owner && delete zone.owner.zoneId;\n      trace.push({\n        createdAt: zone.createdAt,\n        runAt: runAt,\n        stack: stack,\n        owner: zone.owner,\n        ownerArgs: ownerArgs,\n        events: events,\n        info: info,\n        zoneId: zone.id\n      });\n      zone = zone.parent;\n      setTimeout(processZone, 0);\n    } else {\n      callback(trace);\n    }\n  }\n};\n\ngetInfoArray = function () {\n  let info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.keys(info).map(function (key, type) {\n    const value = info[key];\n    value.type = type;\n    return value;\n  });\n};\n\ngetTime = function () {\n  if (Kadira && Kadira.syncedDate) {\n    return Kadira.syncedDate.getTime();\n  } else {\n    return new Date().getTime();\n  }\n};\n\ngetClientArch = function () {\n  if (Meteor.isCordova) {\n    return 'cordova.web';\n  } else if (typeof Meteor.isModern === 'undefined' || Meteor.isModern) {\n    return 'web.browser';\n  } else {\n    return 'web.browser.legacy';\n  }\n};\n\ncheckSizeAndPickFields = function (maxFieldSize) {\n  return function (obj) {\n    maxFieldSize = maxFieldSize || 100;\n\n    for (var key in obj) {\n      var value = obj[key];\n\n      try {\n        var valueStringified = JSON.stringify(value);\n\n        if (valueStringified.length > maxFieldSize) {\n          obj[key] = valueStringified.substr(0, maxFieldSize) + \" ...\";\n        } else {\n          obj[key] = value;\n        }\n      } catch (ex) {\n        obj[key] = 'Error: cannot stringify value';\n      }\n    }\n\n    return obj;\n  };\n};\n\nhttpRequest = function (method, url, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  /**\n   * IE8 and IE9 does not support CORS with the usual XMLHttpRequest object\n   * If XDomainRequest exists, use it to send errors.\n   * XDR can POST data to HTTPS endpoints only if current page uses HTTPS\n   */\n\n\n  if (window.XDomainRequest) {\n    var xdr = new XDomainRequest();\n    url = matchPageProtocol(url);\n\n    xdr.onload = function () {\n      var headers = {\n        'Content-Type': xdr.contentType\n      };\n      var data = {};\n\n      try {\n        data = JSON.parse(xdr.responseText);\n      } catch (e) {}\n\n      callback(null, {\n        content: xdr.responseText,\n        data: data,\n        headers: headers,\n        statusCode: 200\n      });\n    };\n\n    xdr.onerror = function () {\n      callback({\n        statusCode: 404\n      });\n    };\n\n    xdr.onprogress = function () {// onprogress must be set. Otherwise, ie doesn't handle duplicate requests\n      // correctly.\n    };\n\n    xdr.open(method, url);\n    setTimeout(() => {\n      var content = options.content;\n\n      if (typeof content === 'object') {\n        content = JSON.stringify(content);\n      } // delaying send fixes issues when multiple xdr requests are made\n      // at the same time.\n\n\n      xdr.send(options.content || null);\n    }, 0);\n\n    function matchPageProtocol(endpoint) {\n      var withoutProtocol = endpoint.substr(endpoint.indexOf(':') + 1);\n      return window.location.protocol + withoutProtocol;\n    }\n  } else {\n    // Based on Meteor's HTTP package. Uses XMLHttpRequest\n    var content = options.content; // wrap callback to add a 'response' property on an error, in case\n    // we have both (http 4xx/5xx error, which has a response payload)\n\n    callback = function (callback) {\n      var called = false;\n      return function (error, response) {\n        if (!called) {\n          called = true;\n\n          if (error && response) {\n            error.response = response;\n          }\n\n          callback(error, response);\n        }\n      };\n    }(callback);\n\n    try {\n      if (typeof XMLHttpRequest === \"undefined\") {\n        throw new Error(\"Can't create XMLHttpRequest\");\n      }\n\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url, true);\n\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, options.headers[key]);\n        });\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          // COMPLETE\n          if (!xhr.status) {\n            // no HTTP response\n            callback(new Error(\"Connection lost\"));\n          } else {\n            var response = {};\n            response.statusCode = xhr.status;\n            response.content = xhr.responseText; // Read Content-Type header, up to a ';' if there is one.\n            // A typical header might be \"application/json; charset=utf-8\"\n            // or just \"application/json\".\n\n            var contentType = (xhr.getResponseHeader('content-type') || ';').split(';')[0]; // Only try to parse data as JSON if server sets correct content type.\n\n            if (['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'].indexOf(contentType) >= 0) {\n              try {\n                response.data = JSON.parse(response.content);\n              } catch (err) {\n                response.data = null;\n              }\n            } else {\n              response.data = null;\n            }\n\n            var error = null;\n\n            if (response.statusCode >= 400) {\n              var message = \"failed [\" + response.statusCode + \"]\";\n\n              if (response.content) {\n                var stringContent = typeof response.content == \"string\" ? response.content : response.content.toString();\n                stringContent = stringContent.replace(/\\n/g, ' ');\n                stringContent = stringContent.length > 500 ? stringContent.slice(0, length) + '...' : stringContent;\n                message += ' ' + stringContent;\n              }\n\n              error = new Error(message);\n            }\n\n            callback(error, response);\n          }\n        }\n      };\n\n      xhr.send(content);\n    } catch (err) {\n      callback(err);\n    }\n  }\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"models\":{\"errors.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/models/errors.js                                                               //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nErrorModel = function (options) {\n  BaseErrorModel.call(this);\n  options = options || {};\n  options.maxErrorsPerInterval = options.maxErrorsPerInterval || 10;\n  options.intervalInMillis = options.intervalInMillis || 1000 * 60 * 2; //2 mins\n\n  options.waitForNtpSyncInterval = options.waitForNtpSyncInterval || 0;\n  var self = this;\n  self.options = options; // errorsSentCount will be reseted at the start of the interval\n\n  self.errorsSentCount = 0;\n  self.errorsSent = Object.create(null);\n  self.intervalTimeoutHandler = setInterval(function () {\n    self.errorsSentCount = 0;\n\n    self._flushErrors();\n  }, self.options.intervalInMillis);\n};\n\nObject.assign(ErrorModel.prototype, BaseErrorModel.prototype);\n\nErrorModel.prototype.sendError = function (errorDef, err, force) {\n  var self = this;\n\n  if (!this.applyFilters('client', errorDef.name, err, errorDef.subType)) {\n    return;\n  }\n\n  ;\n\n  if (!this.canSendErrors()) {\n    // reached maximum error count for this interval (1 min)\n    return;\n  }\n\n  if (force) {\n    sendError();\n  } else {\n    if (Kadira.syncedDate.synced || self.options.waitForNtpSyncInterval == 0) {\n      sendError();\n    } else {\n      setTimeout(forceSendError, self.options.waitForNtpSyncInterval);\n    }\n  }\n\n  function forceSendError() {\n    self.sendError(errorDef, err, true);\n  }\n\n  function sendError() {\n    if (!self.errorsSent[errorDef.name]) {\n      // sync time with the server\n      if (errorDef.startTime) {\n        errorDef.startTime = Kadira.syncedDate.syncTime(errorDef.startTime);\n      }\n\n      errorDef.count = 1;\n\n      var payload = self._buildPayload([errorDef]);\n\n      Kadira.send(payload, '/errors');\n      self.errorsSent[errorDef.name] = _objectSpread({}, errorDef);\n      self.errorsSent[errorDef.name].count = 0;\n      self.errorsSentCount++;\n    } else {\n      self.increamentErrorCount(errorDef.name);\n    }\n  }\n};\n\nErrorModel.prototype._buildPayload = function (errors) {\n  var arch = getClientArch();\n  return {\n    host: Kadira.options.hostname,\n    recordIPAddress: Kadira.options.recordIPAddress,\n    errors: errors,\n    arch: arch,\n    archVersion: getClientArchVersion(arch)\n  };\n};\n\nErrorModel.prototype._flushErrors = function () {\n  const errors = Object.values(this.errorsSent).filter(e => e.count > 0);\n\n  if (errors.length > 0) {\n    Kadira.send(this._buildPayload(errors), '/errors');\n  }\n\n  this.errorsSent = Object.create(null);\n};\n\nErrorModel.prototype.isErrorExists = function (name) {\n  return !!this.errorsSent[name];\n};\n\nErrorModel.prototype.increamentErrorCount = function (name) {\n  var error = this.errorsSent[name];\n\n  if (error) {\n    error.count++;\n  }\n};\n\nErrorModel.prototype.canSendErrors = function () {\n  return this.errorsSentCount < this.options.maxErrorsPerInterval;\n};\n\nErrorModel.prototype.close = function () {\n  clearTimeout(this.intervalTimeoutHandler);\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"error_reporters\":{\"zone.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/error_reporters/zone.js                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nif (window.Zone && Zone.inited) {\n  Zone.Reporters.add('kadira', kadiraZoneReporter);\n}\n\nfunction kadiraZoneReporter(zone) {\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  var errorName = Zone.Reporters.getErrorMessage(zone.erroredStack._e);\n\n  if (Kadira.errors.isErrorExists(errorName)) {\n    Kadira.errors.increamentErrorCount(errorName);\n  } else if (Kadira.errors.canSendErrors()) {\n    getErrorStack(zone, function (stacks) {\n      Kadira.errors.sendError({\n        appId: Kadira.options.appId,\n        name: errorName,\n        type: 'client',\n        startTime: zone.runAt,\n        subType: 'zone',\n        info: getBrowserInfo(),\n        stacks: JSON.stringify(stacks)\n      });\n    });\n  }\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"window_error.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/error_reporters/window_error.js                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar prevWindowOnError = window.onerror || Function.prototype;\n\nfunction handleOnError(message, url, line, col, error) {\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return prevWindowOnError(message, url, line, col, error);\n  }\n\n  url = url || '<anonymous>';\n  line = line || 0;\n  col = col || 0;\n\n  if (error) {\n    var stack = error.stack;\n  } else {\n    var stack = 'Error:\\n    at window.onerror (' + url + ':' + line + ':' + col + ')';\n  }\n\n  var now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'window.onerror',\n    info: getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        message,\n        url,\n        line,\n        col,\n        error\n      }\n    },\n    stacks: JSON.stringify([{\n      at: now,\n      events: [],\n      stack: stack\n    }])\n  });\n  return prevWindowOnError(message, url, line, col, error);\n  ;\n}\n\nKadira._setupOnErrorReporter = function setupOnError() {\n  if (window.onerror !== handleOnError) {\n    prevWindowOnError = window.onerror || prevWindowOnError;\n    window.onerror = handleOnError;\n  }\n};\n\nKadira._setupOnErrorReporter();\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteor_debug.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/error_reporters/meteor_debug.js                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar originalMeteorDebug = Meteor._debug;\nlet lastMessageToIgnore = null;\nlet messagesToIgnore = 0; // Sometimes one of the other error reporter tracks an error, but Meteor also\n// sends the details to Meteor._debug. In some places, Meteor splits the\n// information across multiple Meteor._debug calls.\n//\n// Does not report Meteor._debug errors until it sees the given message\n// or it has ignored maxMessages.\n\nKadira._ignoreDebugMessagesUntil = function (message, maxMessages) {\n  lastMessageToIgnore = message;\n  messagesToIgnore = maxMessages;\n};\n\nMeteor._debug = function (m, s) {\n  // We need to assign variables like this. Otherwise, \n  // we can't see proper error messages.\n  // See: https://github.com/meteorhacks/kadira/issues/193\n  var message = m;\n  var stack = s;\n  var args = arguments;\n\n  function runOriginal() {\n    return originalMeteorDebug.apply(Meteor, args);\n  } // track only if error tracking is enabled\n\n\n  if (!Kadira.options.enableErrorTracking) {\n    return runOriginal();\n  } // do not track if a zone is available (let zone handle the error)\n\n\n  if (window.zone) {\n    return runOriginal();\n  } // Do not report messages until either we see the\n  // lastMessageToIgnore or we have ignored the number of\n  // messages in messagesToIgnore\n\n\n  if (lastMessageToIgnore) {\n    if (message === lastMessageToIgnore || messagesToIgnore === 1) {\n      lastMessageToIgnore = null;\n      messagesToIgnore = 0;\n    } else {\n      messagesToIgnore -= 1;\n    }\n\n    return runOriginal();\n  } // We hate Meteor._debug (no single usage pattern)\n\n\n  if (message instanceof Error) {\n    stack = message.stack;\n    message = message.message;\n  } else if (typeof message == 'string' && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  } else if (typeof message == 'string' && stack instanceof Error) {\n    const separator = message.endsWith(':') ? '' : ':';\n    message = \"\".concat(message).concat(separator, \" \").concat(stack.message);\n    stack = getStackFromMessage(stack.stack);\n  } // sometimes Meteor._debug is called with the stack concat to the message\n  // FIXME Meteor._debug can be called in many ways\n\n\n  if (message && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  }\n\n  var now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'meteor._debug',\n    info: getBrowserInfo(),\n    stacks: JSON.stringify([{\n      at: now,\n      events: [],\n      stack: stack\n    }])\n  });\n  return runOriginal();\n}; // Identifies lines that are a stack trace frame:\n// 1. Has \"at\" proceeded and followed by at least one space\n// 2. Or has an \"@\" symbol\n\n\nvar stackRegex = /(^.*@.*$|^\\s+at\\s.+$)/gm;\n\nfunction getStackFromMessage(message) {\n  // add empty string to add the empty line at start\n  var stack = [''];\n  var match;\n\n  while (match = stackRegex.exec(message)) {\n    stack.push(match[0]);\n  }\n\n  return stack.join('\\n');\n}\n\nfunction firstLine(message) {\n  return message.split('\\n')[0];\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"unhandled_rejection.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/error_reporters/unhandled_rejection.js                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nwindow.addEventListener(\"unhandledrejection\", function (e) {\n  // TODO: support errors from bluebird\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  var message = e.reason;\n  var stack = '';\n\n  if (message instanceof Error) {\n    stack = message.stack;\n    message = message.message;\n  }\n\n  var now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'window.onunhandledrejection',\n    info: getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        reason: e\n      }\n    },\n    stacks: JSON.stringify([{\n      at: now,\n      events: [],\n      stack: stack\n    }])\n  });\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tracker.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/error_reporters/tracker.js                                                     //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nconst origCompute = Tracker.Computation.prototype._compute;\nconst origAfterFlush = Tracker.afterFlush;\nconst origRunFlush = Tracker._runFlush; // Internal variable in the Tracker package set during Tracker._runFlush\n// If it is true, Tracker throws the error instead of using Meteor._debug\n// In that case, we should not report the error in afterFlush and\n// instead let another reporter handle it\n\nlet throwFirstError = false;\n\nTracker._runFlush = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  throwFirstError = !!options.throwFirstError;\n  return origRunFlush.apply(this, arguments);\n};\n\nTracker.afterFlush = function (func) {\n  return origAfterFlush(function () {\n    try {\n      return func();\n    } catch (e) {\n      if (Kadira.options.enableErrorTracking && !throwFirstError) {\n        var message = e.message;\n        var stack = e.stack;\n        var now = new Date().getTime();\n        Kadira.errors.sendError({\n          appId: Kadira.options.appId,\n          name: message,\n          type: 'client',\n          startTime: now,\n          subType: 'tracker.afterFlush',\n          info: getBrowserInfo(),\n          stacks: JSON.stringify([{\n            at: now,\n            events: [],\n            stack\n          }])\n        }); // Once the error is thrown, Tracker will call\n        // Meteor._debug 2 or 3 times. The last time will\n        // have the stack trace.\n\n        Kadira._ignoreDebugMessagesUntil(stack, 3);\n      }\n\n      throw e;\n    }\n  });\n};\n\nTracker.Computation.prototype._compute = function () {\n  try {\n    return origCompute.apply(this, arguments);\n  } catch (e) {\n    // During the first run, Tracker throws the error\n    // It will be handled by a different error reporter\n    if (Kadira.options.enableErrorTracking && !this.firstRun) {\n      var message = e.message;\n      var stack = e.stack;\n      var now = new Date().getTime();\n      Kadira.errors.sendError({\n        appId: Kadira.options.appId,\n        name: message,\n        type: 'client',\n        startTime: now,\n        subType: 'tracker.compute',\n        info: getBrowserInfo(),\n        stacks: JSON.stringify([{\n          at: now,\n          events: [],\n          stack\n        }])\n      }); // Once the error is thrown, Tracker will call\n      // Meteor._debug 2 or 3 times. The last time will\n      // have the stack trace.\n\n      Kadira._ignoreDebugMessagesUntil(stack, 3);\n    }\n\n    throw e;\n  }\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"kadira.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/client/kadira.js                                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nKadira.enableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = true;\n};\n\nKadira.disableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = false;\n};\n\nKadira.trackError = function (type, message) {\n  let {\n    stacks = ''\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (Kadira.options.enableErrorTracking && type && message) {\n    var now = new Date().getTime();\n    Kadira.errors.sendError({\n      appId: Kadira.options.appId,\n      name: message,\n      startTime: now,\n      type: 'client',\n      subType: type,\n      info: getBrowserInfo(),\n      stacks: JSON.stringify([{\n        at: now,\n        events: [],\n        stack: stacks\n      }])\n    });\n  }\n}; // Create new NTP object and error model immediately so it can be used\n// endpoints is set later using __meteor_runtime_config__ or publication\n\n\nKadira.syncedDate = new Ntp(null);\nKadira.errors = new ErrorModel({\n  waitForNtpSyncInterval: 1000 * 5,\n  // 5 secs\n  intervalInMillis: 1000 * 60 * 1,\n  // 1minutes\n  maxErrorsPerInterval: 5\n}); // __meteor_runtime_config__ cannot be dynamically set for cordova apps\n// using a null subscription to send required options to client\n\nif (Meteor.isCordova) {\n  var SettingsCollection = new Meteor.Collection('kadira_settings');\n  SettingsCollection.find().observe({\n    added: initialize\n  });\n} else {\n  initialize(__meteor_runtime_config__.kadira);\n}\n\nvar initialized = false;\n\nfunction initialize() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (initialized) {\n    return;\n  }\n\n  initialized = true;\n  Kadira.options = _objectSpread({\n    errorDumpInterval: 1000 * 60,\n    maxErrorsPerInterval: 10,\n    collectAllStacks: false,\n    enableErrorTracking: false\n  }, options);\n\n  if (Kadira.options.appId && Kadira.options.endpoint) {\n    // update endpoint after receiving correct data\n    Kadira.syncedDate.setEndpoint(Kadira.options.endpoint);\n    Kadira.connected = true;\n    Meteor.startup(function () {\n      // if we don't do this this might block the initial rendering\n      // or, it will show up bottom of the page, which is not cool\n      setTimeout(function () {\n        Kadira.syncedDate.sync();\n      }, Kadira.options.clientEngineSyncDelay);\n    });\n  }\n\n  if (Kadira.connected && Kadira.options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  }\n\n  if (window.Zone && Zone.inited) {\n    Zone.collectAllStacks = Kadira.options.collectAllStacks;\n  }\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"profiler\":{\"client.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/montiapm_agent/lib/profiler/client.js                                                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// For just making a notice\n// montiapm:profiler will override this method to add\n// actual functionality\nKadira.profileCpu = function profileCpu() {\n  var message = \"Please install montiapm:profiler\" + \" to take a CPU profile.\";\n  console.log(message);\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/utils.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/unify.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/models/base_error.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/retry.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/ntp.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/utils.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/models/errors.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/zone.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/window_error.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/meteor_debug.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/unhandled_rejection.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/tracker.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/kadira.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/profiler/client.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/default_error_filters.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/send.js\");\n\n/* Exports */\nPackage._define(\"montiapm:agent\", {\n  Kadira: Kadira,\n  Monti: Monti\n});\n\n})();\n","servePath":"/packages/montiapm_agent.js","sourceMap":{"version":3,"sources":["packages/montiapm:agent/lib/common/utils.js","packages/montiapm:agent/lib/common/unify.js","packages/montiapm:agent/lib/common/default_error_filters.js","packages/montiapm:agent/lib/common/send.js","packages/montiapm:agent/lib/models/base_error.js","packages/montiapm:agent/lib/retry.js","packages/montiapm:agent/lib/ntp.js","packages/montiapm:agent/lib/client/utils.js","packages/montiapm:agent/lib/client/models/errors.js","packages/montiapm:agent/lib/client/error_reporters/zone.js","packages/montiapm:agent/lib/client/error_reporters/window_error.js","packages/montiapm:agent/lib/client/error_reporters/meteor_debug.js","packages/montiapm:agent/lib/client/error_reporters/unhandled_rejection.js","packages/montiapm:agent/lib/client/error_reporters/tracker.js","packages/montiapm:agent/lib/client/kadira.js","packages/montiapm:agent/lib/profiler/client.js"],"names":["getClientArchVersion","arch","autoupdate","__meteor_runtime_config__","versions","version","autoupdateVersionCordova","autoupdateVersion","Kadira","options","Monti","Meteor","wrapAsync","_wrapAsync","isServer","EventEmitter","Npm","require","eventBus","setMaxListeners","buildArgs","args","eventName","slice","unshift","EventBus","forEach","m","apply","commonErrRegExps","errorFilters","filterValidationErrors","type","message","err","Error","filterCommonMeteorErrors","lc","length","regExp","test","send","payload","path","callback","connected","substr","endpoint","retryCount","retry","Retry","minCount","minTimeout","baseTimeout","maxTimeout","sendFunction","_getSendFunction","tryToSend","retryLater","console","warn","res","statusCode","data","content","_serverSend","_clientSend","httpRequest","headers","JSON","stringify","BaseErrorModel","_filters","prototype","addFilter","filter","push","removeFilter","index","indexOf","splice","applyFilters","error","subType","validated","ex","constructor","exponent","fuzz","retryTimer","clear","clearTimeout","_timeout","count","timeout","Math","min","pow","Random","fraction","ceil","fn","setTimeout","logger","getLogger","Ntp","setEndpoint","diff","synced","reSyncCount","reSync","_now","now","Date","getTime","round","syncTime","localTime","sync","self","cacheDns","call","arguments","getServerTime","calculateTimeDiff","clientStartTime","serverTime","networkTime","serverStartTime","coreApi","get","noRetries","then","parseInt","catch","random","canLogKadira","_localStorage","getItem","log","getBrowserInfo","browser","window","navigator","userAgent","userId","url","location","href","resolution","getResolution","clientArch","getClientArch","screen","width","height","toArray","getErrorStack","zone","trace","eventMap","infoMap","at","stack","erroredStack","processZone","depth","currentStack","events","id","info","getInfoArray","ownerArgsEvent","shift","runAt","ownerArgs","map","checkSizeAndPickFields","owner","zoneId","createdAt","parent","Object","keys","key","value","syncedDate","isCordova","isModern","maxFieldSize","obj","valueStringified","method","XDomainRequest","xdr","matchPageProtocol","onload","contentType","parse","responseText","e","onerror","onprogress","open","withoutProtocol","protocol","called","response","XMLHttpRequest","xhr","setRequestHeader","onreadystatechange","readyState","status","getResponseHeader","split","stringContent","toString","replace","_objectSpread","module","link","default","v","ErrorModel","maxErrorsPerInterval","intervalInMillis","waitForNtpSyncInterval","errorsSentCount","errorsSent","create","intervalTimeoutHandler","setInterval","_flushErrors","assign","sendError","errorDef","force","name","canSendErrors","forceSendError","startTime","_buildPayload","increamentErrorCount","errors","host","hostname","recordIPAddress","archVersion","values","isErrorExists","close","Zone","inited","Reporters","add","kadiraZoneReporter","enableErrorTracking","errorName","getErrorMessage","_e","stacks","appId","prevWindowOnError","Function","handleOnError","line","col","_internalDetails","origError","_setupOnErrorReporter","setupOnError","originalMeteorDebug","_debug","lastMessageToIgnore","messagesToIgnore","_ignoreDebugMessagesUntil","maxMessages","s","runOriginal","undefined","getStackFromMessage","firstLine","separator","endsWith","stackRegex","match","exec","join","addEventListener","reason","origCompute","Tracker","Computation","_compute","origAfterFlush","afterFlush","origRunFlush","_runFlush","throwFirstError","func","firstRun","disableErrorTracking","trackError","SettingsCollection","Collection","find","observe","added","initialize","kadira","initialized","errorDumpInterval","collectAllStacks","startup","clientEngineSyncDelay","profileCpu"],"mappings":"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","file":"/packages/montiapm_agent.js","sourcesContent":["getClientArchVersion = function (arch) {\n  const autoupdate = __meteor_runtime_config__.autoupdate\n\n  if (autoupdate) {\n    return autoupdate.versions[arch] ? autoupdate.versions[arch].version : 'none';\n  }\n\n  // Meteor 1.7 and older did not have an `autoupdate` object.\n  switch (arch) {\n    case 'cordova.web':\n      return __meteor_runtime_config__.autoupdateVersionCordova;\n    case 'web.browser':\n    case 'web.browser.legacy':\n      // Meteor 1.7 always used the web.browser.legacy version\n      return __meteor_runtime_config__.autoupdateVersion;\n\n    default:\n      return 'none';\n  }\n}\n","Kadira = {};\nKadira.options = {};\n\nMonti = Kadira;\n\nif(Meteor.wrapAsync) {\n  Kadira._wrapAsync = Meteor.wrapAsync;\n} else {\n  Kadira._wrapAsync = Meteor._wrapAsync;\n}\n\nif(Meteor.isServer) {\n  var EventEmitter = Npm.require('events').EventEmitter;\n  var eventBus = new EventEmitter();\n  eventBus.setMaxListeners(0);\n\n  var buildArgs = function(args) {\n    var eventName = args[0] + '-' + args[1];\n    var args = args.slice(2);\n    args.unshift(eventName);\n    return args;\n  };\n  \n  Kadira.EventBus = {};\n  ['on', 'emit', 'removeListener', 'removeAllListeners'].forEach(function(m) {\n    Kadira.EventBus[m] = function(...args) {\n      var args = buildArgs(args);\n      return eventBus[m].apply(eventBus, args);\n    };\n  });\n}","var commonErrRegExps = [\n  /connection timeout\\. no (\\w*) heartbeat received/i,\n  /INVALID_STATE_ERR/i,\n];\n\nKadira.errorFilters = {\n  filterValidationErrors: function(type, message, err) {\n    if(err && err instanceof Meteor.Error) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n\n  filterCommonMeteorErrors: function(type, message) {\n    for(var lc=0; lc<commonErrRegExps.length; lc++) {\n      var regExp = commonErrRegExps[lc];\n      if(regExp.test(message)) {\n        return false;\n      }\n    }\n    return true;\n  }\n};","Kadira.send = function (payload, path, callback) {\n  if(!Kadira.connected)  {\n    throw new Error(\"You need to connect with Kadira first, before sending messages!\");\n  }\n\n  path = (path.substr(0, 1) != '/')? \"/\" + path : path;\n  var endpoint = Kadira.options.endpoint + path;\n  var retryCount = 0;\n  var retry = new Retry({\n    minCount: 1,\n    minTimeout: 0,\n    baseTimeout: 1000*5,\n    maxTimeout: 1000*60,\n  });\n\n  var sendFunction = Kadira._getSendFunction();\n  tryToSend();\n\n  function tryToSend(err) {\n    if(retryCount < 5) {\n      retry.retryLater(retryCount++, send);\n    } else {\n      console.warn('Error sending error traces to Monti APM server');\n      if(callback) callback(err);\n    }\n  }\n\n  function send() {\n    sendFunction(endpoint, payload, function(err, res) {\n      if(err && !res) {\n        tryToSend(err);\n      } else if(res.statusCode == 200) {\n        if(callback) callback(null, res.data);\n      } else {\n        if(callback) callback(new Meteor.Error(res.statusCode, res.content));\n      }\n    });\n  }\n};\n\nKadira._getSendFunction = function() {\n  return (Meteor.isServer)? Kadira._serverSend : Kadira._clientSend;\n};\n\nKadira._clientSend = function (endpoint, payload, callback) {\n  httpRequest('POST', endpoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    content: JSON.stringify(payload)\n  }, callback);\n}\n\nKadira._serverSend = function () {\n  throw new Error('Kadira._serverSend is not supported. Use coreApi instead.');\n}\n","BaseErrorModel = function(options) {\n  this._filters = [];\n};\n\nBaseErrorModel.prototype.addFilter = function(filter) {\n  if(typeof filter === 'function') {\n    this._filters.push(filter);\n  } else {\n    throw new Error(\"Error filter must be a function\");\n  }\n};\n\nBaseErrorModel.prototype.removeFilter = function(filter) {\n  var index = this._filters.indexOf(filter);\n  if(index >= 0) {\n    this._filters.splice(index, 1);\n  }\n};\n\nBaseErrorModel.prototype.applyFilters = function(type, message, error, subType) {\n  for(var lc=0; lc<this._filters.length; lc++) {\n    var filter = this._filters[lc];\n    try {\n      var validated = filter(type, message, error, subType);\n      if(!validated) return false;\n    } catch (ex) {\n      // we need to remove this filter\n      // we may ended up in a error cycle\n      this._filters.splice(lc, 1);\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);\n    }\n  }\n\n  return true;\n};","// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n\n//TODO: remove this class and use Meteor Retry in a later version of meteor.\n\nRetry = class {\n  constructor ({\n    baseTimeout = 1000, // 1 second\n    exponent = 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout = 5 * 60000, // 5 minutes\n    minTimeout = 10,\n    minCount = 2,\n    fuzz = 0.5, // +- 25%\n  } = {}) {\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  }\n\n  // Reset a pending retry, if any.\n  clear() {\n    if(this.retryTimer)\n      clearTimeout(this.retryTimer);\n    this.retryTimer = null;\n  }\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout(count) {\n    if(count < this.minCount)\n      return this.minTimeout;\n\n    let timeout = Math.min(\n      this.maxTimeout,\n      this.baseTimeout * Math.pow(this.exponent, count));\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    timeout = timeout * ((Random.fraction() * this.fuzz) +\n                         (1 - this.fuzz/2));\n    return Math.ceil(timeout);\n  }\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater(count, fn) {\n    const timeout = this._timeout(count);\n    if(this.retryTimer)\n      clearTimeout(this.retryTimer);\n\n    this.retryTimer = setTimeout(fn, timeout);\n    return timeout;\n  }\n\n}\n\n","var logger = getLogger();\n\nNtp = function (endpoint) {\n  this.path = '/simplentp/sync';\n  this.setEndpoint(endpoint);\n  this.diff = 0;\n  this.synced = false;\n  this.reSyncCount = 0;\n  this.reSync = new Retry({\n    baseTimeout: 1000*60,\n    maxTimeout: 1000*60*10,\n    minCount: 0\n  });\n}\n\nNtp._now = function() {\n  var now = Date.now();\n  if(typeof now == 'number') {\n    return now;\n  } else if(now instanceof Date) {\n    // some extenal JS libraries override Date.now and returns a Date object\n    // which directly affect us. So we need to prepare for that\n    return now.getTime();\n  } else {\n    // trust me. I've seen now === undefined\n    return (new Date()).getTime();\n  }\n};\n\nNtp.prototype.setEndpoint = function(endpoint) {\n  this.endpoint = endpoint + this.path;\n};\n\nNtp.prototype.getTime = function() {\n  return Ntp._now() + Math.round(this.diff);\n};\n\nNtp.prototype.syncTime = function(localTime) {\n  return localTime + Math.ceil(this.diff);\n};\n\nNtp.prototype.sync = function() {\n  logger('init sync');\n  var self = this;\n  var retryCount = 0;\n  var retry = new Retry({\n    baseTimeout: 1000*20,\n    maxTimeout: 1000*60,\n    minCount: 1,\n    minTimeout: 0\n  });\n  syncTime();\n\n  function syncTime () {\n    if(retryCount<5) {\n      logger('attempt time sync with server', retryCount);\n      // if we send 0 to the retryLater, cacheDns will run immediately\n      retry.retryLater(retryCount++, cacheDns);\n    } else {\n      logger('maximum retries reached');\n      self.reSync.retryLater(self.reSyncCount++, function () {\n        var args = [].slice.call(arguments);\n        self.sync.apply(self, args);\n      });\n    }\n  }\n\n  // first attempt is to cache dns. So, calculation does not\n  // include DNS resolution time\n  function cacheDns () {\n    self.getServerTime(function(err) {\n      if(!err) {\n        calculateTimeDiff();\n      } else {\n        syncTime();\n      }\n    });\n  }\n\n  function calculateTimeDiff () {\n    var clientStartTime = (new Date()).getTime();\n    self.getServerTime(function(err, serverTime) {\n      if(!err && serverTime) {\n        // (Date.now() + clientStartTime)/2 : Midpoint between req and res\n        var networkTime = ((new Date()).getTime() - clientStartTime)/2\n        var serverStartTime = serverTime - networkTime;\n        self.diff = serverStartTime - clientStartTime;\n        self.synced = true;\n        // we need to send 1 into retryLater.\n        self.reSync.retryLater(self.reSyncCount++, function () {\n          var args = [].slice.call(arguments);\n          self.sync.apply(self, args);\n        });\n        logger('successfully updated diff value', self.diff);\n      } else {\n        syncTime();\n      }\n    });\n  }\n}\n\nNtp.prototype.getServerTime = function(callback) {\n  var self = this;\n\n  if(Meteor.isServer) {\n    Kadira.coreApi.get(self.path, { noRetries: true }).then(content => {\n      var serverTime = parseInt(content);\n      callback(null, serverTime);\n    })\n    .catch(err => {\n      callback(err);\n    });\n  } else {\n    httpRequest('GET', self.endpoint + `?noCache=${new Date().getTime()}-${Math.random()}`, function(err, res) {\n      if (err) {\n        callback(err);\n      } else {\n        var serverTime = parseInt(res.content);\n        callback(null, serverTime);\n      }\n    });\n  }\n};\n\nfunction getLogger() {\n  if(Meteor.isServer) {\n    return Npm.require('debug')(\"kadira:ntp\");\n  } else {\n    return function(message) {\n      var canLogKadira =\n        Meteor._localStorage.getItem('LOG_KADIRA') !== null\n        && typeof console !== 'undefined';\n\n      if(canLogKadira) {\n        if(message) {\n          message = \"kadira:ntp \" + message;\n          arguments[0] = message;\n        }\n        console.log.apply(console, arguments);\n      }\n    }\n  }\n}\n","getBrowserInfo = function () {\n  return {\n    browser: window.navigator.userAgent,\n    userId: Meteor.userId && Meteor.userId(),\n    url: location.href,\n    resolution: getResolution(),\n    clientArch: getClientArch(),\n  };\n}\n\ngetResolution = function () {\n  if(screen && screen.width && screen.height) {\n    var resolution = screen.width + 'x' + screen.height;\n    return resolution;\n  }\n}\n\nconst toArray = (...args) => args;\n\ngetErrorStack = function (zone, callback) {\n  var trace = [];\n  var eventMap = zone.eventMap || {};\n  var infoMap = zone.infoMap || {};\n\n  trace.push({\n    at: (new Date().getTime()),\n    stack: zone.erroredStack.get()\n  });\n\n  processZone();\n  function processZone() {\n    // we assume, first two zones are not interesting\n    // bacause, they are some internal meteor loading stuffs\n    if(zone && zone.depth > 2) {\n      var stack = \"\";\n      if(zone.currentStack) {\n        stack = zone.currentStack.get();\n      }\n\n      var events = eventMap[zone.id] || [];\n      var info = getInfoArray(infoMap[zone.id]);\n      var ownerArgsEvent = events && events[0] && events[0].type == 'owner-args' && events.shift();\n      var runAt = (ownerArgsEvent)? ownerArgsEvent.at : zone.runAt;\n      var ownerArgs = (ownerArgsEvent)? toArray.apply(null, ownerArgsEvent.args) : [];\n\n      // limiting\n      events = events.slice(-5).map(checkSizeAndPickFields(100));\n      info = info.slice(-5).map(checkSizeAndPickFields(100));\n      ownerArgs = checkSizeAndPickFields(200)(ownerArgs.slice(0,5));\n\n      zone.owner && delete zone.owner.zoneId;\n\n      trace.push({\n        createdAt: zone.createdAt,\n        runAt: runAt,\n        stack: stack,\n        owner: zone.owner,\n        ownerArgs: ownerArgs,\n        events: events,\n        info: info,\n        zoneId: zone.id\n      });\n      zone = zone.parent;\n\n      setTimeout(processZone, 0);\n    } else {\n      callback(trace);\n    }\n  }\n}\n\ngetInfoArray = function (info = {}) {\n  return Object.keys(info)\n    .map(function (key, type) {\n      const value = info[key];\n      value.type = type;\n      return value;\n    });\n}\n\ngetTime = function () {\n  if(Kadira && Kadira.syncedDate) {\n    return Kadira.syncedDate.getTime();\n  } else {\n    return (new Date().getTime());\n  }\n}\n\ngetClientArch = function () {\n  if (Meteor.isCordova) {\n    return 'cordova.web';\n  } else if (typeof Meteor.isModern === 'undefined' || Meteor.isModern) {\n    return 'web.browser'\n  } else {\n    return 'web.browser.legacy'\n  }\n}\n\ncheckSizeAndPickFields = function(maxFieldSize) {\n  return function(obj) {\n    maxFieldSize = maxFieldSize || 100;\n    for(var key in obj) {\n      var value = obj[key];\n      try {\n        var valueStringified = JSON.stringify(value);\n        if(valueStringified.length > maxFieldSize) {\n          obj[key] = valueStringified.substr(0, maxFieldSize) + \" ...\";\n        } else {\n          obj[key] = value;\n        }\n      } catch(ex) {\n        obj[key] = 'Error: cannot stringify value';\n      }\n    }\n    return obj;\n  }\n}\n\nhttpRequest = function (method, url, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  /**\n   * IE8 and IE9 does not support CORS with the usual XMLHttpRequest object\n   * If XDomainRequest exists, use it to send errors.\n   * XDR can POST data to HTTPS endpoints only if current page uses HTTPS\n   */\n  if (window.XDomainRequest) {\n    var xdr = new XDomainRequest();\n    url = matchPageProtocol(url);\n\n    xdr.onload = function () {\n      var headers = { 'Content-Type': xdr.contentType };\n      var data = {};\n      try {\n        data = JSON.parse(xdr.responseText);\n      } catch (e) {}\n\n      callback(null, { content: xdr.responseText, data: data, headers: headers, statusCode: 200 });\n    }\n\n    xdr.onerror = function () {\n      callback({ statusCode: 404 });\n    };\n    xdr.onprogress = function () {\n      // onprogress must be set. Otherwise, ie doesn't handle duplicate requests\n      // correctly.\n    };\n\n    xdr.open(method, url);\n\n    setTimeout(() => {\n      var content = options.content;\n      if (typeof content === 'object') {\n        content = JSON.stringify(content);\n      }\n      // delaying send fixes issues when multiple xdr requests are made\n      // at the same time.\n      xdr.send(options.content || null);\n    }, 0)\n\n    function matchPageProtocol (endpoint) {\n      var withoutProtocol = endpoint.substr(endpoint.indexOf(':') + 1);\n      return window.location.protocol + withoutProtocol;\n    }\n  } else {\n    // Based on Meteor's HTTP package. Uses XMLHttpRequest\n    var content = options.content;\n\n    // wrap callback to add a 'response' property on an error, in case\n    // we have both (http 4xx/5xx error, which has a response payload)\n    callback = (function (callback) {\n      var called = false;\n      return function (error, response) {\n        if (!called) {\n          called = true;\n          if (error && response) {\n            error.response = response;\n          }\n          callback(error, response);\n        }\n      };\n    })(callback);\n\n    try {\n      if (typeof XMLHttpRequest === \"undefined\") {\n        throw new Error(\"Can't create XMLHttpRequest\");\n      }\n      \n      var xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, true);\n\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, options.headers[key]);\n        });\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) { // COMPLETE\n          if (!xhr.status) {\n            // no HTTP response\n            callback(new Error(\"Connection lost\"));\n          } else {\n            var response = {};\n            response.statusCode = xhr.status;\n            response.content = xhr.responseText;\n\n            // Read Content-Type header, up to a ';' if there is one.\n            // A typical header might be \"application/json; charset=utf-8\"\n            // or just \"application/json\".\n            var contentType = (xhr.getResponseHeader('content-type') || ';').split(';')[0];\n\n            // Only try to parse data as JSON if server sets correct content type.\n            if (['application/json',\n              'text/javascript',\n              'application/javascript',\n              'application/x-javascript',\n            ].indexOf(contentType) >= 0) {\n              try {\n                response.data = JSON.parse(response.content);\n              } catch (err) {\n                response.data = null;\n              }\n            } else {\n              response.data = null;\n            }\n\n            var error = null;\n            if (response.statusCode >= 400) {\n              var message = \"failed [\" + response.statusCode + \"]\";\n\n              if (response.content) {\n                var stringContent = typeof response.content == \"string\" ?\n                  response.content : response.content.toString();\n                stringContent = stringContent.replace(/\\n/g, ' ');\n                stringContent = stringContent.length > 500 ? stringContent.slice(0, length) + '...' : stringContent;\n                message += ' ' + stringContent;\n              }\n\n              error = new Error(message);\n            }\n\n            callback(error, response);\n          }\n        }\n      };\n\n      xhr.send(content);\n\n    } catch (err) {\n      callback(err);\n    }\n  }\n};\n","ErrorModel = function(options) {\n  BaseErrorModel.call(this);\n  options = options || {};\n  options.maxErrorsPerInterval = options.maxErrorsPerInterval || 10;\n  options.intervalInMillis = options.intervalInMillis || 1000 * 60 *2; //2 mins\n  options.waitForNtpSyncInterval = options.waitForNtpSyncInterval || 0;\n  var self = this;\n\n  self.options = options;\n\n  // errorsSentCount will be reseted at the start of the interval\n  self.errorsSentCount = 0;\n  self.errorsSent = Object.create(null);\n  self.intervalTimeoutHandler = setInterval(function() {\n    self.errorsSentCount = 0;\n    self._flushErrors();\n  }, self.options.intervalInMillis);\n};\n\nObject.assign(ErrorModel.prototype, BaseErrorModel.prototype);\n\nErrorModel.prototype.sendError = function(errorDef, err, force) {\n  var self = this;\n  if(!this.applyFilters('client', errorDef.name, err, errorDef.subType)) {\n    return;\n  };\n\n  if(!this.canSendErrors()) {\n    // reached maximum error count for this interval (1 min)\n    return;\n  }\n\n  if(force) {\n    sendError();\n  } else {\n    if(Kadira.syncedDate.synced || self.options.waitForNtpSyncInterval == 0) {\n      sendError();\n    } else {\n      setTimeout(forceSendError, self.options.waitForNtpSyncInterval);\n    }\n  }\n\n  function forceSendError() {\n    self.sendError(errorDef, err, true);\n  }\n\n  function sendError() {\n    if(!self.errorsSent[errorDef.name]) {\n      // sync time with the server\n      if(errorDef.startTime) {\n        errorDef.startTime = Kadira.syncedDate.syncTime(errorDef.startTime);\n      }\n      errorDef.count = 1;\n      var payload = self._buildPayload([errorDef]);\n      Kadira.send(payload, '/errors');\n\n      self.errorsSent[errorDef.name] = { ...errorDef };\n      self.errorsSent[errorDef.name].count = 0;\n      self.errorsSentCount++;\n    } else {\n      self.increamentErrorCount(errorDef.name);\n    }\n  }\n};\n\nErrorModel.prototype._buildPayload = function(errors) {\n  var arch = getClientArch();\n\n  return {\n    host: Kadira.options.hostname,\n    recordIPAddress: Kadira.options.recordIPAddress,\n    errors: errors,\n    arch: arch,\n    archVersion: getClientArchVersion(arch)\n  }\n}\n\nErrorModel.prototype._flushErrors = function() {\n  const errors = Object.values(this.errorsSent).filter(e => e.count > 0);\n\n  if(errors.length > 0) {\n    Kadira.send(this._buildPayload(errors), '/errors');\n  }\n\n  this.errorsSent = Object.create(null);\n};\n\nErrorModel.prototype.isErrorExists = function(name) {\n  return !!this.errorsSent[name];\n};\n\nErrorModel.prototype.increamentErrorCount = function(name) {\n  var error = this.errorsSent[name];\n  if(error) {\n    error.count++;\n  }\n};\n\nErrorModel.prototype.canSendErrors = function() {\n  return this.errorsSentCount < this.options.maxErrorsPerInterval;\n};\n\nErrorModel.prototype.close = function() {\n  clearTimeout(this.intervalTimeoutHandler);\n};\n","if(window.Zone && Zone.inited) {\n  Zone.Reporters.add('kadira', kadiraZoneReporter);\n}\n\nfunction kadiraZoneReporter(zone) {\n  // track only if error tracking is enabled\n  if(!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  var errorName = Zone.Reporters.getErrorMessage(zone.erroredStack._e);\n  if(Kadira.errors.isErrorExists(errorName)) {\n    Kadira.errors.increamentErrorCount(errorName);\n  } else if(Kadira.errors.canSendErrors()) {\n    getErrorStack(zone, function(stacks) {\n      Kadira.errors.sendError({\n        appId : Kadira.options.appId,\n        name : errorName,\n        type : 'client',\n        startTime : zone.runAt,\n        subType : 'zone',\n        info : getBrowserInfo(),\n        stacks : JSON.stringify(stacks),\n      });\n    });\n  }\n}\n","var prevWindowOnError = window.onerror || Function.prototype;\n\nfunction handleOnError(message, url, line, col, error) {\n  // track only if error tracking is enabled\n  if(!Kadira.options.enableErrorTracking) {\n    return prevWindowOnError(message, url, line, col, error);\n  }\n\n  url = url || '<anonymous>';\n  line = line || 0;\n  col = col || 0;\n\n  if(error) {\n    var stack = error.stack;\n  } else {\n    var stack = 'Error:\\n    at window.onerror ('+url+':'+line+':'+col+')';\n  }\n\n  var now = (new Date().getTime());\n  Kadira.errors.sendError({\n    appId : Kadira.options.appId,\n    name : message,\n    type : 'client',\n    startTime : now,\n    subType : 'window.onerror',\n    info : getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        message,\n        url,\n        line,\n        col,\n        error\n      }\n    },\n    stacks : JSON.stringify([{at: now, events: [], stack: stack}]),\n  });\n\n  return prevWindowOnError(message, url, line, col, error);;\n}\n\nKadira._setupOnErrorReporter = function setupOnError () {\n  if (window.onerror !== handleOnError) {\n    prevWindowOnError = window.onerror || prevWindowOnError;\n\n    window.onerror = handleOnError;\n  }\n}\n\nKadira._setupOnErrorReporter();\n","var originalMeteorDebug = Meteor._debug;\n\nlet lastMessageToIgnore = null;\nlet messagesToIgnore = 0;\n\n// Sometimes one of the other error reporter tracks an error, but Meteor also\n// sends the details to Meteor._debug. In some places, Meteor splits the\n// information across multiple Meteor._debug calls.\n//\n// Does not report Meteor._debug errors until it sees the given message\n// or it has ignored maxMessages.\nKadira._ignoreDebugMessagesUntil = function (message, maxMessages) {\n  lastMessageToIgnore = message;\n  messagesToIgnore = maxMessages;\n};\n\nMeteor._debug = function(m, s) {\n  // We need to assign variables like this. Otherwise, \n  // we can't see proper error messages.\n  // See: https://github.com/meteorhacks/kadira/issues/193\n  var message = m;\n  var stack = s;\n  var args = arguments;\n\n  function runOriginal() {\n    return originalMeteorDebug.apply(Meteor, args);\n  }\n  \n  // track only if error tracking is enabled\n  if(!Kadira.options.enableErrorTracking) {\n    return runOriginal();\n  }\n\n  // do not track if a zone is available (let zone handle the error)\n  if(window.zone) {\n    return runOriginal();\n  }\n\n  // Do not report messages until either we see the\n  // lastMessageToIgnore or we have ignored the number of\n  // messages in messagesToIgnore\n  if (lastMessageToIgnore) {\n    if (message === lastMessageToIgnore || messagesToIgnore === 1) {\n      lastMessageToIgnore = null;\n      messagesToIgnore = 0;\n    } else {\n      messagesToIgnore -= 1;\n    }\n\n    return runOriginal();\n  }\n\n  // We hate Meteor._debug (no single usage pattern)\n  if(message instanceof Error) {\n    stack = message.stack;\n    message = message.message\n  } else if(typeof message == 'string' && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  } else if(typeof message == 'string' && stack instanceof Error) {\n    const separator = message.endsWith(':') ? '' : ':'\n    message = `${message}${separator} ${stack.message}`;\n    stack = getStackFromMessage(stack.stack);\n  }\n\n  // sometimes Meteor._debug is called with the stack concat to the message\n  // FIXME Meteor._debug can be called in many ways\n  if(message && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  }\n\n  var now = (new Date().getTime());\n  Kadira.errors.sendError({\n    appId : Kadira.options.appId,\n    name : message,\n    type : 'client',\n    startTime : now,\n    subType : 'meteor._debug',\n    info : getBrowserInfo(),\n    stacks : JSON.stringify([{at: now, events: [], stack: stack}]),\n  });\n\n  return runOriginal();\n};\n\n// Identifies lines that are a stack trace frame:\n// 1. Has \"at\" proceeded and followed by at least one space\n// 2. Or has an \"@\" symbol\nvar stackRegex = /(^.*@.*$|^\\s+at\\s.+$)/gm;\nfunction getStackFromMessage (message) {\n  // add empty string to add the empty line at start\n  var stack = [''];\n  var match;\n  while(match = stackRegex.exec(message)) {\n    stack.push(match[0]);\n  }\n  return stack.join('\\n');\n}\n\nfunction firstLine (message) {\n  return message.split('\\n')[0];\n}\n","window.addEventListener(\"unhandledrejection\", function(e) {\n  // TODO: support errors from bluebird\n\n  if (!Kadira.options.enableErrorTracking) {\n    return\n  }\n\n  var message = e.reason\n  var stack = ''\n\n  if (message instanceof Error) {\n    stack = message.stack\n    message = message.message\n  }\n\n  var now = (new Date().getTime());\n\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'window.onunhandledrejection',\n    info: getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        reason: e,\n      }\n    },\n    stacks: JSON.stringify([{at: now, events: [], stack: stack}])\n  });\n});\n","const origCompute = Tracker.Computation.prototype._compute;\nconst origAfterFlush = Tracker.afterFlush;\nconst origRunFlush = Tracker._runFlush;\n\n// Internal variable in the Tracker package set during Tracker._runFlush\n// If it is true, Tracker throws the error instead of using Meteor._debug\n// In that case, we should not report the error in afterFlush and\n// instead let another reporter handle it\nlet throwFirstError = false;\n\nTracker._runFlush = function (options = {}) {\n  throwFirstError = !!options.throwFirstError\n  return origRunFlush.apply(this, arguments);\n}\n\nTracker.afterFlush = function (func) {\n  return origAfterFlush(function() {\n    try {\n      return func();\n    } catch (e) {\n      if (Kadira.options.enableErrorTracking && !throwFirstError) {\n        var message = e.message;\n        var stack = e.stack;\n        var now = (new Date().getTime());\n  \n        Kadira.errors.sendError({\n          appId: Kadira.options.appId,\n          name: message,\n          type: 'client',\n          startTime: now,\n          subType: 'tracker.afterFlush',\n          info: getBrowserInfo(),\n          stacks: JSON.stringify([{at: now, events: [], stack}])\n        });\n  \n        // Once the error is thrown, Tracker will call\n        // Meteor._debug 2 or 3 times. The last time will\n        // have the stack trace.\n        Kadira._ignoreDebugMessagesUntil(stack, 3);\n      }\n\n      throw e;\n    }\n  });\n}\n\nTracker.Computation.prototype._compute = function () {\n  try {\n    return origCompute.apply(this, arguments)\n  } catch(e) {\n    // During the first run, Tracker throws the error\n    // It will be handled by a different error reporter\n    if (Kadira.options.enableErrorTracking && !this.firstRun) {\n      var message = e.message;\n      var stack = e.stack;\n      var now = (new Date().getTime());\n\n      Kadira.errors.sendError({\n        appId: Kadira.options.appId,\n        name: message,\n        type: 'client',\n        startTime: now,\n        subType: 'tracker.compute',\n        info: getBrowserInfo(),\n        stacks: JSON.stringify([{at: now, events: [], stack}])\n      });\n\n      // Once the error is thrown, Tracker will call\n      // Meteor._debug 2 or 3 times. The last time will\n      // have the stack trace.\n      Kadira._ignoreDebugMessagesUntil(stack, 3);\n    }\n\n    throw e;\n  }\n}\n","Kadira.enableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = true;\n};\n\nKadira.disableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = false;\n};\n\nKadira.trackError = function (type, message, { stacks = '' } = {}) {\n  if(Kadira.options.enableErrorTracking && type && message) {\n    var now = (new Date()).getTime();\n    Kadira.errors.sendError({\n      appId : Kadira.options.appId,\n      name : message,\n      startTime : now,\n      type : 'client',\n      subType : type,\n      info : getBrowserInfo(),\n      stacks : JSON.stringify([{at: now, events: [], stack: stacks}]),\n    });\n  }\n};\n\n// Create new NTP object and error model immediately so it can be used\n// endpoints is set later using __meteor_runtime_config__ or publication\nKadira.syncedDate = new Ntp(null);\nKadira.errors = new ErrorModel({\n  waitForNtpSyncInterval: 1000 * 5, // 5 secs\n  intervalInMillis: 1000 * 60 * 1, // 1minutes\n  maxErrorsPerInterval: 5\n});\n\n// __meteor_runtime_config__ cannot be dynamically set for cordova apps\n// using a null subscription to send required options to client\nif(Meteor.isCordova) {\n  var SettingsCollection = new Meteor.Collection('kadira_settings');\n  SettingsCollection.find().observe({added: initialize});\n} else {\n  initialize(__meteor_runtime_config__.kadira);\n}\n\nvar initialized = false;\nfunction initialize (options = {}) {\n  if (initialized) { return }\n  initialized = true;\n\n  Kadira.options = {\n    errorDumpInterval: 1000*60,\n    maxErrorsPerInterval: 10,\n    collectAllStacks: false,\n    enableErrorTracking: false,\n    ...options,\n  };\n\n  if(Kadira.options.appId && Kadira.options.endpoint) {\n    // update endpoint after receiving correct data\n    Kadira.syncedDate.setEndpoint(Kadira.options.endpoint);\n    Kadira.connected = true;\n    Meteor.startup(function () {\n      // if we don't do this this might block the initial rendering\n      // or, it will show up bottom of the page, which is not cool\n      setTimeout(function() {\n        Kadira.syncedDate.sync();\n      }, Kadira.options.clientEngineSyncDelay);\n    });\n  }\n\n  if(Kadira.connected && Kadira.options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  }\n\n  if(window.Zone && Zone.inited) {\n    Zone.collectAllStacks = Kadira.options.collectAllStacks;\n  }\n}\n","// For just making a notice\n// montiapm:profiler will override this method to add\n// actual functionality\nKadira.profileCpu = function profileCpu() {\n  var message =\n    \"Please install montiapm:profiler\" +\n    \" to take a CPU profile.\";\n  console.log(message);\n};"]}}]