[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar EJSON = Package.ejson.EJSON;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar _ = Package.underscore._;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar Email = Package.email.Email;\nvar EmailInternals = Package.email.EmailInternals;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Kadira, BaseErrorModel, Retry, HaveAsyncCallback, UniqueId, DefaultUniqueId, OptimizedApply, Ntp, WaitTimeBuilder, OplogCheck, Tracer, TracerStore, KadiraModel, MethodsModel, PubsubModel, SystemModel, ErrorModel, DocSzCache, DocSzCacheItem, wrapServer, wrapSession, wrapSubscription, wrapOplogObserveDriver, wrapPollingObserveDriver, wrapMultiplexer, wrapForCountingObservers, wrapStringifyDDP, hijackDBOps, TrackUncaughtExceptions, TrackMeteorDebug, setLabels;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mdg:meteor-apm-agent\":{\"lib\":{\"common\":{\"unify.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/common/unify.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira = {};\nKadira.options = {};\n\nif (Meteor.wrapAsync) {\n  Kadira._wrapAsync = Meteor.wrapAsync;\n} else {\n  Kadira._wrapAsync = Meteor._wrapAsync;\n}\n\nif (Meteor.isServer) {\n  var EventEmitter = Npm.require('events').EventEmitter;\n\n  var eventBus = new EventEmitter();\n  eventBus.setMaxListeners(0);\n\n  var buildArgs = function (args) {\n    args = _.toArray(args);\n    var eventName = args[0] + '-' + args[1];\n    var args = args.slice(2);\n    args.unshift(eventName);\n    return args;\n  };\n\n  Kadira.EventBus = {};\n  ['on', 'emit', 'removeListener', 'removeAllListeners'].forEach(function (m) {\n    Kadira.EventBus[m] = function () {\n      var args = buildArgs(arguments);\n      return eventBus[m].apply(eventBus, args);\n    };\n  });\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"default_error_filters.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/common/default_error_filters.js                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar commonErrRegExps = [/connection timeout\\. no (\\w*) heartbeat received/i, /INVALID_STATE_ERR/i];\nKadira.errorFilters = {\n  filterValidationErrors: function (type, message, err) {\n    if (err && err instanceof Meteor.Error) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n  filterCommonMeteorErrors: function (type, message) {\n    for (var lc = 0; lc < commonErrRegExps.length; lc++) {\n      var regExp = commonErrRegExps[lc];\n\n      if (regExp.test(message)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"send.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/common/send.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira.send = function (payload, path, callback) {\n  if (!Kadira.connected) {\n    throw new Error(\"You need to connect with Kadira first, before sending messages!\");\n  }\n\n  path = path.substr(0, 1) != '/' ? \"/\" + path : path;\n  var endpoint = Kadira.options.endpoint + path;\n  var retryCount = 0;\n  var retry = new Retry({\n    minCount: 1,\n    minTimeout: 0,\n    baseTimeout: 1000 * 5,\n    maxTimeout: 1000 * 60\n  });\n\n  var sendFunction = Kadira._getSendFunction();\n\n  tryToSend();\n\n  function tryToSend(err) {\n    if (retryCount < 5) {\n      retry.retryLater(retryCount++, send);\n    } else {\n      console.warn('Error sending error traces to Kadira server');\n      if (callback) callback(err);\n    }\n  }\n\n  function send() {\n    sendFunction(endpoint, payload, function (err, content, statusCode) {\n      if (err) {\n        tryToSend(err);\n      } else if (statusCode == 200) {\n        if (callback) callback(null, content);\n      } else {\n        if (callback) callback(new Meteor.Error(statusCode, content));\n      }\n    });\n  }\n};\n\nKadira._getSendFunction = function () {\n  return Meteor.isServer ? Kadira._serverSend : Kadira._clientSend;\n};\n\nKadira._clientSend = function (endpoint, payload, callback) {\n  httpRequest('POST', endpoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    content: JSON.stringify(payload)\n  }, callback);\n};\n\nKadira._serverSend = function (endpoint, payload, callback) {\n  callback = callback || function () {};\n\n  var Fiber = Npm.require('fibers');\n\n  new Fiber(function () {\n    var httpOptions = {\n      data: payload,\n      headers: Kadira.options.authHeaders\n    };\n    HTTP.call('POST', endpoint, httpOptions, function (err, res) {\n      if (res) {\n        var content = res.statusCode == 200 ? res.data : res.content;\n        callback(null, content, res.statusCode);\n      } else {\n        callback(err);\n      }\n    });\n  }).run();\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"base_error.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/models/base_error.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nBaseErrorModel = function (options) {\n  this._filters = [];\n};\n\nBaseErrorModel.prototype.addFilter = function (filter) {\n  if (typeof filter === 'function') {\n    this._filters.push(filter);\n  } else {\n    throw new Error(\"Error filter must be a function\");\n  }\n};\n\nBaseErrorModel.prototype.removeFilter = function (filter) {\n  var index = this._filters.indexOf(filter);\n\n  if (index >= 0) {\n    this._filters.splice(index, 1);\n  }\n};\n\nBaseErrorModel.prototype.applyFilters = function (type, message, error, subType) {\n  for (var lc = 0; lc < this._filters.length; lc++) {\n    var filter = this._filters[lc];\n\n    try {\n      var validated = filter(type, message, error, subType);\n      if (!validated) return false;\n    } catch (ex) {\n      // we need to remove this filter\n      // we may ended up in a error cycle\n      this._filters.splice(lc, 1);\n\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);\n    }\n  }\n\n  return true;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"0model.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/models/0model.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadiraModel = function () {};\n\nKadiraModel.prototype._getDateId = function (timestamp) {\n  var remainder = timestamp % (1000 * 60);\n  var dateId = timestamp - remainder;\n  return dateId;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/models/methods.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar METHOD_METRICS_FIELDS = ['wait', 'db', 'http', 'email', 'async', 'compute', 'total'];\n\nMethodsModel = function (metricsThreshold) {\n  var self = this;\n  this.methodMetricsByMinute = Object.create(null);\n  this.errorMap = Object.create(null);\n  this._metricsThreshold = Object.assign({\n    \"wait\": 100,\n    \"db\": 100,\n    \"http\": 1000,\n    \"email\": 100,\n    \"async\": 100,\n    \"compute\": 100,\n    \"total\": 200\n  }, metricsThreshold || Object.create(null)); //store max time elapsed methods for each method, event(metrics-field)\n\n  this.maxEventTimesForMethods = Object.create(null);\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60,\n    //process traces every minute\n    maxTotalPoints: 30,\n    //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n\n  });\n  this.tracerStore.start();\n};\n\nObject.assign(MethodsModel.prototype, KadiraModel.prototype);\n\nMethodsModel.prototype._getMetrics = function (timestamp, method) {\n  var dateId = this._getDateId(timestamp);\n\n  if (!this.methodMetricsByMinute[dateId]) {\n    this.methodMetricsByMinute[dateId] = {\n      methods: Object.create(null)\n    };\n  }\n\n  var methods = this.methodMetricsByMinute[dateId].methods; //initialize method\n\n  if (!methods[method]) {\n    methods[method] = {\n      count: 0,\n      errors: 0,\n      fetchedDocSize: 0,\n      sentMsgSize: 0\n    };\n    METHOD_METRICS_FIELDS.forEach(function (field) {\n      methods[method][field] = 0;\n    });\n  }\n\n  return this.methodMetricsByMinute[dateId].methods[method];\n};\n\nMethodsModel.prototype.setStartTime = function (timestamp) {\n  this.metricsByMinute[dateId].startTime = timestamp;\n};\n\nMethodsModel.prototype.processMethod = function (methodTrace) {\n  var dateId = this._getDateId(methodTrace.at); //append metrics to previous values\n\n\n  this._appendMetrics(dateId, methodTrace);\n\n  if (methodTrace.errored) {\n    this.methodMetricsByMinute[dateId].methods[methodTrace.name].errors++;\n  }\n\n  this.tracerStore.addTrace(methodTrace);\n};\n\nMethodsModel.prototype._appendMetrics = function (id, methodTrace) {\n  var methodMetrics = this._getMetrics(id, methodTrace.name); // startTime needs to be converted into serverTime before sending\n\n\n  if (!this.methodMetricsByMinute[id].startTime) {\n    this.methodMetricsByMinute[id].startTime = methodTrace.at;\n  } //merge\n\n\n  METHOD_METRICS_FIELDS.forEach(function (field) {\n    var value = methodTrace.metrics[field];\n\n    if (value > 0) {\n      methodMetrics[field] += value;\n    }\n  });\n  methodMetrics.count++;\n  this.methodMetricsByMinute[id].endTime = methodTrace.metrics.at;\n};\n\nMethodsModel.prototype.trackDocSize = function (method, size) {\n  var timestamp = Ntp._now();\n\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n\n  methodMetrics.fetchedDocSize += size;\n};\n\nMethodsModel.prototype.trackMsgSize = function (method, size) {\n  var timestamp = Ntp._now();\n\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n\n  methodMetrics.sentMsgSize += size;\n};\n/*\n  There are two types of data\n\n  1. methodMetrics - metrics about the methods (for every 10 secs)\n  2. methodRequests - raw method request. normally max, min for every 1 min and errors always\n*/\n\n\nMethodsModel.prototype.buildPayload = function (buildDetailedInfo) {\n  var payload = {\n    methodMetrics: [],\n    methodRequests: []\n  }; //handling metrics\n\n  var methodMetricsByMinute = this.methodMetricsByMinute;\n  this.methodMetricsByMinute = Object.create(null); //create final paylod for methodMetrics\n\n  for (var key in methodMetricsByMinute) {\n    var methodMetrics = methodMetricsByMinute[key]; // converting startTime into the actual serverTime\n\n    var startTime = methodMetrics.startTime;\n    methodMetrics.startTime = Kadira.syncedDate.syncTime(startTime);\n\n    for (var methodName in methodMetrics.methods) {\n      METHOD_METRICS_FIELDS.forEach(function (field) {\n        methodMetrics.methods[methodName][field] /= methodMetrics.methods[methodName].count;\n      });\n    }\n\n    payload.methodMetrics.push(methodMetricsByMinute[key]);\n  } //collect traces and send them with the payload\n\n\n  payload.methodRequests = this.tracerStore.collectTraces();\n  return payload;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"pubsub.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/models/pubsub.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet size, each, get;\nmodule.link(\"../utils.js\", {\n  size(v) {\n    size = v;\n  },\n\n  each(v) {\n    each = v;\n  },\n\n  get(v) {\n    get = v;\n  }\n\n}, 0);\n\nvar logger = Npm.require('debug')('kadira:pubsub');\n\nPubsubModel = function () {\n  this.metricsByMinute = Object.create(null);\n  this.subscriptions = Object.create(null);\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60,\n    //process traces every minute\n    maxTotalPoints: 30,\n    //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n\n  });\n  this.tracerStore.start();\n};\n\nPubsubModel.prototype._trackSub = function (session, msg) {\n  logger('SUB:', session.id, msg.id, msg.name, msg.params);\n\n  var publication = this._getPublicationName(msg.name);\n\n  var subscriptionId = msg.id;\n\n  var timestamp = Ntp._now();\n\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.subs++;\n  this.subscriptions[msg.id] = {\n    // We use localTime here, because when we used synedTime we might get\n    // minus or more than we've expected\n    //   (before serverTime diff changed overtime)\n    startTime: timestamp,\n    publication: publication,\n    params: msg.params,\n    id: msg.id\n  }; //set session startedTime\n\n  session._startTime = session._startTime || timestamp;\n};\n\nObject.assign(PubsubModel.prototype, KadiraModel.prototype);\n\nPubsubModel.prototype._trackUnsub = function (session, sub) {\n  logger('UNSUB:', session.id, sub._subscriptionId);\n\n  var publication = this._getPublicationName(sub._name);\n\n  var subscriptionId = sub._subscriptionId;\n  var subscriptionState = this.subscriptions[subscriptionId];\n  var startTime = null; //sometime, we don't have these states\n\n  if (subscriptionState) {\n    startTime = subscriptionState.startTime;\n  } else {\n    //if this is null subscription, which is started automatically\n    //hence, we don't have a state\n    startTime = session._startTime;\n  } //in case, we can't get the startTime\n\n\n  if (startTime) {\n    var timestamp = Ntp._now();\n\n    var metrics = this._getMetrics(timestamp, publication); //track the count\n\n\n    if (sub._name != null) {\n      // we can't track subs for `null` publications.\n      // so we should not track unsubs too\n      metrics.unsubs++;\n    } //use the current date to get the lifeTime of the subscription\n\n\n    metrics.lifeTime += timestamp - startTime; //this is place we can clean the subscriptionState if exists\n\n    delete this.subscriptions[subscriptionId];\n  }\n};\n\nPubsubModel.prototype._trackReady = function (session, sub, trace) {\n  logger('READY:', session.id, sub._subscriptionId); //use the current time to track the response time\n\n  var publication = this._getPublicationName(sub._name);\n\n  var subscriptionId = sub._subscriptionId;\n\n  var timestamp = Ntp._now();\n\n  var metrics = this._getMetrics(timestamp, publication);\n\n  var subscriptionState = this.subscriptions[subscriptionId];\n\n  if (subscriptionState && !subscriptionState.readyTracked) {\n    metrics.resTime += timestamp - subscriptionState.startTime;\n    subscriptionState.readyTracked = true;\n  }\n\n  if (trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._trackError = function (session, sub, trace) {\n  logger('ERROR:', session.id, sub._subscriptionId); //use the current time to track the response time\n\n  var publication = this._getPublicationName(sub._name);\n\n  var subscriptionId = sub._subscriptionId;\n\n  var timestamp = Ntp._now();\n\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.errors++;\n\n  if (trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._getMetrics = function (timestamp, publication) {\n  var dateId = this._getDateId(timestamp);\n\n  if (!this.metricsByMinute[dateId]) {\n    this.metricsByMinute[dateId] = {\n      // startTime needs to be convert to serverTime before sending to the server\n      startTime: timestamp,\n      pubs: Object.create(null)\n    };\n  }\n\n  if (!this.metricsByMinute[dateId].pubs[publication]) {\n    this.metricsByMinute[dateId].pubs[publication] = {\n      subs: 0,\n      unsubs: 0,\n      resTime: 0,\n      activeSubs: 0,\n      activeDocs: 0,\n      lifeTime: 0,\n      totalObservers: 0,\n      cachedObservers: 0,\n      createdObservers: 0,\n      deletedObservers: 0,\n      errors: 0,\n      observerLifetime: 0,\n      polledDocuments: 0,\n      oplogUpdatedDocuments: 0,\n      oplogInsertedDocuments: 0,\n      oplogDeletedDocuments: 0,\n      initiallyAddedDocuments: 0,\n      liveAddedDocuments: 0,\n      liveChangedDocuments: 0,\n      liveRemovedDocuments: 0,\n      polledDocSize: 0,\n      fetchedDocSize: 0,\n      initiallyFetchedDocSize: 0,\n      liveFetchedDocSize: 0,\n      initiallySentMsgSize: 0,\n      liveSentMsgSize: 0\n    };\n  }\n\n  return this.metricsByMinute[dateId].pubs[publication];\n};\n\nPubsubModel.prototype._getPublicationName = function (name) {\n  return name || \"null(autopublish)\";\n};\n\nPubsubModel.prototype._getSubscriptionInfo = function () {\n  var self = this;\n  var activeSubs = Object.create(null);\n  var activeDocs = Object.create(null);\n  var totalDocsSent = Object.create(null);\n  var totalDataSent = Object.create(null);\n  var totalObservers = Object.create(null);\n  var cachedObservers = Object.create(null);\n  each(Meteor.server.sessions, session => {\n    each(session._namedSubs, countSubData);\n    each(session._universalSubs, countSubData);\n  });\n  var avgObserverReuse = Object.create(null);\n\n  _.each(totalObservers, function (value, publication) {\n    avgObserverReuse[publication] = cachedObservers[publication] / totalObservers[publication];\n  });\n\n  return {\n    activeSubs: activeSubs,\n    activeDocs: activeDocs,\n    avgObserverReuse: avgObserverReuse\n  };\n\n  function countSubData(sub) {\n    var publication = self._getPublicationName(sub._name);\n\n    countSubscriptions(sub, publication);\n    countDocuments(sub, publication);\n    countObservers(sub, publication);\n  }\n\n  function countSubscriptions(sub, publication) {\n    activeSubs[publication] = activeSubs[publication] || 0;\n    activeSubs[publication]++;\n  }\n\n  function countDocuments(sub, publication) {\n    activeDocs[publication] = activeDocs[publication] || 0;\n    each(sub._documents, document => {\n      activeDocs[publication] += size(document);\n    });\n  }\n\n  function countObservers(sub, publication) {\n    totalObservers[publication] = totalObservers[publication] || 0;\n    cachedObservers[publication] = cachedObservers[publication] || 0;\n    totalObservers[publication] += sub._totalObservers;\n    cachedObservers[publication] += sub._cachedObservers;\n  }\n};\n\nPubsubModel.prototype.buildPayload = function (buildDetailInfo) {\n  var metricsByMinute = this.metricsByMinute;\n  this.metricsByMinute = Object.create(null);\n  var payload = {\n    pubMetrics: []\n  };\n\n  var subscriptionData = this._getSubscriptionInfo();\n\n  var activeSubs = subscriptionData.activeSubs;\n  var activeDocs = subscriptionData.activeDocs;\n  var avgObserverReuse = subscriptionData.avgObserverReuse; //to the averaging\n\n  for (var dateId in metricsByMinute) {\n    var dateMetrics = metricsByMinute[dateId]; // We need to convert startTime into actual serverTime\n\n    dateMetrics.startTime = Kadira.syncedDate.syncTime(dateMetrics.startTime);\n\n    for (var publication in metricsByMinute[dateId].pubs) {\n      var singlePubMetrics = metricsByMinute[dateId].pubs[publication]; // We only calculate resTime for new subscriptions\n\n      singlePubMetrics.resTime /= singlePubMetrics.subs;\n      singlePubMetrics.resTime = singlePubMetrics.resTime || 0; // We only track lifeTime in the unsubs\n\n      singlePubMetrics.lifeTime /= singlePubMetrics.unsubs;\n      singlePubMetrics.lifeTime = singlePubMetrics.lifeTime || 0; // Count the average for observer lifetime\n\n      if (singlePubMetrics.deletedObservers > 0) {\n        singlePubMetrics.observerLifetime /= singlePubMetrics.deletedObservers;\n      } // If there are two ore more dateIds, we will be using the currentCount for all of them.\n      // We can come up with a better solution later on.\n\n\n      singlePubMetrics.activeSubs = activeSubs[publication] || 0;\n      singlePubMetrics.activeDocs = activeDocs[publication] || 0;\n      singlePubMetrics.avgObserverReuse = avgObserverReuse[publication] || 0;\n    }\n\n    payload.pubMetrics.push(metricsByMinute[dateId]);\n  } //collect traces and send them with the payload\n\n\n  payload.pubRequests = this.tracerStore.collectTraces();\n  return payload;\n};\n\nPubsubModel.prototype.incrementHandleCount = function (trace, isCached) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(trace.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  var session = get(Meteor.server.sessions, trace.session);\n\n  if (session) {\n    var sub = get(session._namedSubs, trace.id);\n\n    if (sub) {\n      sub._totalObservers = sub._totalObservers || 0;\n      sub._cachedObservers = sub._cachedObservers || 0;\n    }\n  } // not sure, we need to do this? But I don't need to break the however\n\n\n  sub = sub || {\n    _totalObservers: 0,\n    _cachedObservers: 0\n  };\n  publication.totalObservers++;\n  sub._totalObservers++;\n\n  if (isCached) {\n    publication.cachedObservers++;\n    sub._cachedObservers++;\n  }\n};\n\nPubsubModel.prototype.trackCreatedObserver = function (info) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  publication.createdObservers++;\n};\n\nPubsubModel.prototype.trackDeletedObserver = function (info) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  publication.deletedObservers++;\n  publication.observerLifetime += new Date().getTime() - info.startTime;\n};\n\nPubsubModel.prototype.trackDocumentChanges = function (info, op) {\n  // It's possibel that info to be null\n  // Specially when getting changes at the very begining.\n  // This may be false, but nice to have a check\n  if (!info) {\n    return;\n  }\n\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (op.op === \"d\") {\n    publication.oplogDeletedDocuments++;\n  } else if (op.op === \"i\") {\n    publication.oplogInsertedDocuments++;\n  } else if (op.op === \"u\") {\n    publication.oplogUpdatedDocuments++;\n  }\n};\n\nPubsubModel.prototype.trackPolledDocuments = function (info, count) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  publication.polledDocuments += count;\n};\n\nPubsubModel.prototype.trackLiveUpdates = function (info, type, count) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(info.name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (type === \"_addPublished\") {\n    publication.liveAddedDocuments += count;\n  } else if (type === \"_removePublished\") {\n    publication.liveRemovedDocuments += count;\n  } else if (type === \"_changePublished\") {\n    publication.liveChangedDocuments += count;\n  } else if (type === \"_initialAdds\") {\n    publication.initiallyAddedDocuments += count;\n  } else {\n    throw new Error(\"Kadira: Unknown live update type\");\n  }\n};\n\nPubsubModel.prototype.trackDocSize = function (name, type, size) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (type === \"polledFetches\") {\n    publication.polledDocSize += size;\n  } else if (type === \"liveFetches\") {\n    publication.liveFetchedDocSize += size;\n  } else if (type === \"cursorFetches\") {\n    publication.fetchedDocSize += size;\n  } else if (type === \"initialFetches\") {\n    publication.initiallyFetchedDocSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n};\n\nPubsubModel.prototype.trackMsgSize = function (name, type, size) {\n  var timestamp = Ntp._now();\n\n  var publicationName = this._getPublicationName(name);\n\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if (type === \"liveSent\") {\n    publication.liveSentMsgSize += size;\n  } else if (type === \"initialSent\") {\n    publication.initiallySentMsgSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"system.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/models/system.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet size;\nmodule.link(\"../utils.js\", {\n  size(v) {\n    size = v;\n  }\n\n}, 0);\n\nvar os = Npm.require('os');\n\nvar usage = Npm.require('pidusage');\n\nvar EventLoopMonitor = Npm.require('evloop-monitor');\n\nSystemModel = function () {\n  var self = this;\n  this.startTime = Ntp._now();\n  this.newSessions = 0;\n  this.sessionTimeout = 1000 * 60 * 30; //30 min\n\n  this.usageLookup = Kadira._wrapAsync(usage.stat.bind(usage));\n  this.evloopMonitor = new EventLoopMonitor(200);\n  this.evloopMonitor.start();\n};\n\nObject.assign(SystemModel.prototype, KadiraModel.prototype);\n\nSystemModel.prototype.buildPayload = function () {\n  var metrics = {};\n\n  var now = Ntp._now();\n\n  metrics.startTime = Kadira.syncedDate.syncTime(this.startTime);\n  metrics.endTime = Kadira.syncedDate.syncTime(now);\n  metrics.sessions = size(Meteor.server.sessions);\n  metrics.memory = process.memoryUsage().rss / (1024 * 1024);\n  metrics.newSessions = this.newSessions;\n  this.newSessions = 0;\n  var usage = this.getUsage();\n  metrics.pcpu = usage.cpu;\n\n  if (usage.cpuInfo) {\n    metrics.cputime = usage.cpuInfo.cpuTime;\n    metrics.pcpuUser = usage.cpuInfo.pcpuUser;\n    metrics.pcpuSystem = usage.cpuInfo.pcpuSystem;\n  } // track eventloop blockness\n\n\n  metrics.pctEvloopBlock = this.evloopMonitor.status().pctBlock;\n  this.startTime = now;\n  return {\n    systemMetrics: [metrics]\n  };\n};\n\nSystemModel.prototype.getUsage = function () {\n  var usage = this.usageLookup(process.pid) || {};\n  Kadira.docSzCache.setPcpu(usage.cpu);\n  return usage;\n};\n\nSystemModel.prototype.handleSessionActivity = function (msg, session) {\n  if (msg.msg === 'connect' && !msg.session) {\n    this.countNewSession(session);\n  } else if (['sub', 'method'].indexOf(msg.msg) != -1) {\n    if (!this.isSessionActive(session)) {\n      this.countNewSession(session);\n    }\n  }\n\n  session._activeAt = Date.now();\n};\n\nSystemModel.prototype.countNewSession = function (session) {\n  if (!isLocalAddress(session.socket)) {\n    this.newSessions++;\n  }\n};\n\nSystemModel.prototype.isSessionActive = function (session) {\n  var inactiveTime = Date.now() - session._activeAt;\n\n  return inactiveTime < this.sessionTimeout;\n}; // ------------------------------------------------------------------------- //\n// http://regex101.com/r/iF3yR3/2\n\n\nvar isLocalHostRegex = /^(?:.*\\.local|localhost)(?:\\:\\d+)?|127(?:\\.\\d{1,3}){3}|192\\.168(?:\\.\\d{1,3}){2}|10(?:\\.\\d{1,3}){3}|172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2}$/; // http://regex101.com/r/hM5gD8/1\n\nvar isLocalAddressRegex = /^127(?:\\.\\d{1,3}){3}|192\\.168(?:\\.\\d{1,3}){2}|10(?:\\.\\d{1,3}){3}|172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2}$/;\n\nfunction isLocalAddress(socket) {\n  var host = socket.headers['host'];\n  if (host) return isLocalHostRegex.test(host);\n  var address = socket.headers['x-forwarded-for'] || socket.remoteAddress;\n  if (address) return isLocalAddressRegex.test(address);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"errors.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/models/errors.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nErrorModel = function (appId) {\n  BaseErrorModel.call(this);\n  var self = this;\n  this.appId = appId;\n  this.errors = {};\n  this.startTime = Date.now();\n  this.maxErrors = 10;\n};\n\nObject.assign(ErrorModel.prototype, KadiraModel.prototype);\nObject.assign(ErrorModel.prototype, BaseErrorModel.prototype);\n\nErrorModel.prototype.buildPayload = function () {\n  var metrics = _.values(this.errors);\n\n  this.startTime = Ntp._now();\n\n  _.each(metrics, function (metric) {\n    metric.startTime = Kadira.syncedDate.syncTime(metric.startTime);\n  });\n\n  this.errors = {};\n  return {\n    errors: metrics\n  };\n};\n\nErrorModel.prototype.errorCount = function () {\n  return _.values(this.errors).length;\n};\n\nErrorModel.prototype.trackError = function (ex, trace) {\n  var key = trace.type + ':' + ex.message;\n\n  if (this.errors[key]) {\n    this.errors[key].count++;\n  } else if (this.errorCount() < this.maxErrors) {\n    var errorDef = this._formatError(ex, trace);\n\n    if (this.applyFilters(errorDef.type, errorDef.name, ex, errorDef.subType)) {\n      this.errors[key] = this._formatError(ex, trace);\n    }\n  }\n};\n\nErrorModel.prototype._formatError = function (ex, trace) {\n  var time = Date.now();\n  var stack = ex.stack; // to get Meteor's Error details\n\n  if (ex.details) {\n    stack = \"Details: \" + ex.details + \"\\r\\n\" + stack;\n  } // Update trace's error event with the next stack\n\n\n  var errorEvent = trace.events && trace.events[trace.events.length - 1];\n  var errorObject = errorEvent && errorEvent[2] && errorEvent[2].error;\n\n  if (errorObject) {\n    errorObject.stack = stack;\n  }\n\n  return {\n    appId: this.appId,\n    name: ex.message,\n    type: trace.type,\n    startTime: time,\n    subType: trace.subType || trace.name,\n    trace: trace,\n    stacks: [{\n      stack: stack\n    }],\n    count: 1\n  };\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"jobs.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/jobs.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Jobs = Kadira.Jobs = {};\n\nJobs.getAsync = function (id, callback) {\n  Kadira.coreApi.getJob(id).then(function (data) {\n    callback(null, data);\n  }).catch(function (err) {\n    callback(err);\n  });\n};\n\nJobs.setAsync = function (id, changes, callback) {\n  Kadira.coreApi.updateJob(id, changes).then(function (data) {\n    callback(null, data);\n  }).catch(function (err) {\n    callback(err);\n  });\n};\n\nJobs.set = Kadira._wrapAsync(Jobs.setAsync);\nJobs.get = Kadira._wrapAsync(Jobs.getAsync);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"retry.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/retry.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n//TODO: remove this class and use Meteor Retry in a later version of meteor.\nRetry = function (options) {\n  var self = this;\n  Object.assign(self, _.defaults(_.clone(options || {}), {\n    baseTimeout: 1000,\n    // 1 second\n    exponent: 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout: 5 * 60000,\n    // 5 minutes\n    minTimeout: 10,\n    minCount: 2,\n    fuzz: 0.5 // +- 25%\n\n  }));\n  self.retryTimer = null;\n};\n\nObject.assign(Retry.prototype, {\n  // Reset a pending retry, if any.\n  clear: function () {\n    var self = this;\n    if (self.retryTimer) clearTimeout(self.retryTimer);\n    self.retryTimer = null;\n  },\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout: function (count) {\n    var self = this;\n    if (count < self.minCount) return self.minTimeout;\n    var timeout = Math.min(self.maxTimeout, self.baseTimeout * Math.pow(self.exponent, count)); // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n\n    timeout = timeout * (Random.fraction() * self.fuzz + (1 - self.fuzz / 2));\n    return Math.ceil(timeout);\n  },\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater: function (count, fn) {\n    var self = this;\n\n    var timeout = self._timeout(count);\n\n    if (self.retryTimer) clearTimeout(self.retryTimer);\n    self.retryTimer = setTimeout(fn, timeout);\n    return timeout;\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/utils.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  size: () => size,\n  each: () => each,\n  get: () => get\n});\n\nvar Fiber = Npm.require('fibers');\n\nfunction size(collection) {\n  if (collection instanceof Map || collection instanceof Set) {\n    return collection.size;\n  }\n\n  return _.size(collection);\n}\n\nfunction each(collection, callback) {\n  if (collection instanceof Map || collection instanceof Set) {\n    collection.forEach(callback);\n  } else {\n    _.each(collection, callback);\n  }\n}\n\nfunction get(collection, key) {\n  if (collection instanceof Map) {\n    return collection.get(key);\n  }\n\n  return collection[key];\n}\n\nHaveAsyncCallback = function (args) {\n  var lastArg = args[args.length - 1];\n  return typeof lastArg == 'function';\n};\n\nUniqueId = function (start) {\n  this.id = 0;\n};\n\nUniqueId.prototype.get = function () {\n  return \"\" + this.id++;\n};\n\nDefaultUniqueId = new UniqueId(); // Optimized version of apply which tries to call as possible as it can\n// Then fall back to apply\n// This is because, v8 is very slow to invoke apply.\n\nOptimizedApply = function OptimizedApply(context, fn, args) {\n  var a = args;\n\n  switch (a.length) {\n    case 0:\n      return fn.call(context);\n\n    case 1:\n      return fn.call(context, a[0]);\n\n    case 2:\n      return fn.call(context, a[0], a[1]);\n\n    case 3:\n      return fn.call(context, a[0], a[1], a[2]);\n\n    case 4:\n      return fn.call(context, a[0], a[1], a[2], a[3]);\n\n    case 5:\n      return fn.call(context, a[0], a[1], a[2], a[3], a[4]);\n\n    default:\n      return fn.apply(context, a);\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ntp.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/ntp.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar logger = getLogger();\n\nNtp = function (endpoint) {\n  this.setEndpoint(endpoint);\n  this.diff = 0;\n  this.synced = false;\n  this.reSyncCount = 0;\n  this.reSync = new Retry({\n    baseTimeout: 1000 * 60,\n    maxTimeout: 1000 * 60 * 10,\n    minCount: 0\n  });\n};\n\nNtp._now = function () {\n  var now = Date.now();\n\n  if (typeof now == 'number') {\n    return now;\n  } else if (now instanceof Date) {\n    // some extenal JS libraries override Date.now and returns a Date object\n    // which directly affect us. So we need to prepare for that\n    return now.getTime();\n  } else {\n    // trust me. I've seen now === undefined\n    return new Date().getTime();\n  }\n};\n\nNtp.prototype.setEndpoint = function (endpoint) {\n  this.endpoint = endpoint + '/simplentp/sync';\n};\n\nNtp.prototype.getTime = function () {\n  return Ntp._now() + Math.round(this.diff);\n};\n\nNtp.prototype.syncTime = function (localTime) {\n  return localTime + Math.ceil(this.diff);\n};\n\nNtp.prototype.sync = function () {\n  logger('init sync');\n  var self = this;\n  var retryCount = 0;\n  var retry = new Retry({\n    baseTimeout: 1000 * 20,\n    maxTimeout: 1000 * 60,\n    minCount: 1,\n    minTimeout: 0\n  });\n  syncTime();\n\n  function syncTime() {\n    if (retryCount < 5) {\n      logger('attempt time sync with server', retryCount); // if we send 0 to the retryLater, cacheDns will run immediately\n\n      retry.retryLater(retryCount++, cacheDns);\n    } else {\n      logger('maximum retries reached');\n      self.reSync.retryLater(self.reSyncCount++, function () {\n        var args = [].slice.call(arguments);\n        self.sync.apply(self, args);\n      });\n    }\n  } // first attempt is to cache dns. So, calculation does not\n  // include DNS resolution time\n\n\n  function cacheDns() {\n    self.getServerTime(function (err) {\n      if (!err) {\n        calculateTimeDiff();\n      } else {\n        syncTime();\n      }\n    });\n  }\n\n  function calculateTimeDiff() {\n    var clientStartTime = new Date().getTime();\n    self.getServerTime(function (err, serverTime) {\n      if (!err && serverTime) {\n        // (Date.now() + clientStartTime)/2 : Midpoint between req and res\n        var networkTime = (new Date().getTime() - clientStartTime) / 2;\n        var serverStartTime = serverTime - networkTime;\n        self.diff = serverStartTime - clientStartTime;\n        self.synced = true; // we need to send 1 into retryLater.\n\n        self.reSync.retryLater(self.reSyncCount++, function () {\n          var args = [].slice.call(arguments);\n          self.sync.apply(self, args);\n        });\n        logger('successfully updated diff value', self.diff);\n      } else {\n        syncTime();\n      }\n    });\n  }\n};\n\nNtp.prototype.getServerTime = function (callback) {\n  var self = this;\n\n  if (Meteor.isServer) {\n    var Fiber = Npm.require('fibers');\n\n    new Fiber(function () {\n      HTTP.get(self.endpoint, function (err, res) {\n        if (err) {\n          callback(err);\n        } else {\n          var serverTime = parseInt(res.content);\n          callback(null, serverTime);\n        }\n      });\n    }).run();\n  } else {\n    httpRequest('GET', self.endpoint, function (err, res) {\n      if (err) {\n        callback(err);\n      } else {\n        var serverTime = parseInt(res.content);\n        callback(null, serverTime);\n      }\n    });\n  }\n};\n\nfunction getLogger() {\n  if (Meteor.isServer) {\n    return Npm.require('debug')(\"kadira:ntp\");\n  } else {\n    return function (message) {\n      var canLogKadira = Meteor._localStorage.getItem('LOG_KADIRA') !== null && typeof console !== 'undefined';\n\n      if (canLogKadira) {\n        if (message) {\n          message = \"kadira:ntp \" + message;\n          arguments[0] = message;\n        }\n\n        console.log.apply(console, arguments);\n      }\n    };\n  }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"wait_time_builder.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/wait_time_builder.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar WAITON_MESSAGE_FIELDS = ['msg', 'id', 'method', 'name', 'waitTime']; // This is way how we can build waitTime and it's breakdown\n\nWaitTimeBuilder = function () {\n  this._waitListStore = {};\n  this._currentProcessingMessages = {};\n  this._messageCache = {};\n};\n\nWaitTimeBuilder.prototype.register = function (session, msgId) {\n  var self = this;\n\n  var mainKey = self._getMessageKey(session.id, msgId);\n\n  var inQueue = session.inQueue || [];\n\n  if (typeof inQueue.toArray === 'function') {\n    // latest version of Meteor uses a double-ended-queue for the inQueue\n    // info: https://www.npmjs.com/package/double-ended-queue\n    inQueue = inQueue.toArray();\n  }\n\n  var waitList = inQueue.map(function (msg) {\n    var key = self._getMessageKey(session.id, msg.id);\n\n    return self._getCacheMessage(key, msg);\n  });\n  waitList = waitList || []; //add currently processing ddp message if exists\n\n  var currentlyProcessingMessage = this._currentProcessingMessages[session.id];\n\n  if (currentlyProcessingMessage) {\n    var key = self._getMessageKey(session.id, currentlyProcessingMessage.id);\n\n    waitList.unshift(this._getCacheMessage(key, currentlyProcessingMessage));\n  }\n\n  this._waitListStore[mainKey] = waitList;\n};\n\nWaitTimeBuilder.prototype.build = function (session, msgId) {\n  var mainKey = this._getMessageKey(session.id, msgId);\n\n  var waitList = this._waitListStore[mainKey] || [];\n  delete this._waitListStore[mainKey];\n  var filteredWaitList = waitList.map(this._cleanCacheMessage.bind(this));\n  return filteredWaitList;\n};\n\nWaitTimeBuilder.prototype._getMessageKey = function (sessionId, msgId) {\n  return sessionId + \"::\" + msgId;\n};\n\nWaitTimeBuilder.prototype._getCacheMessage = function (key, msg) {\n  var self = this;\n  var cachedMessage = self._messageCache[key];\n\n  if (!cachedMessage) {\n    self._messageCache[key] = cachedMessage = _.pick(msg, WAITON_MESSAGE_FIELDS);\n    cachedMessage._key = key;\n    cachedMessage._registered = 1;\n  } else {\n    cachedMessage._registered++;\n  }\n\n  return cachedMessage;\n};\n\nWaitTimeBuilder.prototype._cleanCacheMessage = function (msg) {\n  msg._registered--;\n\n  if (msg._registered == 0) {\n    delete this._messageCache[msg._key];\n  } // need to send a clean set of objects\n  // otherwise register can go with this\n\n\n  return _.pick(msg, WAITON_MESSAGE_FIELDS);\n};\n\nWaitTimeBuilder.prototype.trackWaitTime = function (session, msg, unblock) {\n  var self = this;\n  var started = Date.now();\n  self._currentProcessingMessages[session.id] = msg;\n  var unblocked = false;\n\n  var wrappedUnblock = function () {\n    if (!unblocked) {\n      var waitTime = Date.now() - started;\n\n      var key = self._getMessageKey(session.id, msg.id);\n\n      var cachedMessage = self._messageCache[key];\n\n      if (cachedMessage) {\n        cachedMessage.waitTime = waitTime;\n      }\n\n      delete self._currentProcessingMessages[session.id];\n      unblocked = true;\n      unblock();\n    }\n  };\n\n  return wrappedUnblock;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"check_for_oplog.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/check_for_oplog.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// expose for testing purpose\nOplogCheck = {};\n\nOplogCheck._070 = function (cursorDescription) {\n  var options = cursorDescription.options;\n\n  if (options.limit) {\n    return {\n      code: \"070_LIMIT_NOT_SUPPORTED\",\n      reason: \"Meteor 0.7.0 does not support limit with oplog.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    };\n  }\n\n  ;\n\n  var exists$ = _.any(cursorDescription.selector, function (value, field) {\n    if (field.substr(0, 1) === '$') return true;\n  });\n\n  if (exists$) {\n    return {\n      code: \"070_$_NOT_SUPPORTED\",\n      reason: \"Meteor 0.7.0 supports only equal checks with oplog.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    };\n  }\n\n  ;\n\n  var onlyScalers = _.all(cursorDescription.selector, function (value, field) {\n    return typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value === null || value instanceof Meteor.Collection.ObjectID;\n  });\n\n  if (!onlyScalers) {\n    return {\n      code: \"070_ONLY_SCALERS\",\n      reason: \"Meteor 0.7.0 only supports scalers as comparators.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    };\n  }\n\n  return true;\n};\n\nOplogCheck._071 = function (cursorDescription) {\n  var options = cursorDescription.options;\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n\n  if (options.limit) {\n    return {\n      code: \"071_LIMIT_NOT_SUPPORTED\",\n      reason: \"Meteor 0.7.1 does not support limit with oplog.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    };\n  }\n\n  ;\n  return true;\n};\n\nOplogCheck.env = function () {\n  if (!process.env.MONGO_OPLOG_URL) {\n    return {\n      code: \"NO_ENV\",\n      reason: \"You haven't added oplog support for your the Meteor app.\",\n      solution: \"Add oplog support for your Meteor app. see: http://goo.gl/Co1jJc\"\n    };\n  } else {\n    return true;\n  }\n};\n\nOplogCheck.disableOplog = function (cursorDescription) {\n  if (cursorDescription.options._disableOplog) {\n    return {\n      code: \"DISABLE_OPLOG\",\n      reason: \"You've disable oplog for this cursor explicitly with _disableOplog option.\"\n    };\n  } else {\n    return true;\n  }\n}; // when creating Minimongo.Matcher object, if that's throws an exception\n// meteor won't do the oplog support\n\n\nOplogCheck.miniMongoMatcher = function (cursorDescription) {\n  if (Minimongo.Matcher) {\n    try {\n      var matcher = new Minimongo.Matcher(cursorDescription.selector);\n      return true;\n    } catch (ex) {\n      return {\n        code: \"MINIMONGO_MATCHER_ERROR\",\n        reason: \"There's something wrong in your mongo query: \" + ex.message,\n        solution: \"Check your selector and change it accordingly.\"\n      };\n    }\n  } else {\n    // If there is no Minimongo.Matcher, we don't need to check this\n    return true;\n  }\n};\n\nOplogCheck.miniMongoSorter = function (cursorDescription) {\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n\n  if (Minimongo.Sorter && cursorDescription.options.sort) {\n    try {\n      var sorter = new Minimongo.Sorter(cursorDescription.options.sort, {\n        matcher: matcher\n      });\n      return true;\n    } catch (ex) {\n      return {\n        code: \"MINIMONGO_SORTER_ERROR\",\n        reason: \"Some of your sort specifiers are not supported: \" + ex.message,\n        solution: \"Check your sort specifiers and chage them accordingly.\"\n      };\n    }\n  } else {\n    return true;\n  }\n};\n\nOplogCheck.fields = function (cursorDescription) {\n  var options = cursorDescription.options;\n\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n\n      return true;\n    } catch (e) {\n      if (e.name === \"MinimongoError\") {\n        return {\n          code: \"NOT_SUPPORTED_FIELDS\",\n          reason: \"Some of the field filters are not supported: \" + e.message,\n          solution: \"Try removing those field filters.\"\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return true;\n};\n\nOplogCheck.skip = function (cursorDescription) {\n  if (cursorDescription.options.skip) {\n    return {\n      code: \"SKIP_NOT_SUPPORTED\",\n      reason: \"Skip does not support with oplog.\",\n      solution: \"Try to avoid using skip. Use range queries instead: http://goo.gl/b522Av\"\n    };\n  }\n\n  return true;\n};\n\nOplogCheck.where = function (cursorDescription) {\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n\n  if (matcher.hasWhere()) {\n    return {\n      code: \"WHERE_NOT_SUPPORTED\",\n      reason: \"Meteor does not support queries with $where.\",\n      solution: \"Try to remove $where from your query. Use some alternative.\"\n    };\n  }\n\n  ;\n  return true;\n};\n\nOplogCheck.geo = function (cursorDescription) {\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n\n  if (matcher.hasGeoQuery()) {\n    return {\n      code: \"GEO_NOT_SUPPORTED\",\n      reason: \"Meteor does not support queries with geo partial operators.\",\n      solution: \"Try to remove geo partial operators from your query if possible.\"\n    };\n  }\n\n  ;\n  return true;\n};\n\nOplogCheck.limitButNoSort = function (cursorDescription) {\n  var options = cursorDescription.options;\n\n  if (options.limit && !options.sort) {\n    return {\n      code: \"LIMIT_NO_SORT\",\n      reason: \"Meteor oplog implementation does not support limit without a sort specifier.\",\n      solution: \"Try adding a sort specifier.\"\n    };\n  }\n\n  ;\n  return true;\n};\n\nOplogCheck.olderVersion = function (cursorDescription, driver) {\n  if (driver && !driver.constructor.cursorSupported) {\n    return {\n      code: \"OLDER_VERSION\",\n      reason: \"Your Meteor version does not have oplog support.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    };\n  }\n\n  return true;\n};\n\nOplogCheck.gitCheckout = function (cursorDescription, driver) {\n  if (!Meteor.release) {\n    return {\n      code: \"GIT_CHECKOUT\",\n      reason: \"Seems like your Meteor version is based on a Git checkout and it doesn't have the oplog support.\",\n      solution: \"Try to upgrade your Meteor version.\"\n    };\n  }\n\n  return true;\n};\n\nvar preRunningMatchers = [OplogCheck.env, OplogCheck.disableOplog, OplogCheck.miniMongoMatcher];\nvar globalMatchers = [OplogCheck.fields, OplogCheck.skip, OplogCheck.where, OplogCheck.geo, OplogCheck.limitButNoSort, OplogCheck.miniMongoSorter, OplogCheck.olderVersion, OplogCheck.gitCheckout];\nvar versionMatchers = [[/^0\\.7\\.1/, OplogCheck._071], [/^0\\.7\\.0/, OplogCheck._070]];\n\nKadira.checkWhyNoOplog = function (cursorDescription, observerDriver) {\n  if (typeof Minimongo == 'undefined') {\n    return {\n      code: \"CANNOT_DETECT\",\n      reason: \"You are running an older Meteor version and Kadira can't check oplog state.\",\n      solution: \"Try updating your Meteor app\"\n    };\n  }\n\n  var result = runMatchers(preRunningMatchers, cursorDescription, observerDriver);\n\n  if (result !== true) {\n    return result;\n  }\n\n  var meteorVersion = Meteor.release;\n\n  for (var lc = 0; lc < versionMatchers.length; lc++) {\n    var matcherInfo = versionMatchers[lc];\n\n    if (matcherInfo[0].test(meteorVersion)) {\n      var matched = matcherInfo[1](cursorDescription, observerDriver);\n\n      if (matched !== true) {\n        return matched;\n      }\n    }\n  }\n\n  result = runMatchers(globalMatchers, cursorDescription, observerDriver);\n\n  if (result !== true) {\n    return result;\n  }\n\n  return {\n    code: \"OPLOG_SUPPORTED\",\n    reason: \"This query should support oplog. It's weird if it's not.\",\n    solution: \"Please contact Kadira support and let's discuss.\"\n  };\n};\n\nfunction runMatchers(matcherList, cursorDescription, observerDriver) {\n  for (var lc = 0; lc < matcherList.length; lc++) {\n    var matcher = matcherList[lc];\n    var matched = matcher(cursorDescription, observerDriver);\n\n    if (matched !== true) {\n      return matched;\n    }\n  }\n\n  return true;\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tracer\":{\"tracer.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/tracer/tracer.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fibers = Npm.require('fibers');\n\nvar eventLogger = Npm.require('debug')('kadira:tracer');\n\nvar REPITITIVE_EVENTS = {\n  'db': true,\n  'http': true,\n  'email': true,\n  'wait': true,\n  'async': true\n};\n\nTracer = function Tracer() {\n  this._filters = [];\n}; //In the future, we might wan't to track inner fiber events too.\n//Then we can't serialize the object with methods\n//That's why we use this method of returning the data\n\n\nTracer.prototype.start = function (session, msg) {\n  var traceInfo = {\n    _id: session.id + \"::\" + msg.id,\n    session: session.id,\n    userId: session.userId,\n    id: msg.id,\n    events: []\n  };\n\n  if (msg.msg == 'method') {\n    traceInfo.type = 'method';\n    traceInfo.name = msg.method;\n  } else if (msg.msg == 'sub') {\n    traceInfo.type = 'sub';\n    traceInfo.name = msg.name;\n  } else {\n    return null;\n  }\n\n  return traceInfo;\n};\n\nTracer.prototype.event = function (traceInfo, type, data) {\n  // do not allow to proceed, if already completed or errored\n  var lastEvent = this.getLastEvent(traceInfo);\n\n  if (lastEvent && ['complete', 'error'].indexOf(lastEvent.type) >= 0) {\n    return false;\n  } //expecting a end event\n\n\n  var eventId = true; //specially handling for repitivive events like db, http\n\n  if (REPITITIVE_EVENTS[type]) {\n    //can't accept a new start event\n    if (traceInfo._lastEventId) {\n      return false;\n    }\n\n    eventId = traceInfo._lastEventId = DefaultUniqueId.get();\n  }\n\n  var event = {\n    type: type,\n    at: Ntp._now()\n  };\n\n  if (data) {\n    var info = _.pick(traceInfo, 'type', 'name');\n\n    event.data = this._applyFilters(type, data, info, \"start\");\n    ;\n  }\n\n  traceInfo.events.push(event);\n  eventLogger(\"%s %s\", type, traceInfo._id);\n  return eventId;\n};\n\nTracer.prototype.eventEnd = function (traceInfo, eventId, data) {\n  if (traceInfo._lastEventId && traceInfo._lastEventId == eventId) {\n    var lastEvent = this.getLastEvent(traceInfo);\n    var type = lastEvent.type + 'end';\n    var event = {\n      type: type,\n      at: Ntp._now()\n    };\n\n    if (data) {\n      var info = _.pick(traceInfo, 'type', 'name');\n\n      event.data = this._applyFilters(type, data, info, \"end\");\n      ;\n    }\n\n    traceInfo.events.push(event);\n    eventLogger(\"%s %s\", type, traceInfo._id);\n    traceInfo._lastEventId = null;\n    return true;\n  } else {\n    return false;\n  }\n};\n\nTracer.prototype.getLastEvent = function (traceInfo) {\n  return traceInfo.events[traceInfo.events.length - 1];\n};\n\nTracer.prototype.endLastEvent = function (traceInfo) {\n  var lastEvent = this.getLastEvent(traceInfo);\n\n  if (lastEvent && !/end$/.test(lastEvent.type)) {\n    traceInfo.events.push({\n      type: lastEvent.type + 'end',\n      at: Ntp._now()\n    });\n    return true;\n  }\n\n  return false;\n};\n\nTracer.prototype.buildTrace = function (traceInfo) {\n  var firstEvent = traceInfo.events[0];\n  var lastEvent = traceInfo.events[traceInfo.events.length - 1];\n  var processedEvents = [];\n\n  if (firstEvent.type != 'start') {\n    console.warn('Kadira: trace is not started yet');\n    return null;\n  } else if (lastEvent.type != 'complete' && lastEvent.type != 'error') {\n    //trace is not completed or errored yet\n    console.warn('Kadira: trace is not completed or errored yet');\n    return null;\n  } else {\n    //build the metrics\n    traceInfo.errored = lastEvent.type == 'error';\n    traceInfo.at = firstEvent.at;\n    var metrics = {\n      total: lastEvent.at - firstEvent.at\n    };\n    var totalNonCompute = 0;\n    firstEvent = ['start', 0];\n    if (traceInfo.events[0].data) firstEvent.push(traceInfo.events[0].data);\n    processedEvents.push(firstEvent);\n\n    for (var lc = 1; lc < traceInfo.events.length - 1; lc += 2) {\n      var prevEventEnd = traceInfo.events[lc - 1];\n      var startEvent = traceInfo.events[lc];\n      var endEvent = traceInfo.events[lc + 1];\n      var computeTime = startEvent.at - prevEventEnd.at;\n      if (computeTime > 0) processedEvents.push(['compute', computeTime]);\n\n      if (!endEvent) {\n        console.error('Kadira: no end event for type: ', startEvent.type);\n        return null;\n      } else if (endEvent.type != startEvent.type + 'end') {\n        console.error('Kadira: endevent type mismatch: ', startEvent.type, endEvent.type, JSON.stringify(traceInfo));\n        return null;\n      } else {\n        var elapsedTimeForEvent = endEvent.at - startEvent.at;\n        var currentEvent = [startEvent.type, elapsedTimeForEvent];\n        currentEvent.push(Object.assign({}, startEvent.data, endEvent.data));\n        processedEvents.push(currentEvent);\n        metrics[startEvent.type] = metrics[startEvent.type] || 0;\n        metrics[startEvent.type] += elapsedTimeForEvent;\n        totalNonCompute += elapsedTimeForEvent;\n      }\n    }\n\n    computeTime = lastEvent.at - traceInfo.events[traceInfo.events.length - 2];\n    if (computeTime > 0) processedEvents.push(['compute', computeTime]);\n    var lastEventData = [lastEvent.type, 0];\n    if (lastEvent.data) lastEventData.push(lastEvent.data);\n    processedEvents.push(lastEventData);\n    metrics.compute = metrics.total - totalNonCompute;\n    traceInfo.metrics = metrics;\n    traceInfo.events = processedEvents;\n    traceInfo.isEventsProcessed = true;\n    return traceInfo;\n  }\n};\n\nTracer.prototype.addFilter = function (filterFn) {\n  this._filters.push(filterFn);\n};\n\nTracer.prototype._applyFilters = function (eventType, data, info) {\n  this._filters.forEach(function (filterFn) {\n    data = filterFn(eventType, _.clone(data), info);\n  });\n\n  return data;\n};\n\nKadira.tracer = new Tracer(); // need to expose Tracer to provide default set of filters\n\nKadira.Tracer = Tracer;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"default_filters.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/tracer/default_filters.js                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// strip sensitive data sent to kadia engine.\n// possible to limit types by providing an array of types to strip\n// possible types are: \"start\", \"db\", \"http\", \"email\"\nTracer.stripSensitive = function stripSensitive(typesToStrip, receiverType, name) {\n  typesToStrip = typesToStrip || [];\n  var strippedTypes = {};\n  typesToStrip.forEach(function (type) {\n    strippedTypes[type] = true;\n  });\n  return function (type, data, info) {\n    if (typesToStrip.length > 0 && !strippedTypes[type]) return data;\n    if (receiverType && receiverType != info.type) return data;\n    if (name && name != info.name) return data;\n\n    if (type == \"start\") {\n      data.params = \"[stripped]\";\n    } else if (type == \"db\") {\n      data.selector = \"[stripped]\";\n    } else if (type == \"http\") {\n      data.url = \"[stripped]\";\n    } else if (type == \"email\") {\n      [\"from\", \"to\", \"cc\", \"bcc\", \"replyTo\"].forEach(function (item) {\n        if (data[item]) {\n          data[item] = \"[stripped]\";\n        }\n      });\n    }\n\n    return data;\n  };\n}; // strip selectors only from the given list of collection names\n\n\nTracer.stripSelectors = function stripSelectors(collectionList, receiverType, name) {\n  collectionList = collectionList || [];\n  var collMap = {};\n  collectionList.forEach(function (collName) {\n    collMap[collName] = true;\n  });\n  return function (type, data, info) {\n    if (type != \"db\" || data && !collMap[data.coll]) {\n      return data;\n    }\n\n    if (receiverType && receiverType != info.type) return data;\n    if (name && name != info.name) return data;\n    data.selector = \"[stripped]\";\n    return data;\n  };\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tracer_store.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/tracer/tracer_store.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar logger = Npm.require('debug')('kadira:ts');\n\nTracerStore = function TracerStore(options) {\n  options = options || {};\n  this.maxTotalPoints = options.maxTotalPoints || 30;\n  this.interval = options.interval || 1000 * 60;\n  this.archiveEvery = options.archiveEvery || this.maxTotalPoints / 6; //store max total on the past 30 minutes (or past 30 items)\n\n  this.maxTotals = Object.create(null); //store the max trace of the current interval\n\n  this.currentMaxTrace = Object.create(null); //archive for the traces\n\n  this.traceArchive = [];\n  this.processedCnt = Object.create(null); //group errors by messages between an interval\n\n  this.errorMap = Object.create(null);\n};\n\nTracerStore.prototype.addTrace = function (trace) {\n  var kind = [trace.type, trace.name].join('::');\n\n  if (!this.currentMaxTrace[kind]) {\n    this.currentMaxTrace[kind] = EJSON.clone(trace);\n  } else if (this.currentMaxTrace[kind].metrics.total < trace.metrics.total) {\n    this.currentMaxTrace[kind] = EJSON.clone(trace);\n  } else if (trace.errored) {\n    this._handleErrors(trace);\n  }\n};\n\nTracerStore.prototype.collectTraces = function () {\n  var traces = this.traceArchive;\n  this.traceArchive = []; // convert at(timestamp) into the actual serverTime\n\n  traces.forEach(function (trace) {\n    trace.at = Kadira.syncedDate.syncTime(trace.at);\n  });\n  return traces;\n};\n\nTracerStore.prototype.start = function () {\n  this._timeoutHandler = setInterval(this.processTraces.bind(this), this.interval);\n};\n\nTracerStore.prototype.stop = function () {\n  if (this._timeoutHandler) {\n    clearInterval(this._timeoutHandler);\n  }\n};\n\nTracerStore.prototype._handleErrors = function (trace) {\n  // sending error requests as it is\n  var lastEvent = trace.events[trace.events.length - 1];\n\n  if (lastEvent && lastEvent[2]) {\n    var error = lastEvent[2].error; // grouping errors occured (reset after processTraces)\n\n    var errorKey = [trace.type, trace.name, error.message].join(\"::\");\n\n    if (!this.errorMap[errorKey]) {\n      var erroredTrace = EJSON.clone(trace);\n      this.errorMap[errorKey] = erroredTrace;\n      this.traceArchive.push(erroredTrace);\n    }\n  } else {\n    logger('last events is not an error: ', JSON.stringify(trace.events));\n  }\n};\n\nTracerStore.prototype.processTraces = function () {\n  var self = this;\n\n  var kinds = _.union(_.keys(this.maxTotals), _.keys(this.currentMaxTrace));\n\n  kinds.forEach(function (kind) {\n    self.processedCnt[kind] = self.processedCnt[kind] || 0;\n    var currentMaxTrace = self.currentMaxTrace[kind];\n    var currentMaxTotal = currentMaxTrace ? currentMaxTrace.metrics.total : 0;\n    self.maxTotals[kind] = self.maxTotals[kind] || []; //add the current maxPoint\n\n    self.maxTotals[kind].push(currentMaxTotal);\n    var exceedingPoints = self.maxTotals[kind].length - self.maxTotalPoints;\n\n    if (exceedingPoints > 0) {\n      self.maxTotals[kind].splice(0, exceedingPoints);\n    }\n\n    var archiveDefault = self.processedCnt[kind] % self.archiveEvery == 0;\n    self.processedCnt[kind]++;\n\n    var canArchive = archiveDefault || self._isTraceOutlier(kind, currentMaxTrace);\n\n    if (canArchive && currentMaxTrace) {\n      self.traceArchive.push(currentMaxTrace);\n    } //reset currentMaxTrace\n\n\n    self.currentMaxTrace[kind] = null;\n  }); //reset the errorMap\n\n  self.errorMap = Object.create(null);\n};\n\nTracerStore.prototype._isTraceOutlier = function (kind, trace) {\n  if (trace) {\n    var dataSet = this.maxTotals[kind];\n    return this._isOutlier(dataSet, trace.metrics.total, 3);\n  } else {\n    return false;\n  }\n};\n/*\n  Data point must exists in the dataSet\n*/\n\n\nTracerStore.prototype._isOutlier = function (dataSet, dataPoint, maxMadZ) {\n  var median = this._getMedian(dataSet);\n\n  var mad = this._calculateMad(dataSet, median);\n\n  var madZ = this._funcMedianDeviation(median)(dataPoint) / mad;\n  return madZ > maxMadZ;\n};\n\nTracerStore.prototype._getMedian = function (dataSet) {\n  var sortedDataSet = _.clone(dataSet).sort(function (a, b) {\n    return a - b;\n  });\n\n  return this._pickQuartile(sortedDataSet, 2);\n};\n\nTracerStore.prototype._pickQuartile = function (dataSet, num) {\n  var pos = (dataSet.length + 1) * num / 4;\n\n  if (pos % 1 == 0) {\n    return dataSet[pos - 1];\n  } else {\n    pos = pos - pos % 1;\n    return (dataSet[pos - 1] + dataSet[pos]) / 2;\n  }\n};\n\nTracerStore.prototype._calculateMad = function (dataSet, median) {\n  var medianDeviations = _.map(dataSet, this._funcMedianDeviation(median));\n\n  var mad = this._getMedian(medianDeviations);\n\n  return mad;\n};\n\nTracerStore.prototype._funcMedianDeviation = function (median) {\n  return function (x) {\n    return Math.abs(median - x);\n  };\n};\n\nTracerStore.prototype._getMean = function (dataPoints) {\n  if (dataPoints.length > 0) {\n    var total = 0;\n    dataPoints.forEach(function (point) {\n      total += point;\n    });\n    return total / dataPoints.length;\n  } else {\n    return 0;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"docsize_cache.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/docsize_cache.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar LRU = Npm.require('lru-cache');\n\nvar crypto = Npm.require('crypto');\n\nvar jsonStringify = Npm.require('json-stringify-safe');\n\nDocSzCache = function (maxItems, maxValues) {\n  this.items = new LRU({\n    max: maxItems\n  });\n  this.maxValues = maxValues;\n  this.cpuUsage = 0;\n}; // This is called from SystemModel.prototype.getUsage and saves cpu usage.\n\n\nDocSzCache.prototype.setPcpu = function (pcpu) {\n  this.cpuUsage = pcpu;\n};\n\nDocSzCache.prototype.getSize = function (coll, query, opts, data) {\n  // If the dataset is null or empty we can't calculate the size\n  // Do not process this data and return 0 as the document size.\n  if (!(data && (data.length || data.size))) {\n    return 0;\n  }\n\n  var key = this.getKey(coll, query, opts);\n  var item = this.items.get(key);\n\n  if (!item) {\n    item = new DocSzCacheItem(this.maxValues);\n    this.items.set(key, item);\n  }\n\n  if (this.needsUpdate(item)) {\n    var doc = {};\n\n    if (typeof data.get === 'function') {\n      // This is an IdMap\n      data.forEach(function (element) {\n        doc = element;\n        return false; // return false to stop loop. We only need one doc.\n      });\n    } else {\n      doc = data[0];\n    }\n\n    var size = Buffer.byteLength(jsonStringify(doc), 'utf8');\n    item.addData(size);\n  }\n\n  return item.getValue();\n};\n\nDocSzCache.prototype.getKey = function (coll, query, opts) {\n  return jsonStringify([coll, query, opts]);\n}; // returns a score between 0 and 1 for a cache item\n// this score is determined by:\n//  * availalbe cache item slots\n//  * time since last updated\n//  * cpu usage of the application\n\n\nDocSzCache.prototype.getItemScore = function (item) {\n  return [(item.maxValues - item.values.length) / item.maxValues, (Date.now() - item.updated) / 60000, (100 - this.cpuUsage) / 100].map(function (score) {\n    return score > 1 ? 1 : score;\n  }).reduce(function (total, score) {\n    return (total || 0) + score;\n  }) / 3;\n};\n\nDocSzCache.prototype.needsUpdate = function (item) {\n  // handle newly made items\n  if (!item.values.length) {\n    return true;\n  }\n\n  var currentTime = Date.now();\n  var timeSinceUpdate = currentTime - item.updated;\n\n  if (timeSinceUpdate > 1000 * 60) {\n    return true;\n  }\n\n  return this.getItemScore(item) > 0.5;\n};\n\nDocSzCacheItem = function (maxValues) {\n  this.maxValues = maxValues;\n  this.updated = 0;\n  this.values = [];\n};\n\nDocSzCacheItem.prototype.addData = function (value) {\n  this.values.push(value);\n  this.updated = Date.now();\n\n  if (this.values.length > this.maxValues) {\n    this.values.shift();\n  }\n};\n\nDocSzCacheItem.prototype.getValue = function () {\n  function sortNumber(a, b) {\n    return a - b;\n  }\n\n  var sorted = this.values.sort(sortNumber);\n  var median = 0;\n\n  if (sorted.length % 2 === 0) {\n    var idx = sorted.length / 2;\n    median = (sorted[idx] + sorted[idx - 1]) / 2;\n  } else {\n    var idx = Math.floor(sorted.length / 2);\n    median = sorted[idx];\n  }\n\n  return median;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"kadira.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/kadira.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar hostname = Npm.require('os').hostname();\n\nvar logger = Npm.require('debug')('kadira:apm');\n\nvar Fibers = Npm.require('fibers');\n\nvar KadiraCore = Npm.require('kadira-core').Kadira;\n\nKadira.models = {};\nKadira.options = {};\nKadira.env = {\n  currentSub: null,\n  // keep current subscription inside ddp\n  kadiraInfo: new Meteor.EnvironmentVariable()\n};\nKadira.waitTimeBuilder = new WaitTimeBuilder();\nKadira.errors = [];\nKadira.errors.addFilter = Kadira.errors.push.bind(Kadira.errors);\nKadira.models.methods = new MethodsModel();\nKadira.models.pubsub = new PubsubModel();\nKadira.models.system = new SystemModel();\nKadira.docSzCache = new DocSzCache(100000, 10);\n\nKadira.connect = function (appId, appSecret, options) {\n  options = options || {};\n  options.appId = appId;\n  options.appSecret = appSecret;\n  options.payloadTimeout = options.payloadTimeout || 1000 * 20;\n  options.endpoint = options.endpoint || \"https://enginex.kadira.io\";\n  options.clientEngineSyncDelay = options.clientEngineSyncDelay || 10000;\n  options.thresholds = options.thresholds || {};\n  options.isHostNameSet = !!options.hostname;\n  options.hostname = options.hostname || hostname;\n  options.proxy = options.proxy || null;\n\n  if (options.documentSizeCacheSize) {\n    Kadira.docSzCache = new DocSzCache(options.documentSizeCacheSize, 10);\n  } // remove trailing slash from endpoint url (if any)\n\n\n  if (_.last(options.endpoint) === '/') {\n    options.endpoint = options.endpoint.substr(0, options.endpoint.length - 1);\n  } // error tracking is enabled by default\n\n\n  if (options.enableErrorTracking === undefined) {\n    options.enableErrorTracking = true;\n  }\n\n  Kadira.options = options;\n  Kadira.options.authHeaders = {\n    'KADIRA-APP-ID': Kadira.options.appId,\n    'KADIRA-APP-SECRET': Kadira.options.appSecret\n  };\n  Kadira.syncedDate = new Ntp(options.endpoint);\n  Kadira.syncedDate.sync();\n  Kadira.models.error = new ErrorModel(appId); // handle pre-added filters\n\n  var addFilterFn = Kadira.models.error.addFilter.bind(Kadira.models.error);\n  Kadira.errors.forEach(addFilterFn);\n  Kadira.errors = Kadira.models.error; // setting runtime info, which will be sent to kadira\n\n  __meteor_runtime_config__.kadira = {\n    appId: appId,\n    endpoint: options.endpoint,\n    clientEngineSyncDelay: options.clientEngineSyncDelay\n  };\n\n  if (options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  } else {\n    Kadira.disableErrorTracking();\n  }\n\n  if (appId && appSecret) {\n    options.appId = options.appId.trim();\n    options.appSecret = options.appSecret.trim();\n    Kadira.coreApi = new KadiraCore({\n      appId: options.appId,\n      appSecret: options.appSecret,\n      endpoint: options.endpoint,\n      hostname: options.hostname\n    });\n\n    Kadira.coreApi._checkAuth().then(function () {\n      logger('connected to app: ', appId);\n      console.log('Meteor APM: Successfully connected');\n\n      Kadira._sendAppStats();\n\n      Kadira._schedulePayloadSend();\n    }).catch(function (err) {\n      console.log('Meteor APM: authentication failed - check your appId & appSecret');\n    });\n  } else {\n    throw new Error('Meteor APM: required appId and appSecret');\n  } // start tracking errors\n\n\n  Meteor.startup(function () {\n    TrackUncaughtExceptions();\n    TrackMeteorDebug();\n  });\n  Meteor.publish(null, function () {\n    var options = __meteor_runtime_config__.kadira;\n    this.added('kadira_settings', Random.id(), options);\n    this.ready();\n  }); // notify we've connected\n\n  Kadira.connected = true;\n}; //track how many times we've sent the data (once per minute)\n\n\nKadira._buildPayload = function () {\n  var payload = {\n    host: Kadira.options.hostname\n  };\n\n  var buildDetailedInfo = Kadira._isDetailedInfo();\n\n  Object.assign(payload, Kadira.models.methods.buildPayload(buildDetailedInfo));\n  Object.assign(payload, Kadira.models.pubsub.buildPayload(buildDetailedInfo));\n  Object.assign(payload, Kadira.models.system.buildPayload());\n\n  if (Kadira.options.enableErrorTracking) {\n    Object.assign(payload, Kadira.models.error.buildPayload());\n  }\n\n  return payload;\n};\n\nKadira._countDataSent = 0;\nKadira._detailInfoSentInterval = Math.ceil(1000 * 60 / Kadira.options.payloadTimeout);\n\nKadira._isDetailedInfo = function () {\n  return Kadira._countDataSent++ % Kadira._detailInfoSentInterval == 0;\n};\n\nKadira._sendAppStats = function () {\n  var appStats = {};\n  appStats.release = Meteor.release;\n  appStats.protocolVersion = '1.0.0';\n  appStats.packageVersions = [];\n  appStats.appVersions = {\n    webapp: __meteor_runtime_config__['autoupdateVersion'],\n    refreshable: __meteor_runtime_config__['autoupdateVersionRefreshable'],\n    cordova: __meteor_runtime_config__['autoupdateVersionCordova']\n  }; // TODO get version number for installed packages\n\n  _.each(Package, function (v, name) {\n    appStats.packageVersions.push({\n      name: name,\n      version: null\n    });\n  });\n\n  Kadira.coreApi.sendData({\n    startTime: new Date(),\n    appStats: appStats\n  }).catch(function (err) {\n    console.error('Kadira Error on sending appStats:', err.message);\n  });\n};\n\nKadira._schedulePayloadSend = function () {\n  setTimeout(function () {\n    Kadira._sendPayload(Kadira._schedulePayloadSend);\n  }, Kadira.options.payloadTimeout);\n};\n\nKadira._sendPayload = function (callback) {\n  new Fibers(function () {\n    var payload = Kadira._buildPayload();\n\n    Kadira.coreApi.sendData(payload).then(callback).catch(function (err) {\n      console.log('Meteor APM Error:', err.message);\n      callback();\n    });\n  }).run();\n}; // this return the __kadiraInfo from the current Fiber by default\n// if called with 2nd argument as true, it will get the kadira info from\n// Meteor.EnvironmentVariable\n//\n// WARNING: returned info object is the reference object.\n//  Changing it might cause issues when building traces. So use with care\n\n\nKadira._getInfo = function (currentFiber, useEnvironmentVariable) {\n  currentFiber = currentFiber || Fibers.current;\n\n  if (currentFiber) {\n    if (useEnvironmentVariable) {\n      return Kadira.env.kadiraInfo.get();\n    }\n\n    return currentFiber.__kadiraInfo;\n  }\n}; // this does not clone the info object. So, use with care\n\n\nKadira._setInfo = function (info) {\n  Fibers.current.__kadiraInfo = info;\n};\n\nKadira.enableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = true;\n  Kadira.options.enableErrorTracking = true;\n};\n\nKadira.disableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = false;\n  Kadira.options.enableErrorTracking = false;\n};\n\nKadira.trackError = function (type, message, options) {\n  if (Kadira.options.enableErrorTracking && type && message) {\n    options = options || {};\n    options.subType = options.subType || 'server';\n    options.stacks = options.stacks || '';\n    var error = {\n      message: message,\n      stack: options.stacks\n    };\n    var trace = {\n      type: type,\n      subType: options.subType,\n      name: message,\n      errored: true,\n      at: Kadira.syncedDate.getTime(),\n      events: [['start', 0, {}], ['error', 0, {\n        error: error\n      }]],\n      metrics: {\n        total: 0\n      }\n    };\n    Kadira.models.error.trackError(error, trace);\n  }\n};\n\nKadira.ignoreErrorTracking = function (err) {\n  err._skipKadira = true;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hijack\":{\"wrap_server.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/wrap_server.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');\n\nwrapServer = function (serverProto) {\n  var originalHandleConnect = serverProto._handleConnect;\n\n  serverProto._handleConnect = function (socket, msg) {\n    originalHandleConnect.call(this, socket, msg);\n    var session = socket._meteorSession; // sometimes it is possible for _meteorSession to be undefined\n    // one such reason would be if DDP versions are not matching\n    // if then, we should not process it\n\n    if (!session) {\n      return;\n    }\n\n    Kadira.EventBus.emit('system', 'createSession', msg, socket._meteorSession);\n\n    if (Kadira.connected) {\n      Kadira.models.system.handleSessionActivity(msg, socket._meteorSession);\n    }\n  };\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"wrap_session.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/wrap_session.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nwrapSession = function (sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n\n  sessionProto.processMessage = function (msg) {\n    if (true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n\n      if (msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id); //use JSON stringify to save the CPU\n\n        var startData = {\n          userId: this.userId,\n          params: JSON.stringify(msg.params)\n        };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n\n        if (msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      } // Update session last active time\n\n\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n\n    return originalProcessMessage.call(this, msg);\n  }; //adding the method context to the current fiber\n\n\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n\n  sessionProto.protocol_handlers.method = function (msg, unblock) {\n    var self = this; //add context\n\n    var kadiraInfo = msg.__kadiraInfo;\n\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo); // end wait event\n\n\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  }; //to capture the currently processing message\n\n\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n\n  sessionProto.protocol_handlers.sub = function (msg, unblock) {\n    var self = this; //add context\n\n    var kadiraInfo = msg.__kadiraInfo;\n\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo); // end wait event\n\n\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  }; //to capture the currently processing message\n\n\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n\n  sessionProto.protocol_handlers.unsub = function (msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  }; //track method ending (to get the result of error)\n\n\n  var originalSend = sessionProto.send;\n\n  sessionProto.send = function (msg) {\n    if (msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n\n      if (kadiraInfo) {\n        if (msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack']); // pick the error from the wrapped method handler\n\n\n          if (kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack']); // see wrapMethodHanderForErrors() method def for more info\n\n            if (error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {\n            error: error\n          });\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        } //processing the message\n\n\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace); // error may or may not exist and error tracking can be disabled\n\n        if (error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        } //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n\n\n        Kadira._setInfo(null);\n      }\n    }\n\n    return originalSend.call(this, msg);\n  };\n}; // wrap existing method handlers for capturing errors\n\n\n_.each(Meteor.server.method_handlers, function (handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n}); // wrap future method handlers for capturing errors\n\n\nvar originalMeteorMethods = Meteor.methods;\n\nMeteor.methods = function (methodMap) {\n  _.each(methodMap, function (handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n\n  originalMeteorMethods(methodMap);\n};\n\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function () {\n    try {\n      return originalHandler.apply(this, arguments);\n    } catch (ex) {\n      if (ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if (typeof ex !== 'object') {\n          ex = {\n            message: ex,\n            stack: ex\n          };\n        } // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n\n\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {\n            stack: ex.stack,\n            source: 'method'\n          };\n        }\n\n        Kadira._getInfo().currentError = ex;\n      }\n\n      throw ex;\n    }\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"wrap_subscription.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/wrap_subscription.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');\n\nwrapSubscription = function (subscriptionProto) {\n  // If the ready event runs outside the Fiber, Kadira._getInfo() doesn't work.\n  // we need some other way to store kadiraInfo so we can use it at ready hijack.\n  var originalRunHandler = subscriptionProto._runHandler;\n\n  subscriptionProto._runHandler = function () {\n    var kadiraInfo = Kadira._getInfo();\n\n    if (kadiraInfo) {\n      this.__kadiraInfo = kadiraInfo;\n    }\n\n    ;\n    originalRunHandler.call(this);\n  };\n\n  var originalReady = subscriptionProto.ready;\n\n  subscriptionProto.ready = function () {\n    // meteor has a field called `_ready` which tracks this\n    // but we need to make it future proof\n    if (!this._apmReadyTracked) {\n      var kadiraInfo = Kadira._getInfo() || this.__kadiraInfo;\n\n      delete this.__kadiraInfo; //sometime .ready can be called in the context of the method\n      //then we have some problems, that's why we are checking this\n      //eg:- Accounts.createUser\n\n      if (kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n        Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n      }\n\n      Kadira.EventBus.emit('pubsub', 'subCompleted', trace, this._session, this);\n\n      Kadira.models.pubsub._trackReady(this._session, this, trace);\n\n      this._apmReadyTracked = true;\n    } // we still pass the control to the original implementation\n    // since multiple ready calls are handled by itself\n\n\n    originalReady.call(this);\n  };\n\n  var originalError = subscriptionProto.error;\n\n  subscriptionProto.error = function (err) {\n    if (err) {\n      var kadiraInfo = Kadira._getInfo();\n\n      if (kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n\n        var errorForApm = _.pick(err, 'message', 'stack');\n\n        Kadira.tracer.event(kadiraInfo.trace, 'error', {\n          error: errorForApm\n        });\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n\n        Kadira.models.pubsub._trackError(this._session, this, trace); // error tracking can be disabled and if there is a trace\n        // trace should be avaialble all the time, but it won't\n        // if something wrong happened on the trace building\n\n\n        if (Kadira.options.enableErrorTracking && trace) {\n          Kadira.models.error.trackError(err, trace);\n        }\n      } // wrap error stack so Meteor._debug can identify and ignore it\n\n\n      if (Kadira.options.enableErrorTracking) {\n        err.stack = {\n          stack: err.stack,\n          source: \"subscription\"\n        };\n      }\n\n      originalError.call(this, err);\n    }\n  };\n\n  var originalDeactivate = subscriptionProto._deactivate;\n\n  subscriptionProto._deactivate = function () {\n    Kadira.EventBus.emit('pubsub', 'subDeactivated', this._session, this);\n\n    Kadira.models.pubsub._trackUnsub(this._session, this);\n\n    originalDeactivate.call(this);\n  }; //adding the currenSub env variable\n\n\n  ['added', 'changed', 'removed'].forEach(function (funcName) {\n    var originalFunc = subscriptionProto[funcName];\n\n    subscriptionProto[funcName] = function (collectionName, id, fields) {\n      var self = this; // we need to run this code in a fiber and that's how we track\n      // subscription info. May be we can figure out, some other way to do this\n      // We use this currently to get the publication info when tracking message\n      // sizes at wrap_ddp_stringify.js\n\n      Kadira.env.currentSub = self;\n      var res = originalFunc.call(self, collectionName, id, fields);\n      Kadira.env.currentSub = null;\n      return res;\n    };\n  });\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"wrap_observers.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/wrap_observers.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet MongoConnection;\nmodule.link(\"./meteorx.js\", {\n  MongoConnection(v) {\n    MongoConnection = v;\n  }\n\n}, 0);\n\nwrapOplogObserveDriver = function (proto) {\n  // Track the polled documents. This is reflect to the RAM size and\n  // for the CPU usage directly\n  var originalPublishNewResults = proto._publishNewResults;\n\n  proto._publishNewResults = function (newResults, newBuffer) {\n    var coll = this._cursorDescription.collectionName;\n    var query = this._cursorDescription.selector;\n    var opts = this._cursorDescription.options;\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newResults);\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    var count = newResults.size() + newBuffer.size();\n\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize * count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize * count\n      };\n    }\n\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n\n  var originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n\n  proto._handleOplogEntryQuerying = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n\n  var originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n\n  proto._handleOplogEntrySteadyOrFetching = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  }; // track live updates\n\n\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function (fnName) {\n    var originalFn = proto[fnName];\n\n    proto[fnName] = function (a, b, c) {\n      if (this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n\n        if (fnName === \"_addPublished\") {\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"liveFetches\", docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if (!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n\n        this._liveUpdatesCounts._initialAdds++;\n\n        if (fnName === \"_addPublished\") {\n          if (!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n\n          if (!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          this._docSize.initialFetches += docSize;\n        }\n      }\n\n      return originalFn.call(this, a, b, c);\n    };\n  });\n  var originalStop = proto.stop;\n\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapPollingObserveDriver = function (proto) {\n  var originalPollMongo = proto._pollMongo;\n\n  proto._pollMongo = function () {\n    var start = Date.now();\n    originalPollMongo.call(this); // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n\n    var count = 0;\n    var docSize = 0;\n\n    if (this._results && this._results.size) {\n      count = this._results.size() || 0;\n      var coll = this._cursorDescription.collectionName;\n      var query = this._cursorDescription.selector;\n      var opts = this._cursorDescription.options;\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map) * count;\n    }\n\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n\n  var originalStop = proto.stop;\n\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapMultiplexer = function (proto) {\n  var originalInitalAdd = proto.addHandleAndSendInitialAdds;\n\n  proto.addHandleAndSendInitialAdds = function (handle) {\n    if (!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n\n    if (!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n\n    return originalInitalAdd.call(this, handle);\n  };\n};\n\nwrapForCountingObservers = function () {\n  // to count observers\n  var mongoConnectionProto = MongoConnection.prototype;\n  var originalObserveChanges = mongoConnectionProto._observeChanges;\n\n  mongoConnectionProto._observeChanges = function (cursorDescription, ordered, callbacks) {\n    var ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks); // get the Kadira Info via the Meteor.EnvironmentalVariable\n\n    var kadiraInfo = Kadira._getInfo(null, true);\n\n    if (kadiraInfo && ret._multiplexer) {\n      if (!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n\n        if (kadiraInfo.trace.type == 'sub') {\n          var ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: new Date().getTime()\n          };\n          var observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo); // We need to send initially polled documents if there are\n\n          if (observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          } // We need to send initially polled documents if there are\n\n\n          if (observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, \"polledFetches\", observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          } // Process _liveUpdatesCounts\n\n\n          _.each(observerDriver._liveUpdatesCounts, function (count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          }); // Process docSize\n\n\n          _.each(observerDriver._docSize, function (count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n\n    return ret;\n  };\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"wrap_ddp_stringify.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/wrap_ddp_stringify.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nwrapStringifyDDP = function () {\n  var originalStringifyDDP = DDPCommon.stringifyDDP;\n\n  DDPCommon.stringifyDDP = function (msg) {\n    var msgString = originalStringifyDDP(msg);\n    var msgSize = Buffer.byteLength(msgString, 'utf8');\n\n    var kadiraInfo = Kadira._getInfo(null, true);\n\n    if (kadiraInfo) {\n      if (kadiraInfo.trace.type === 'method') {\n        Kadira.models.methods.trackMsgSize(kadiraInfo.trace.name, msgSize);\n      }\n\n      return msgString;\n    } // 'currentSub' is set when we wrap Subscription object and override\n    // handlers for 'added', 'changed', 'removed' events. (see lib/hijack/wrap_subscription.js)\n\n\n    if (Kadira.env.currentSub) {\n      if (Kadira.env.currentSub.__kadiraInfo) {\n        Kadira.models.pubsub.trackMsgSize(Kadira.env.currentSub._name, \"initialSent\", msgSize);\n        return msgString;\n      }\n\n      Kadira.models.pubsub.trackMsgSize(Kadira.env.currentSub._name, \"liveSent\", msgSize);\n      return msgString;\n    }\n\n    Kadira.models.methods.trackMsgSize(\"<not-a-method-or-a-pub>\", msgSize);\n    return msgString;\n  };\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"instrument.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/instrument.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet MongoOplogDriver, MongoPollingDriver, Multiplexer, Server, Session, Subscription;\nmodule.link(\"./meteorx.js\", {\n  MongoOplogDriver(v) {\n    MongoOplogDriver = v;\n  },\n\n  MongoPollingDriver(v) {\n    MongoPollingDriver = v;\n  },\n\n  Multiplexer(v) {\n    Multiplexer = v;\n  },\n\n  Server(v) {\n    Server = v;\n  },\n\n  Session(v) {\n    Session = v;\n  },\n\n  Subscription(v) {\n    Subscription = v;\n  }\n\n}, 0);\n\nvar logger = Npm.require('debug')('kadira:hijack:instrument');\n\nvar instrumented = false;\n\nKadira._startInstrumenting = function (callback) {\n  if (instrumented) {\n    callback();\n    return;\n  }\n\n  instrumented = true;\n  wrapStringifyDDP();\n  Meteor.startup(function () {\n    return Promise.asyncApply(() => {\n      wrapServer(Server.prototype);\n      wrapSession(Session.prototype);\n      wrapSubscription(Subscription.prototype);\n\n      if (MongoOplogDriver) {\n        wrapOplogObserveDriver(MongoOplogDriver.prototype);\n      }\n\n      if (MongoPollingDriver) {\n        wrapPollingObserveDriver(MongoPollingDriver.prototype);\n      }\n\n      if (Multiplexer) {\n        wrapMultiplexer(Multiplexer.prototype);\n      }\n\n      wrapForCountingObservers();\n      hijackDBOps();\n      setLabels();\n      callback();\n    });\n  });\n}; // We need to instrument this rightaway and it's okay\n// One reason for this is to call `setLables()` function\n// Otherwise, CPU profile can't see all our custom labeling\n\n\nKadira._startInstrumenting(function () {\n  console.log('Meteor APM: completed instrumenting the app');\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"db.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/db.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet MongoConnection, MongoCursor;\nmodule.link(\"./meteorx.js\", {\n  MongoConnection(v) {\n    MongoConnection = v;\n  },\n\n  MongoCursor(v) {\n    MongoCursor = v;\n  }\n\n}, 0);\n// This hijack is important to make sure, collections created before\n// we hijack dbOps, even gets tracked.\n//  Meteor does not simply expose MongoConnection object to the client\n//  It picks methods which are necessory and make a binded object and\n//  assigned to the Mongo.Collection\n//  so, even we updated prototype, we can't track those collections\n//  but, this will fix it.\nvar originalOpen = MongoInternals.RemoteCollectionDriver.prototype.open;\n\nMongoInternals.RemoteCollectionDriver.prototype.open = function open(name) {\n  var self = this;\n  var ret = originalOpen.call(self, name);\n\n  _.each(ret, function (fn, m) {\n    // make sure, it's in the actual mongo connection object\n    // meteorhacks:mongo-collection-utils package add some arbitary methods\n    // which does not exist in the mongo connection\n    if (self.mongo[m]) {\n      ret[m] = function () {\n        Array.prototype.unshift.call(arguments, name);\n        return OptimizedApply(self.mongo, self.mongo[m], arguments);\n      };\n    }\n  });\n\n  return ret;\n};\n\nhijackDBOps = function hijackDBOps() {\n  var mongoConnectionProto = MongoConnection.prototype; //findOne is handled by find - so no need to track it\n  //upsert is handles by update\n\n  ['find', 'update', 'remove', 'insert', '_ensureIndex', '_dropIndex'].forEach(function (func) {\n    var originalFunc = mongoConnectionProto[func];\n\n    mongoConnectionProto[func] = function (collName, selector, mod, options) {\n      var payload = {\n        coll: collName,\n        func: func\n      };\n\n      if (func == 'insert') {//add nothing more to the payload\n      } else if (func == '_ensureIndex' || func == '_dropIndex') {\n        //add index\n        payload.index = JSON.stringify(selector);\n      } else if (func == 'update' && options && options.upsert) {\n        payload.func = 'upsert';\n        payload.selector = JSON.stringify(selector);\n      } else {\n        //all the other functions have selectors\n        payload.selector = JSON.stringify(selector);\n      }\n\n      var kadiraInfo = Kadira._getInfo();\n\n      if (kadiraInfo) {\n        var eventId = Kadira.tracer.event(kadiraInfo.trace, 'db', payload);\n      } //this cause V8 to avoid any performance optimizations, but this is must to use\n      //otherwise, if the error adds try catch block our logs get messy and didn't work\n      //see: issue #6\n\n\n      try {\n        var ret = originalFunc.apply(this, arguments); //handling functions which can be triggered with an asyncCallback\n\n        var endOptions = {};\n\n        if (HaveAsyncCallback(arguments)) {\n          endOptions.async = true;\n        }\n\n        if (func == 'update') {\n          // upsert only returns an object when called `upsert` directly\n          // otherwise it only act an update command\n          if (options && options.upsert && typeof ret == 'object') {\n            endOptions.updatedDocs = ret.numberAffected;\n            endOptions.insertedId = ret.insertedId;\n          } else {\n            endOptions.updatedDocs = ret;\n          }\n        } else if (func == 'remove') {\n          endOptions.removedDocs = ret;\n        }\n\n        if (eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endOptions);\n        }\n      } catch (ex) {\n        if (eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {\n            err: ex.message\n          });\n        }\n\n        throw ex;\n      }\n\n      return ret;\n    };\n  });\n  var cursorProto = MongoCursor.prototype;\n  ['forEach', 'map', 'fetch', 'count', 'observeChanges', 'observe', 'rewind'].forEach(function (type) {\n    var originalFunc = cursorProto[type];\n\n    cursorProto[type] = function () {\n      var cursorDescription = this._cursorDescription;\n      var payload = Object.assign(Object.create(null), {\n        coll: cursorDescription.collectionName,\n        selector: JSON.stringify(cursorDescription.selector),\n        func: type,\n        cursor: true\n      });\n\n      if (cursorDescription.options) {\n        var cursorOptions = _.pick(cursorDescription.options, ['fields', 'sort', 'limit']);\n\n        for (var field in cursorOptions) {\n          var value = cursorOptions[field];\n\n          if (typeof value == 'object') {\n            value = JSON.stringify(value);\n          }\n\n          payload[field] = value;\n        }\n      }\n\n      ;\n\n      var kadiraInfo = Kadira._getInfo();\n\n      if (kadiraInfo) {\n        var eventId = Kadira.tracer.event(kadiraInfo.trace, 'db', payload);\n      }\n\n      try {\n        var ret = originalFunc.apply(this, arguments);\n        var endData = {};\n\n        if (type == 'observeChanges' || type == 'observe') {\n          var observerDriver;\n          endData.oplog = false; // get data written by the multiplexer\n\n          endData.wasMultiplexerReady = ret._wasMultiplexerReady;\n          endData.queueLength = ret._queueLength;\n          endData.elapsedPollingTime = ret._elapsedPollingTime;\n\n          if (ret._multiplexer) {\n            // older meteor versions done not have an _multiplexer value\n            observerDriver = ret._multiplexer._observeDriver;\n\n            if (observerDriver) {\n              observerDriver = ret._multiplexer._observeDriver;\n              var observerDriverClass = observerDriver.constructor;\n              var usesOplog = typeof observerDriverClass.cursorSupported == 'function';\n              endData.oplog = usesOplog;\n              var size = 0;\n\n              ret._multiplexer._cache.docs.forEach(function () {\n                size++;\n              });\n\n              endData.noOfCachedDocs = size; // if multiplexerWasNotReady, we need to get the time spend for the polling\n\n              if (!ret._wasMultiplexerReady) {\n                endData.initialPollingTime = observerDriver._lastPollTime;\n              }\n            }\n          }\n\n          if (!endData.oplog) {\n            // let's try to find the reason\n            var reasonInfo = Kadira.checkWhyNoOplog(cursorDescription, observerDriver);\n            endData.noOplogCode = reasonInfo.code;\n            endData.noOplogReason = reasonInfo.reason;\n            endData.noOplogSolution = reasonInfo.solution;\n          }\n        } else if (type == 'fetch' || type == 'map') {\n          //for other cursor operation\n          endData.docsFetched = ret.length;\n\n          if (type == 'fetch') {\n            var coll = cursorDescription.collectionName;\n            var query = cursorDescription.selector;\n            var opts = cursorDescription.options;\n            var docSize = Kadira.docSzCache.getSize(coll, query, opts, ret) * ret.length;\n            endData.docSize = docSize;\n\n            if (kadiraInfo) {\n              if (kadiraInfo.trace.type === 'method') {\n                Kadira.models.methods.trackDocSize(kadiraInfo.trace.name, docSize);\n              } else if (kadiraInfo.trace.type === 'sub') {\n                Kadira.models.pubsub.trackDocSize(kadiraInfo.trace.name, \"cursorFetches\", docSize);\n              }\n            } else {\n              // Fetch with no kadira info are tracked as from a null method\n              Kadira.models.methods.trackDocSize(\"<not-a-method-or-a-pub>\", docSize);\n            } // TODO: Add doc size tracking to `map` as well.\n\n          }\n        }\n\n        if (eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endData);\n        }\n\n        return ret;\n      } catch (ex) {\n        if (eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {\n            err: ex.message\n          });\n        }\n\n        throw ex;\n      }\n    };\n  });\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"http.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/http.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar originalCall = HTTP.call;\n\nHTTP.call = function (method, url) {\n  var kadiraInfo = Kadira._getInfo();\n\n  if (kadiraInfo) {\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'http', {\n      method: method,\n      url: url\n    });\n  }\n\n  try {\n    var response = originalCall.apply(this, arguments); //if the user supplied an asynCallback, we don't have a response object and it handled asynchronously\n    //we need to track it down to prevent issues like: #3\n\n    var endOptions = HaveAsyncCallback(arguments) ? {\n      async: true\n    } : {\n      statusCode: response.statusCode\n    };\n\n    if (eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endOptions);\n    }\n\n    return response;\n  } catch (ex) {\n    if (eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {\n        err: ex.message\n      });\n    }\n\n    throw ex;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"email.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/email.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar originalSend = Email.send;\n\nEmail.send = function (options) {\n  var kadiraInfo = Kadira._getInfo();\n\n  if (kadiraInfo) {\n    var data = _.pick(options, 'from', 'to', 'cc', 'bcc', 'replyTo');\n\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'email', data);\n  }\n\n  try {\n    var ret = originalSend.call(this, options);\n\n    if (eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId);\n    }\n\n    return ret;\n  } catch (ex) {\n    if (eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {\n        err: ex.message\n      });\n    }\n\n    throw ex;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"async.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/async.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fibers = Npm.require('fibers');\n\nvar originalYield = Fibers.yield;\n\nFibers.yield = function () {\n  var kadiraInfo = Kadira._getInfo();\n\n  if (kadiraInfo) {\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'async');\n    ;\n\n    if (eventId) {\n      Fibers.current._apmEventId = eventId;\n    }\n  }\n\n  return originalYield();\n};\n\nvar originalRun = Fibers.prototype.run;\n\nFibers.prototype.run = function (val) {\n  if (this._apmEventId) {\n    var kadiraInfo = Kadira._getInfo(this);\n\n    if (kadiraInfo) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, this._apmEventId);\n      this._apmEventId = null;\n    }\n  }\n\n  return originalRun.call(this, val);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"error.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/error.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nTrackUncaughtExceptions = function () {\n  process.on('uncaughtException', function (err) {\n    // skip errors with `_skipKadira` flag\n    if (err._skipKadira) {\n      return;\n    } // let the server crash normally if error tracking is disabled\n\n\n    if (!Kadira.options.enableErrorTracking) {\n      printErrorAndKill(err);\n    } // looking for already tracked errors and throw them immediately\n    // throw error immediately if kadira is not ready\n\n\n    if (err._tracked || !Kadira.connected) {\n      printErrorAndKill(err);\n    }\n\n    var trace = getTrace(err, 'server-crash', 'uncaughtException');\n    Kadira.models.error.trackError(err, trace);\n\n    Kadira._sendPayload(function () {\n      clearTimeout(timer);\n      throwError(err);\n    });\n\n    var timer = setTimeout(function () {\n      throwError(err);\n    }, 1000 * 10);\n\n    function throwError(err) {\n      // sometimes error came back from a fiber.\n      // But we don't fibers to track that error for us\n      // That's why we throw the error on the nextTick\n      process.nextTick(function () {\n        // we need to mark this error where we really need to throw\n        err._tracked = true;\n        printErrorAndKill(err);\n      });\n    }\n  });\n\n  function printErrorAndKill(err) {\n    // since we are capturing error, we are also on the error message.\n    // so developers think we are also reponsible for the error.\n    // But we are not. This will fix that.\n    console.error(err.stack);\n    process.exit(7);\n  }\n};\n\nTrackMeteorDebug = function () {\n  var originalMeteorDebug = Meteor._debug;\n\n  Meteor._debug = function (message, stack) {\n    if (!Kadira.options.enableErrorTracking) {\n      return originalMeteorDebug.call(this, message, stack);\n    } // We've changed `stack` into an object at method and sub handlers so we can\n    // ignore them here. These errors are already tracked so don't track again.\n\n\n    if (stack && stack.stack) {\n      stack = stack.stack; // Restore so origionalMeteorDebug shows the stack as a string instead as\n      // an object\n\n      arguments[1] = stack;\n    } else {\n      // only send to the server, if only connected to kadira\n      if (Kadira.connected) {\n        var error = new Error(message);\n        error.stack = stack;\n        var trace = getTrace(error, 'server-internal', 'Meteor._debug');\n        Kadira.models.error.trackError(error, trace);\n      }\n    }\n\n    return originalMeteorDebug.apply(this, arguments);\n  };\n};\n\nfunction getTrace(err, type, subType) {\n  return {\n    type: type,\n    subType: subType,\n    name: err.message,\n    errored: true,\n    at: Kadira.syncedDate.getTime(),\n    events: [['start', 0, {}], ['error', 0, {\n      error: {\n        message: err.message,\n        stack: err.stack\n      }\n    }]],\n    metrics: {\n      total: 0\n    }\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"set_labels.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/set_labels.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Session, Multiplexer, MongoConnection, MongoCursor;\nmodule.link(\"./meteorx.js\", {\n  Session(v) {\n    Session = v;\n  },\n\n  Multiplexer(v) {\n    Multiplexer = v;\n  },\n\n  MongoConnection(v) {\n    MongoConnection = v;\n  },\n\n  MongoCursor(v) {\n    MongoCursor = v;\n  }\n\n}, 0);\n\nsetLabels = function () {\n  // name Session.prototype.send\n  var originalSend = Session.prototype.send;\n\n  Session.prototype.send = function kadira_Session_send(msg) {\n    return originalSend.call(this, msg);\n  }; // name Multiplexer initial adds\n\n\n  var originalSendAdds = Multiplexer.prototype._sendAdds;\n\n  Multiplexer.prototype._sendAdds = function kadira_Multiplexer_sendAdds(handle) {\n    return originalSendAdds.call(this, handle);\n  }; // name MongoConnection insert\n\n\n  var originalMongoInsert = MongoConnection.prototype._insert;\n\n  MongoConnection.prototype._insert = function kadira_MongoConnection_insert(coll, doc, cb) {\n    return originalMongoInsert.call(this, coll, doc, cb);\n  }; // name MongoConnection update\n\n\n  var originalMongoUpdate = MongoConnection.prototype._update;\n\n  MongoConnection.prototype._update = function kadira_MongoConnection_update(coll, selector, mod, options, cb) {\n    return originalMongoUpdate.call(this, coll, selector, mod, options, cb);\n  }; // name MongoConnection remove\n\n\n  var originalMongoRemove = MongoConnection.prototype._remove;\n\n  MongoConnection.prototype._remove = function kadira_MongoConnection_remove(coll, selector, cb) {\n    return originalMongoRemove.call(this, coll, selector, cb);\n  }; // name Pubsub added\n\n\n  var originalPubsubAdded = Session.prototype.sendAdded;\n\n  Session.prototype.sendAdded = function kadira_Session_sendAdded(coll, id, fields) {\n    return originalPubsubAdded.call(this, coll, id, fields);\n  }; // name Pubsub changed\n\n\n  var originalPubsubChanged = Session.prototype.sendChanged;\n\n  Session.prototype.sendChanged = function kadira_Session_sendChanged(coll, id, fields) {\n    return originalPubsubChanged.call(this, coll, id, fields);\n  }; // name Pubsub removed\n\n\n  var originalPubsubRemoved = Session.prototype.sendRemoved;\n\n  Session.prototype.sendRemoved = function kadira_Session_sendRemoved(coll, id) {\n    return originalPubsubRemoved.call(this, coll, id);\n  }; // name MongoCursor forEach\n\n\n  var originalCursorForEach = MongoCursor.prototype.forEach;\n\n  MongoCursor.prototype.forEach = function kadira_Cursor_forEach() {\n    return originalCursorForEach.apply(this, arguments);\n  }; // name MongoCursor map\n\n\n  var originalCursorMap = MongoCursor.prototype.map;\n\n  MongoCursor.prototype.map = function kadira_Cursor_map() {\n    return originalCursorMap.apply(this, arguments);\n  }; // name MongoCursor fetch\n\n\n  var originalCursorFetch = MongoCursor.prototype.fetch;\n\n  MongoCursor.prototype.fetch = function kadira_Cursor_fetch() {\n    return originalCursorFetch.apply(this, arguments);\n  }; // name MongoCursor count\n\n\n  var originalCursorCount = MongoCursor.prototype.count;\n\n  MongoCursor.prototype.count = function kadira_Cursor_count() {\n    return originalCursorCount.apply(this, arguments);\n  }; // name MongoCursor observeChanges\n\n\n  var originalCursorObserveChanges = MongoCursor.prototype.observeChanges;\n\n  MongoCursor.prototype.observeChanges = function kadira_Cursor_observeChanges() {\n    return originalCursorObserveChanges.apply(this, arguments);\n  }; // name MongoCursor observe\n\n\n  var originalCursorObserve = MongoCursor.prototype.observe;\n\n  MongoCursor.prototype.observe = function kadira_Cursor_observe() {\n    return originalCursorObserve.apply(this, arguments);\n  }; // name MongoCursor rewind\n\n\n  var originalCursorRewind = MongoCursor.prototype.rewind;\n\n  MongoCursor.prototype.rewind = function kadira_Cursor_rewind() {\n    return originalCursorRewind.apply(this, arguments);\n  }; // name CrossBar listen\n\n\n  var originalCrossbarListen = DDPServer._Crossbar.prototype.listen;\n\n  DDPServer._Crossbar.prototype.listen = function kadira_Crossbar_listen(trigger, callback) {\n    return originalCrossbarListen.call(this, trigger, callback);\n  }; // name CrossBar fire\n\n\n  var originalCrossbarFire = DDPServer._Crossbar.prototype.fire;\n\n  DDPServer._Crossbar.prototype.fire = function kadira_Crossbar_fire(notification) {\n    return originalCrossbarFire.call(this, notification);\n  };\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteorx.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/hijack/meteorx.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Server: () => Server,\n  Session: () => Session,\n  MongoCursor: () => MongoCursor,\n  Multiplexer: () => Multiplexer,\n  MongoConnection: () => MongoConnection,\n  Subscription: () => Subscription,\n  MongoOplogDriver: () => MongoOplogDriver,\n  MongoPollingDriver: () => MongoPollingDriver\n});\nlet get;\nmodule.link(\"../utils.js\", {\n  get(v) {\n    get = v;\n  }\n\n}, 0);\nconst Server = Meteor.server.constructor;\n\nfunction getSession() {\n  const fakeSocket = {\n    send() {},\n\n    close() {},\n\n    headers: []\n  };\n  const server = Meteor.server;\n\n  server._handleConnect(fakeSocket, {\n    msg: \"connect\",\n    version: \"pre1\",\n    support: [\"pre1\"]\n  });\n\n  const session = fakeSocket._meteorSession;\n\n  server._removeSession(session);\n\n  return session;\n}\n\nconst session = getSession();\nconst Session = session.constructor;\nconst collection = new Mongo.Collection(\"__dummy_coll_\" + Random.id());\ncollection.findOne();\nconst cursor = collection.find();\nconst MongoCursor = cursor.constructor;\n\nfunction getMultiplexer(cursor) {\n  const handle = cursor.observeChanges({\n    added() {}\n\n  });\n  handle.stop();\n  return handle._multiplexer;\n}\n\nconst Multiplexer = getMultiplexer(cursor).constructor;\nconst MongoConnection = MongoInternals.defaultRemoteCollectionDriver().mongo.constructor;\n\nfunction getSubscription(session) {\n  const subId = Random.id();\n\n  session._startSubscription(function () {\n    this.ready();\n  }, subId, [], \"__dummy_pub_\" + Random.id());\n\n  const subscription = get(session._namedSubs, subId);\n\n  session._stopSubscription(subId);\n\n  return subscription;\n}\n\nconst Subscription = getSubscription(session).constructor;\n\nfunction getObserverDriver(cursor) {\n  const multiplexer = getMultiplexer(cursor);\n  return multiplexer && multiplexer._observeDriver || null;\n}\n\nfunction getMongoOplogDriver() {\n  const driver = getObserverDriver(cursor);\n  let MongoOplogDriver = driver && driver.constructor || null;\n\n  if (MongoOplogDriver && typeof MongoOplogDriver.cursorSupported !== \"function\") {\n    return null;\n  }\n\n  return MongoOplogDriver;\n}\n\nconst MongoOplogDriver = getMongoOplogDriver();\n\nfunction getMongoPollingDriver() {\n  const cursor = collection.find({}, {\n    limit: 20,\n    _disableOplog: true\n  });\n  const driver = getObserverDriver(cursor); // verify observer driver is a polling driver\n\n  if (driver && typeof driver.constructor.cursorSupported === \"undefined\") {\n    return driver.constructor;\n  }\n\n  return null;\n}\n\nconst MongoPollingDriver = getMongoPollingDriver();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"environment_variables.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/environment_variables.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira._parseEnv = function (env) {\n  var options = {};\n\n  for (var name in env) {\n    var info = Kadira._parseEnv._options[name];\n    var value = env[name];\n\n    if (info && value) {\n      options[info.name] = info.parser(value);\n    }\n  }\n\n  return options;\n};\n\nKadira._parseEnv.parseInt = function (str) {\n  var num = parseInt(str);\n  if (num || num === 0) return num;\n  throw new Error('Kadira: Match Error: \"' + num + '\" is not a number');\n};\n\nKadira._parseEnv.parseBool = function (str) {\n  str = str.toLowerCase();\n  if (str === 'true') return true;\n  if (str === 'false') return false;\n  throw new Error('Kadira: Match Error: ' + str + ' is not a boolean');\n};\n\nKadira._parseEnv.parseUrl = function (str) {\n  return str;\n};\n\nKadira._parseEnv.parseString = function (str) {\n  return str;\n};\n\nKadira._parseEnv._options = {\n  // delay to send the initial ping to the kadira engine after page loads\n  APM_OPTIONS_CLIENT_ENGINE_SYNC_DELAY: {\n    name: 'clientEngineSyncDelay',\n    parser: Kadira._parseEnv.parseInt\n  },\n  // time between sending errors to the engine\n  APM_OPTIONS_ERROR_DUMP_INTERVAL: {\n    name: 'errorDumpInterval',\n    parser: Kadira._parseEnv.parseInt\n  },\n  // no of errors allowed in a given interval\n  APM_OPTIONS_MAX_ERRORS_PER_INTERVAL: {\n    name: 'maxErrorsPerInterval',\n    parser: Kadira._parseEnv.parseInt\n  },\n  // a zone.js specific option to collect the full stack trace(which is not much useful)\n  APM_OPTIONS_COLLECT_ALL_STACKS: {\n    name: 'collectAllStacks',\n    parser: Kadira._parseEnv.parseBool\n  },\n  // enable error tracking (which is turned on by default)\n  APM_OPTIONS_ENABLE_ERROR_TRACKING: {\n    name: 'enableErrorTracking',\n    parser: Kadira._parseEnv.parseBool\n  },\n  // kadira engine endpoint\n  APM_OPTIONS_ENDPOINT: {\n    name: 'endpoint',\n    parser: Kadira._parseEnv.parseUrl\n  },\n  // define the hostname of the current running process\n  APM_OPTIONS_HOSTNAME: {\n    name: 'hostname',\n    parser: Kadira._parseEnv.parseString\n  },\n  // interval between sending data to the kadira engine from the server\n  APM_OPTIONS_PAYLOAD_TIMEOUT: {\n    name: 'payloadTimeout',\n    parser: Kadira._parseEnv.parseInt\n  },\n  // set HTTP/HTTPS proxy\n  APM_OPTIONS_PROXY: {\n    name: 'proxy',\n    parser: Kadira._parseEnv.parseUrl\n  },\n  // number of items cached for tracking document size\n  APM_OPTIONS_DOCUMENT_SIZE_CACHE_SIZE: {\n    name: 'documentSizeCacheSize',\n    parser: Kadira._parseEnv.parseInt\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"auto_connect.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mdg_meteor-apm-agent/lib/auto_connect.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nKadira._connectWithEnv = function () {\n  if (Meteor && Meteor.settings && Meteor.settings.packages && Meteor.settings.packages['mdg:meteor-apm-agent'] && Meteor.settings.packages['mdg:meteor-apm-agent'].isDisabled) {\n    console.log('Meteor APM: not connected because it was disabled in settings');\n    return;\n  }\n\n  if (process.env.APM_APP_ID && process.env.APM_APP_SECRET && process.env.APM_OPTIONS_ENDPOINT) {\n    var options = Kadira._parseEnv(process.env);\n\n    Kadira.connect(process.env.APM_APP_ID, process.env.APM_APP_SECRET, options);\n\n    Kadira.connect = function () {\n      throw new Error('Meteor APM has already connected using credentials from Environment Variables');\n    };\n  } // other forms of Kadira.connect are not supported\n\n}; // Try to connect automatically\n\n\nKadira._connectWithEnv();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/common/unify.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/models/base_error.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/jobs.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/retry.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/utils.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/ntp.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/wait_time_builder.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/check_for_oplog.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/tracer/tracer.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/tracer/default_filters.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/tracer/tracer_store.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/models/0model.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/models/methods.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/models/pubsub.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/models/system.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/models/errors.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/docsize_cache.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/kadira.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/wrap_server.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/wrap_session.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/wrap_ddp_stringify.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/instrument.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/db.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/http.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/email.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/async.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/error.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/hijack/set_labels.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/environment_variables.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/auto_connect.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/common/default_error_filters.js\");\nrequire(\"/node_modules/meteor/mdg:meteor-apm-agent/lib/common/send.js\");\n\n/* Exports */\nPackage._define(\"mdg:meteor-apm-agent\", {\n  Kadira: Kadira\n});\n\n})();\n","servePath":"/packages/mdg_meteor-apm-agent.js","sourceMap":{"version":3,"sources":["packages/mdg:meteor-apm-agent/lib/common/unify.js","packages/mdg:meteor-apm-agent/lib/common/default_error_filters.js","packages/mdg:meteor-apm-agent/lib/common/send.js","packages/mdg:meteor-apm-agent/lib/models/base_error.js","packages/mdg:meteor-apm-agent/lib/models/0model.js","packages/mdg:meteor-apm-agent/lib/models/methods.js","packages/mdg:meteor-apm-agent/lib/models/pubsub.js","packages/mdg:meteor-apm-agent/lib/models/system.js","packages/mdg:meteor-apm-agent/lib/models/errors.js","packages/mdg:meteor-apm-agent/lib/jobs.js","packages/mdg:meteor-apm-agent/lib/retry.js","packages/mdg:meteor-apm-agent/lib/utils.js","packages/mdg:meteor-apm-agent/lib/ntp.js","packages/mdg:meteor-apm-agent/lib/wait_time_builder.js","packages/mdg:meteor-apm-agent/lib/check_for_oplog.js","packages/mdg:meteor-apm-agent/lib/tracer/tracer.js","packages/mdg:meteor-apm-agent/lib/tracer/default_filters.js","packages/mdg:meteor-apm-agent/lib/tracer/tracer_store.js","packages/mdg:meteor-apm-agent/lib/docsize_cache.js","packages/mdg:meteor-apm-agent/lib/kadira.js","packages/mdg:meteor-apm-agent/lib/hijack/wrap_server.js","packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","packages/mdg:meteor-apm-agent/lib/hijack/wrap_subscription.js","packages/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js","packages/mdg:meteor-apm-agent/lib/hijack/wrap_ddp_stringify.js","packages/mdg:meteor-apm-agent/lib/hijack/instrument.js","packages/mdg:meteor-apm-agent/lib/hijack/db.js","packages/mdg:meteor-apm-agent/lib/hijack/http.js","packages/mdg:meteor-apm-agent/lib/hijack/email.js","packages/mdg:meteor-apm-agent/lib/hijack/async.js","packages/mdg:meteor-apm-agent/lib/hijack/error.js","packages/mdg:meteor-apm-agent/lib/hijack/set_labels.js","packages/mdg:meteor-apm-agent/lib/hijack/meteorx.js","packages/mdg:meteor-apm-agent/lib/environment_variables.js","packages/mdg:meteor-apm-agent/lib/auto_connect.js"],"names":["Kadira","options","Meteor","wrapAsync","_wrapAsync","isServer","EventEmitter","Npm","require","eventBus","setMaxListeners","buildArgs","args","_","toArray","eventName","slice","unshift","EventBus","forEach","m","arguments","apply","commonErrRegExps","errorFilters","filterValidationErrors","type","message","err","Error","filterCommonMeteorErrors","lc","length","regExp","test","send","payload","path","callback","connected","substr","endpoint","retryCount","retry","Retry","minCount","minTimeout","baseTimeout","maxTimeout","sendFunction","_getSendFunction","tryToSend","retryLater","console","warn","content","statusCode","_serverSend","_clientSend","httpRequest","headers","JSON","stringify","Fiber","httpOptions","data","authHeaders","HTTP","call","res","run","BaseErrorModel","_filters","prototype","addFilter","filter","push","removeFilter","index","indexOf","splice","applyFilters","error","subType","validated","ex","KadiraModel","_getDateId","timestamp","remainder","dateId","METHOD_METRICS_FIELDS","MethodsModel","metricsThreshold","self","methodMetricsByMinute","Object","create","errorMap","_metricsThreshold","assign","maxEventTimesForMethods","tracerStore","TracerStore","interval","maxTotalPoints","archiveEvery","start","_getMetrics","method","methods","count","errors","fetchedDocSize","sentMsgSize","field","setStartTime","metricsByMinute","startTime","processMethod","methodTrace","at","_appendMetrics","errored","name","addTrace","id","methodMetrics","value","metrics","endTime","trackDocSize","size","Ntp","_now","trackMsgSize","buildPayload","buildDetailedInfo","methodRequests","key","syncedDate","syncTime","methodName","collectTraces","each","get","module","link","v","logger","PubsubModel","subscriptions","_trackSub","session","msg","params","publication","_getPublicationName","subscriptionId","subs","_startTime","_trackUnsub","sub","_subscriptionId","_name","subscriptionState","unsubs","lifeTime","_trackReady","trace","readyTracked","resTime","_trackError","pubs","activeSubs","activeDocs","totalObservers","cachedObservers","createdObservers","deletedObservers","observerLifetime","polledDocuments","oplogUpdatedDocuments","oplogInsertedDocuments","oplogDeletedDocuments","initiallyAddedDocuments","liveAddedDocuments","liveChangedDocuments","liveRemovedDocuments","polledDocSize","initiallyFetchedDocSize","liveFetchedDocSize","initiallySentMsgSize","liveSentMsgSize","_getSubscriptionInfo","totalDocsSent","totalDataSent","server","sessions","_namedSubs","countSubData","_universalSubs","avgObserverReuse","countSubscriptions","countDocuments","countObservers","_documents","document","_totalObservers","_cachedObservers","buildDetailInfo","pubMetrics","subscriptionData","dateMetrics","singlePubMetrics","pubRequests","incrementHandleCount","isCached","publicationName","trackCreatedObserver","info","trackDeletedObserver","Date","getTime","trackDocumentChanges","op","trackPolledDocuments","trackLiveUpdates","os","usage","EventLoopMonitor","SystemModel","newSessions","sessionTimeout","usageLookup","stat","bind","evloopMonitor","now","memory","process","memoryUsage","rss","getUsage","pcpu","cpu","cpuInfo","cputime","cpuTime","pcpuUser","pcpuSystem","pctEvloopBlock","status","pctBlock","systemMetrics","pid","docSzCache","setPcpu","handleSessionActivity","countNewSession","isSessionActive","_activeAt","isLocalAddress","socket","inactiveTime","isLocalHostRegex","isLocalAddressRegex","host","address","remoteAddress","ErrorModel","appId","maxErrors","values","metric","errorCount","trackError","errorDef","_formatError","time","stack","details","errorEvent","events","errorObject","stacks","Jobs","getAsync","coreApi","getJob","then","catch","setAsync","changes","updateJob","set","defaults","clone","exponent","fuzz","retryTimer","clear","clearTimeout","_timeout","timeout","Math","min","pow","Random","fraction","ceil","fn","setTimeout","export","collection","Map","Set","HaveAsyncCallback","lastArg","UniqueId","DefaultUniqueId","OptimizedApply","context","a","getLogger","setEndpoint","diff","synced","reSyncCount","reSync","round","localTime","sync","cacheDns","getServerTime","calculateTimeDiff","clientStartTime","serverTime","networkTime","serverStartTime","parseInt","canLogKadira","_localStorage","getItem","log","WAITON_MESSAGE_FIELDS","WaitTimeBuilder","_waitListStore","_currentProcessingMessages","_messageCache","register","msgId","mainKey","_getMessageKey","inQueue","waitList","map","_getCacheMessage","currentlyProcessingMessage","build","filteredWaitList","_cleanCacheMessage","sessionId","cachedMessage","pick","_key","_registered","trackWaitTime","unblock","started","unblocked","wrappedUnblock","waitTime","OplogCheck","_070","cursorDescription","limit","code","reason","solution","exists$","any","selector","onlyScalers","all","Collection","ObjectID","_071","matcher","Minimongo","Matcher","env","MONGO_OPLOG_URL","disableOplog","_disableOplog","miniMongoMatcher","miniMongoSorter","Sorter","sort","sorter","fields","LocalCollection","_checkSupportedProjection","e","skip","where","hasWhere","geo","hasGeoQuery","limitButNoSort","olderVersion","driver","constructor","cursorSupported","gitCheckout","release","preRunningMatchers","globalMatchers","versionMatchers","checkWhyNoOplog","observerDriver","result","runMatchers","meteorVersion","matcherInfo","matched","matcherList","Fibers","eventLogger","REPITITIVE_EVENTS","Tracer","traceInfo","_id","userId","event","lastEvent","getLastEvent","eventId","_lastEventId","_applyFilters","eventEnd","endLastEvent","buildTrace","firstEvent","processedEvents","total","totalNonCompute","prevEventEnd","startEvent","endEvent","computeTime","elapsedTimeForEvent","currentEvent","lastEventData","compute","isEventsProcessed","filterFn","eventType","tracer","stripSensitive","typesToStrip","receiverType","strippedTypes","url","item","stripSelectors","collectionList","collMap","collName","coll","maxTotals","currentMaxTrace","traceArchive","processedCnt","kind","join","EJSON","_handleErrors","traces","_timeoutHandler","setInterval","processTraces","stop","clearInterval","errorKey","erroredTrace","kinds","union","keys","currentMaxTotal","exceedingPoints","archiveDefault","canArchive","_isTraceOutlier","dataSet","_isOutlier","dataPoint","maxMadZ","median","_getMedian","mad","_calculateMad","madZ","_funcMedianDeviation","sortedDataSet","b","_pickQuartile","num","pos","medianDeviations","x","abs","_getMean","dataPoints","point","LRU","crypto","jsonStringify","DocSzCache","maxItems","maxValues","items","max","cpuUsage","getSize","query","opts","getKey","DocSzCacheItem","needsUpdate","doc","element","Buffer","byteLength","addData","getValue","getItemScore","updated","score","reduce","currentTime","timeSinceUpdate","shift","sortNumber","sorted","idx","floor","hostname","KadiraCore","models","currentSub","kadiraInfo","EnvironmentVariable","waitTimeBuilder","pubsub","system","connect","appSecret","payloadTimeout","clientEngineSyncDelay","thresholds","isHostNameSet","proxy","documentSizeCacheSize","last","enableErrorTracking","undefined","addFilterFn","__meteor_runtime_config__","kadira","disableErrorTracking","trim","_checkAuth","_sendAppStats","_schedulePayloadSend","startup","TrackUncaughtExceptions","TrackMeteorDebug","publish","added","ready","_buildPayload","_isDetailedInfo","_countDataSent","_detailInfoSentInterval","appStats","protocolVersion","packageVersions","appVersions","webapp","refreshable","cordova","Package","version","sendData","_sendPayload","_getInfo","currentFiber","useEnvironmentVariable","current","__kadiraInfo","_setInfo","ignoreErrorTracking","_skipKadira","wrapServer","serverProto","originalHandleConnect","_handleConnect","_meteorSession","emit","wrapSession","sessionProto","originalProcessMessage","processMessage","startData","waitEventId","_waitEventId","originalMethodHandler","protocol_handlers","waitOn","response","withValue","orginalSubHandler","orginalUnSubHandler","unsub","originalSend","currentError","method_handlers","handler","wrapMethodHanderForErrors","originalMeteorMethods","methodMap","originalHandler","source","wrapSubscription","subscriptionProto","originalRunHandler","_runHandler","originalReady","_apmReadyTracked","_session","originalError","errorForApm","originalDeactivate","_deactivate","funcName","originalFunc","collectionName","MongoConnection","wrapOplogObserveDriver","proto","originalPublishNewResults","_publishNewResults","newResults","newBuffer","_cursorDescription","docSize","_ownerInfo","_polledDocuments","_docSize","polledFetches","originalHandleOplogEntryQuerying","_handleOplogEntryQuerying","originalHandleOplogEntrySteadyOrFetching","_handleOplogEntrySteadyOrFetching","fnName","originalFn","c","_liveUpdatesCounts","_initialAdds","initialFetches","originalStop","wrapPollingObserveDriver","originalPollMongo","_pollMongo","_results","_map","_polledDocSize","wrapMultiplexer","originalInitalAdd","addHandleAndSendInitialAdds","handle","_firstInitialAddTime","_wasMultiplexerReady","_ready","_queueLength","_queue","_taskHandles","_elapsedPollingTime","wrapForCountingObservers","mongoConnectionProto","originalObserveChanges","_observeChanges","ordered","callbacks","ret","_multiplexer","__kadiraTracked","ownerInfo","_observeDriver","wrapStringifyDDP","originalStringifyDDP","DDPCommon","stringifyDDP","msgString","msgSize","MongoOplogDriver","MongoPollingDriver","Multiplexer","Server","Session","Subscription","instrumented","_startInstrumenting","hijackDBOps","setLabels","MongoCursor","originalOpen","MongoInternals","RemoteCollectionDriver","open","mongo","Array","func","mod","upsert","endOptions","async","updatedDocs","numberAffected","insertedId","removedDocs","cursorProto","cursor","cursorOptions","endData","oplog","wasMultiplexerReady","queueLength","elapsedPollingTime","observerDriverClass","usesOplog","_cache","docs","noOfCachedDocs","initialPollingTime","_lastPollTime","reasonInfo","noOplogCode","noOplogReason","noOplogSolution","docsFetched","originalCall","Email","originalYield","yield","_apmEventId","originalRun","val","on","printErrorAndKill","_tracked","getTrace","timer","throwError","nextTick","exit","originalMeteorDebug","_debug","kadira_Session_send","originalSendAdds","_sendAdds","kadira_Multiplexer_sendAdds","originalMongoInsert","_insert","kadira_MongoConnection_insert","cb","originalMongoUpdate","_update","kadira_MongoConnection_update","originalMongoRemove","_remove","kadira_MongoConnection_remove","originalPubsubAdded","sendAdded","kadira_Session_sendAdded","originalPubsubChanged","sendChanged","kadira_Session_sendChanged","originalPubsubRemoved","sendRemoved","kadira_Session_sendRemoved","originalCursorForEach","kadira_Cursor_forEach","originalCursorMap","kadira_Cursor_map","originalCursorFetch","fetch","kadira_Cursor_fetch","originalCursorCount","kadira_Cursor_count","originalCursorObserveChanges","observeChanges","kadira_Cursor_observeChanges","originalCursorObserve","observe","kadira_Cursor_observe","originalCursorRewind","rewind","kadira_Cursor_rewind","originalCrossbarListen","DDPServer","_Crossbar","listen","kadira_Crossbar_listen","trigger","originalCrossbarFire","fire","kadira_Crossbar_fire","notification","getSession","fakeSocket","close","support","_removeSession","Mongo","findOne","find","getMultiplexer","defaultRemoteCollectionDriver","getSubscription","subId","_startSubscription","subscription","_stopSubscription","getObserverDriver","multiplexer","getMongoOplogDriver","getMongoPollingDriver","_parseEnv","_options","parser","str","parseBool","toLowerCase","parseUrl","parseString","APM_OPTIONS_CLIENT_ENGINE_SYNC_DELAY","APM_OPTIONS_ERROR_DUMP_INTERVAL","APM_OPTIONS_MAX_ERRORS_PER_INTERVAL","APM_OPTIONS_COLLECT_ALL_STACKS","APM_OPTIONS_ENABLE_ERROR_TRACKING","APM_OPTIONS_ENDPOINT","APM_OPTIONS_HOSTNAME","APM_OPTIONS_PAYLOAD_TIMEOUT","APM_OPTIONS_PROXY","APM_OPTIONS_DOCUMENT_SIZE_CACHE_SIZE","_connectWithEnv","settings","packages","isDisabled","APM_APP_ID","APM_APP_SECRET"],"mappings":"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","file":"/packages/mdg_meteor-apm-agent.js","sourcesContent":["Kadira = {};\nKadira.options = {};\n\nif(Meteor.wrapAsync) {\n  Kadira._wrapAsync = Meteor.wrapAsync;\n} else {\n  Kadira._wrapAsync = Meteor._wrapAsync;\n}\n\nif(Meteor.isServer) {\n  var EventEmitter = Npm.require('events').EventEmitter;\n  var eventBus = new EventEmitter();\n  eventBus.setMaxListeners(0);\n\n  var buildArgs = function(args) {\n    args = _.toArray(args);\n    var eventName = args[0] + '-' + args[1];\n    var args = args.slice(2);\n    args.unshift(eventName);\n    return args;\n  };\n  \n  Kadira.EventBus = {};\n  ['on', 'emit', 'removeListener', 'removeAllListeners'].forEach(function(m) {\n    Kadira.EventBus[m] = function() {\n      var args = buildArgs(arguments);\n      return eventBus[m].apply(eventBus, args);\n    };\n  });\n}","var commonErrRegExps = [\n  /connection timeout\\. no (\\w*) heartbeat received/i,\n  /INVALID_STATE_ERR/i,\n];\n\nKadira.errorFilters = {\n  filterValidationErrors: function(type, message, err) {\n    if(err && err instanceof Meteor.Error) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n\n  filterCommonMeteorErrors: function(type, message) {\n    for(var lc=0; lc<commonErrRegExps.length; lc++) {\n      var regExp = commonErrRegExps[lc];\n      if(regExp.test(message)) {\n        return false;\n      }\n    }\n    return true;\n  }\n};","Kadira.send = function (payload, path, callback) {\n  if(!Kadira.connected)  {\n    throw new Error(\"You need to connect with Kadira first, before sending messages!\");\n  }\n\n  path = (path.substr(0, 1) != '/')? \"/\" + path : path;\n  var endpoint = Kadira.options.endpoint + path;\n  var retryCount = 0;\n  var retry = new Retry({\n    minCount: 1,\n    minTimeout: 0,\n    baseTimeout: 1000*5,\n    maxTimeout: 1000*60,\n  });\n\n  var sendFunction = Kadira._getSendFunction();\n  tryToSend();\n\n  function tryToSend(err) {\n    if(retryCount < 5) {\n      retry.retryLater(retryCount++, send);\n    } else {\n      console.warn('Error sending error traces to Kadira server');\n      if(callback) callback(err);\n    }\n  }\n\n  function send() {\n    sendFunction(endpoint, payload, function(err, content, statusCode) {\n      if(err) {\n        tryToSend(err);\n      } else if(statusCode == 200){\n        if(callback) callback(null, content);\n      } else {\n        if(callback) callback(new Meteor.Error(statusCode, content));\n      }\n    });\n  }\n};\n\nKadira._getSendFunction = function() {\n  return (Meteor.isServer)? Kadira._serverSend : Kadira._clientSend;\n};\n\nKadira._clientSend = function (endpoint, payload, callback) {\n  httpRequest('POST', endpoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    content: JSON.stringify(payload)\n  }, callback);\n}\n\nKadira._serverSend = function (endpoint, payload, callback) {\n  callback = callback || function() {};\n  var Fiber = Npm.require('fibers');\n  new Fiber(function() {\n    var httpOptions = {\n      data: payload,\n      headers: Kadira.options.authHeaders\n    };\n\n    HTTP.call('POST', endpoint, httpOptions, function(err, res) {\n      if(res) {\n        var content = (res.statusCode == 200)? res.data : res.content;\n        callback(null, content, res.statusCode);\n      } else {\n        callback(err);\n      }\n    });\n  }).run();\n}\n","BaseErrorModel = function(options) {\n  this._filters = [];\n};\n\nBaseErrorModel.prototype.addFilter = function(filter) {\n  if(typeof filter === 'function') {\n    this._filters.push(filter);\n  } else {\n    throw new Error(\"Error filter must be a function\");\n  }\n};\n\nBaseErrorModel.prototype.removeFilter = function(filter) {\n  var index = this._filters.indexOf(filter);\n  if(index >= 0) {\n    this._filters.splice(index, 1);\n  }\n};\n\nBaseErrorModel.prototype.applyFilters = function(type, message, error, subType) {\n  for(var lc=0; lc<this._filters.length; lc++) {\n    var filter = this._filters[lc];\n    try {\n      var validated = filter(type, message, error, subType);\n      if(!validated) return false;\n    } catch (ex) {\n      // we need to remove this filter\n      // we may ended up in a error cycle\n      this._filters.splice(lc, 1);\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);\n    }\n  }\n\n  return true;\n};","KadiraModel = function() {\n\n};\n\nKadiraModel.prototype._getDateId = function(timestamp) {\n  var remainder = timestamp % (1000 * 60);\n  var dateId = timestamp - remainder;\n  return dateId;\n};","var METHOD_METRICS_FIELDS = ['wait', 'db', 'http', 'email', 'async', 'compute', 'total'];\n\nMethodsModel = function (metricsThreshold) {\n  var self = this;\n\n  this.methodMetricsByMinute = Object.create(null);\n  this.errorMap = Object.create(null);\n\n  this._metricsThreshold = Object.assign({\n    \"wait\": 100,\n    \"db\": 100,\n    \"http\": 1000,\n    \"email\": 100,\n    \"async\": 100,\n    \"compute\": 100,\n    \"total\": 200\n  }, metricsThreshold || Object.create(null));\n\n  //store max time elapsed methods for each method, event(metrics-field)\n  this.maxEventTimesForMethods = Object.create(null);\n\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60, //process traces every minute\n    maxTotalPoints: 30, //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n  });\n\n  this.tracerStore.start();\n};\n\nObject.assign(MethodsModel.prototype, KadiraModel.prototype);\n\nMethodsModel.prototype._getMetrics = function(timestamp, method) {\n  var dateId = this._getDateId(timestamp);\n\n  if(!this.methodMetricsByMinute[dateId]) {\n    this.methodMetricsByMinute[dateId] = {\n      methods: Object.create(null),\n    };\n  }\n\n  var methods = this.methodMetricsByMinute[dateId].methods;\n\n  //initialize method\n  if(!methods[method]) {\n    methods[method] = {\n      count: 0,\n      errors: 0,\n      fetchedDocSize: 0,\n      sentMsgSize: 0\n    };\n\n    METHOD_METRICS_FIELDS.forEach(function(field) {\n      methods[method][field] = 0;\n    });\n  }\n\n  return this.methodMetricsByMinute[dateId].methods[method];\n};\n\nMethodsModel.prototype.setStartTime = function(timestamp) {\n  this.metricsByMinute[dateId].startTime = timestamp;\n}\n\nMethodsModel.prototype.processMethod = function(methodTrace) {\n  var dateId = this._getDateId(methodTrace.at);\n\n  //append metrics to previous values\n  this._appendMetrics(dateId, methodTrace);\n  if(methodTrace.errored) {\n    this.methodMetricsByMinute[dateId].methods[methodTrace.name].errors ++\n  }\n\n  this.tracerStore.addTrace(methodTrace);\n};\n\nMethodsModel.prototype._appendMetrics = function(id, methodTrace) {\n  var methodMetrics = this._getMetrics(id, methodTrace.name)\n\n  // startTime needs to be converted into serverTime before sending\n  if(!this.methodMetricsByMinute[id].startTime){\n    this.methodMetricsByMinute[id].startTime = methodTrace.at;\n  }\n\n  //merge\n  METHOD_METRICS_FIELDS.forEach(function(field) {\n    var value = methodTrace.metrics[field];\n    if(value > 0) {\n      methodMetrics[field] += value;\n    }\n  });\n\n  methodMetrics.count++;\n  this.methodMetricsByMinute[id].endTime = methodTrace.metrics.at;\n};\n\nMethodsModel.prototype.trackDocSize = function(method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.fetchedDocSize += size;\n}\n\nMethodsModel.prototype.trackMsgSize = function(method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.sentMsgSize += size;\n}\n\n/*\n  There are two types of data\n\n  1. methodMetrics - metrics about the methods (for every 10 secs)\n  2. methodRequests - raw method request. normally max, min for every 1 min and errors always\n*/\nMethodsModel.prototype.buildPayload = function(buildDetailedInfo) {\n  var payload = {\n    methodMetrics: [],\n    methodRequests: []\n  };\n\n  //handling metrics\n  var methodMetricsByMinute = this.methodMetricsByMinute;\n  this.methodMetricsByMinute = Object.create(null);\n\n  //create final paylod for methodMetrics\n  for(var key in methodMetricsByMinute) {\n    var methodMetrics = methodMetricsByMinute[key];\n    // converting startTime into the actual serverTime\n    var startTime = methodMetrics.startTime;\n    methodMetrics.startTime = Kadira.syncedDate.syncTime(startTime);\n\n    for(var methodName in methodMetrics.methods) {\n      METHOD_METRICS_FIELDS.forEach(function(field) {\n        methodMetrics.methods[methodName][field] /=\n          methodMetrics.methods[methodName].count;\n      });\n    }\n\n    payload.methodMetrics.push(methodMetricsByMinute[key]);\n  }\n\n  //collect traces and send them with the payload\n  payload.methodRequests = this.tracerStore.collectTraces();\n\n  return payload;\n};\n","var logger = Npm.require('debug')('kadira:pubsub');\n\nimport { size, each, get } from \"../utils.js\";\n\nPubsubModel = function() {\n  this.metricsByMinute = Object.create(null);\n  this.subscriptions = Object.create(null);\n\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60, //process traces every minute\n    maxTotalPoints: 30, //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n  });\n\n  this.tracerStore.start();\n}\n\nPubsubModel.prototype._trackSub = function(session, msg) {\n  logger('SUB:', session.id, msg.id, msg.name, msg.params);\n  var publication = this._getPublicationName(msg.name);\n  var subscriptionId = msg.id;\n  var timestamp = Ntp._now();\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.subs++;\n  this.subscriptions[msg.id] = {\n    // We use localTime here, because when we used synedTime we might get\n    // minus or more than we've expected\n    //   (before serverTime diff changed overtime)\n    startTime: timestamp,\n    publication: publication,\n    params: msg.params,\n    id: msg.id\n  };\n\n  //set session startedTime\n  session._startTime = session._startTime || timestamp;\n};\n\nObject.assign(PubsubModel.prototype, KadiraModel.prototype);\n\nPubsubModel.prototype._trackUnsub = function(session, sub) {\n  logger('UNSUB:', session.id, sub._subscriptionId);\n  var publication = this._getPublicationName(sub._name);\n  var subscriptionId = sub._subscriptionId;\n  var subscriptionState = this.subscriptions[subscriptionId];\n\n  var startTime = null;\n  //sometime, we don't have these states\n  if(subscriptionState) {\n    startTime = subscriptionState.startTime;\n  } else {\n    //if this is null subscription, which is started automatically\n    //hence, we don't have a state\n    startTime = session._startTime;\n  }\n\n  //in case, we can't get the startTime\n  if(startTime) {\n    var timestamp = Ntp._now();\n    var metrics = this._getMetrics(timestamp, publication);\n    //track the count\n    if(sub._name != null) {\n      // we can't track subs for `null` publications.\n      // so we should not track unsubs too\n      metrics.unsubs++;\n    }\n    //use the current date to get the lifeTime of the subscription\n    metrics.lifeTime += timestamp - startTime;\n    //this is place we can clean the subscriptionState if exists\n    delete this.subscriptions[subscriptionId];\n  }\n};\n\nPubsubModel.prototype._trackReady = function(session, sub, trace) {\n  logger('READY:', session.id, sub._subscriptionId);\n  //use the current time to track the response time\n  var publication = this._getPublicationName(sub._name);\n  var subscriptionId = sub._subscriptionId;\n  var timestamp = Ntp._now();\n  var metrics = this._getMetrics(timestamp, publication);\n\n  var subscriptionState = this.subscriptions[subscriptionId];\n  if(subscriptionState && !subscriptionState.readyTracked) {\n    metrics.resTime += timestamp - subscriptionState.startTime;\n    subscriptionState.readyTracked = true;\n  }\n\n  if(trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._trackError = function(session, sub, trace) {\n  logger('ERROR:', session.id, sub._subscriptionId);\n  //use the current time to track the response time\n  var publication = this._getPublicationName(sub._name);\n  var subscriptionId = sub._subscriptionId;\n  var timestamp = Ntp._now();\n  var metrics = this._getMetrics(timestamp, publication);\n\n  metrics.errors++;\n\n  if(trace) {\n    this.tracerStore.addTrace(trace);\n  }\n};\n\nPubsubModel.prototype._getMetrics = function(timestamp, publication) {\n  var dateId = this._getDateId(timestamp);\n\n  if(!this.metricsByMinute[dateId]) {\n    this.metricsByMinute[dateId] = {\n      // startTime needs to be convert to serverTime before sending to the server\n      startTime: timestamp,\n      pubs: Object.create(null)\n    };\n  }\n\n  if(!this.metricsByMinute[dateId].pubs[publication]) {\n    this.metricsByMinute[dateId].pubs[publication] = {\n      subs: 0,\n      unsubs: 0,\n      resTime: 0,\n      activeSubs: 0,\n      activeDocs: 0,\n      lifeTime: 0,\n      totalObservers: 0,\n      cachedObservers: 0,\n      createdObservers: 0,\n      deletedObservers: 0,\n      errors: 0,\n      observerLifetime: 0,\n      polledDocuments: 0,\n      oplogUpdatedDocuments: 0,\n      oplogInsertedDocuments: 0,\n      oplogDeletedDocuments: 0,\n      initiallyAddedDocuments: 0,\n      liveAddedDocuments: 0,\n      liveChangedDocuments: 0,\n      liveRemovedDocuments: 0,\n      polledDocSize: 0,\n      fetchedDocSize: 0,\n      initiallyFetchedDocSize: 0,\n      liveFetchedDocSize: 0,\n      initiallySentMsgSize: 0,\n      liveSentMsgSize: 0\n    };\n  }\n\n  return this.metricsByMinute[dateId].pubs[publication];\n};\n\nPubsubModel.prototype._getPublicationName = function(name) {\n  return name || \"null(autopublish)\";\n};\n\nPubsubModel.prototype._getSubscriptionInfo = function() {\n  var self = this;\n  var activeSubs = Object.create(null);\n  var activeDocs = Object.create(null);\n  var totalDocsSent = Object.create(null);\n  var totalDataSent = Object.create(null);\n  var totalObservers = Object.create(null);\n  var cachedObservers = Object.create(null);\n\n  each(Meteor.server.sessions, session => {\n    each(session._namedSubs, countSubData);\n    each(session._universalSubs, countSubData);\n  });\n\n  var avgObserverReuse = Object.create(null);\n  _.each(totalObservers, function(value, publication) {\n    avgObserverReuse[publication] = cachedObservers[publication] / totalObservers[publication];\n  });\n\n  return {\n    activeSubs: activeSubs,\n    activeDocs: activeDocs,\n    avgObserverReuse: avgObserverReuse\n  };\n\n  function countSubData (sub) {\n    var publication = self._getPublicationName(sub._name);\n    countSubscriptions(sub, publication);\n    countDocuments(sub, publication);\n    countObservers(sub, publication);\n  }\n\n  function countSubscriptions (sub, publication) {\n    activeSubs[publication] = activeSubs[publication] || 0;\n    activeSubs[publication]++;\n  }\n\n  function countDocuments (sub, publication) {\n    activeDocs[publication] = activeDocs[publication] || 0;\n    each(sub._documents, document => {\n      activeDocs[publication] += size(document);\n    });\n  }\n\n  function countObservers(sub, publication) {\n    totalObservers[publication] = totalObservers[publication] || 0;\n    cachedObservers[publication] = cachedObservers[publication] || 0;\n\n    totalObservers[publication] += sub._totalObservers;\n    cachedObservers[publication] += sub._cachedObservers;\n  }\n}\n\nPubsubModel.prototype.buildPayload = function(buildDetailInfo) {\n  var metricsByMinute = this.metricsByMinute;\n  this.metricsByMinute = Object.create(null);\n\n  var payload = {\n    pubMetrics: []\n  };\n\n  var subscriptionData = this._getSubscriptionInfo();\n  var activeSubs = subscriptionData.activeSubs;\n  var activeDocs = subscriptionData.activeDocs;\n  var avgObserverReuse = subscriptionData.avgObserverReuse;\n\n  //to the averaging\n  for(var dateId in metricsByMinute) {\n    var dateMetrics = metricsByMinute[dateId];\n    // We need to convert startTime into actual serverTime\n    dateMetrics.startTime = Kadira.syncedDate.syncTime(dateMetrics.startTime);\n\n    for(var publication in metricsByMinute[dateId].pubs) {\n      var singlePubMetrics = metricsByMinute[dateId].pubs[publication];\n      // We only calculate resTime for new subscriptions\n      singlePubMetrics.resTime /= singlePubMetrics.subs;\n      singlePubMetrics.resTime = singlePubMetrics.resTime || 0;\n      // We only track lifeTime in the unsubs\n      singlePubMetrics.lifeTime /= singlePubMetrics.unsubs;\n      singlePubMetrics.lifeTime = singlePubMetrics.lifeTime || 0;\n\n      // Count the average for observer lifetime\n      if(singlePubMetrics.deletedObservers > 0) {\n        singlePubMetrics.observerLifetime /= singlePubMetrics.deletedObservers;\n      }\n\n      // If there are two ore more dateIds, we will be using the currentCount for all of them.\n      // We can come up with a better solution later on.\n      singlePubMetrics.activeSubs = activeSubs[publication] || 0;\n      singlePubMetrics.activeDocs = activeDocs[publication] || 0;\n      singlePubMetrics.avgObserverReuse = avgObserverReuse[publication] || 0;\n    }\n\n    payload.pubMetrics.push(metricsByMinute[dateId]);\n  }\n\n  //collect traces and send them with the payload\n  payload.pubRequests = this.tracerStore.collectTraces();\n\n  return payload;\n};\n\nPubsubModel.prototype.incrementHandleCount = function(trace, isCached) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(trace.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  var session = get(Meteor.server.sessions, trace.session);\n  if (session) {\n    var sub = get(session._namedSubs, trace.id);\n    if (sub) {\n      sub._totalObservers = sub._totalObservers || 0;\n      sub._cachedObservers = sub._cachedObservers || 0;\n    }\n  }\n  // not sure, we need to do this? But I don't need to break the however\n  sub = sub || {_totalObservers:0 , _cachedObservers: 0};\n\n  publication.totalObservers++;\n  sub._totalObservers++;\n  if(isCached) {\n    publication.cachedObservers++;\n    sub._cachedObservers++;\n  }\n}\n\nPubsubModel.prototype.trackCreatedObserver = function(info) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  publication.createdObservers++;\n}\n\nPubsubModel.prototype.trackDeletedObserver = function(info) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  publication.deletedObservers++;\n  publication.observerLifetime += (new Date()).getTime() - info.startTime;\n}\n\nPubsubModel.prototype.trackDocumentChanges = function(info, op) {\n  // It's possibel that info to be null\n  // Specially when getting changes at the very begining.\n  // This may be false, but nice to have a check\n  if(!info) {\n    return\n  }\n\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  if(op.op === \"d\") {\n    publication.oplogDeletedDocuments++;\n  } else if(op.op === \"i\") {\n    publication.oplogInsertedDocuments++;\n  } else if(op.op === \"u\") {\n    publication.oplogUpdatedDocuments++;\n  }\n}\n\nPubsubModel.prototype.trackPolledDocuments = function(info, count) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n  publication.polledDocuments += count;\n}\n\nPubsubModel.prototype.trackLiveUpdates = function(info, type, count) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(info.name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if(type === \"_addPublished\") {\n    publication.liveAddedDocuments += count;\n  } else if(type === \"_removePublished\") {\n    publication.liveRemovedDocuments += count;\n  } else if(type === \"_changePublished\") {\n    publication.liveChangedDocuments += count;\n  } else if(type === \"_initialAdds\") {\n    publication.initiallyAddedDocuments += count;\n  } else {\n    throw new Error(\"Kadira: Unknown live update type\");\n  }\n}\n\nPubsubModel.prototype.trackDocSize = function(name, type, size) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if(type === \"polledFetches\") {\n    publication.polledDocSize += size;\n  } else if(type === \"liveFetches\") {\n    publication.liveFetchedDocSize += size;\n  } else if(type === \"cursorFetches\") {\n    publication.fetchedDocSize += size;\n  } else if(type === \"initialFetches\") {\n    publication.initiallyFetchedDocSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n}\n\nPubsubModel.prototype.trackMsgSize = function(name, type, size) {\n  var timestamp = Ntp._now();\n  var publicationName = this._getPublicationName(name);\n  var publication = this._getMetrics(timestamp, publicationName);\n\n  if(type === \"liveSent\") {\n    publication.liveSentMsgSize += size;\n  } else if(type === \"initialSent\") {\n    publication.initiallySentMsgSize += size;\n  } else {\n    throw new Error(\"Kadira: Unknown docs fetched type\");\n  }\n}\n","import { size } from \"../utils.js\";\n\nvar os = Npm.require('os');\nvar usage = Npm.require('pidusage');\nvar EventLoopMonitor = Npm.require('evloop-monitor');\n\nSystemModel = function () {\n  var self = this;\n  this.startTime = Ntp._now();\n  this.newSessions = 0;\n  this.sessionTimeout = 1000 * 60 * 30; //30 min\n\n  this.usageLookup = Kadira._wrapAsync(usage.stat.bind(usage));\n  this.evloopMonitor = new EventLoopMonitor(200);\n  this.evloopMonitor.start();\n}\n\nObject.assign(SystemModel.prototype, KadiraModel.prototype);\n\nSystemModel.prototype.buildPayload = function() {\n  var metrics = {};\n  var now = Ntp._now();\n  metrics.startTime = Kadira.syncedDate.syncTime(this.startTime);\n  metrics.endTime = Kadira.syncedDate.syncTime(now);\n\n  metrics.sessions = size(Meteor.server.sessions);\n  metrics.memory = process.memoryUsage().rss / (1024*1024);\n  metrics.newSessions = this.newSessions;\n  this.newSessions = 0;\n\n  var usage = this.getUsage();\n  metrics.pcpu = usage.cpu;\n  if(usage.cpuInfo) {\n    metrics.cputime = usage.cpuInfo.cpuTime;\n    metrics.pcpuUser = usage.cpuInfo.pcpuUser;\n    metrics.pcpuSystem = usage.cpuInfo.pcpuSystem;\n  }\n\n  // track eventloop blockness\n  metrics.pctEvloopBlock = this.evloopMonitor.status().pctBlock;\n\n  this.startTime = now;\n  return {systemMetrics: [metrics]};\n};\n\nSystemModel.prototype.getUsage = function() {\n  var usage = this.usageLookup(process.pid) || {};\n  Kadira.docSzCache.setPcpu(usage.cpu);\n  return usage;\n};\n\nSystemModel.prototype.handleSessionActivity = function(msg, session) {\n  if(msg.msg === 'connect' && !msg.session) {\n    this.countNewSession(session);\n  } else if(['sub', 'method'].indexOf(msg.msg) != -1) {\n    if(!this.isSessionActive(session)) {\n      this.countNewSession(session);\n    }\n  }\n  session._activeAt = Date.now();\n}\n\nSystemModel.prototype.countNewSession = function(session) {\n  if(!isLocalAddress(session.socket)) {\n    this.newSessions++;\n  }\n}\n\nSystemModel.prototype.isSessionActive = function(session) {\n  var inactiveTime = Date.now() - session._activeAt;\n  return inactiveTime < this.sessionTimeout;\n}\n\n// ------------------------------------------------------------------------- //\n\n// http://regex101.com/r/iF3yR3/2\nvar isLocalHostRegex = /^(?:.*\\.local|localhost)(?:\\:\\d+)?|127(?:\\.\\d{1,3}){3}|192\\.168(?:\\.\\d{1,3}){2}|10(?:\\.\\d{1,3}){3}|172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2}$/;\n\n// http://regex101.com/r/hM5gD8/1\nvar isLocalAddressRegex = /^127(?:\\.\\d{1,3}){3}|192\\.168(?:\\.\\d{1,3}){2}|10(?:\\.\\d{1,3}){3}|172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2}$/;\n\nfunction isLocalAddress (socket) {\n  var host = socket.headers['host'];\n  if(host) return isLocalHostRegex.test(host);\n  var address = socket.headers['x-forwarded-for'] || socket.remoteAddress;\n  if(address) return isLocalAddressRegex.test(address);\n}\n","ErrorModel = function (appId) {\n  BaseErrorModel.call(this);\n  var self = this;\n  this.appId = appId;\n  this.errors = {};\n  this.startTime = Date.now();\n  this.maxErrors = 10;\n}\n\nObject.assign(ErrorModel.prototype, KadiraModel.prototype);\nObject.assign(ErrorModel.prototype, BaseErrorModel.prototype);\n\nErrorModel.prototype.buildPayload = function() {\n  var metrics = _.values(this.errors);\n  this.startTime = Ntp._now();\n\n  _.each(metrics, function (metric) {\n    metric.startTime = Kadira.syncedDate.syncTime(metric.startTime)\n  });\n\n  this.errors = {};\n  return {errors: metrics};\n};\n\nErrorModel.prototype.errorCount = function () {\n  return _.values(this.errors).length;\n};\n\nErrorModel.prototype.trackError = function(ex, trace) {\n  var key = trace.type + ':' + ex.message;\n  if(this.errors[key]) {\n    this.errors[key].count++;\n  } else if (this.errorCount() < this.maxErrors) {\n    var errorDef = this._formatError(ex, trace);\n    if(this.applyFilters(errorDef.type, errorDef.name, ex, errorDef.subType)) {\n      this.errors[key] = this._formatError(ex, trace);\n    }\n  }\n};\n\nErrorModel.prototype._formatError = function(ex, trace) {\n  var time = Date.now();\n  var stack = ex.stack;\n\n  // to get Meteor's Error details\n  if(ex.details) {\n    stack = \"Details: \" + ex.details + \"\\r\\n\" + stack;\n  }\n\n  // Update trace's error event with the next stack\n  var errorEvent = trace.events && trace.events[trace.events.length -1];\n  var errorObject = errorEvent && errorEvent[2] && errorEvent[2].error;\n\n  if(errorObject) {\n    errorObject.stack = stack;\n  }\n\n  return {\n    appId: this.appId,\n    name: ex.message,\n    type: trace.type,\n    startTime: time,\n    subType: trace.subType || trace.name,\n    trace: trace,\n    stacks: [{stack: stack}],\n    count: 1,\n  }\n};\n","var Jobs = Kadira.Jobs = {};\n\nJobs.getAsync = function(id, callback) {\n  Kadira.coreApi.getJob(id)\n    .then(function(data) {\n      callback(null, data);\n    })\n    .catch(function(err) {\n      callback(err)\n    });\n};\n\n\nJobs.setAsync = function(id, changes, callback) {\n  Kadira.coreApi.updateJob(id, changes)\n    .then(function(data) {\n      callback(null, data);\n    })\n    .catch(function(err) {\n      callback(err)\n    });\n};\n\nJobs.set = Kadira._wrapAsync(Jobs.setAsync);\nJobs.get = Kadira._wrapAsync(Jobs.getAsync);\n","// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n\n//TODO: remove this class and use Meteor Retry in a later version of meteor.\n\nRetry = function (options) {\n  var self = this;\n  Object.assign(self, _.defaults(_.clone(options || {}), {\n    baseTimeout: 1000, // 1 second\n    exponent: 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout: 5 * 60000, // 5 minutes\n    minTimeout: 10,\n    minCount: 2,\n    fuzz: 0.5 // +- 25%\n  }));\n  self.retryTimer = null;\n};\n\nObject.assign(Retry.prototype, {\n\n  // Reset a pending retry, if any.\n  clear: function () {\n    var self = this;\n    if(self.retryTimer)\n      clearTimeout(self.retryTimer);\n    self.retryTimer = null;\n  },\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout: function (count) {\n    var self = this;\n\n    if(count < self.minCount)\n      return self.minTimeout;\n\n    var timeout = Math.min(\n      self.maxTimeout,\n      self.baseTimeout * Math.pow(self.exponent, count));\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    timeout = timeout * ((Random.fraction() * self.fuzz) +\n                         (1 - self.fuzz/2));\n    return Math.ceil(timeout);\n  },\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater: function (count, fn) {\n    var self = this;\n    var timeout = self._timeout(count);\n    if(self.retryTimer)\n      clearTimeout(self.retryTimer);\n\n    self.retryTimer = setTimeout(fn, timeout);\n    return timeout;\n  }\n\n});\n","var Fiber = Npm.require('fibers');\n\nexport function size(collection) {\n  if (collection instanceof Map ||\n      collection instanceof Set) {\n    return collection.size;\n  }\n  return _.size(collection);\n}\n\nexport function each(collection, callback) {\n  if (collection instanceof Map ||\n      collection instanceof Set) {\n    collection.forEach(callback);\n  } else {\n    _.each(collection, callback);\n  }\n}\n\nexport function get(collection, key) {\n  if (collection instanceof Map) {\n    return collection.get(key);\n  }\n  return collection[key];\n}\n\nHaveAsyncCallback = function(args) {\n  var lastArg = args[args.length -1];\n  return (typeof lastArg) == 'function';\n};\n\nUniqueId = function(start) {\n  this.id = 0;\n}\n\nUniqueId.prototype.get = function() {\n  return \"\" + this.id++;\n};\n\nDefaultUniqueId = new UniqueId();\n\n// Optimized version of apply which tries to call as possible as it can\n// Then fall back to apply\n// This is because, v8 is very slow to invoke apply.\nOptimizedApply = function OptimizedApply(context, fn, args) {\n  var a = args;\n  switch(a.length) {\n    case 0:\n      return fn.call(context);\n    case 1:\n      return fn.call(context, a[0]);\n    case 2:\n      return fn.call(context, a[0], a[1]);\n    case 3:\n      return fn.call(context, a[0], a[1], a[2]);\n    case 4:\n      return fn.call(context, a[0], a[1], a[2], a[3]);\n    case 5:\n      return fn.call(context, a[0], a[1], a[2], a[3], a[4]);\n    default:\n      return fn.apply(context, a);\n  }\n}\n","var logger = getLogger();\n\nNtp = function (endpoint) {\n  this.setEndpoint(endpoint);\n  this.diff = 0;\n  this.synced = false;\n  this.reSyncCount = 0;\n  this.reSync = new Retry({\n    baseTimeout: 1000*60,\n    maxTimeout: 1000*60*10,\n    minCount: 0\n  });\n}\n\nNtp._now = function() {\n  var now = Date.now();\n  if(typeof now == 'number') {\n    return now;\n  } else if(now instanceof Date) {\n    // some extenal JS libraries override Date.now and returns a Date object\n    // which directly affect us. So we need to prepare for that\n    return now.getTime();\n  } else {\n    // trust me. I've seen now === undefined\n    return (new Date()).getTime();\n  }\n};\n\nNtp.prototype.setEndpoint = function(endpoint) {\n  this.endpoint = endpoint + '/simplentp/sync';\n};\n\nNtp.prototype.getTime = function() {\n  return Ntp._now() + Math.round(this.diff);\n};\n\nNtp.prototype.syncTime = function(localTime) {\n  return localTime + Math.ceil(this.diff);\n};\n\nNtp.prototype.sync = function() {\n  logger('init sync');\n  var self = this;\n  var retryCount = 0;\n  var retry = new Retry({\n    baseTimeout: 1000*20,\n    maxTimeout: 1000*60,\n    minCount: 1,\n    minTimeout: 0\n  });\n  syncTime();\n\n  function syncTime () {\n    if(retryCount<5) {\n      logger('attempt time sync with server', retryCount);\n      // if we send 0 to the retryLater, cacheDns will run immediately\n      retry.retryLater(retryCount++, cacheDns);\n    } else {\n      logger('maximum retries reached');\n      self.reSync.retryLater(self.reSyncCount++, function () {\n        var args = [].slice.call(arguments);\n        self.sync.apply(self, args);\n      });\n    }\n  }\n\n  // first attempt is to cache dns. So, calculation does not\n  // include DNS resolution time\n  function cacheDns () {\n    self.getServerTime(function(err) {\n      if(!err) {\n        calculateTimeDiff();\n      } else {\n        syncTime();\n      }\n    });\n  }\n\n  function calculateTimeDiff () {\n    var clientStartTime = (new Date()).getTime();\n    self.getServerTime(function(err, serverTime) {\n      if(!err && serverTime) {\n        // (Date.now() + clientStartTime)/2 : Midpoint between req and res\n        var networkTime = ((new Date()).getTime() - clientStartTime)/2\n        var serverStartTime = serverTime - networkTime;\n        self.diff = serverStartTime - clientStartTime;\n        self.synced = true;\n        // we need to send 1 into retryLater.\n        self.reSync.retryLater(self.reSyncCount++, function () {\n          var args = [].slice.call(arguments);\n          self.sync.apply(self, args);\n        });\n        logger('successfully updated diff value', self.diff);\n      } else {\n        syncTime();\n      }\n    });\n  }\n}\n\nNtp.prototype.getServerTime = function(callback) {\n  var self = this;\n\n  if(Meteor.isServer) {\n    var Fiber = Npm.require('fibers');\n    new Fiber(function() {\n      HTTP.get(self.endpoint, function (err, res) {\n        if(err) {\n          callback(err);\n        } else {\n          var serverTime = parseInt(res.content);\n          callback(null, serverTime);\n        }\n      });\n    }).run();\n  } else {\n    httpRequest('GET', self.endpoint, function(err, res) {\n      if (err) {\n        callback(err);\n      } else {\n        var serverTime = parseInt(res.content);\n        callback(null, serverTime);\n      }\n    });\n  }\n};\n\nfunction getLogger() {\n  if(Meteor.isServer) {\n    return Npm.require('debug')(\"kadira:ntp\");\n  } else {\n    return function(message) {\n      var canLogKadira =\n        Meteor._localStorage.getItem('LOG_KADIRA') !== null\n        && typeof console !== 'undefined';\n\n      if(canLogKadira) {\n        if(message) {\n          message = \"kadira:ntp \" + message;\n          arguments[0] = message;\n        }\n        console.log.apply(console, arguments);\n      }\n    }\n  }\n}\n","var WAITON_MESSAGE_FIELDS = ['msg', 'id', 'method', 'name', 'waitTime'];\n\n// This is way how we can build waitTime and it's breakdown\nWaitTimeBuilder = function() {\n  this._waitListStore = {};\n  this._currentProcessingMessages = {};\n  this._messageCache = {};\n};\n\nWaitTimeBuilder.prototype.register = function(session, msgId) {\n  var self = this;\n  var mainKey = self._getMessageKey(session.id, msgId);\n\n  var inQueue = session.inQueue || [];\n  if(typeof inQueue.toArray === 'function') {\n    // latest version of Meteor uses a double-ended-queue for the inQueue\n    // info: https://www.npmjs.com/package/double-ended-queue\n    inQueue = inQueue.toArray();\n  }\n\n  var waitList = inQueue.map(function(msg) {\n    var key = self._getMessageKey(session.id, msg.id);\n    return self._getCacheMessage(key, msg);\n  });\n\n  waitList = waitList || [];\n\n  //add currently processing ddp message if exists\n  var currentlyProcessingMessage = this._currentProcessingMessages[session.id];\n  if(currentlyProcessingMessage) {\n    var key = self._getMessageKey(session.id, currentlyProcessingMessage.id);\n    waitList.unshift(this._getCacheMessage(key, currentlyProcessingMessage));\n  }\n\n  this._waitListStore[mainKey] = waitList;\n};\n\nWaitTimeBuilder.prototype.build = function(session, msgId) {\n  var mainKey = this._getMessageKey(session.id, msgId);\n  var waitList = this._waitListStore[mainKey] || [];\n  delete this._waitListStore[mainKey];\n\n  var filteredWaitList =  waitList.map(this._cleanCacheMessage.bind(this));\n  return filteredWaitList;\n};\n\nWaitTimeBuilder.prototype._getMessageKey = function(sessionId, msgId) {\n  return sessionId + \"::\" + msgId;\n};\n\nWaitTimeBuilder.prototype._getCacheMessage = function(key, msg) {\n  var self = this;\n  var cachedMessage = self._messageCache[key];\n  if(!cachedMessage) {\n    self._messageCache[key] = cachedMessage = _.pick(msg, WAITON_MESSAGE_FIELDS);\n    cachedMessage._key = key;\n    cachedMessage._registered = 1;\n  } else {\n    cachedMessage._registered++;\n  }\n\n  return cachedMessage;\n};\n\nWaitTimeBuilder.prototype._cleanCacheMessage = function(msg) {\n  msg._registered--;\n  if(msg._registered == 0) {\n    delete this._messageCache[msg._key];\n  }\n\n  // need to send a clean set of objects\n  // otherwise register can go with this\n  return _.pick(msg, WAITON_MESSAGE_FIELDS);\n};\n\nWaitTimeBuilder.prototype.trackWaitTime = function(session, msg, unblock) {\n  var self = this;\n  var started = Date.now();\n  self._currentProcessingMessages[session.id] = msg;\n\n  var unblocked = false;\n  var wrappedUnblock = function() {\n    if(!unblocked) {\n      var waitTime = Date.now() - started;\n      var key = self._getMessageKey(session.id, msg.id);\n      var cachedMessage = self._messageCache[key];\n      if(cachedMessage) {\n        cachedMessage.waitTime = waitTime;\n      }\n      delete self._currentProcessingMessages[session.id];\n      unblocked = true;\n      unblock();\n    }\n  };\n\n  return wrappedUnblock;\n};","// expose for testing purpose\nOplogCheck = {};\n\nOplogCheck._070 = function(cursorDescription) {\n  var options = cursorDescription.options;\n  if (options.limit) {\n    return {\n      code: \"070_LIMIT_NOT_SUPPORTED\",\n      reason: \"Meteor 0.7.0 does not support limit with oplog.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    }\n  };\n\n  var exists$ = _.any(cursorDescription.selector, function (value, field) {\n    if (field.substr(0, 1) === '$')\n      return true;\n  });\n\n  if(exists$) {\n    return {\n      code: \"070_$_NOT_SUPPORTED\",\n      reason: \"Meteor 0.7.0 supports only equal checks with oplog.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    }\n  };\n\n  var onlyScalers = _.all(cursorDescription.selector, function (value, field) {\n    return typeof value === \"string\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\" ||\n      value === null ||\n      value instanceof Meteor.Collection.ObjectID;\n  });\n\n  if(!onlyScalers) {\n    return {\n      code: \"070_ONLY_SCALERS\",\n      reason: \"Meteor 0.7.0 only supports scalers as comparators.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    }\n  }\n\n  return true;\n};\n\nOplogCheck._071 = function(cursorDescription) {\n  var options = cursorDescription.options;\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n  if (options.limit) {\n    return {\n      code: \"071_LIMIT_NOT_SUPPORTED\",\n      reason: \"Meteor 0.7.1 does not support limit with oplog.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    }\n  };\n\n  return true;\n};\n\n\nOplogCheck.env = function() {\n  if(!process.env.MONGO_OPLOG_URL) {\n    return {\n      code: \"NO_ENV\",\n      reason: \"You haven't added oplog support for your the Meteor app.\",\n      solution: \"Add oplog support for your Meteor app. see: http://goo.gl/Co1jJc\"\n    }\n  } else {\n    return true;\n  }\n};\n\nOplogCheck.disableOplog = function(cursorDescription) {\n  if(cursorDescription.options._disableOplog) {\n    return {\n      code: \"DISABLE_OPLOG\",\n      reason: \"You've disable oplog for this cursor explicitly with _disableOplog option.\"\n    };\n  } else {\n    return true;\n  }\n};\n\n// when creating Minimongo.Matcher object, if that's throws an exception\n// meteor won't do the oplog support\nOplogCheck.miniMongoMatcher = function(cursorDescription) {\n  if(Minimongo.Matcher) {\n    try {\n      var matcher = new Minimongo.Matcher(cursorDescription.selector);\n      return true;\n    } catch(ex) {\n      return {\n        code: \"MINIMONGO_MATCHER_ERROR\",\n        reason: \"There's something wrong in your mongo query: \" +  ex.message,\n        solution: \"Check your selector and change it accordingly.\"\n      };\n    }\n  } else {\n    // If there is no Minimongo.Matcher, we don't need to check this\n    return true;\n  }\n};\n\nOplogCheck.miniMongoSorter = function(cursorDescription) {\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n  if(Minimongo.Sorter && cursorDescription.options.sort) {\n    try {\n      var sorter = new Minimongo.Sorter(\n        cursorDescription.options.sort,\n        { matcher: matcher }\n      );\n      return true;\n    } catch(ex) {\n      return {\n        code: \"MINIMONGO_SORTER_ERROR\",\n        reason: \"Some of your sort specifiers are not supported: \" + ex.message,\n        solution: \"Check your sort specifiers and chage them accordingly.\"\n      }\n    }\n  } else {\n    return true;\n  }\n};\n\nOplogCheck.fields = function(cursorDescription) {\n  var options = cursorDescription.options;\n  if(options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n      return true;\n    } catch (e) {\n      if (e.name === \"MinimongoError\") {\n        return {\n          code: \"NOT_SUPPORTED_FIELDS\",\n          reason: \"Some of the field filters are not supported: \" + e.message,\n          solution: \"Try removing those field filters.\"\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n  return true;\n};\n\nOplogCheck.skip = function(cursorDescription) {\n  if(cursorDescription.options.skip) {\n    return {\n      code: \"SKIP_NOT_SUPPORTED\",\n      reason: \"Skip does not support with oplog.\",\n      solution: \"Try to avoid using skip. Use range queries instead: http://goo.gl/b522Av\"\n    };\n  }\n\n  return true;\n};\n\nOplogCheck.where = function(cursorDescription) {\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n  if(matcher.hasWhere()) {\n    return {\n      code: \"WHERE_NOT_SUPPORTED\",\n      reason: \"Meteor does not support queries with $where.\",\n      solution: \"Try to remove $where from your query. Use some alternative.\"\n    }\n  };\n\n  return true;\n};\n\nOplogCheck.geo = function(cursorDescription) {\n  var matcher = new Minimongo.Matcher(cursorDescription.selector);\n\n  if(matcher.hasGeoQuery()) {\n    return {\n      code: \"GEO_NOT_SUPPORTED\",\n      reason: \"Meteor does not support queries with geo partial operators.\",\n      solution: \"Try to remove geo partial operators from your query if possible.\"\n    }\n  };\n\n  return true;\n};\n\nOplogCheck.limitButNoSort = function(cursorDescription) {\n  var options = cursorDescription.options;\n\n  if((options.limit && !options.sort)) {\n    return {\n      code: \"LIMIT_NO_SORT\",\n      reason: \"Meteor oplog implementation does not support limit without a sort specifier.\",\n      solution: \"Try adding a sort specifier.\"\n    }\n  };\n\n  return true;\n};\n\nOplogCheck.olderVersion = function(cursorDescription, driver) {\n  if(driver && !driver.constructor.cursorSupported) {\n    return {\n      code: \"OLDER_VERSION\",\n      reason: \"Your Meteor version does not have oplog support.\",\n      solution: \"Upgrade your app to Meteor version 0.7.2 or later.\"\n    };\n  }\n  return true;\n};\n\nOplogCheck.gitCheckout = function(cursorDescription, driver) {\n  if(!Meteor.release) {\n    return {\n      code: \"GIT_CHECKOUT\",\n      reason: \"Seems like your Meteor version is based on a Git checkout and it doesn't have the oplog support.\",\n      solution: \"Try to upgrade your Meteor version.\"\n    };\n  }\n  return true;\n};\n\nvar preRunningMatchers = [\n  OplogCheck.env,\n  OplogCheck.disableOplog,\n  OplogCheck.miniMongoMatcher\n];\n\nvar globalMatchers = [\n  OplogCheck.fields,\n  OplogCheck.skip,\n  OplogCheck.where,\n  OplogCheck.geo,\n  OplogCheck.limitButNoSort,\n  OplogCheck.miniMongoSorter,\n  OplogCheck.olderVersion,\n  OplogCheck.gitCheckout\n];\n\nvar versionMatchers = [\n  [/^0\\.7\\.1/, OplogCheck._071],\n  [/^0\\.7\\.0/, OplogCheck._070],\n];\n\nKadira.checkWhyNoOplog = function(cursorDescription, observerDriver) {\n  if(typeof Minimongo == 'undefined') {\n    return {\n      code: \"CANNOT_DETECT\",\n      reason: \"You are running an older Meteor version and Kadira can't check oplog state.\",\n      solution: \"Try updating your Meteor app\"\n    }\n  }\n\n  var result = runMatchers(preRunningMatchers, cursorDescription, observerDriver);\n  if(result !== true) {\n    return result;\n  }\n\n  var meteorVersion = Meteor.release;\n  for(var lc=0; lc<versionMatchers.length; lc++) {\n    var matcherInfo = versionMatchers[lc];\n    if(matcherInfo[0].test(meteorVersion)) {\n      var matched = matcherInfo[1](cursorDescription, observerDriver);\n      if(matched !== true) {\n        return matched;\n      }\n    }\n  }\n\n  result = runMatchers(globalMatchers, cursorDescription, observerDriver);\n  if(result !== true) {\n    return result;\n  }\n\n  return {\n    code: \"OPLOG_SUPPORTED\",\n    reason: \"This query should support oplog. It's weird if it's not.\",\n    solution: \"Please contact Kadira support and let's discuss.\"\n  };\n};\n\nfunction runMatchers(matcherList, cursorDescription, observerDriver) {\n  for(var lc=0; lc<matcherList.length; lc++) {\n    var matcher = matcherList[lc];\n    var matched = matcher(cursorDescription, observerDriver);\n    if(matched !== true) {\n      return matched;\n    }\n  }\n  return true;\n}\n","var Fibers = Npm.require('fibers');\nvar eventLogger = Npm.require('debug')('kadira:tracer');\nvar REPITITIVE_EVENTS = {'db': true, 'http': true, 'email': true, 'wait': true, 'async': true};\n\nTracer = function Tracer() {\n  this._filters = [];\n};\n\n//In the future, we might wan't to track inner fiber events too.\n//Then we can't serialize the object with methods\n//That's why we use this method of returning the data\nTracer.prototype.start = function(session, msg) {\n  var traceInfo = {\n    _id: session.id + \"::\" + msg.id,\n    session: session.id,\n    userId: session.userId,\n    id: msg.id,\n    events: []\n  };\n\n  if(msg.msg == 'method') {\n    traceInfo.type = 'method';\n    traceInfo.name = msg.method;\n  } else if(msg.msg == 'sub') {\n    traceInfo.type = 'sub';\n    traceInfo.name = msg.name;\n  } else {\n    return null;\n  }\n\n  return traceInfo;\n};\n\nTracer.prototype.event = function(traceInfo, type, data) {\n  // do not allow to proceed, if already completed or errored\n  var lastEvent = this.getLastEvent(traceInfo);\n  if(lastEvent && ['complete', 'error'].indexOf(lastEvent.type) >= 0) {\n    return false;\n  }\n\n  //expecting a end event\n  var eventId = true;\n\n  //specially handling for repitivive events like db, http\n  if(REPITITIVE_EVENTS[type]) {\n    //can't accept a new start event\n    if(traceInfo._lastEventId) {\n      return false;\n    }\n    eventId = traceInfo._lastEventId = DefaultUniqueId.get();\n  }\n\n  var event = {type: type, at: Ntp._now()};\n  if(data) {\n    var info = _.pick(traceInfo, 'type', 'name')\n    event.data = this._applyFilters(type, data, info, \"start\");;\n  }\n\n  traceInfo.events.push(event);\n\n  eventLogger(\"%s %s\", type, traceInfo._id);\n  return eventId;\n};\n\nTracer.prototype.eventEnd = function(traceInfo, eventId, data) {\n  if(traceInfo._lastEventId && traceInfo._lastEventId == eventId) {\n    var lastEvent = this.getLastEvent(traceInfo);\n    var type = lastEvent.type + 'end';\n    var event = {type: type, at: Ntp._now()};\n    if(data) {\n      var info = _.pick(traceInfo, 'type', 'name')\n      event.data = this._applyFilters(type, data, info, \"end\");;\n    }\n    traceInfo.events.push(event);\n    eventLogger(\"%s %s\", type, traceInfo._id);\n\n    traceInfo._lastEventId = null;\n    return true;\n  } else {\n    return false;\n  }\n};\n\nTracer.prototype.getLastEvent = function(traceInfo) {\n  return traceInfo.events[traceInfo.events.length -1]\n};\n\nTracer.prototype.endLastEvent = function(traceInfo) {\n  var lastEvent = this.getLastEvent(traceInfo);\n  if(lastEvent && !/end$/.test(lastEvent.type)) {\n    traceInfo.events.push({\n      type: lastEvent.type + 'end',\n      at: Ntp._now()\n    });\n    return true;\n  }\n  return false;\n};\n\nTracer.prototype.buildTrace = function(traceInfo) {\n  var firstEvent = traceInfo.events[0];\n  var lastEvent = traceInfo.events[traceInfo.events.length - 1];\n  var processedEvents = [];\n\n  if(firstEvent.type != 'start') {\n    console.warn('Kadira: trace is not started yet');\n    return null;\n  } else if(lastEvent.type != 'complete' && lastEvent.type != 'error') {\n    //trace is not completed or errored yet\n    console.warn('Kadira: trace is not completed or errored yet');\n    return null;\n  } else {\n    //build the metrics\n    traceInfo.errored = lastEvent.type == 'error';\n    traceInfo.at = firstEvent.at;\n\n    var metrics = {\n      total: lastEvent.at - firstEvent.at,\n    };\n\n    var totalNonCompute = 0;\n\n    firstEvent = ['start', 0];\n    if(traceInfo.events[0].data) firstEvent.push(traceInfo.events[0].data);\n    processedEvents.push(firstEvent);\n\n    for(var lc=1; lc < traceInfo.events.length - 1; lc += 2) {\n      var prevEventEnd = traceInfo.events[lc-1];\n      var startEvent = traceInfo.events[lc];\n      var endEvent = traceInfo.events[lc+1];\n      var computeTime = startEvent.at - prevEventEnd.at;\n      if(computeTime > 0) processedEvents.push(['compute', computeTime]);\n      if(!endEvent) {\n        console.error('Kadira: no end event for type: ', startEvent.type);\n        return null;\n      } else if(endEvent.type != startEvent.type + 'end') {\n        console.error('Kadira: endevent type mismatch: ', startEvent.type, endEvent.type, JSON.stringify(traceInfo));\n        return null;\n      } else {\n        var elapsedTimeForEvent = endEvent.at - startEvent.at\n        var currentEvent = [startEvent.type, elapsedTimeForEvent];\n        currentEvent.push(Object.assign({}, startEvent.data, endEvent.data));\n        processedEvents.push(currentEvent);\n        metrics[startEvent.type] = metrics[startEvent.type] || 0;\n        metrics[startEvent.type] += elapsedTimeForEvent;\n        totalNonCompute += elapsedTimeForEvent;\n      }\n    }\n\n    computeTime = lastEvent.at - traceInfo.events[traceInfo.events.length - 2];\n    if(computeTime > 0) processedEvents.push(['compute', computeTime]);\n\n    var lastEventData = [lastEvent.type, 0];\n    if(lastEvent.data) lastEventData.push(lastEvent.data);\n    processedEvents.push(lastEventData);\n\n    metrics.compute = metrics.total - totalNonCompute;\n    traceInfo.metrics = metrics;\n    traceInfo.events = processedEvents;\n    traceInfo.isEventsProcessed = true;\n    return traceInfo;\n  }\n};\n\nTracer.prototype.addFilter = function(filterFn) {\n  this._filters.push(filterFn);\n};\n\nTracer.prototype._applyFilters = function(eventType, data, info) {\n  this._filters.forEach(function(filterFn) {\n    data = filterFn(eventType, _.clone(data), info);\n  });\n\n  return data;\n};\n\nKadira.tracer = new Tracer();\n// need to expose Tracer to provide default set of filters\nKadira.Tracer = Tracer;","// strip sensitive data sent to kadia engine.\n// possible to limit types by providing an array of types to strip\n// possible types are: \"start\", \"db\", \"http\", \"email\"\nTracer.stripSensitive = function stripSensitive(typesToStrip, receiverType, name) {\n  typesToStrip =  typesToStrip || [];\n\n  var strippedTypes = {};\n  typesToStrip.forEach(function(type) {\n    strippedTypes[type] = true;\n  });\n\n  return function (type, data, info) {\n    if(typesToStrip.length > 0 && !strippedTypes[type])\n      return data;\n\n    if(receiverType && receiverType != info.type)\n      return data;\n\n    if(name && name != info.name)\n      return data;\n\n    if(type == \"start\") {\n      data.params = \"[stripped]\";\n    } else if(type == \"db\") {\n      data.selector = \"[stripped]\";\n    } else if(type == \"http\") {\n      data.url = \"[stripped]\";\n    } else if(type == \"email\") {\n      [\"from\", \"to\", \"cc\", \"bcc\", \"replyTo\"].forEach(function(item) {\n        if(data[item]) {\n          data[item] = \"[stripped]\";\n        }\n      });\n    }\n\n    return data;\n  };\n};\n\n// strip selectors only from the given list of collection names\nTracer.stripSelectors = function stripSelectors(collectionList, receiverType, name) {\n  collectionList = collectionList || [];\n\n  var collMap = {};\n  collectionList.forEach(function(collName) {\n    collMap[collName] = true;\n  });\n\n  return function(type, data, info) {\n    if(type != \"db\" || (data && !collMap[data.coll])) {\n      return data\n    }\n\n    if(receiverType && receiverType != info.type)\n      return data;\n\n    if(name && name != info.name)\n      return data;\n\n    data.selector = \"[stripped]\";\n    return data;\n  };\n}","var logger = Npm.require('debug')('kadira:ts');\n\nTracerStore = function TracerStore(options) {\n  options = options || {};\n\n  this.maxTotalPoints = options.maxTotalPoints || 30;\n  this.interval = options.interval || 1000 * 60;\n  this.archiveEvery = options.archiveEvery || this.maxTotalPoints / 6;\n\n  //store max total on the past 30 minutes (or past 30 items)\n  this.maxTotals = Object.create(null);\n  //store the max trace of the current interval\n  this.currentMaxTrace = Object.create(null);\n  //archive for the traces\n  this.traceArchive = [];\n\n  this.processedCnt = Object.create(null);\n\n  //group errors by messages between an interval\n  this.errorMap = Object.create(null);\n};\n\nTracerStore.prototype.addTrace = function(trace) {\n  var kind = [trace.type, trace.name].join('::');\n  if(!this.currentMaxTrace[kind]) {\n    this.currentMaxTrace[kind] = EJSON.clone(trace);\n  } else if(this.currentMaxTrace[kind].metrics.total < trace.metrics.total) {\n    this.currentMaxTrace[kind] = EJSON.clone(trace);\n  } else if(trace.errored) {\n    this._handleErrors(trace);\n  }\n};\n\nTracerStore.prototype.collectTraces = function() {\n  var traces = this.traceArchive;\n  this.traceArchive = [];\n\n  // convert at(timestamp) into the actual serverTime\n  traces.forEach(function(trace) {\n    trace.at = Kadira.syncedDate.syncTime(trace.at);\n  });\n  return traces;\n};\n\nTracerStore.prototype.start = function() {\n  this._timeoutHandler = setInterval(this.processTraces.bind(this), this.interval);\n};\n\nTracerStore.prototype.stop = function() {\n  if(this._timeoutHandler) {\n    clearInterval(this._timeoutHandler);\n  }\n};\n\nTracerStore.prototype._handleErrors = function(trace) {\n  // sending error requests as it is\n  var lastEvent = trace.events[trace.events.length -1];\n  if(lastEvent && lastEvent[2]) {\n    var error = lastEvent[2].error;\n\n    // grouping errors occured (reset after processTraces)\n    var errorKey = [trace.type, trace.name, error.message].join(\"::\");\n    if(!this.errorMap[errorKey]) {\n      var erroredTrace = EJSON.clone(trace);\n      this.errorMap[errorKey] = erroredTrace;\n\n      this.traceArchive.push(erroredTrace);\n    }\n  } else {\n    logger('last events is not an error: ', JSON.stringify(trace.events));\n  }\n};\n\nTracerStore.prototype.processTraces = function() {\n  var self = this;\n  var kinds = _.union(\n    _.keys(this.maxTotals),\n    _.keys(this.currentMaxTrace)\n  );\n\n  kinds.forEach(function(kind) {\n    self.processedCnt[kind] = self.processedCnt[kind] || 0;\n    var currentMaxTrace = self.currentMaxTrace[kind];\n    var currentMaxTotal = currentMaxTrace? currentMaxTrace.metrics.total : 0;\n\n    self.maxTotals[kind] = self.maxTotals[kind] || [];\n    //add the current maxPoint\n    self.maxTotals[kind].push(currentMaxTotal);\n    var exceedingPoints = self.maxTotals[kind].length - self.maxTotalPoints;\n    if(exceedingPoints > 0) {\n      self.maxTotals[kind].splice(0, exceedingPoints);\n    }\n\n    var archiveDefault = (self.processedCnt[kind] % self.archiveEvery) == 0;\n    self.processedCnt[kind]++;\n\n    var canArchive = archiveDefault\n      || self._isTraceOutlier(kind, currentMaxTrace);\n\n    if(canArchive && currentMaxTrace) {\n      self.traceArchive.push(currentMaxTrace);\n    }\n\n    //reset currentMaxTrace\n    self.currentMaxTrace[kind] = null;\n  });\n\n  //reset the errorMap\n  self.errorMap = Object.create(null);\n};\n\nTracerStore.prototype._isTraceOutlier = function(kind, trace) {\n  if(trace) {\n    var dataSet = this.maxTotals[kind];\n    return this._isOutlier(dataSet, trace.metrics.total, 3);\n  } else {\n    return false;\n  }\n};\n\n/*\n  Data point must exists in the dataSet\n*/\nTracerStore.prototype._isOutlier = function(dataSet, dataPoint, maxMadZ) {\n  var median = this._getMedian(dataSet);\n  var mad = this._calculateMad(dataSet, median);\n  var madZ = this._funcMedianDeviation(median)(dataPoint) / mad;\n\n  return madZ > maxMadZ;\n};\n\nTracerStore.prototype._getMedian = function(dataSet) {\n  var sortedDataSet = _.clone(dataSet).sort(function(a, b) {\n    return a-b;\n  });\n  return this._pickQuartile(sortedDataSet, 2);\n};\n\nTracerStore.prototype._pickQuartile = function(dataSet, num) {\n  var pos = ((dataSet.length + 1) * num) / 4;\n  if(pos % 1 == 0) {\n    return dataSet[pos -1];\n  } else {\n    pos = pos - (pos % 1);\n    return (dataSet[pos -1] + dataSet[pos])/2\n  }\n};\n\nTracerStore.prototype._calculateMad = function(dataSet, median) {\n  var medianDeviations = _.map(dataSet, this._funcMedianDeviation(median));\n  var mad = this._getMedian(medianDeviations);\n\n  return mad;\n};\n\nTracerStore.prototype._funcMedianDeviation = function(median) {\n  return function(x) {\n    return Math.abs(median - x);\n  };\n};\n\nTracerStore.prototype._getMean = function(dataPoints) {\n  if(dataPoints.length > 0) {\n    var total = 0;\n    dataPoints.forEach(function(point) {\n      total += point;\n    });\n    return total/dataPoints.length;\n  } else {\n    return 0;\n  }\n};\n","var LRU = Npm.require('lru-cache');\nvar crypto = Npm.require('crypto');\nvar jsonStringify = Npm.require('json-stringify-safe');\n\nDocSzCache = function (maxItems, maxValues) {\n  this.items = new LRU({max: maxItems});\n  this.maxValues = maxValues;\n  this.cpuUsage = 0;\n}\n\n// This is called from SystemModel.prototype.getUsage and saves cpu usage.\nDocSzCache.prototype.setPcpu = function (pcpu) {\n  this.cpuUsage = pcpu;\n};\n\nDocSzCache.prototype.getSize = function (coll, query, opts, data) {\n  // If the dataset is null or empty we can't calculate the size\n  // Do not process this data and return 0 as the document size.\n  if (!(data && (data.length || data.size))) {\n    return 0;\n  }\n\n  var key = this.getKey(coll, query, opts);\n  var item = this.items.get(key);\n\n  if (!item) {\n    item = new DocSzCacheItem(this.maxValues);\n    this.items.set(key, item);\n  }\n\n  if (this.needsUpdate(item)) {\n    var doc = {};\n    if(typeof data.get === 'function'){\n      // This is an IdMap\n      data.forEach(function(element){\n        doc = element;\n        return false; // return false to stop loop. We only need one doc.\n      })\n    } else {\n      doc = data[0];\n    }\n    var size = Buffer.byteLength(jsonStringify(doc), 'utf8');\n    item.addData(size);\n  }\n\n  return item.getValue();\n};\n\nDocSzCache.prototype.getKey = function (coll, query, opts) {\n  return jsonStringify([coll, query, opts]);\n};\n\n// returns a score between 0 and 1 for a cache item\n// this score is determined by:\n//  * availalbe cache item slots\n//  * time since last updated\n//  * cpu usage of the application\nDocSzCache.prototype.getItemScore = function (item) {\n  return [\n    (item.maxValues - item.values.length)/item.maxValues,\n    (Date.now() - item.updated) / 60000,\n    (100 - this.cpuUsage) / 100,\n  ].map(function (score) {\n    return score > 1 ? 1 : score;\n  }).reduce(function (total, score) {\n    return (total || 0) + score;\n  }) / 3;\n};\n\nDocSzCache.prototype.needsUpdate = function (item) {\n  // handle newly made items\n  if (!item.values.length) {\n    return true;\n  }\n\n  var currentTime = Date.now();\n  var timeSinceUpdate = currentTime - item.updated;\n  if (timeSinceUpdate > 1000*60) {\n    return true;\n  }\n\n  return this.getItemScore(item) > 0.5;\n};\n\n\nDocSzCacheItem = function (maxValues) {\n  this.maxValues = maxValues;\n  this.updated = 0;\n  this.values = [];\n}\n\nDocSzCacheItem.prototype.addData = function (value) {\n  this.values.push(value);\n  this.updated = Date.now();\n\n  if (this.values.length > this.maxValues) {\n    this.values.shift();\n  }\n};\n\nDocSzCacheItem.prototype.getValue = function () {\n  function sortNumber(a, b) {\n    return a - b;\n  }\n  var sorted = this.values.sort(sortNumber);\n  var median = 0;\n\n  if (sorted.length % 2 === 0) {\n    var idx = sorted.length / 2;\n    median = (sorted[idx] + sorted[idx-1]) / 2;\n  } else {\n    var idx = Math.floor(sorted.length / 2);\n    median = sorted[idx];\n  }\n\n  return median;\n};\n","var hostname = Npm.require('os').hostname();\nvar logger = Npm.require('debug')('kadira:apm');\nvar Fibers = Npm.require('fibers');\n\nvar KadiraCore = Npm.require('kadira-core').Kadira;\n\nKadira.models = {};\nKadira.options = {};\nKadira.env = {\n  currentSub: null, // keep current subscription inside ddp\n  kadiraInfo: new Meteor.EnvironmentVariable(),\n};\nKadira.waitTimeBuilder = new WaitTimeBuilder();\nKadira.errors = [];\nKadira.errors.addFilter = Kadira.errors.push.bind(Kadira.errors);\n\nKadira.models.methods = new MethodsModel();\nKadira.models.pubsub = new PubsubModel();\nKadira.models.system = new SystemModel();\nKadira.docSzCache = new DocSzCache(100000, 10);\n\n\nKadira.connect = function(appId, appSecret, options) {\n  options = options || {};\n  options.appId = appId;\n  options.appSecret = appSecret;\n  options.payloadTimeout = options.payloadTimeout || 1000 * 20;\n  options.endpoint = options.endpoint || \"https://enginex.kadira.io\";\n  options.clientEngineSyncDelay = options.clientEngineSyncDelay || 10000;\n  options.thresholds = options.thresholds || {};\n  options.isHostNameSet = !!options.hostname;\n  options.hostname = options.hostname || hostname;\n  options.proxy = options.proxy || null;\n\n  if(options.documentSizeCacheSize) {\n    Kadira.docSzCache = new DocSzCache(options.documentSizeCacheSize, 10);\n  }\n\n  // remove trailing slash from endpoint url (if any)\n  if(_.last(options.endpoint) === '/') {\n    options.endpoint = options.endpoint.substr(0, options.endpoint.length - 1);\n  }\n\n  // error tracking is enabled by default\n  if(options.enableErrorTracking === undefined) {\n    options.enableErrorTracking = true;\n  }\n\n  Kadira.options = options;\n  Kadira.options.authHeaders = {\n    'KADIRA-APP-ID': Kadira.options.appId,\n    'KADIRA-APP-SECRET': Kadira.options.appSecret\n  };\n\n  Kadira.syncedDate = new Ntp(options.endpoint);\n  Kadira.syncedDate.sync();\n  Kadira.models.error = new ErrorModel(appId);\n\n  // handle pre-added filters\n  var addFilterFn = Kadira.models.error.addFilter.bind(Kadira.models.error);\n  Kadira.errors.forEach(addFilterFn);\n  Kadira.errors = Kadira.models.error;\n\n  // setting runtime info, which will be sent to kadira\n  __meteor_runtime_config__.kadira = {\n    appId: appId,\n    endpoint: options.endpoint,\n    clientEngineSyncDelay: options.clientEngineSyncDelay,\n  };\n\n  if(options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  } else {\n    Kadira.disableErrorTracking();\n  }\n\n  if(appId && appSecret) {\n    options.appId = options.appId.trim();\n    options.appSecret = options.appSecret.trim();\n\n    Kadira.coreApi = new KadiraCore({\n      appId: options.appId,\n      appSecret: options.appSecret,\n      endpoint: options.endpoint,\n      hostname: options.hostname\n    });\n\n    Kadira.coreApi._checkAuth()\n      .then(function() {\n        logger('connected to app: ', appId);\n        console.log('Meteor APM: Successfully connected');\n        Kadira._sendAppStats();\n        Kadira._schedulePayloadSend();\n      })\n      .catch(function(err) {\n        console.log('Meteor APM: authentication failed - check your appId & appSecret')\n      });\n  } else {\n    throw new Error('Meteor APM: required appId and appSecret');\n  }\n\n  // start tracking errors\n  Meteor.startup(function () {\n    TrackUncaughtExceptions();\n    TrackMeteorDebug();\n  })\n\n  Meteor.publish(null, function () {\n    var options = __meteor_runtime_config__.kadira;\n    this.added('kadira_settings', Random.id(), options);\n    this.ready();\n  });\n\n  // notify we've connected\n  Kadira.connected = true;\n};\n\n//track how many times we've sent the data (once per minute)\nKadira._buildPayload = function () {\n  var payload = {host: Kadira.options.hostname};\n  var buildDetailedInfo = Kadira._isDetailedInfo();\n  Object.assign(payload, Kadira.models.methods.buildPayload(buildDetailedInfo));\n  Object.assign(payload, Kadira.models.pubsub.buildPayload(buildDetailedInfo));\n  Object.assign(payload, Kadira.models.system.buildPayload());\n  if(Kadira.options.enableErrorTracking) {\n    Object.assign(payload, Kadira.models.error.buildPayload());\n  }\n\n  return payload;\n}\n\nKadira._countDataSent = 0;\nKadira._detailInfoSentInterval = Math.ceil((1000*60) / Kadira.options.payloadTimeout);\nKadira._isDetailedInfo = function () {\n  return (Kadira._countDataSent++ % Kadira._detailInfoSentInterval) == 0;\n}\n\nKadira._sendAppStats = function () {\n  var appStats = {};\n  appStats.release = Meteor.release;\n  appStats.protocolVersion = '1.0.0';\n  appStats.packageVersions = [];\n  appStats.appVersions = {\n    webapp: __meteor_runtime_config__['autoupdateVersion'],\n    refreshable: __meteor_runtime_config__['autoupdateVersionRefreshable'],\n    cordova: __meteor_runtime_config__['autoupdateVersionCordova']\n  }\n\n  // TODO get version number for installed packages\n  _.each(Package, function (v, name) {\n    appStats.packageVersions.push({name: name, version: null});\n  });\n\n  Kadira.coreApi.sendData({\n    startTime: new Date(),\n    appStats: appStats\n  }).catch(function(err) {\n    console.error('Kadira Error on sending appStats:', err.message);\n  });\n}\n\nKadira._schedulePayloadSend = function () {\n  setTimeout(function () {\n    Kadira._sendPayload(Kadira._schedulePayloadSend);\n  }, Kadira.options.payloadTimeout);\n}\n\nKadira._sendPayload = function (callback) {\n  new Fibers(function() {\n    var payload = Kadira._buildPayload();\n    Kadira.coreApi.sendData(payload)\n    .then(callback)\n    .catch(function(err) {\n      console.log('Meteor APM Error:', err.message);\n      callback();\n    });\n  }).run();\n}\n\n// this return the __kadiraInfo from the current Fiber by default\n// if called with 2nd argument as true, it will get the kadira info from\n// Meteor.EnvironmentVariable\n//\n// WARNING: returned info object is the reference object.\n//  Changing it might cause issues when building traces. So use with care\nKadira._getInfo = function(currentFiber, useEnvironmentVariable) {\n  currentFiber = currentFiber || Fibers.current;\n  if(currentFiber) {\n    if(useEnvironmentVariable) {\n      return Kadira.env.kadiraInfo.get();\n    }\n    return currentFiber.__kadiraInfo;\n  }\n};\n\n// this does not clone the info object. So, use with care\nKadira._setInfo = function(info) {\n  Fibers.current.__kadiraInfo = info;\n};\n\nKadira.enableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = true;\n  Kadira.options.enableErrorTracking = true;\n};\n\nKadira.disableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = false;\n  Kadira.options.enableErrorTracking = false;\n};\n\nKadira.trackError = function (type, message, options) {\n  if(Kadira.options.enableErrorTracking && type && message) {\n    options = options || {};\n    options.subType = options.subType || 'server';\n    options.stacks = options.stacks || '';\n    var error = {message: message, stack: options.stacks};\n    var trace = {\n      type: type,\n      subType: options.subType,\n      name: message,\n      errored: true,\n      at: Kadira.syncedDate.getTime(),\n      events: [['start', 0, {}], ['error', 0, {error: error}]],\n      metrics: {total: 0}\n    };\n    Kadira.models.error.trackError(error, trace);\n  }\n}\n\nKadira.ignoreErrorTracking = function (err) {\n  err._skipKadira = true;\n}\n","var Fiber = Npm.require('fibers');\n\nwrapServer = function(serverProto) {\n  var originalHandleConnect = serverProto._handleConnect\n  serverProto._handleConnect = function(socket, msg) {\n    originalHandleConnect.call(this, socket, msg);\n    var session = socket._meteorSession;\n    // sometimes it is possible for _meteorSession to be undefined\n    // one such reason would be if DDP versions are not matching\n    // if then, we should not process it\n    if(!session) {\n      return;\n    }\n\n    Kadira.EventBus.emit('system', 'createSession', msg, socket._meteorSession);\n\n    if(Kadira.connected) {\n      Kadira.models.system.handleSessionActivity(msg, socket._meteorSession);\n    }\n  };\n};\n","wrapSession = function(sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n  sessionProto.processMessage = function(msg) {\n    if(true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n\n      if(msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id);\n\n        //use JSON stringify to save the CPU\n        var startData = { userId: this.userId, params: JSON.stringify(msg.params) };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n\n        if(msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      }\n\n      // Update session last active time\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n\n    return originalProcessMessage.call(this, msg);\n  };\n\n  //adding the method context to the current fiber\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n  sessionProto.protocol_handlers.method = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n  sessionProto.protocol_handlers.sub = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n  sessionProto.protocol_handlers.unsub = function(msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  };\n\n  //track method ending (to get the result of error)\n  var originalSend = sessionProto.send;\n  sessionProto.send = function(msg) {\n    if(msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n      if(kadiraInfo) {\n        if(msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack']);\n\n          // pick the error from the wrapped method handler\n          if(kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack']);\n            // see wrapMethodHanderForErrors() method def for more info\n            if(error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {error: error});\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        }\n\n        //processing the message\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace);\n\n        // error may or may not exist and error tracking can be disabled\n        if(error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        }\n\n        //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n        Kadira._setInfo(null);\n      }\n    }\n\n    return originalSend.call(this, msg);\n  };\n};\n\n// wrap existing method handlers for capturing errors\n_.each(Meteor.server.method_handlers, function(handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n});\n\n// wrap future method handlers for capturing errors\nvar originalMeteorMethods = Meteor.methods;\nMeteor.methods = function(methodMap) {\n  _.each(methodMap, function(handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n  originalMeteorMethods(methodMap);\n};\n\n\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function() {\n    try{\n      return originalHandler.apply(this, arguments);\n    } catch(ex) {\n      if(ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if(typeof ex !== 'object') {\n          ex = {message: ex, stack: ex};\n        }\n        // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {stack: ex.stack, source: 'method'};\n        }\n        Kadira._getInfo().currentError = ex;\n      }\n      throw ex;\n    }\n  }\n}\n","var Fiber = Npm.require('fibers');\n\nwrapSubscription = function(subscriptionProto) {\n  // If the ready event runs outside the Fiber, Kadira._getInfo() doesn't work.\n  // we need some other way to store kadiraInfo so we can use it at ready hijack.\n  var originalRunHandler = subscriptionProto._runHandler;\n  subscriptionProto._runHandler = function() {\n    var kadiraInfo = Kadira._getInfo();\n    if (kadiraInfo) {\n      this.__kadiraInfo = kadiraInfo;\n    };\n    originalRunHandler.call(this);\n  }\n\n  var originalReady = subscriptionProto.ready;\n  subscriptionProto.ready = function() {\n    // meteor has a field called `_ready` which tracks this\n    // but we need to make it future proof\n    if(!this._apmReadyTracked) {\n      var kadiraInfo = Kadira._getInfo() || this.__kadiraInfo;\n      delete this.__kadiraInfo;\n      //sometime .ready can be called in the context of the method\n      //then we have some problems, that's why we are checking this\n      //eg:- Accounts.createUser\n      if(kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n        Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n      }\n\n      Kadira.EventBus.emit('pubsub', 'subCompleted', trace, this._session, this);\n      Kadira.models.pubsub._trackReady(this._session, this, trace);\n      this._apmReadyTracked = true;\n    }\n\n    // we still pass the control to the original implementation\n    // since multiple ready calls are handled by itself\n    originalReady.call(this);\n  };\n\n  var originalError = subscriptionProto.error;\n  subscriptionProto.error = function(err) {\n    if (err) {\n      var kadiraInfo = Kadira._getInfo();\n\n      if(kadiraInfo && this._subscriptionId == kadiraInfo.trace.id) {\n        Kadira.tracer.endLastEvent(kadiraInfo.trace);\n\n        var errorForApm = _.pick(err, 'message', 'stack');\n        Kadira.tracer.event(kadiraInfo.trace, 'error', {error: errorForApm});\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n\n        Kadira.models.pubsub._trackError(this._session, this, trace);\n\n        // error tracking can be disabled and if there is a trace\n        // trace should be avaialble all the time, but it won't\n        // if something wrong happened on the trace building\n        if(Kadira.options.enableErrorTracking && trace) {\n          Kadira.models.error.trackError(err, trace);\n        }\n      }\n\n      // wrap error stack so Meteor._debug can identify and ignore it\n      if (Kadira.options.enableErrorTracking) {\n        err.stack = { stack: err.stack, source: \"subscription\" };\n      }\n      originalError.call(this, err);\n    }\n  };\n\n  var originalDeactivate = subscriptionProto._deactivate;\n  subscriptionProto._deactivate = function() {\n    Kadira.EventBus.emit('pubsub', 'subDeactivated', this._session, this);\n    Kadira.models.pubsub._trackUnsub(this._session, this);\n    originalDeactivate.call(this);\n  };\n\n  //adding the currenSub env variable\n  ['added', 'changed', 'removed'].forEach(function(funcName) {\n    var originalFunc = subscriptionProto[funcName];\n    subscriptionProto[funcName] = function(collectionName, id, fields) {\n      var self = this;\n\n      // we need to run this code in a fiber and that's how we track\n      // subscription info. May be we can figure out, some other way to do this\n      // We use this currently to get the publication info when tracking message\n      // sizes at wrap_ddp_stringify.js\n      Kadira.env.currentSub = self;\n      var res = originalFunc.call(self, collectionName, id, fields);\n      Kadira.env.currentSub = null;\n\n      return res;\n    };\n  });\n};\n","import { MongoConnection } from \"./meteorx.js\";\n\nwrapOplogObserveDriver = function(proto) {\n  // Track the polled documents. This is reflect to the RAM size and\n  // for the CPU usage directly\n  var originalPublishNewResults = proto._publishNewResults;\n  proto._publishNewResults = function(newResults, newBuffer) {\n    var coll = this._cursorDescription.collectionName;\n    var query = this._cursorDescription.selector;\n    var opts = this._cursorDescription.options;\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newResults);\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    var count = newResults.size() + newBuffer.size();\n    if(this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize*count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize*count\n      }\n    }\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n\n  var originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n  proto._handleOplogEntryQuerying = function(op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n\n  var originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n  proto._handleOplogEntrySteadyOrFetching = function(op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  };\n\n  // track live updates\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function(fnName) {\n    var originalFn = proto[fnName];\n    proto[fnName] = function(a, b, c) {\n      if(this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n\n        if(fnName === \"_addPublished\") {\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"liveFetches\", docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if(!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n\n        this._liveUpdatesCounts._initialAdds++;\n\n        if(fnName === \"_addPublished\") {\n          if(!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n\n          if(!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          this._docSize.initialFetches += docSize;\n        }\n      }\n\n      return originalFn.call(this, a, b, c);\n    };\n  });\n\n  var originalStop = proto.stop;\n  proto.stop = function() {\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapPollingObserveDriver = function(proto) {\n  var originalPollMongo = proto._pollMongo;\n  proto._pollMongo = function() {\n    var start = Date.now();\n    originalPollMongo.call(this);\n\n    // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n    var count = 0;\n    var docSize = 0;\n\n    if(this._results && this._results.size) {\n      count = this._results.size() || 0;\n\n      var coll = this._cursorDescription.collectionName;\n      var query = this._cursorDescription.selector;\n      var opts = this._cursorDescription.options;\n\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map)*count;\n    }\n\n    if(this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n\n  var originalStop = proto.stop;\n  proto.stop = function() {\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapMultiplexer = function(proto) {\n  var originalInitalAdd = proto.addHandleAndSendInitialAdds;\n   proto.addHandleAndSendInitialAdds = function(handle) {\n    if(!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n\n    if(!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n    return originalInitalAdd.call(this, handle);\n  };\n};\n\nwrapForCountingObservers = function() {\n  // to count observers\n  var mongoConnectionProto = MongoConnection.prototype;\n  var originalObserveChanges = mongoConnectionProto._observeChanges;\n  mongoConnectionProto._observeChanges = function(cursorDescription, ordered, callbacks) {\n    var ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks);\n    // get the Kadira Info via the Meteor.EnvironmentalVariable\n    var kadiraInfo = Kadira._getInfo(null, true);\n\n    if(kadiraInfo && ret._multiplexer) {\n      if(!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n        if(kadiraInfo.trace.type == 'sub') {\n          var ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: (new Date()).getTime()\n          };\n\n          var observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo);\n\n          // We need to send initially polled documents if there are\n          if(observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          }\n\n          // We need to send initially polled documents if there are\n          if(observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, \"polledFetches\", observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          }\n\n          // Process _liveUpdatesCounts\n          _.each(observerDriver._liveUpdatesCounts, function(count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          });\n\n          // Process docSize\n          _.each(observerDriver._docSize, function(count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n\n    return ret;\n  }\n};\n","wrapStringifyDDP = function() {\n  var originalStringifyDDP = DDPCommon.stringifyDDP;\n\n  DDPCommon.stringifyDDP = function(msg) {\n    var msgString = originalStringifyDDP(msg);\n    var msgSize = Buffer.byteLength(msgString, 'utf8');\n\n    var kadiraInfo = Kadira._getInfo(null, true);\n\n    if(kadiraInfo) {\n      if(kadiraInfo.trace.type === 'method') {\n        Kadira.models.methods.trackMsgSize(kadiraInfo.trace.name, msgSize);\n      }\n\n      return msgString;\n    }\n\n    // 'currentSub' is set when we wrap Subscription object and override\n    // handlers for 'added', 'changed', 'removed' events. (see lib/hijack/wrap_subscription.js)\n    if(Kadira.env.currentSub) {\n      if(Kadira.env.currentSub.__kadiraInfo){\n        Kadira.models.pubsub.trackMsgSize(Kadira.env.currentSub._name, \"initialSent\", msgSize);\n        return msgString;\n      }\n      Kadira.models.pubsub.trackMsgSize(Kadira.env.currentSub._name, \"liveSent\", msgSize);\n      return msgString;\n    }\n\n    Kadira.models.methods.trackMsgSize(\"<not-a-method-or-a-pub>\", msgSize);\n    return msgString;\n  }\n}\n","import {\n  MongoOplogDriver,\n  MongoPollingDriver,\n  Multiplexer,\n  Server,\n  Session,\n  Subscription,\n} from \"./meteorx.js\";\n\nvar logger = Npm.require('debug')('kadira:hijack:instrument');\n\nvar instrumented = false;\nKadira._startInstrumenting = function(callback) {\n  if(instrumented) {\n    callback();\n    return;\n  }\n\n  instrumented = true;\n  wrapStringifyDDP()\n  Meteor.startup(async function () {\n    wrapServer(Server.prototype);\n\n    wrapSession(Session.prototype);\n    wrapSubscription(Subscription.prototype);\n\n    if (MongoOplogDriver) {\n      wrapOplogObserveDriver(MongoOplogDriver.prototype);\n    }\n\n    if (MongoPollingDriver) {\n      wrapPollingObserveDriver(MongoPollingDriver.prototype);\n    }\n\n    if (Multiplexer) {\n      wrapMultiplexer(Multiplexer.prototype);\n    }\n\n    wrapForCountingObservers();\n    hijackDBOps();\n\n    setLabels();\n    callback();\n  });\n};\n\n// We need to instrument this rightaway and it's okay\n// One reason for this is to call `setLables()` function\n// Otherwise, CPU profile can't see all our custom labeling\nKadira._startInstrumenting(function() {\n  console.log('Meteor APM: completed instrumenting the app')\n});\n","import {\n  MongoConnection,\n  MongoCursor,\n} from \"./meteorx.js\";\n\n// This hijack is important to make sure, collections created before\n// we hijack dbOps, even gets tracked.\n//  Meteor does not simply expose MongoConnection object to the client\n//  It picks methods which are necessory and make a binded object and\n//  assigned to the Mongo.Collection\n//  so, even we updated prototype, we can't track those collections\n//  but, this will fix it.\nvar originalOpen = MongoInternals.RemoteCollectionDriver.prototype.open;\nMongoInternals.RemoteCollectionDriver.prototype.open = function open(name) {\n  var self = this;\n  var ret = originalOpen.call(self, name);\n\n  _.each(ret, function(fn, m) {\n    // make sure, it's in the actual mongo connection object\n    // meteorhacks:mongo-collection-utils package add some arbitary methods\n    // which does not exist in the mongo connection\n    if(self.mongo[m]) {\n      ret[m] = function() {\n        Array.prototype.unshift.call(arguments, name);\n        return OptimizedApply(self.mongo, self.mongo[m], arguments);\n      };\n    }\n  });\n\n  return ret;\n};\n\nhijackDBOps = function hijackDBOps() {\n  var mongoConnectionProto = MongoConnection.prototype;\n  //findOne is handled by find - so no need to track it\n  //upsert is handles by update\n  ['find', 'update', 'remove', 'insert', '_ensureIndex', '_dropIndex'].forEach(function(func) {\n    var originalFunc = mongoConnectionProto[func];\n    mongoConnectionProto[func] = function(collName, selector, mod, options) {\n      var payload = {\n        coll: collName,\n        func: func,\n      };\n\n      if(func == 'insert') {\n        //add nothing more to the payload\n      } else if(func == '_ensureIndex' || func == '_dropIndex') {\n        //add index\n        payload.index = JSON.stringify(selector);\n      } else if(func == 'update' && options && options.upsert) {\n        payload.func = 'upsert';\n        payload.selector = JSON.stringify(selector);\n      } else {\n        //all the other functions have selectors\n        payload.selector = JSON.stringify(selector);\n      }\n\n      var kadiraInfo = Kadira._getInfo();\n      if(kadiraInfo) {\n        var eventId = Kadira.tracer.event(kadiraInfo.trace, 'db', payload);\n      }\n\n      //this cause V8 to avoid any performance optimizations, but this is must to use\n      //otherwise, if the error adds try catch block our logs get messy and didn't work\n      //see: issue #6\n      try{\n        var ret = originalFunc.apply(this, arguments);\n        //handling functions which can be triggered with an asyncCallback\n        var endOptions = {};\n\n        if(HaveAsyncCallback(arguments)) {\n          endOptions.async = true;\n        }\n\n        if(func == 'update') {\n          // upsert only returns an object when called `upsert` directly\n          // otherwise it only act an update command\n          if(options && options.upsert && typeof ret == 'object') {\n            endOptions.updatedDocs = ret.numberAffected;\n            endOptions.insertedId = ret.insertedId;\n          } else {\n            endOptions.updatedDocs = ret;\n          }\n        } else if(func == 'remove') {\n          endOptions.removedDocs = ret;\n        }\n\n        if(eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endOptions);\n        }\n      } catch(ex) {\n        if(eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});\n        }\n        throw ex;\n      }\n\n      return ret;\n    };\n  });\n\n  var cursorProto = MongoCursor.prototype;\n  ['forEach', 'map', 'fetch', 'count', 'observeChanges', 'observe', 'rewind'].forEach(function(type) {\n    var originalFunc = cursorProto[type];\n    cursorProto[type] = function() {\n      var cursorDescription = this._cursorDescription;\n      var payload = Object.assign(Object.create(null), {\n        coll: cursorDescription.collectionName,\n        selector: JSON.stringify(cursorDescription.selector),\n        func: type,\n        cursor: true\n      });\n\n      if(cursorDescription.options) {\n        var cursorOptions = _.pick(cursorDescription.options, ['fields', 'sort', 'limit']);\n        for(var field in cursorOptions) {\n          var value = cursorOptions[field]\n          if(typeof value == 'object') {\n            value = JSON.stringify(value);\n          }\n          payload[field] = value;\n        }\n      };\n\n      var kadiraInfo = Kadira._getInfo();\n      if(kadiraInfo) {\n        var eventId = Kadira.tracer.event(kadiraInfo.trace, 'db', payload);\n      }\n\n      try{\n        var ret = originalFunc.apply(this, arguments);\n\n        var endData = {};\n        if(type == 'observeChanges' || type == 'observe') {\n          var observerDriver;\n          endData.oplog = false;\n          // get data written by the multiplexer\n          endData.wasMultiplexerReady = ret._wasMultiplexerReady;\n          endData.queueLength = ret._queueLength;\n          endData.elapsedPollingTime = ret._elapsedPollingTime;\n\n          if(ret._multiplexer) {\n            // older meteor versions done not have an _multiplexer value\n            observerDriver = ret._multiplexer._observeDriver;\n            if(observerDriver) {\n              observerDriver = ret._multiplexer._observeDriver;\n              var observerDriverClass = observerDriver.constructor;\n              var usesOplog = typeof observerDriverClass.cursorSupported == 'function';\n              endData.oplog = usesOplog;\n              var size = 0;\n              ret._multiplexer._cache.docs.forEach(function() {size++});\n              endData.noOfCachedDocs = size;\n\n              // if multiplexerWasNotReady, we need to get the time spend for the polling\n              if(!ret._wasMultiplexerReady) {\n                endData.initialPollingTime = observerDriver._lastPollTime;\n              }\n            }\n          }\n\n          if(!endData.oplog) {\n            // let's try to find the reason\n            var reasonInfo = Kadira.checkWhyNoOplog(cursorDescription, observerDriver);\n            endData.noOplogCode = reasonInfo.code;\n            endData.noOplogReason = reasonInfo.reason;\n            endData.noOplogSolution = reasonInfo.solution;\n          }\n        } else if(type == 'fetch' || type == 'map'){\n          //for other cursor operation\n\n          endData.docsFetched = ret.length;\n\n          if(type == 'fetch') {\n            var coll = cursorDescription.collectionName;\n            var query = cursorDescription.selector;\n            var opts = cursorDescription.options;\n            var docSize = Kadira.docSzCache.getSize(coll, query, opts, ret) * ret.length;\n            endData.docSize = docSize;\n\n            if(kadiraInfo) {\n              if(kadiraInfo.trace.type === 'method') {\n                Kadira.models.methods.trackDocSize(kadiraInfo.trace.name, docSize);\n              } else if(kadiraInfo.trace.type === 'sub') {\n                Kadira.models.pubsub.trackDocSize(kadiraInfo.trace.name, \"cursorFetches\", docSize);\n              }\n            } else {\n              // Fetch with no kadira info are tracked as from a null method\n              Kadira.models.methods.trackDocSize(\"<not-a-method-or-a-pub>\", docSize);\n            }\n\n            // TODO: Add doc size tracking to `map` as well.\n          }\n        }\n\n        if(eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endData);\n        }\n        return ret;\n      } catch(ex) {\n        if(eventId) {\n          Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});\n        }\n        throw ex;\n      }\n    };\n  });\n};\n","var originalCall = HTTP.call;\n\nHTTP.call = function(method, url) {\n  var kadiraInfo = Kadira._getInfo();\n  if(kadiraInfo) {\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'http', {method: method, url: url});\n  }\n\n  try {\n    var response = originalCall.apply(this, arguments);\n\n    //if the user supplied an asynCallback, we don't have a response object and it handled asynchronously\n    //we need to track it down to prevent issues like: #3\n    var endOptions = HaveAsyncCallback(arguments)? {async: true}: {statusCode: response.statusCode};\n    if(eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, endOptions);\n    }\n    return response;\n  } catch(ex) {\n    if(eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});\n    }\n    throw ex;\n  }\n};","var originalSend = Email.send;\n\nEmail.send = function(options) {\n  var kadiraInfo = Kadira._getInfo();\n  if(kadiraInfo) {\n    var data = _.pick(options, 'from', 'to', 'cc', 'bcc', 'replyTo');\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'email', data);\n  }\n  try {\n    var ret = originalSend.call(this, options);\n    if(eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId);\n    }\n    return ret;\n  } catch(ex) {\n    if(eventId) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, eventId, {err: ex.message});\n    }\n    throw ex;\n  }\n};","var Fibers = Npm.require('fibers');\n\nvar originalYield = Fibers.yield;\nFibers.yield = function() {\n  var kadiraInfo = Kadira._getInfo();\n  if(kadiraInfo) {\n    var eventId = Kadira.tracer.event(kadiraInfo.trace, 'async');;\n    if(eventId) {\n      Fibers.current._apmEventId = eventId;\n    }\n  }\n\n  return originalYield();\n};\n\nvar originalRun = Fibers.prototype.run;\nFibers.prototype.run = function(val) {\n  if(this._apmEventId) {\n    var kadiraInfo = Kadira._getInfo(this);\n    if(kadiraInfo) {\n      Kadira.tracer.eventEnd(kadiraInfo.trace, this._apmEventId);\n      this._apmEventId = null;\n    }\n  }\n  return originalRun.call(this, val);\n};\n","TrackUncaughtExceptions = function () {\n  process.on('uncaughtException', function (err) {\n    // skip errors with `_skipKadira` flag\n    if(err._skipKadira) {\n      return;\n    }\n\n    // let the server crash normally if error tracking is disabled\n    if(!Kadira.options.enableErrorTracking) {\n      printErrorAndKill(err);\n    }\n\n    // looking for already tracked errors and throw them immediately\n    // throw error immediately if kadira is not ready\n    if(err._tracked || !Kadira.connected) {\n      printErrorAndKill(err);\n    }\n\n    var trace = getTrace(err, 'server-crash', 'uncaughtException');\n    Kadira.models.error.trackError(err, trace);\n    Kadira._sendPayload(function () {\n      clearTimeout(timer);\n      throwError(err);\n    });\n\n    var timer = setTimeout(function () {\n      throwError(err);\n    }, 1000*10);\n\n    function throwError(err) {\n      // sometimes error came back from a fiber.\n      // But we don't fibers to track that error for us\n      // That's why we throw the error on the nextTick\n      process.nextTick(function() {\n        // we need to mark this error where we really need to throw\n        err._tracked = true;\n        printErrorAndKill(err);\n      });\n    }\n  });\n\n  function printErrorAndKill(err) {\n    // since we are capturing error, we are also on the error message.\n    // so developers think we are also reponsible for the error.\n    // But we are not. This will fix that.\n    console.error(err.stack);\n    process.exit(7);\n  }\n}\n\nTrackMeteorDebug = function () {\n  var originalMeteorDebug = Meteor._debug;\n  Meteor._debug = function (message, stack) {\n    if(!Kadira.options.enableErrorTracking) {\n      return originalMeteorDebug.call(this, message, stack);\n    }\n\n    // We've changed `stack` into an object at method and sub handlers so we can\n    // ignore them here. These errors are already tracked so don't track again.\n    if(stack && stack.stack) {\n      stack = stack.stack;\n      // Restore so origionalMeteorDebug shows the stack as a string instead as\n      // an object\n      arguments[1] = stack;\n    } else {\n      // only send to the server, if only connected to kadira\n      if(Kadira.connected) {\n        var error = new Error(message);\n        error.stack = stack;\n        var trace = getTrace(error, 'server-internal', 'Meteor._debug');\n        Kadira.models.error.trackError(error, trace);\n      }\n    }\n\n    return originalMeteorDebug.apply(this, arguments);\n  }\n}\n\nfunction getTrace(err, type, subType) {\n  return {\n    type: type,\n    subType: subType,\n    name: err.message,\n    errored: true,\n    at: Kadira.syncedDate.getTime(),\n    events: [\n      ['start', 0, {}],\n      ['error', 0, {error: {message: err.message, stack: err.stack}}]\n    ],\n    metrics: {\n      total: 0\n    }\n  };\n}\n","import {\n  Session,\n  Multiplexer,\n  MongoConnection,\n  MongoCursor,\n} from \"./meteorx.js\";\n\nsetLabels = function () {\n  // name Session.prototype.send\n  var originalSend = Session.prototype.send;\n  Session.prototype.send = function kadira_Session_send (msg) {\n    return originalSend.call(this, msg);\n  }\n\n  // name Multiplexer initial adds\n  var originalSendAdds = Multiplexer.prototype._sendAdds;\n  Multiplexer.prototype._sendAdds = function kadira_Multiplexer_sendAdds (handle) {\n    return originalSendAdds.call(this, handle);\n  }\n\n  // name MongoConnection insert\n  var originalMongoInsert = MongoConnection.prototype._insert;\n  MongoConnection.prototype._insert = function kadira_MongoConnection_insert (coll, doc, cb) {\n    return originalMongoInsert.call(this, coll, doc, cb);\n  }\n\n  // name MongoConnection update\n  var originalMongoUpdate = MongoConnection.prototype._update;\n  MongoConnection.prototype._update = function kadira_MongoConnection_update (coll, selector, mod, options, cb) {\n    return originalMongoUpdate.call(this, coll, selector, mod, options, cb);\n  }\n\n  // name MongoConnection remove\n  var originalMongoRemove = MongoConnection.prototype._remove;\n  MongoConnection.prototype._remove = function kadira_MongoConnection_remove (coll, selector, cb) {\n    return originalMongoRemove.call(this, coll, selector, cb);\n  }\n\n  // name Pubsub added\n  var originalPubsubAdded = Session.prototype.sendAdded;\n  Session.prototype.sendAdded = function kadira_Session_sendAdded (coll, id, fields) {\n    return originalPubsubAdded.call(this, coll, id, fields);\n  }\n\n  // name Pubsub changed\n  var originalPubsubChanged = Session.prototype.sendChanged;\n  Session.prototype.sendChanged = function kadira_Session_sendChanged (coll, id, fields) {\n    return originalPubsubChanged.call(this, coll, id, fields);\n  }\n\n  // name Pubsub removed\n  var originalPubsubRemoved = Session.prototype.sendRemoved;\n  Session.prototype.sendRemoved = function kadira_Session_sendRemoved (coll, id) {\n    return originalPubsubRemoved.call(this, coll, id);\n  }\n\n  // name MongoCursor forEach\n  var originalCursorForEach = MongoCursor.prototype.forEach;\n  MongoCursor.prototype.forEach = function kadira_Cursor_forEach () {\n    return originalCursorForEach.apply(this, arguments);\n  }\n\n  // name MongoCursor map\n  var originalCursorMap = MongoCursor.prototype.map;\n  MongoCursor.prototype.map = function kadira_Cursor_map () {\n    return originalCursorMap.apply(this, arguments);\n  }\n\n  // name MongoCursor fetch\n  var originalCursorFetch = MongoCursor.prototype.fetch;\n  MongoCursor.prototype.fetch = function kadira_Cursor_fetch () {\n    return originalCursorFetch.apply(this, arguments);\n  }\n\n  // name MongoCursor count\n  var originalCursorCount = MongoCursor.prototype.count;\n  MongoCursor.prototype.count = function kadira_Cursor_count () {\n    return originalCursorCount.apply(this, arguments);\n  }\n\n  // name MongoCursor observeChanges\n  var originalCursorObserveChanges = MongoCursor.prototype.observeChanges;\n  MongoCursor.prototype.observeChanges = function kadira_Cursor_observeChanges () {\n    return originalCursorObserveChanges.apply(this, arguments);\n  }\n\n  // name MongoCursor observe\n  var originalCursorObserve = MongoCursor.prototype.observe;\n  MongoCursor.prototype.observe = function kadira_Cursor_observe () {\n    return originalCursorObserve.apply(this, arguments);\n  }\n\n  // name MongoCursor rewind\n  var originalCursorRewind = MongoCursor.prototype.rewind;\n  MongoCursor.prototype.rewind = function kadira_Cursor_rewind () {\n    return originalCursorRewind.apply(this, arguments);\n  }\n\n  // name CrossBar listen\n  var originalCrossbarListen = DDPServer._Crossbar.prototype.listen;\n  DDPServer._Crossbar.prototype.listen = function kadira_Crossbar_listen (trigger, callback) {\n    return originalCrossbarListen.call(this, trigger, callback);\n  }\n\n  // name CrossBar fire\n  var originalCrossbarFire = DDPServer._Crossbar.prototype.fire;\n  DDPServer._Crossbar.prototype.fire = function kadira_Crossbar_fire (notification) {\n    return originalCrossbarFire.call(this, notification);\n  }\n}\n","// Various tricks for accessing \"private\" Meteor APIs borrowed from the\n// now-unmaintained meteorhacks:meteorx package.\n\nimport { get } from \"../utils.js\";\n\nexport const Server = Meteor.server.constructor;\n\nfunction getSession() {\n  const fakeSocket = {\n    send() {},\n    close() {},\n    headers: []\n  };\n\n  const server = Meteor.server;\n\n  server._handleConnect(fakeSocket, {\n    msg: \"connect\",\n    version: \"pre1\",\n    support: [\"pre1\"]\n  });\n\n  const session = fakeSocket._meteorSession;\n\n  server._removeSession(session);\n\n  return session;\n}\n\nconst session = getSession();\nexport const Session = session.constructor;\n\nconst collection = new Mongo.Collection(\"__dummy_coll_\" + Random.id());\ncollection.findOne();\nconst cursor = collection.find();\nexport const MongoCursor = cursor.constructor;\n\nfunction getMultiplexer(cursor) {\n  const handle = cursor.observeChanges({\n    added() {}\n  });\n  handle.stop();\n  return handle._multiplexer;\n}\n\nexport const Multiplexer = getMultiplexer(cursor).constructor;\n\nexport const MongoConnection =\n  MongoInternals.defaultRemoteCollectionDriver().mongo.constructor;\n\nfunction getSubscription(session) {\n  const subId = Random.id();\n\n  session._startSubscription(function () {\n    this.ready();\n  }, subId, [], \"__dummy_pub_\" + Random.id());\n\n  const subscription = get(session._namedSubs, subId);\n\n  session._stopSubscription(subId);\n\n  return subscription;\n}\n\nexport const Subscription = getSubscription(session).constructor;\n\nfunction getObserverDriver(cursor) {\n  const multiplexer = getMultiplexer(cursor);\n  return multiplexer && multiplexer._observeDriver || null;\n}\n\nfunction getMongoOplogDriver() {\n  const driver = getObserverDriver(cursor);\n  let MongoOplogDriver = driver && driver.constructor || null;\n  if (MongoOplogDriver &&\n      typeof MongoOplogDriver.cursorSupported !== \"function\") {\n    return null;\n  }\n  return MongoOplogDriver;\n}\n\nexport const MongoOplogDriver = getMongoOplogDriver();\n\nfunction getMongoPollingDriver() {\n  const cursor = collection.find({}, {\n    limit: 20,\n    _disableOplog: true,\n  });\n\n  const driver = getObserverDriver(cursor);\n\n  // verify observer driver is a polling driver\n  if (driver && typeof driver.constructor.cursorSupported === \"undefined\") {\n    return driver.constructor;\n  }\n\n  return null;\n}\n\nexport const MongoPollingDriver = getMongoPollingDriver();\n","Kadira._parseEnv = function (env) {\n  var options = {};\n  for(var name in env) {\n    var info = Kadira._parseEnv._options[name];\n    var value = env[name];\n    if(info && value) {\n      options[info.name] = info.parser(value);\n    }\n  }\n\n  return options;\n};\n\n\nKadira._parseEnv.parseInt = function (str) {\n  var num = parseInt(str);\n  if(num || num === 0) return num;\n  throw new Error('Kadira: Match Error: \"'+num+'\" is not a number');\n};\n\n\nKadira._parseEnv.parseBool = function (str) {\n  str = str.toLowerCase();\n  if(str === 'true') return true;\n  if(str === 'false') return false;\n  throw new Error('Kadira: Match Error: '+str+' is not a boolean');\n};\n\n\nKadira._parseEnv.parseUrl = function (str) {\n  return str;\n};\n\n\nKadira._parseEnv.parseString = function (str) {\n  return str;\n};\n\n\nKadira._parseEnv._options = {\n  // delay to send the initial ping to the kadira engine after page loads\n  APM_OPTIONS_CLIENT_ENGINE_SYNC_DELAY: {\n    name: 'clientEngineSyncDelay',\n    parser: Kadira._parseEnv.parseInt,\n  },\n  // time between sending errors to the engine\n  APM_OPTIONS_ERROR_DUMP_INTERVAL: {\n    name: 'errorDumpInterval',\n    parser: Kadira._parseEnv.parseInt,\n  },\n  // no of errors allowed in a given interval\n  APM_OPTIONS_MAX_ERRORS_PER_INTERVAL: {\n    name: 'maxErrorsPerInterval',\n    parser: Kadira._parseEnv.parseInt,\n  },\n  // a zone.js specific option to collect the full stack trace(which is not much useful)\n  APM_OPTIONS_COLLECT_ALL_STACKS: {\n    name: 'collectAllStacks',\n    parser: Kadira._parseEnv.parseBool,\n  },\n  // enable error tracking (which is turned on by default)\n  APM_OPTIONS_ENABLE_ERROR_TRACKING: {\n    name: 'enableErrorTracking',\n    parser: Kadira._parseEnv.parseBool,\n  },\n  // kadira engine endpoint\n  APM_OPTIONS_ENDPOINT: {\n    name: 'endpoint',\n    parser: Kadira._parseEnv.parseUrl,\n  },\n  // define the hostname of the current running process\n  APM_OPTIONS_HOSTNAME: {\n    name: 'hostname',\n    parser: Kadira._parseEnv.parseString,\n  },\n  // interval between sending data to the kadira engine from the server\n  APM_OPTIONS_PAYLOAD_TIMEOUT: {\n    name: 'payloadTimeout',\n    parser: Kadira._parseEnv.parseInt,\n  },\n  // set HTTP/HTTPS proxy\n  APM_OPTIONS_PROXY: {\n    name: 'proxy',\n    parser: Kadira._parseEnv.parseUrl,\n  },\n  // number of items cached for tracking document size\n  APM_OPTIONS_DOCUMENT_SIZE_CACHE_SIZE: {\n    name: 'documentSizeCacheSize',\n    parser: Kadira._parseEnv.parseInt,\n  },\n};\n","Kadira._connectWithEnv = function() {\n  if (Meteor &&\n      Meteor.settings &&\n      Meteor.settings.packages &&\n      Meteor.settings.packages['mdg:meteor-apm-agent'] &&\n      Meteor.settings.packages['mdg:meteor-apm-agent'].isDisabled) {\n    console.log('Meteor APM: not connected because it was disabled in settings');\n    return;\n  }\n  if(process.env.APM_APP_ID && process.env.APM_APP_SECRET && process.env.APM_OPTIONS_ENDPOINT) {\n    var options = Kadira._parseEnv(process.env);\n\n    Kadira.connect(\n      process.env.APM_APP_ID,\n      process.env.APM_APP_SECRET,\n      options\n    );\n\n    Kadira.connect = function() {\n      throw new Error('Meteor APM has already connected using credentials from Environment Variables');\n    };\n  }\n  // other forms of Kadira.connect are not supported\n};\n\n// Try to connect automatically\nKadira._connectWithEnv();\n"]}}]