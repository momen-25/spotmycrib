[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar InjectData;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"staringatlights:inject-data\":{\"lib\":{\"namespace.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// packages/staringatlights_inject-data/lib/namespace.js                                  //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nmodule.export({\n  InjectData: () => InjectData\n});\nconst InjectData = {};\n\n// Replace meteorhacks:inject-data with our new API, this is for compatibility\n// with third party packages that still depend upon the meteorhacks version.\nif (Package['meteorhacks:inject-data']) {\n  Package['meteorhacks:inject-data'].InjectData = InjectData;\n}\n////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// packages/staringatlights_inject-data/lib/utils.js                                      //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\nlet InjectData;\nmodule.link(\"./namespace\", {\n  InjectData(v) {\n    InjectData = v;\n  }\n\n}, 1);\n\n/**\n * Returns an encoded string that represents an object.\n * @param {object} ejson\n */\nInjectData.encode = InjectData._encode = function (ejson) {\n  var ejsonString = EJSON.stringify(ejson);\n  return encodeURIComponent(ejsonString);\n};\n/**\n * Decodes an encoded string into an object.\n * @param {string} encodedEjson\n */\n\n\nInjectData.decode = InjectData._decode = function (encodedEjson) {\n  var decodedEjsonString = decodeURIComponent(encodedEjson);\n  if (!decodedEjsonString) return null;\n  return EJSON.parse(decodedEjsonString);\n};\n////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// packages/staringatlights_inject-data/lib/server.js                                     //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nlet InjectData;\nmodule.link(\"./namespace\", {\n  InjectData(v) {\n    InjectData = v;\n  }\n\n}, 0);\nlet WebAppInternals;\nmodule.link(\"meteor/webapp\", {\n  WebAppInternals(v) {\n    WebAppInternals = v;\n  }\n\n}, 1);\n// Supports legacy uses of inject data, SSR users should turn this to false\nInjectData.injectToHead = true;\nWebAppInternals.registerBoilerplateDataCallback('inject-data', (req, data, arch) => {\n  if (req && req.headers && req.headers._injectPayload && !InjectData.disableInjection) {\n    const payload = \"<script type=\\\"text/inject-data\\\">\".concat(InjectData.encode(req.headers._injectPayload), \"</script>\");\n\n    if (InjectData.injectToHead) {\n      if (!data.dynamicHead) {\n        data.dynamicHead = '';\n      }\n\n      data.dynamicHead += payload;\n    } else {\n      if (!data.dynamicBody) {\n        data.dynamicBody = '';\n      }\n\n      data.dynamicBody += payload;\n    }\n  }\n\n  return false;\n});\n/**\n * Pushes data into the InjectData payload.\n * @param {object} node request object\n * @param {string} key\n * @param {*} value\n */\n\nInjectData.pushData = function pushData(req, key, value) {\n  if (!req.headers) {\n    req.headers = {};\n  }\n\n  if (!req.headers._injectPayload) {\n    req.headers._injectPayload = {};\n  }\n\n  req.headers._injectPayload[key] = value;\n};\n/**\n * Returns the object associated with the specified key.\n * @param {string} key\n */\n\n\nInjectData.getData = function getData(req, key) {\n  if (req.headers && req.headers._injectPayload) {\n    return Object.assign({}, req.headers._injectPayload[key]);\n  } else {\n    return null;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/staringatlights:inject-data/lib/namespace.js\");\nrequire(\"/node_modules/meteor/staringatlights:inject-data/lib/utils.js\");\nrequire(\"/node_modules/meteor/staringatlights:inject-data/lib/server.js\");\n\n/* Exports */\nPackage._define(\"staringatlights:inject-data\", exports, {\n  InjectData: InjectData\n});\n\n})();\n","servePath":"/packages/staringatlights_inject-data.js","sourceMap":{"version":3,"sources":["packages/staringatlights:inject-data/lib/namespace.js","packages/staringatlights:inject-data/lib/utils.js","packages/staringatlights:inject-data/lib/server.js"],"names":["module","export","InjectData","Package","EJSON","link","v","encode","_encode","ejson","ejsonString","stringify","encodeURIComponent","decode","_decode","encodedEjson","decodedEjsonString","decodeURIComponent","parse","WebAppInternals","injectToHead","registerBoilerplateDataCallback","req","data","arch","headers","_injectPayload","disableInjection","payload","dynamicHead","dynamicBody","pushData","key","value","getData","Object","assign"],"mappings":"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","file":"/packages/staringatlights_inject-data.js","sourcesContent":["/* global Package */\nexport const InjectData = {}\n\n// Replace meteorhacks:inject-data with our new API, this is for compatibility\n// with third party packages that still depend upon the meteorhacks version.\nif (Package['meteorhacks:inject-data']) {\n\tPackage['meteorhacks:inject-data'].InjectData = InjectData\n}\n","import { EJSON } from 'meteor/ejson'\nimport { InjectData } from './namespace'\n\n/**\n * Returns an encoded string that represents an object.\n * @param {object} ejson\n */\nInjectData.encode = InjectData._encode = function(ejson) {\n\tvar ejsonString = EJSON.stringify(ejson)\n\treturn encodeURIComponent(ejsonString)\n}\n\n/**\n * Decodes an encoded string into an object.\n * @param {string} encodedEjson\n */\nInjectData.decode = InjectData._decode = function(encodedEjson) {\n\tvar decodedEjsonString = decodeURIComponent(encodedEjson)\n\tif (!decodedEjsonString) return null\n\n\treturn EJSON.parse(decodedEjsonString)\n}\n","\nimport { InjectData } from './namespace'\nimport { WebAppInternals } from 'meteor/webapp'\n\n// Supports legacy uses of inject data, SSR users should turn this to false\nInjectData.injectToHead = true\n\nWebAppInternals.registerBoilerplateDataCallback(\n\t'inject-data',\n\t(req, data, arch) => {\n\t\tif (\n\t\t\treq &&\n\t\t\treq.headers &&\n\t\t\treq.headers._injectPayload &&\n\t\t\t!InjectData.disableInjection\n\t\t) {\n\t\t\tconst payload = `<script type=\"text/inject-data\">${InjectData.encode(\n\t\t\t\treq.headers._injectPayload\n\t\t\t)}</script>`\n\n\t\t\tif (InjectData.injectToHead) {\n\t\t\t\tif (!data.dynamicHead) {\n\t\t\t\t\tdata.dynamicHead = ''\n\t\t\t\t}\n\t\t\t\tdata.dynamicHead += payload\n\t\t\t} else {\n\t\t\t\tif (!data.dynamicBody) {\n\t\t\t\t\tdata.dynamicBody = ''\n\t\t\t\t}\n\t\t\t\tdata.dynamicBody += payload\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n)\n\n/**\n * Pushes data into the InjectData payload.\n * @param {object} node request object\n * @param {string} key\n * @param {*} value\n */\nInjectData.pushData = function pushData(req, key, value) {\n\tif (!req.headers) {\n\t\treq.headers = {}\n\t}\n\tif (!req.headers._injectPayload) {\n\t\treq.headers._injectPayload = {}\n\t}\n\n\treq.headers._injectPayload[key] = value\n}\n\n/**\n * Returns the object associated with the specified key.\n * @param {string} key\n */\nInjectData.getData = function getData(req, key) {\n\tif (req.headers && req.headers._injectPayload) {\n\t\treturn Object.assign({}, req.headers._injectPayload[key]);\n\t} else {\n\t\treturn null\n\t}\n}\n"]}}]