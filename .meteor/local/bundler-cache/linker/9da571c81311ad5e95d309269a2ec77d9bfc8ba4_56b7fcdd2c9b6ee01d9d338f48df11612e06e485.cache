[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar robots = Package['gadicohen:robots-txt'].robots;\n\n/* Package-scope variables */\nvar sitemaps, k;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/gadicohen_sitemaps/sitemaps.js                                             //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n/*\n * http://en.wikipedia.org/wiki/Site_map\n * http://www.sitemaps.org/index.html\n */\n\nsitemaps = {\n  _list: {},\n  _config: {\n    rootUrl: undefined,\n    gzip: false,\n  },\n  _configHooks: {}\n};\n\nfunction configSet(key, value) {\n  if (sitemaps._configHooks[key])\n    sitemaps._configHooks[key](key, value, sitemaps._config[key]);\n  sitemaps._config[key] = value;\n}\n\nsitemaps.config = function(key, value) {\n  if (!value && _.isObject(key)) {\n    for (k in key)\n      configSet(k, key[k]);\n  } else {\n    configSet(key, value);\n  }\n};\n\nif (typeof Number.lpad === \"undefined\") {\n  Number.prototype.lpad = function(length) {\n    \"use strict\";\n    var str = this.toString();\n    while (str.length < length) {\n      str = \"0\" + str;\n    }\n    return str;\n  };\n}\n\nvar urlStart = Meteor.absoluteUrl();\n\nsitemaps._configHooks.rootUrl = function(key, value) {\n  urlStart = value || Meteor.absoluteUrl();\n};\n\nvar prepareUrl = sitemaps._prepareUrl = function(url) {\n  if (url.match(/^https?:\\/\\//))\n    return url;\n  else {\n    return urlStart + encodeURI(url.replace(/^\\//, '')).replace(/&/g, '&amp;');\n  }\n};\n\n// TODO: 1) gzip, 2) sitemap index + other types + sitemap for old content\nvar Fiber = Npm.require('fibers');\nvar zlib = Npm.require('zlib');\nvar stream = Npm.require('stream');\n\nvar resAsXML = function resAsXML(res, data) {\n  res.writeHead(200, {\n    'Content-Type': 'application/xml; charset=UTF-8',\n  });\n\n  res.end(data);\n  return;\n};\n\nvar resAsGZip = function resAsGZip(res, data) {\n  // create read stream from text\n  var s = new stream.Readable();\n  s.push(data);\n  s.push(null);\n\n  res.writeHead(200, {\n    'Content-Type': 'application/xml; charset=UTF-8',\n    'Content-Encoding': 'gzip',\n  });\n\n  // pipe to zlib to compress data\n  s.pipe(zlib.createGzip()).pipe(res);\n};\n\nWebApp.connectHandlers.use(function(req, res, next) {\n  new Fiber(function() {\n    \"use strict\";\n    var out, pages, urls;\n\n    urls = _.keys(sitemaps._list);\n    if (!_.contains(urls, req.url))\n      return next();\n\n    pages = sitemaps._list[req.url];\n    if (_.isFunction(pages))\n      pages = pages(req);\n    else if (!_.isArray(pages))\n      throw new TypeError(\"sitemaps.add() expects an array or function\");\n\n    // The header is added later once we know which namespaces we need\n    out = '';\n    var namespaces = {};\n\n    var w3cDateTimeTS, date;\n    _.each(pages, function(page) {\n\n      out += '  <url>\\n'\n        + '    <loc>' + prepareUrl(page.page) + '</loc>\\n';\n\n      if (page.lastmod) {\n        date = new Date(page.lastmod);\n        w3cDateTimeTS = date.getUTCFullYear() + '-'\n          + (date.getUTCMonth()+1).lpad(2) + '-'\n          + date.getUTCDate().lpad(2) + 'T'\n          + date.getUTCHours().lpad(2) + ':'\n          + date.getUTCMinutes().lpad(2) + ':'\n          + date.getUTCSeconds().lpad(2) + '+00:00';\n        out += '    <lastmod>' + w3cDateTimeTS + '</lastmod>\\n';\n      }\n\n      if (page.changefreq)\n        out += '    <changefreq>' + page.changefreq + '</changefreq>\\n';\n\n      if (page.priority)\n        out += '    <priority>' + page.priority + '</priority>\\n';\n\n      if (page.xhtmlLinks) {\n        namespaces.xhtml = true;\n        if (!_.isArray(page.xhtmlLinks))\n          page.xhtmlLinks = [page.xhtmlLinks];\n        _.each(page.xhtmlLinks, function(link) {\n          out += '    <xhtml:link \\n';\n          if (link.href)\n            link.href = prepareUrl(link.href);\n          for (var key in link)\n            out += '      ' + key + '=\"' + link[key] + '\"\\n';\n          out += '      />\\n';\n        });\n      }\n\n      _.each(['image', 'video'], function(tag) {\n        var tagS = tag+'s';\n        if (page[tagS]) {\n          namespaces[tag] = true;\n          if (!_.isArray(page[tagS]))\n            page[tagS] = [page[tagS]];\n\n          _.each(page[tagS], function(data) {\n            out += '      <'+tag+':'+tag+'> \\n';\n\n            for (var key in data) {\n              if (key == 'loc' || key.match(/_loc$/))\n                data[key] = prepareUrl(data[key]);\n              out += '        <'+tag+':'+key+'>' + data[key] + '</'+tag+':'+key+'>\\n';\n            }\n\n            out += '      </'+tag+':'+tag+'> \\n';\n          });\n        }\n      });\n\n      out  += '   </url>\\n\\n';\n    });\n\n    out += '</urlset>\\n';\n\n    // We do this last so we know which namesapces to add\n    var header = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n      + '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"';\n\n    if (namespaces.xhtml)\n      header += '\\n  xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"';\n    if (namespaces.image)\n      header += '\\n  xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"';\n    if (namespaces.video)\n      header += '\\n  xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"';\n    header += '>\\n';\n\n    out = header + out;\n\n    // response as gzip\n    if (sitemaps._config.gzip) {\n      resAsGZip(res, out);\n      return;\n    }\n\n    resAsXML(res, out);\n    return;\n  }).run();\n});\n\nsitemaps.add = function(url, func) {\n  \"use strict\";\n  check(url, String);\n  if (url.charAt(0) !== '/')\n    url = '/' + url;\n\n  sitemaps._list[url] = func;\n  robots.addLine('Sitemap: ' + prepareUrl(url));\n};\n\n/*\nsitemaps.add('/sitemap.xml', function() {\n  // 'page' is reqired\n  // 'lastmod', 'changefreq', 'priority' are optional.\n  return [\n    { page: 'x', lastmod: new Date().getTime() },\n    { page: 'y', lastmod: new Date().getTime(), changefreq: 'monthly' },\n    { page: 'z', lastmod: new Date().getTime(), changefreq: 'monthly', priority: 0.8 }\n  ];\n});\n*/\n\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"gadicohen:sitemaps\", {\n  sitemaps: sitemaps\n});\n\n})();\n","servePath":"/packages/gadicohen_sitemaps.js"}]