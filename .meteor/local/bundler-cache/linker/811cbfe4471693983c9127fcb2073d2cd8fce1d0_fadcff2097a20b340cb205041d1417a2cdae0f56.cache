[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar Autoupdate = Package.autoupdate.Autoupdate;\n\n/* Package-scope variables */\nvar __coffeescriptShare, Knox, AWS;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/lepozepo_s3/server/startup.coffee.js                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar processBrowser;           \n\nKnox = Npm.require(\"knox\");\n\nprocessBrowser = process.browser;\n\nprocess.browser = false;\n\nAWS = Npm.require(\"aws-sdk\");\n\nprocess.browser = processBrowser;\n\nthis.S3 = {\n  config: {},\n  knox: {},\n  aws: {},\n  rules: {}\n};\n\nMeteor.startup(function() {\n  if (!_.has(S3.config, \"key\")) {\n    console.log(\"S3: AWS key is undefined\");\n  }\n  if (!_.has(S3.config, \"secret\")) {\n    console.log(\"S3: AWS secret is undefined\");\n  }\n  if (!_.has(S3.config, \"bucket\")) {\n    console.log(\"S3: AWS bucket is undefined\");\n  }\n  if (!_.has(S3.config, \"bucket\") || !_.has(S3.config, \"secret\") || !_.has(S3.config, \"key\")) {\n    return;\n  }\n  _.defaults(S3.config, {\n    region: \"us-east-1\"\n  });\n  S3.knox = Knox.createClient(S3.config);\n  return S3.aws = new AWS.S3({\n    accessKeyId: S3.config.key,\n    secretAccessKey: S3.config.secret,\n    region: S3.config.region\n  });\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/lepozepo_s3/server/sign_request.coffee.js                                                              //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar Crypto, HmacSHA256, calculate_signature, moment;\n\nMeteor.methods({\n  _s3_sign: function(ops) {\n    var expiration, key, meta_credential, meta_date, meta_uuid, policy, post_url, signature;\n    if (ops == null) {\n      ops = {};\n    }\n    this.unblock();\n    _.defaults(ops, {\n      expiration: 1800000,\n      path: \"\",\n      bucket: S3.config.bucket,\n      acl: \"public-read\",\n      region: S3.config.region,\n      server_side_encryption: false,\n      content_disposition: \"inline\"\n    });\n    check(ops, {\n      expiration: Number,\n      path: String,\n      bucket: String,\n      acl: String,\n      region: String,\n      server_side_encryption: Boolean,\n      file_type: String,\n      file_name: String,\n      file_size: Number,\n      content_disposition: String\n    });\n    expiration = new Date(Date.now() + ops.expiration);\n    expiration = expiration.toISOString();\n    if (_.isEmpty(ops.path)) {\n      key = \"\" + ops.file_name;\n    } else {\n      key = ops.path + \"/\" + ops.file_name;\n    }\n    meta_uuid = Random.id();\n    meta_date = (moment().format('YYYYMMDD')) + \"T000000Z\";\n    meta_credential = S3.config.key + \"/\" + (moment().format('YYYYMMDD')) + \"/\" + ops.region + \"/s3/aws4_request\";\n    policy = {\n      \"expiration\": expiration,\n      \"conditions\": [\n        [\"content-length-range\", 0, ops.file_size], {\n          \"key\": key\n        }, {\n          \"bucket\": ops.bucket\n        }, {\n          \"Content-Type\": ops.file_type\n        }, {\n          \"acl\": ops.acl\n        }, {\n          \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\"\n        }, {\n          \"x-amz-credential\": meta_credential\n        }, {\n          \"x-amz-date\": meta_date\n        }, {\n          \"x-amz-meta-uuid\": meta_uuid\n        }\n      ]\n    };\n    if (ops.content_disposition) {\n      policy[\"conditions\"].push({\n        \"Content-Disposition\": ops.content_disposition\n      });\n    }\n    if (ops.server_side_encryption) {\n      policy[\"conditions\"].push({\n        \"x-amz-server-side-encryption\": \"AES256\"\n      });\n    }\n    policy = new Buffer(JSON.stringify(policy), \"utf-8\").toString(\"base64\");\n    signature = calculate_signature(policy, ops.region);\n    if (ops.region === \"us-east-1\" || ops.region === \"us-standard\") {\n      post_url = \"https://s3.amazonaws.com/\" + ops.bucket;\n    } else {\n      post_url = \"https://s3-\" + ops.region + \".amazonaws.com/\" + ops.bucket;\n    }\n    return {\n      policy: policy,\n      signature: signature,\n      access_key: S3.config.key,\n      post_url: post_url,\n      url: (post_url + \"/\" + key).replace(\"https://\", \"http://\"),\n      secure_url: post_url + \"/\" + key,\n      relative_url: \"/\" + key,\n      bucket: ops.bucket,\n      acl: ops.acl,\n      key: key,\n      file_type: ops.file_type,\n      file_name: ops.file_name,\n      meta_uuid: meta_uuid,\n      meta_date: meta_date,\n      meta_credential: meta_credential\n    };\n  }\n});\n\nCrypto = Npm.require(\"crypto-js\");\n\nmoment = Npm.require(\"moment\");\n\nHmacSHA256 = Crypto.HmacSHA256;\n\ncalculate_signature = function(policy, region) {\n  var kDate, kRegion, kService, signature_key;\n  kDate = HmacSHA256(moment().format(\"YYYYMMDD\"), \"AWS4\" + S3.config.secret);\n  kRegion = HmacSHA256(region, kDate);\n  kService = HmacSHA256(\"s3\", kRegion);\n  signature_key = HmacSHA256(\"aws4_request\", kService);\n  return HmacSHA256(policy, signature_key).toString(Crypto.enc.Hex);\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/lepozepo_s3/server/delete_object.coffee.js                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar Future;\n\nFuture = Npm.require('fibers/future');\n\nMeteor.methods({\n  _s3_delete: function(path) {\n    var auth_function, delete_context, future, ref;\n    this.unblock();\n    check(path, String);\n    future = new Future();\n    if ((ref = S3.rules) != null ? ref[\"delete\"] : void 0) {\n      delete_context = _.extend(this, {\n        s3_delete_path: path\n      });\n      auth_function = _.bind(S3.rules[\"delete\"], delete_context);\n      if (!auth_function()) {\n        throw new Meteor.Error(\"Unauthorized\", \"Delete not allowed\");\n      }\n    }\n    S3.knox.deleteFile(path, function(e, r) {\n      if (e) {\n        return future[\"return\"](e);\n      } else {\n        return future[\"return\"](true);\n      }\n    });\n    return future.wait();\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"lepozepo:s3\", {\n  Knox: Knox,\n  AWS: AWS\n});\n\n})();\n","servePath":"/packages/lepozepo_s3.js","sourceMap":{"version":3,"sources":["/packages/lepozepo_s3/server/startup.coffee","/packages/lepozepo_s3/server/sign_request.coffee","/packages/lepozepo_s3/server/delete_object.coffee"],"names":[],"mappings":"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","file":"/packages/lepozepo_s3.js","sourcesContent":["#Get Knox and AWS libraries\nKnox = Npm.require \"knox\"\n\nprocessBrowser = process.browser\nprocess.browser = false\nAWS = Npm.require \"aws-sdk\"\nprocess.browser = processBrowser\n\n#Server side configuration variables\n@S3 =\n\tconfig:{}\n\tknox:{}\n\taws:{}\n\trules:{}\n\nMeteor.startup ->\n\tif not _.has S3.config,\"key\"\n\t\tconsole.log \"S3: AWS key is undefined\"\n\n\tif not _.has S3.config,\"secret\"\n\t\tconsole.log \"S3: AWS secret is undefined\"\n\n\tif not _.has S3.config,\"bucket\"\n\t\tconsole.log \"S3: AWS bucket is undefined\"\n\n\tif not _.has(S3.config,\"bucket\") or not _.has(S3.config,\"secret\") or not _.has(S3.config,\"key\")\n\t\treturn\n\n\t_.defaults S3.config,\n\t\tregion:\"us-east-1\" # us-standard\n\n\tS3.knox = Knox.createClient S3.config\n\tS3.aws = new AWS.S3\n\t\taccessKeyId:S3.config.key\n\t\tsecretAccessKey:S3.config.secret\n\t\tregion:S3.config.region\n\n","Meteor.methods\n\t_s3_sign: (ops={}) ->\n\t\t@unblock()\n\t\t# ops.expiration: the signature expires after x milliseconds | defaults to 30 minutes\n\t\t# ops.path\n\t\t# ops.file_type\n\t\t# ops.file_name\n\t\t# ops.file_size\n\t\t# ops.acl\n\t\t# ops.bucket\n\t\t# ops.server_side_encryption\n\t\t# ops.content_disposition\n\n\t\t_.defaults ops,\n\t\t\texpiration:1800000\n\t\t\tpath:\"\"\n\t\t\tbucket:S3.config.bucket\n\t\t\tacl:\"public-read\"\n\t\t\tregion:S3.config.region\n\t\t\tserver_side_encryption:false\n\t\t\tcontent_disposition:\"inline\"\n\n\t\tcheck ops,\n\t\t\texpiration:Number\n\t\t\tpath:String\n\t\t\tbucket:String\n\t\t\tacl:String\n\t\t\tregion:String\n\t\t\tserver_side_encryption:Boolean\n\t\t\tfile_type:String\n\t\t\tfile_name:String\n\t\t\tfile_size:Number\n\t\t\tcontent_disposition:String\n\n\t\texpiration = new Date Date.now() + ops.expiration\n\t\texpiration = expiration.toISOString()\n\n\t\tif _.isEmpty ops.path\n\t\t\tkey = \"#{ops.file_name}\"\n\t\telse\n\t\t\tkey = \"#{ops.path}/#{ops.file_name}\"\n\n\t\tmeta_uuid = Random.id()\n\t\tmeta_date = \"#{moment().format('YYYYMMDD')}T000000Z\"\n\t\tmeta_credential = \"#{S3.config.key}/#{moment().format('YYYYMMDD')}/#{ops.region}/s3/aws4_request\"\n\t\tpolicy =\n\t\t\t\"expiration\":expiration\n\t\t\t\"conditions\":[\n\t\t\t\t[\"content-length-range\",0,ops.file_size]\n\t\t\t\t{\"key\":key}\n\t\t\t\t{\"bucket\":ops.bucket}\n\t\t\t\t{\"Content-Type\":ops.file_type}\n\t\t\t\t{\"acl\":ops.acl}\n\t\t\t\t{\"x-amz-algorithm\": \"AWS4-HMAC-SHA256\"}\n\t\t\t\t{\"x-amz-credential\": meta_credential}\n\t\t\t\t{\"x-amz-date\": meta_date }\n\t\t\t\t{\"x-amz-meta-uuid\": meta_uuid}\n\t\t\t]\n\t\tif ops.content_disposition\n\t\t\tpolicy[\"conditions\"].push({\"Content-Disposition\": ops.content_disposition})\n\t\tif ops.server_side_encryption\n\t\t\tpolicy[\"conditions\"].push({\"x-amz-server-side-encryption\": \"AES256\"})\n\n\t\t# Encode the policy\n\t\tpolicy = new Buffer(JSON.stringify(policy), \"utf-8\").toString(\"base64\")\n\n\t\t# Sign the policy\n\t\tsignature = calculate_signature policy, ops.region\n\n\t\t# Identify post_url\n\t\tif ops.region is \"us-east-1\" or ops.region is \"us-standard\"\n\t\t\tpost_url = \"https://s3.amazonaws.com/#{ops.bucket}\"\n\t\telse\n\t\t\tpost_url = \"https://s3-#{ops.region}.amazonaws.com/#{ops.bucket}\"\n\n\t\t# Return results\n\t\tpolicy:policy\n\t\tsignature:signature\n\t\taccess_key:S3.config.key\n\t\tpost_url:post_url\n\t\turl:\"#{post_url}/#{key}\".replace(\"https://\",\"http://\")\n\t\tsecure_url:\"#{post_url}/#{key}\"\n\t\trelative_url:\"/#{key}\"\n\t\tbucket:ops.bucket\n\t\tacl:ops.acl\n\t\tkey:key\n\t\tfile_type:ops.file_type\n\t\tfile_name:ops.file_name\n\t\tmeta_uuid:meta_uuid\n\t\tmeta_date:meta_date\n\t\tmeta_credential:meta_credential\n\n\n# crypto = Npm.require(\"crypto\")\nCrypto = Npm.require \"crypto-js\"\nmoment = Npm.require \"moment\"\n{HmacSHA256} = Crypto\n\ncalculate_signature = (policy, region) ->\n\tkDate = HmacSHA256(moment().format(\"YYYYMMDD\"), \"AWS4\" + S3.config.secret);\n\tkRegion = HmacSHA256(region, kDate);\n\tkService = HmacSHA256(\"s3\", kRegion);\n\tsignature_key = HmacSHA256(\"aws4_request\", kService);\n\n\tHmacSHA256 policy, signature_key\n\t\t.toString Crypto.enc.Hex\n\n\n","Future = Npm.require 'fibers/future'\n\nMeteor.methods\n\t_s3_delete: (path) ->\n\t\t@unblock()\n\t\tcheck path,String\n\n\t\tfuture = new Future()\n\n\t\tif S3.rules?.delete\n\t\t\tdelete_context = _.extend this,\n\t\t\t\ts3_delete_path:path\n\n\t\t\tauth_function = _.bind S3.rules.delete,delete_context\n\t\t\tif not auth_function()\n\t\t\t\tthrow new Meteor.Error \"Unauthorized\", \"Delete not allowed\"\n\n\t\tS3.knox.deleteFile path, (e,r) ->\n\t\t\tif e\n\t\t\t\tfuture.return e\n\t\t\telse\n\t\t\t\tfuture.return true\n\n\t\tfuture.wait()\n"]}}]