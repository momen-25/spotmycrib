[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\n\n/* Package-scope variables */\nvar InjectData;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////\n//                                                                             //\n// packages/staringatlights_inject-data/lib/namespace.js                       //\n//                                                                             //\n/////////////////////////////////////////////////////////////////////////////////\n                                                                               //\nInjectData = {};\n\nif (Package['meteorhacks:inject-data']) {\n    Package['meteorhacks:inject-data'].InjectData = InjectData;\n}\n/////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////\n//                                                                             //\n// packages/staringatlights_inject-data/lib/utils.js                           //\n//                                                                             //\n/////////////////////////////////////////////////////////////////////////////////\n                                                                               //\nInjectData._encode = function(ejson) {\n  var ejsonString = EJSON.stringify(ejson);\n  return encodeURIComponent(ejsonString);\n};\n\nInjectData._decode = function(encodedEjson) {\n  var decodedEjsonString = decodeURIComponent(encodedEjson);\n  if(!decodedEjsonString) return null;\n\n  return EJSON.parse(decodedEjsonString);\n};\n\n/////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////\n//                                                                             //\n// packages/staringatlights_inject-data/lib/server.js                          //\n//                                                                             //\n/////////////////////////////////////////////////////////////////////////////////\n                                                                               //\nvar http = Npm.require('http');\n\nvar templateText = Assets.getText('lib/inject.html');\nvar injectDataTemplate = _.template(templateText);\n\n// New injection method uses dynamicHead\nWebApp.connectHandlers.use(function injectDataMiddleware(req, res, next) {\n    if (res._injectHtml && !res._injected) {\n        req.dynamicHead = req.dynamicHead || '';\n        req.dynamicHead += res._injectHtml;\n    }\n    next();\n});\n\n// This function will try and ensure that our injection middleware is always\n// last in the WebApp.connectHandlers stack.\nfunction ensureMiddlewareIsLast() {\n    var stack = WebApp.connectHandlers.stack;\n\n    // Ensure our middleware is at the end\n    if (stack[stack.length - 1].handle.name === 'injectDataMiddleware') {\n        return;\n    }\n\n    // Move our middleware to the end of the stack\n    for (var i in stack) {\n        if (stack[i].handle.name === 'injectDataMiddleware') {\n            stack.push(stack.splice(i, 1)[0]);\n            return true;\n        }\n    }\n}\n\n// custome API\nInjectData.pushData = function pushData(res, key, value) {\n    if (!res._injectPayload) {\n        res._injectPayload = {};\n    }\n\n    res._injectPayload[key] = value;\n\n    // if cors headers included if may cause some security holes\n    // so we simply turn off injecting if we detect an cors header\n    // read more: http://goo.gl/eGwb4e\n    if (res._headers && res._headers['access-control-allow-origin']) {\n        var warnMessage =\n            'warn: injecting data turned off due to CORS headers. ' +\n            'read more: http://goo.gl/eGwb4e';\n        console.warn(warnMessage);\n        return;\n    }\n\n    // inject data\n    var data = InjectData._encode(res._injectPayload);\n    res._injectHtml = injectDataTemplate({ data: data });\n    InjectData._hijackWriteIfNeeded(res);\n    ensureMiddlewareIsLast();\n};\n\nInjectData.getData = function getData(res, key) {\n    if (res._injectPayload) {\n        return _.clone(res._injectPayload[key]);\n    } else {\n        return null;\n    }\n};\n\nInjectData._hijackWriteIfNeeded = function (res) {\n    if (res._writeHijacked) {\n        return;\n    }\n    res._writeHijacked = true;\n\n    var originalWrite = res.write;\n    res.write = function (chunk, encoding) {\n        var condition =\n            res._injectHtml && !res._injected &&\n            encoding === undefined &&\n            /<!DOCTYPE html>/.test(chunk);\n\n        if (condition) {\n            // if this is a buffer, convert it to string\n            chunk = chunk.toString();\n            // Don't inject if we already have via the dynamicHead method\n            if (/<script type=\"text\\/inject-data\">/.test(chunk) === false) {\n                chunk = chunk.replace('<script', res._injectHtml + '<script');\n            }\n\n            res._injected = true;\n        }\n\n        originalWrite.call(res, chunk, encoding);\n    };\n};\n/////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"staringatlights:inject-data\", {\n  InjectData: InjectData\n});\n\n})();\n","servePath":"/packages/staringatlights_inject-data.js"}]