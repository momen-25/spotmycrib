[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar Hook = Package['callback-hook'].Hook;\nvar URL = Package.url.URL;\nvar URLSearchParams = Package.url.URLSearchParams;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Accounts, options, stampedLoginToken, handler, name, query, oldestValidDate, user;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-base\":{\"server_main.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/accounts-base/server_main.js                                                                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n!function (module1) {\n  module1.export({\n    AccountsServer: () => AccountsServer\n  });\n  let AccountsServer;\n  module1.link(\"./accounts_server.js\", {\n    AccountsServer(v) {\n      AccountsServer = v;\n    }\n\n  }, 0);\n\n  /**\n   * @namespace Accounts\n   * @summary The namespace for all server-side accounts-related methods.\n   */\n  Accounts = new AccountsServer(Meteor.server); // Users table. Don't use the normal autopublish, since we want to hide\n  // some fields. Code to autopublish this is in accounts_server.js.\n  // XXX Allow users to configure this collection name.\n\n  /**\n   * @summary A [Mongo.Collection](#collections) containing user documents.\n   * @locus Anywhere\n   * @type {Mongo.Collection}\n   * @importFromPackage meteor\n  */\n\n  Meteor.users = Accounts.users;\n}.call(this, module);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_common.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/accounts-base/accounts_common.js                                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  AccountsCommon: () => AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS: () => EXPIRE_TOKENS_INTERVAL_MS,\n  CONNECTION_CLOSE_DELAY_MS: () => CONNECTION_CLOSE_DELAY_MS\n});\n\nclass AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {}; // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n\n    this.connection = undefined;\n\n    this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n\n\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    }); // Callback exceptions are printed with Meteor._debug and ignored.\n\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    }); // Expose for testing.\n\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n\n    this.LoginCancelledError.numericError = 0x8acdc2f; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n\n    Meteor.startup(() => {\n      const {\n        ServiceConfiguration\n      } = Package['service-configuration'];\n      this.loginServiceConfiguration = ServiceConfiguration.configurations;\n      this.ConfigError = ServiceConfiguration.ConfigError;\n    });\n  }\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n\n\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  } // merge the defaultFieldSelector with an existing options object\n\n\n  _addDefaultFieldSelector() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options; // if no field selector then just use defaultFieldSelector\n\n    if (!options.fields) return _objectSpread(_objectSpread({}, options), {}, {\n      fields: this._options.defaultFieldSelector\n    }); // if empty field selector then the full user object is explicitly requested, so obey\n\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options; // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n\n    if (!!options.fields[keys[0]]) return options; // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]] ? options : _objectSpread(_objectSpread({}, options), {}, {\n      fields: _objectSpread(_objectSpread({}, options.fields), this._options.defaultFieldSelector)\n    });\n  }\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n\n\n  user(options) {\n    const userId = this.userId();\n    return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;\n  } // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`.\n   */\n\n\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n    } // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n\n\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      }\n\n      if (!Package[\"oauth-encryption\"]) {\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      }\n\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _objectSpread({}, options);\n      delete options.oauthSecretKey;\n    } // validate option keys\n\n\n    const VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\", \"ambiguousErrorMessages\", \"bcryptRounds\", \"defaultFieldSelector\"];\n    Object.keys(options).forEach(key => {\n      if (!VALID_KEYS.includes(key)) {\n        throw new Error(\"Accounts.config: Invalid key: \".concat(key));\n      }\n    }); // set values in Accounts._options\n\n    VALID_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          throw new Error(\"Can't set `\".concat(key, \"` more than once\"));\n        }\n\n        this._options[key] = options[key];\n      }\n    });\n  }\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n\n\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func); // call the just registered callback if already logged in\n\n\n    this._startupCallback(ret.callback);\n\n    return ret;\n  }\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n\n\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n\n\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (!Meteor.isClient) {\n      return;\n    } // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n    return (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = .1 * this._getTokenLifetimeMs();\n\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n\n    return new Date() > new Date(when) - minLifetimeMs;\n  } // No-op on the server, overridden on the client.\n\n\n  _startupCallback(callback) {}\n\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\n\n\nMeteor.user = options => Accounts.user(options); // how long (in days) until a login token expires\n\n\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // how long (in days) until reset password token expires\n\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires\n\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\n\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\n\nconst EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;\nconst CONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_server.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/accounts-base/accounts_server.js                                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\nmodule.export({\n  AccountsServer: () => AccountsServer\n});\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 0);\nlet AccountsCommon, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  },\n\n  EXPIRE_TOKENS_INTERVAL_MS(v) {\n    EXPIRE_TOKENS_INTERVAL_MS = v;\n  },\n\n  CONNECTION_CLOSE_DELAY_MS(v) {\n    CONNECTION_CLOSE_DELAY_MS = v;\n  }\n\n}, 1);\nlet URL;\nmodule.link(\"meteor/url\", {\n  URL(v) {\n    URL = v;\n  }\n\n}, 2);\nconst hasOwn = Object.prototype.hasOwnProperty;\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\n\nclass AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n    this._server = server || Meteor.server; // Set up the server's methods, as if by calling Meteor.methods.\n\n    this._initServerMethods();\n\n    this._initAccountDataHooks(); // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n\n\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    }; // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1\n      }\n    };\n\n    this._initServerPublications(); // connectionId -> {connection, loginToken}\n\n\n    this._accountData = {}; // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1; // for the number described above.\n    // list of all registered handlers.\n\n    this._loginHandlers = [];\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n    this._validateLoginHook = new Hook({\n      bindEnvironment: false\n    });\n    this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(\"#/reset-password/\".concat(token), extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(\"#/verify-email/\".concat(token), extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(\"#/enroll-account/\".concat(token), extraParams)\n    };\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = function (path) {\n      let extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n\n      return url.toString();\n    };\n  } ///\n  /// CURRENT USER\n  ///\n  // @override of \"abstract\" non-implementation in accounts_common.js\n\n\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the infomation from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n\n    if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  } ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n\n\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n\n\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n\n\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  } ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n\n\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n\n\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.each(callback => {\n      let ret;\n\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      } catch (e) {\n        attempt.allowed = false; // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n\n        attempt.error = e;\n        return true;\n      }\n\n      if (!ret) {\n        attempt.allowed = false; // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n\n        if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n\n      return true;\n    });\n  }\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {\n        fields: this._options.defaultFieldSelector\n      });\n      callback({\n        user,\n        connection\n      });\n      return true;\n    });\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (!stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n\n      this._insertLoginToken(userId, stampedLoginToken);\n    } // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n\n\n    Meteor._noYieldsAllowed(() => this._setLoginToken(userId, methodInvocation.connection, this._hashLoginToken(stampedLoginToken.token)));\n\n    methodInvocation.setUserId(userId);\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  }\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  _attemptLogin(methodInvocation, methodName, methodArgs, result) {\n    if (!result) throw new Error(\"result is required\"); // XXX A programming error in a login handler can lead to this occuring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n\n    if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");\n    let user;\n    if (result.userId) user = this.users.findOne(result.userId, {\n      fields: this._options.defaultFieldSelector\n    });\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !!(result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.error) {\n      attempt.error = result.error;\n    }\n\n    if (user) {\n      attempt.user = user;\n    } // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n\n\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = _objectSpread(_objectSpread({}, this._loginUser(methodInvocation, result.userId, result.stampedLoginToken)), result.options);\n\n      ret.type = attempt.type;\n\n      this._successfulLogin(methodInvocation.connection, attempt);\n\n      return ret;\n    } else {\n      this._failedLogin(methodInvocation.connection, attempt);\n\n      throw attempt.error;\n    }\n  }\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  _loginMethod(methodInvocation, methodName, methodArgs, type, fn) {\n    return this._attemptLogin(methodInvocation, methodName, methodArgs, tryLoginMethod(type, fn));\n  }\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(methodInvocation, methodName, methodArgs, result) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {\n        fields: this._options.defaultFieldSelector\n      });\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    this._failedLogin(methodInvocation.connection, attempt); // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n\n\n    return attempt;\n  }\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n  // The main entry point for auth packages to hook in to login.\n  //\n  // A login handler is a login method which can return `undefined` to\n  // indicate that the login request is not handled by this handler.\n  //\n  // @param name {String} Optional.  The service name, used by default\n  // if a specific service name isn't returned in the result.\n  //\n  // @param handler {Function} A function that receives an options object\n  // (as passed as an argument to the `login` method) and returns one of:\n  // - `undefined`, meaning don't handle;\n  // - a login method result object\n  registerLoginHandler(name, handler) {\n    if (!handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: handler\n    });\n  }\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = tryLoginMethod(handler.name, () => handler.handler.call(methodInvocation, options));\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  }\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            hashedToken: loginToken\n          }, {\n            token: loginToken\n          }]\n        }\n      }\n    });\n  }\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this; // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n\n    const methods = {}; // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n\n    methods.login = function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = accounts._runLoginHandlers(this, options);\n\n      return accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n\n      accounts._setLoginToken(this.userId, this.connection, null);\n\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n\n      accounts._successfulLogout(this.connection, this.userId);\n\n      this.setUserId(null);\n    }; // Delete all the current user's tokens and close all open connections logged\n    // in as this user. Returns a fresh new login token that this client can\n    // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n    // immediately instead of using a delay.\n    //\n    // XXX COMPAT WITH 0.7.2\n    // This single `logoutOtherClients` method has been replaced with two\n    // methods, one that you call to get a new token, and another that you\n    // call to remove all tokens except your own. The new design allows\n    // clients to know when other clients have actually been logged\n    // out. (The `logoutOtherClients` method guarantees the caller that\n    // the other clients will be logged out at some point, but makes no\n    // guarantees about when.) This method is left in for backwards\n    // compatibility, especially since application code might be calling\n    // this method directly.\n    //\n    // @returns {Object} Object with token and tokenExpires keys.\n\n\n    methods.logoutOtherClients = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: {\n          \"services.resume.loginTokens\": true\n        }\n      });\n\n      if (user) {\n        // Save the current tokens in the database to be deleted in\n        // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n        // caller's browser time to find the fresh token in localStorage. We save\n        // the tokens in the database in case we crash before actually deleting\n        // them.\n        const tokens = user.services.resume.loginTokens;\n\n        const newToken = accounts._generateStampedLoginToken();\n\n        accounts.users.update(this.userId, {\n          $set: {\n            \"services.resume.loginTokensToDelete\": tokens,\n            \"services.resume.haveLoginTokensToDelete\": true\n          },\n          $push: {\n            \"services.resume.loginTokens\": accounts._hashStampedToken(newToken)\n          }\n        });\n        Meteor.setTimeout(() => {\n          // The observe on Meteor.users will take care of closing the connections\n          // associated with `tokens`.\n          accounts._deleteSavedTokensForUser(this.userId, tokens);\n        }, accounts._noConnectionCloseDelayForTest ? 0 : CONNECTION_CLOSE_DELAY_MS); // We do not set the login token on this connection, but instead the\n        // observe closes the connection and the client will reconnect with the\n        // new token.\n\n        return {\n          token: newToken.token,\n          tokenExpires: accounts._tokenExpiration(newToken.when)\n        };\n      } else {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n    }; // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n\n\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: {\n          \"services.resume.loginTokens\": 1\n        }\n      });\n\n      if (!this.userId || !user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      } // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n\n\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n\n      const currentStampedToken = user.services.resume.loginTokens.find(stampedToken => stampedToken.hashedToken === currentHashedToken);\n\n      if (!currentStampedToken) {\n        // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n\n      const newStampedToken = accounts._generateStampedLoginToken();\n\n      newStampedToken.when = currentStampedToken.when;\n\n      accounts._insertLoginToken(this.userId, newStampedToken);\n\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    }; // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n\n\n    methods.removeOtherTokens = function () {\n      if (!this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n\n      const currentToken = accounts._getLoginToken(this.connection.id);\n\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": {\n            hashedToken: {\n              $ne: currentToken\n            }\n          }\n        }\n      });\n    }; // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n\n\n    methods.configureLoginService = options => {\n      check(options, Match.ObjectIncluding({\n        service: String\n      })); // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n\n      if (!(accounts.oauth && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      const {\n        ServiceConfiguration\n      } = Package['service-configuration'];\n      if (ServiceConfiguration.configurations.findOne({\n        service: options.service\n      })) throw new Meteor.Error(403, \"Service \".concat(options.service, \" already configured\"));\n      if (hasOwn.call(options, 'secret') && usingOAuthEncryption()) options.secret = OAuthEncryption.seal(options.secret);\n      ServiceConfiguration.configurations.insert(options);\n    };\n\n    accounts._server.methods(methods);\n  }\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n\n        delete this._accountData[connection.id];\n      });\n    });\n  }\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const {\n      users,\n      _autopublishFields,\n      _defaultPublishFields\n    } = this; // Publish all login service configuration fields other than secret.\n\n    this._server.publish(\"meteor.loginServiceConfiguration\", () => {\n      const {\n        ServiceConfiguration\n      } = Package['service-configuration'];\n      return ServiceConfiguration.configurations.find({}, {\n        fields: {\n          secret: 0\n        }\n      });\n    }, {\n      is_auto: true\n    }); // not techincally autopublish, but stops the warning.\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n\n\n    Meteor.startup(() => {\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: _defaultPublishFields.projection\n          });\n        } else {\n          return null;\n        }\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      });\n    }); // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => _objectSpread(_objectSpread({}, prev), {}, {\n        [field]: 1\n      }), {});\n\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser)\n          });\n        } else {\n          return null;\n        }\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      }); // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n\n\n      this._server.publish(null, function () {\n        const selector = this.userId ? {\n          _id: {\n            $ne: this.userId\n          }\n        } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers)\n        });\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      });\n    });\n  }\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n\n    this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);\n  }\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  }\n\n  ///\n  /// ACCOUNT DATA\n  ///\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  }\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId]; // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n\n    if (!data) return;\n    if (value === undefined) delete data[field];else data[field] = value;\n  }\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  }\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const {\n      token\n    } = stampedToken,\n          hashedStampedToken = _objectWithoutProperties(stampedToken, [\"token\"]);\n\n    return _objectSpread(_objectSpread({}, hashedStampedToken), {}, {\n      hashedToken: this._hashLoginToken(token)\n    });\n  }\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? _objectSpread({}, query) : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  }\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);\n  }\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  }\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  }\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  }\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  }\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser; // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, {\n          fields: {\n            _id: 1\n          }\n        }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n\n        }, {\n          nonMutatingCallbacks: true\n        }); // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (!foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  }\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date()\n    };\n  }\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      $or: [{\n        \"services.password.reset.reason\": \"reset\"\n      }, {\n        \"services.password.reset.reason\": {\n          $exists: false\n        }\n      }]\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  } // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n\n\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      \"services.password.reset.reason\": \"enroll\"\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  } // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n\n\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const userFilter = userId ? {\n      _id: userId\n    } : {}; // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n\n    this.users.update(_objectSpread(_objectSpread({}, userFilter), {}, {\n      $or: [{\n        \"services.resume.loginTokens.when\": {\n          $lt: oldestValidDate\n        }\n      }, {\n        \"services.resume.loginTokens.when\": {\n          $lt: +oldestValidDate\n        }\n      }]\n    }), {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            when: {\n              $lt: oldestValidDate\n            }\n          }, {\n            when: {\n              $lt: +oldestValidDate\n            }\n          }]\n        }\n      }\n    }, {\n      multi: true\n    }); // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  }\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments); // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n\n    if (hasOwn.call(this._options, 'loginExpirationInDays') && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  }\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = _objectSpread({\n      createdAt: new Date(),\n      _id: Random.id()\n    }, user);\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service => pinEncryptedFieldsToUser(user.services[service], user._id));\n    }\n\n    let fullUser;\n\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user); // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n\n      if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (!hook(fullUser)) throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address')) throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username')) throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n\n    return userId;\n  }\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n    return !domain || typeof domain === 'function' && domain(email) || typeof domain === 'string' && new RegExp(\"@\".concat(Meteor._escapeRegExp(domain), \"$\"), 'i').test(email);\n  }\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  }\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {\n        fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }\n      }).forEach(user => {\n        this._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete);\n      });\n    });\n  }\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(serviceName, serviceData, options) {\n    options = _objectSpread({}, options);\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n    }\n\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\"Service data for service \".concat(serviceName, \" must include id\"));\n    } // Look for a user with the appropriate service user id.\n\n\n    const selector = {};\n    const serviceIdKey = \"services.\".concat(serviceName, \".id\"); // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{}, {}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {\n      fields: this._options.defaultFieldSelector\n    }); // Before continuing, run user hook to see if we should continue\n\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    } // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n\n\n    let opts = user ? {} : options;\n\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key => setAttrs[\"services.\".concat(serviceName, \".\").concat(key)] = serviceData[key]); // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n\n      setAttrs = _objectSpread(_objectSpread({}, setAttrs), opts);\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {\n        services: {}\n      };\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  }\n\n  // Removes default rate limiting rule\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  }\n\n  // Add a default rule of limiting logins, creating new users and password reset\n  // to 5 times every 10 seconds per connection.\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword'].includes(name),\n        connectionId: connectionId => true\n      }, 5, 10000);\n    }\n  }\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = (type, fn) => {\n  let result;\n\n  try {\n    result = fn();\n  } catch (e) {\n    result = {\n      error: e\n    };\n  }\n\n  if (result && !result.type && type) result.type = type;\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}; // Login handler for resume tokens.\n\n\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume) return undefined;\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume); // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n\n\n  let user = accounts.users.findOne({\n    \"services.resume.loginTokens.hashedToken\": hashedToken\n  }, {\n    fields: {\n      \"services.resume.loginTokens.$\": 1\n    }\n  });\n\n  if (!user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [{\n        \"services.resume.loginTokens.hashedToken\": hashedToken\n      }, {\n        \"services.resume.loginTokens.token\": options.resume\n      }]\n    }, // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n    {\n      fields: {\n        \"services.resume.loginTokens\": 1\n      }\n    });\n  }\n\n  if (!user) return {\n    error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n  }; // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token => token.hashedToken === hashedToken);\n\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token => token.token === options.resume);\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n\n  if (new Date() >= tokenExpires) return {\n    userId: user._id,\n    error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n  }; // Update to a hashed token when an unhashed token is encountered.\n\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update({\n      _id: user._id,\n      \"services.resume.loginTokens.token\": options.resume\n    }, {\n      $addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }\n    }); // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          \"token\": options.resume\n        }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (accounts, oldestValidDate, tokenFilter, userId) => {\n  const userFilter = userId ? {\n    _id: userId\n  } : {};\n  const resetRangeOr = {\n    $or: [{\n      \"services.password.reset.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.password.reset.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  };\n  const expireFilter = {\n    $and: [tokenFilter, resetRangeOr]\n  };\n  accounts.users.update(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n    $unset: {\n      \"services.password.reset\": \"\"\n    }\n  }, {\n    multi: true\n  });\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n\n    accounts._expirePasswordResetTokens();\n\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}; ///\n/// OAuth Encryption Support\n///\n\n\nconst OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nconst usingOAuthEncryption = () => {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}; // OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\n\n\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}; // Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\n\nMeteor.startup(() => {\n  if (!usingOAuthEncryption()) {\n    return;\n  }\n\n  const {\n    ServiceConfiguration\n  } = Package['service-configuration'];\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: {\n        $exists: true\n      }\n    }, {\n      \"secret.algorithm\": {\n        $exists: false\n      }\n    }]\n  }).forEach(config => {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n}); // XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\n\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile) user.profile = options.profile;\n  return user;\n}; // Validate new user's email or Google/Facebook/GitHub account's email\n\n\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce((prev, email) => prev || this._testEmailDomain(email.address), false);\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce((prev, service) => service.email && this._testEmailDomain(service.email), false);\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, \"@\".concat(domain, \" email required\"));\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      } // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n\n\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n\n  }); /// DEFAULT INDEXES ON USERS\n\n  users._ensureIndex('username', {\n    unique: true,\n    sparse: true\n  });\n\n  users._ensureIndex('emails.address', {\n    unique: true,\n    sparse: true\n  });\n\n  users._ensureIndex('services.resume.loginTokens.hashedToken', {\n    unique: true,\n    sparse: true\n  });\n\n  users._ensureIndex('services.resume.loginTokens.token', {\n    unique: true,\n    sparse: true\n  }); // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n\n\n  users._ensureIndex('services.resume.haveLoginTokensToDelete', {\n    sparse: true\n  }); // For expiring login tokens\n\n\n  users._ensureIndex(\"services.resume.loginTokens.when\", {\n    sparse: true\n  }); // For expiring password tokens\n\n\n  users._ensureIndex('services.password.reset.when', {\n    sparse: true\n  });\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/accounts-base/server_main.js\");\n\n/* Exports */\nPackage._define(\"accounts-base\", exports, {\n  Accounts: Accounts\n});\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["packages/accounts-base/server_main.js","packages/accounts-base/accounts_common.js","packages/accounts-base/accounts_server.js"],"names":["module1","export","AccountsServer","link","v","Accounts","Meteor","server","users","_objectSpread","module","default","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","constructor","options","_options","connection","undefined","_initConnection","Mongo","Collection","_preventAutopublish","_onLoginHook","Hook","bindEnvironment","debugPrintExceptions","_onLoginFailureHook","_onLogoutHook","DEFAULT_LOGIN_EXPIRATION_DAYS","LOGIN_UNEXPIRING_TOKEN_DAYS","lceName","LoginCancelledError","makeErrorType","description","message","prototype","name","numericError","startup","ServiceConfiguration","Package","loginServiceConfiguration","configurations","ConfigError","userId","Error","_addDefaultFieldSelector","defaultFieldSelector","fields","keys","Object","length","keys2","user","findOne","config","isServer","__meteor_runtime_config__","accountsConfigCalled","_debug","hasOwnProperty","call","isClient","OAuthEncryption","loadKey","oauthSecretKey","VALID_KEYS","forEach","key","includes","onLogin","func","ret","register","_startupCallback","callback","onLoginFailure","onLogout","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","_tokenExpiration","when","Date","getTime","_tokenExpiresSoon","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","_objectWithoutProperties","crypto","URL","hasOwn","_server","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_defaultPublishFields","projection","profile","username","emails","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","urls","resetPassword","token","extraParams","buildEmailUrl","verifyEmail","enrollAccount","addDefaultRateLimit","path","url","absoluteUrl","params","entries","value","searchParams","append","toString","currentInvocation","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","validateLoginAttempt","validateNewUser","push","beforeExternalLogin","_beforeExternalLoginHook","onCreateUser","_onCreateUserHook","onExternalLogin","_onExternalLoginHook","_validateLogin","attempt","each","cloneAttemptWithConnection","e","allowed","error","_successfulLogin","_failedLogin","_successfulLogout","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","setUserId","id","tokenExpires","_attemptLogin","methodName","methodArgs","result","type","methodArguments","Array","from","_loginMethod","fn","tryLoginMethod","_reportLoginFailure","registerLoginHandler","handler","_runLoginHandlers","destroyToken","loginToken","update","$pull","$or","hashedToken","accounts","methods","login","check","arguments","logout","_getLoginToken","logoutOtherClients","tokens","services","resume","loginTokens","newToken","$set","$push","_hashStampedToken","setTimeout","_deleteSavedTokensForUser","_noConnectionCloseDelayForTest","getNewToken","currentHashedToken","currentStampedToken","find","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","Match","ObjectIncluding","service","String","oauth","serviceNames","usingOAuthEncryption","secret","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","is_auto","_id","autopublish","toFieldSelector","reduce","prev","field","selector","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","setDefaultPublishFields","_getAccountData","connectionId","data","_setAccountData","hash","createHash","digest","hashedStampedToken","_insertHashedLoginToken","query","$addToSet","_clearAllLoginTokens","_getUserObserve","observe","stop","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","nonMutatingCallbacks","Random","_expirePasswordResetTokens","oldestValidDate","tokenLifetimeMs","tokenFilter","$exists","expirePasswordToken","_expirePasswordEnrollTokens","_expireTokens","userFilter","$lt","multi","superResult","expireTokenInterval","clearInterval","insertUserDoc","createdAt","pinEncryptedFieldsToUser","fullUser","defaultCreateUserHook","hook","errmsg","_testEmailDomain","email","domain","restrictCreationByEmailDomain","RegExp","_escapeRegExp","test","tokensToDelete","$unset","$pullAll","loginTokensToDelete","updateOrCreateUserFromExternalService","serviceName","serviceData","serviceIdKey","isNaN","parseInt","setAttrs","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","defaultRateLimiterRuleId","addRule","clientAddress","clonedAttempt","EJSON","clone","defaultResumeLoginHandler","oldUnhashedStyleToken","resetRangeOr","expireFilter","$and","setInterval","keyIsLoaded","isSealed","open","emailIsGood","address","values","allow","modifier","fetch","_ensureIndex","unique","sparse"],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import { AccountsServer } from \"./accounts_server.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all server-side accounts-related methods.\n */\nAccounts = new AccountsServer(Meteor.server);\n\n// Users table. Don't use the normal autopublish, since we want to hide\n// some fields. Code to autopublish this is in accounts_server.js.\n// XXX Allow users to configure this collection name.\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n*/\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the server version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsServer\n};\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(\n      lceName,\n      function (description) {\n        this.message = description;\n      }\n    );\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n\n    // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n    Meteor.startup(() => {\n      const { ServiceConfiguration } = Package['service-configuration'];\n      this.loginServiceConfiguration = ServiceConfiguration.configurations;\n      this.ConfigError = ServiceConfiguration.ConfigError;\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector(options = {}) {\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields) return {\n      ...options,\n      fields: this._options.defaultFieldSelector,\n    };\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]] ? options : {\n      ...options,\n      fields: {\n        ...options.fields,\n        ...this._options.defaultFieldSelector,\n      }\n    }\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    const userId = this.userId();\n    return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      }\n      if (! Package[\"oauth-encryption\"]) {\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      }\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = { ...options };\n      delete options.oauthSecretKey;\n    }\n\n    // validate option keys\n    const VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\",\n                      \"ambiguousErrorMessages\", \"bcryptRounds\", \"defaultFieldSelector\"];\n\n    Object.keys(options).forEach(key => {\n      if (!VALID_KEYS.includes(key)) {\n        throw new Error(`Accounts.config: Invalid key: ${key}`);\n      }\n    });\n\n    // set values in Accounts._options\n    VALID_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          throw new Error(`Can't set \\`${key}\\` more than once`);\n        }\n        this._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      (this._options.loginExpirationInDays === null)\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (loginExpirationInDays\n        || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = (options) => Accounts.user(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nexport const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nexport const CONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n","import crypto from 'crypto';\nimport {\n  AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS,\n  CONNECTION_CLOSE_DELAY_MS\n} from './accounts_common.js';\nimport { URL } from 'meteor/url';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1,\n      }\n    };\n\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(`#/reset-password/${token}`, extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(`#/verify-email/${token}`, extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(`#/enroll-account/${token}`, extraParams),\n    };\n\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = (path, extraParams = {}) => {\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n      return url.toString();\n    };\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the infomation from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.each(callback => {\n      let ret;\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      }\n      catch (e) {\n        attempt.allowed = false;\n        // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n        attempt.error = e;\n        return true;\n      }\n      if (! ret) {\n        attempt.allowed = false;\n        // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n        if (!attempt.error)\n          attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n      return true;\n    });\n  };\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {fields: this._options.defaultFieldSelector});\n      callback({ user, connection });\n      return true;\n    });\n  };\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (! stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n      this._insertLoginToken(userId, stampedLoginToken);\n    }\n\n    // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n    Meteor._noYieldsAllowed(() =>\n      this._setLoginToken(\n        userId,\n        methodInvocation.connection,\n        this._hashLoginToken(stampedLoginToken.token)\n      )\n    );\n\n    methodInvocation.setUserId(userId);\n\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  };\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  _attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    if (!result)\n      throw new Error(\"result is required\");\n\n    // XXX A programming error in a login handler can lead to this occuring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n    if (!result.userId && !result.error)\n      throw new Error(\"A login method must specify a userId or an error\");\n\n    let user;\n    if (result.userId)\n      user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !! (result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n    if (result.error) {\n      attempt.error = result.error;\n    }\n    if (user) {\n      attempt.user = user;\n    }\n\n    // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = {\n        ...this._loginUser(\n          methodInvocation,\n          result.userId,\n          result.stampedLoginToken\n        ),\n        ...result.options\n      };\n      ret.type = attempt.type;\n      this._successfulLogin(methodInvocation.connection, attempt);\n      return ret;\n    }\n    else {\n      this._failedLogin(methodInvocation.connection, attempt);\n      throw attempt.error;\n    }\n  };\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  _loginMethod(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    type,\n    fn\n  ) {\n    return this._attemptLogin(\n      methodInvocation,\n      methodName,\n      methodArgs,\n      tryLoginMethod(type, fn)\n    );\n  };\n\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n    return attempt;\n  };\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n\n  // The main entry point for auth packages to hook in to login.\n  //\n  // A login handler is a login method which can return `undefined` to\n  // indicate that the login request is not handled by this handler.\n  //\n  // @param name {String} Optional.  The service name, used by default\n  // if a specific service name isn't returned in the result.\n  //\n  // @param handler {Function} A function that receives an options object\n  // (as passed as an argument to the `login` method) and returns one of:\n  // - `undefined`, meaning don't handle;\n  // - a login method result object\n\n  registerLoginHandler(name, handler) {\n    if (! handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: handler\n    });\n  };\n\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = tryLoginMethod(\n        handler.name,\n        () => handler.handler.call(methodInvocation, options)\n      );\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  };\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { hashedToken: loginToken },\n            { token: loginToken }\n          ]\n        }\n      }\n    });\n  };\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this;\n\n\n    // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n    const methods = {};\n\n    // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n    methods.login = function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = accounts._runLoginHandlers(this, options);\n\n      return accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n      accounts._setLoginToken(this.userId, this.connection, null);\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n      accounts._successfulLogout(this.connection, this.userId);\n      this.setUserId(null);\n    };\n\n    // Delete all the current user's tokens and close all open connections logged\n    // in as this user. Returns a fresh new login token that this client can\n    // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n    // immediately instead of using a delay.\n    //\n    // XXX COMPAT WITH 0.7.2\n    // This single `logoutOtherClients` method has been replaced with two\n    // methods, one that you call to get a new token, and another that you\n    // call to remove all tokens except your own. The new design allows\n    // clients to know when other clients have actually been logged\n    // out. (The `logoutOtherClients` method guarantees the caller that\n    // the other clients will be logged out at some point, but makes no\n    // guarantees about when.) This method is left in for backwards\n    // compatibility, especially since application code might be calling\n    // this method directly.\n    //\n    // @returns {Object} Object with token and tokenExpires keys.\n    methods.logoutOtherClients = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: {\n          \"services.resume.loginTokens\": true\n        }\n      });\n      if (user) {\n        // Save the current tokens in the database to be deleted in\n        // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n        // caller's browser time to find the fresh token in localStorage. We save\n        // the tokens in the database in case we crash before actually deleting\n        // them.\n        const tokens = user.services.resume.loginTokens;\n        const newToken = accounts._generateStampedLoginToken();\n        accounts.users.update(this.userId, {\n          $set: {\n            \"services.resume.loginTokensToDelete\": tokens,\n            \"services.resume.haveLoginTokensToDelete\": true\n          },\n          $push: { \"services.resume.loginTokens\": accounts._hashStampedToken(newToken) }\n        });\n        Meteor.setTimeout(() => {\n          // The observe on Meteor.users will take care of closing the connections\n          // associated with `tokens`.\n          accounts._deleteSavedTokensForUser(this.userId, tokens);\n        }, accounts._noConnectionCloseDelayForTest ? 0 :\n          CONNECTION_CLOSE_DELAY_MS);\n        // We do not set the login token on this connection, but instead the\n        // observe closes the connection and the client will reconnect with the\n        // new token.\n        return {\n          token: newToken.token,\n          tokenExpires: accounts._tokenExpiration(newToken.when)\n        };\n      } else {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n    };\n\n    // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: { \"services.resume.loginTokens\": 1 }\n      });\n      if (! this.userId || ! user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n      const currentStampedToken = user.services.resume.loginTokens.find(\n        stampedToken => stampedToken.hashedToken === currentHashedToken\n      );\n      if (! currentStampedToken) { // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n      const newStampedToken = accounts._generateStampedLoginToken();\n      newStampedToken.when = currentStampedToken.when;\n      accounts._insertLoginToken(this.userId, newStampedToken);\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    };\n\n    // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n    methods.removeOtherTokens = function () {\n      if (! this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      const currentToken = accounts._getLoginToken(this.connection.id);\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n        }\n      });\n    };\n\n    // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n    methods.configureLoginService = (options) => {\n      check(options, Match.ObjectIncluding({service: String}));\n      // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n      if (!(accounts.oauth\n        && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      const { ServiceConfiguration } = Package['service-configuration'];\n      if (ServiceConfiguration.configurations.findOne({service: options.service}))\n        throw new Meteor.Error(403, `Service ${options.service} already configured`);\n\n      if (hasOwn.call(options, 'secret') && usingOAuthEncryption())\n        options.secret = OAuthEncryption.seal(options.secret);\n\n      ServiceConfiguration.configurations.insert(options);\n    };\n\n    accounts._server.methods(methods);\n  };\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n        delete this._accountData[connection.id];\n      });\n    });\n  };\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const { users, _autopublishFields, _defaultPublishFields } = this;\n\n    // Publish all login service configuration fields other than secret.\n    this._server.publish(\"meteor.loginServiceConfiguration\", () => {\n      const { ServiceConfiguration } = Package['service-configuration'];\n      return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n    }, {is_auto: true}); // not techincally autopublish, but stops the warning.\n\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n    Meteor.startup(() => {\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: _defaultPublishFields.projection,\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n\n    // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => (\n          { ...prev, [field]: 1 }),\n        {}\n      );\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({ _id: this.userId }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser),\n          })\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n\n      // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n      this._server.publish(null, function () {\n        const selector = this.userId ? { _id: { $ne: this.userId } } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers),\n        })\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n  };\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(\n      this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n    this._autopublishFields.otherUsers.push.apply(\n      this._autopublishFields.otherUsers, opts.forOtherUsers);\n  };\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  };\n\n  ///\n  /// ACCOUNT DATA\n  ///\n\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  };\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId];\n\n    // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n    if (!data)\n      return;\n\n    if (value === undefined)\n      delete data[field];\n    else\n      data[field] = value;\n  };\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  };\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const { token, ...hashedStampedToken } = stampedToken;\n    return {\n      ...hashedStampedToken,\n      hashedToken: this._hashLoginToken(token)\n    };\n  };\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? { ...query } : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  };\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(\n      userId,\n      this._hashStampedToken(stampedToken),\n      query\n    );\n  };\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  };\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  };\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  };\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  };\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser;\n        // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, { fields: { _id: 1 } }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close,\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }, { nonMutatingCallbacks: true });\n\n        // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (! foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  };\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date\n    };\n  };\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      $or: [\n        { \"services.password.reset.reason\": \"reset\"},\n        { \"services.password.reset.reason\": {$exists: false}}\n      ]\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      \"services.password.reset.reason\": \"enroll\"\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n    const userFilter = userId ? {_id: userId} : {};\n\n\n    // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n    this.users.update({ ...userFilter,\n      $or: [\n        { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n        { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n      ]\n    }, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { when: { $lt: oldestValidDate } },\n            { when: { $lt: +oldestValidDate } }\n          ]\n        }\n      }\n    }, { multi: true });\n    // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  };\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n    // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n    if (hasOwn.call(this._options, 'loginExpirationInDays') &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  };\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = {\n      createdAt: new Date(),\n      _id: Random.id(),\n      ...user,\n    };\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service =>\n        pinEncryptedFieldsToUser(user.services[service], user._id)\n      );\n    }\n\n    let fullUser;\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user);\n\n      // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n      if (fullUser === 'TEST DEFAULT HOOK')\n        fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (! hook(fullUser))\n        throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address'))\n        throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username'))\n        throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n    return userId;\n  };\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n\n    return !domain ||\n      (typeof domain === 'function' && domain(email)) ||\n      (typeof domain === 'string' &&\n        (new RegExp(`@${Meteor._escapeRegExp(domain)}$`, 'i')).test(email));\n  };\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  };\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {fields: {\n        \"services.resume.loginTokensToDelete\": 1\n      }}).forEach(user => {\n        this._deleteSavedTokensForUser(\n          user._id,\n          user.services.resume.loginTokensToDelete\n        );\n      });\n    });\n  };\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(\n    serviceName,\n    serviceData,\n    options\n  ) {\n    options = { ...options };\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\n        \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n    }\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\n        `Service data for service ${serviceName} must include id`);\n    }\n\n    // Look for a user with the appropriate service user id.\n    const selector = {};\n    const serviceIdKey = `services.${serviceName}.id`;\n\n    // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{},{}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {fields: this._options.defaultFieldSelector});\n\n    // Before continuing, run user hook to see if we should continue\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n    let opts = user ? {} : options;\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key =>\n        setAttrs[`services.${serviceName}.${key}`] = serviceData[key]\n      );\n\n      // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n      setAttrs = { ...setAttrs, ...opts };\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {services: {}};\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  };\n\n  // Removes default rate limiting rule\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  };\n\n  // Add a default rule of limiting logins, creating new users and password reset\n  // to 5 times every 10 seconds per connection.\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword']\n          .includes(name),\n        connectionId: (connectionId) => true,\n      }, 5, 10000);\n    }\n  };\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = (type, fn) => {\n  let result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n};\n\n// Login handler for resume tokens.\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  let user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken},\n    {fields: {\"services.resume.loginTokens.$\": 1}});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {\"services.resume.loginTokens.token\": options.resume}\n      ]\n    },\n    // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n    {fields: {\"services.resume.loginTokens\": 1}});\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token =>\n    token.hashedToken === hashedToken\n  );\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token =>\n      token.token === options.resume\n    );\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n          \"services.resume.loginTokens\": {\n            \"hashedToken\": hashedToken,\n            \"when\": token.when\n          }\n        }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (\n  accounts,\n  oldestValidDate,\n  tokenFilter,\n  userId\n) => {\n  const userFilter = userId ? {_id: userId} : {};\n  const resetRangeOr = {\n    $or: [\n      { \"services.password.reset.when\": { $lt: oldestValidDate } },\n      { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n    ]\n  };\n  const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n\n  accounts.users.update({...userFilter, ...expireFilter}, {\n    $unset: {\n      \"services.password.reset\": \"\"\n    }\n  }, { multi: true });\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n};\n\n///\n/// OAuth Encryption Support\n///\n\nconst OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nconst usingOAuthEncryption = () => {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n};\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n};\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(() => {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  const { ServiceConfiguration } = Package['service-configuration'];\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(config => {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce(\n      (prev, email) => prev || this._testEmailDomain(email.address), false\n    );\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce(\n      (prev, service) => service.email && this._testEmailDomain(service.email),\n      false,\n    );\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, `@${domain} email required`);\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users._ensureIndex('username', { unique: true, sparse: true });\n  users._ensureIndex('emails.address', { unique: true, sparse: true });\n  users._ensureIndex('services.resume.loginTokens.hashedToken',\n    { unique: true, sparse: true });\n  users._ensureIndex('services.resume.loginTokens.token',\n    { unique: true, sparse: true });\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users._ensureIndex('services.resume.haveLoginTokensToDelete',\n    { sparse: true });\n  // For expiring login tokens\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: true });\n  // For expiring password tokens\n  users._ensureIndex('services.password.reset.when', { sparse: true });\n};\n"]}}]