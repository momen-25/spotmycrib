[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar Random = Package.random.Random;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Facebook;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"facebook-oauth\":{\"facebook_client.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/facebook-oauth/facebook_client.js                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nFacebook = {}; // Request Facebook credentials for the user\n//\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\n\nFacebook.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({\n    service: 'facebook'\n  });\n\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  var credentialToken = Random.secret();\n  var mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(navigator.userAgent);\n  var display = mobile ? 'touch' : 'popup';\n  var scope = \"email\";\n  if (options && options.requestPermissions) scope = options.requestPermissions.join(',');\n\n  var loginStyle = OAuth._loginStyle('facebook', config, options);\n\n  var loginUrl = \"https://www.facebook.com/v8.0/dialog/oauth?client_id=\" + config.appId + (\"&redirect_uri=\" + OAuth._redirectUri('facebook', config, options.params, options.absoluteUrlOptions)) + (\"&display=\" + display + \"&scope=\" + scope) + (\"&state=\" + OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl)); // Handle authentication type (e.g. for force login you need auth_type: \"reauthenticate\")\n\n\n  if (options && options.auth_type) {\n    loginUrl += \"&auth_type=\" + encodeURIComponent(options.auth_type);\n  }\n\n  OAuth.launchLogin({\n    loginService: \"facebook\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken\n  });\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/facebook-oauth/facebook_client.js\");\n\n/* Exports */\nPackage._define(\"facebook-oauth\", {\n  Facebook: Facebook\n});\n\n})();\n","servePath":"/packages/facebook-oauth.js","sourceMap":{"version":3,"sources":["packages/facebook-oauth/facebook_client.js"],"names":["Facebook","requestCredential","options","credentialRequestCompleteCallback","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","mobile","test","navigator","userAgent","display","scope","requestPermissions","join","loginStyle","OAuth","_loginStyle","loginUrl","appId","_redirectUri","params","absoluteUrlOptions","_stateParam","redirectUrl","auth_type","encodeURIComponent","launchLogin","loginService"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,QAAQ,GAAG,EAAX,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,QAAQ,CAACC,iBAAT,GAA6B,UAACC,OAAD,EAAUC,iCAAV,EAAgD;AAC3E;AACA,MAAI,CAACA,iCAAD,IAAsC,OAAOD,OAAP,KAAmB,UAA7D,EAAyE;AACvEC,qCAAiC,GAAGD,OAApC;AACAA,WAAO,GAAG,EAAV;AACD;;AAED,MAAME,MAAM,GAAGC,oBAAoB,CAACC,cAArB,CAAoCC,OAApC,CAA4C;AAACC,WAAO,EAAE;AAAV,GAA5C,CAAf;;AACA,MAAI,CAACJ,MAAL,EAAa;AACXD,qCAAiC,IAAIA,iCAAiC,CACpE,IAAIE,oBAAoB,CAACI,WAAzB,EADoE,CAAtE;AAEA;AACD;;AAED,MAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,EAAxB;AACA,MAAMC,MAAM,GAAG,2DAA2DC,IAA3D,CAAgEC,SAAS,CAACC,SAA1E,CAAf;AACA,MAAMC,OAAO,GAAGJ,MAAM,GAAG,OAAH,GAAa,OAAnC;AAEA,MAAIK,KAAK,GAAG,OAAZ;AACA,MAAIhB,OAAO,IAAIA,OAAO,CAACiB,kBAAvB,EACED,KAAK,GAAGhB,OAAO,CAACiB,kBAAR,CAA2BC,IAA3B,CAAgC,GAAhC,CAAR;;AAEF,MAAMC,UAAU,GAAGC,KAAK,CAACC,WAAN,CAAkB,UAAlB,EAA8BnB,MAA9B,EAAsCF,OAAtC,CAAnB;;AAEA,MAAIsB,QAAQ,GACR,0DAAwDpB,MAAM,CAACqB,KAA/D,uBACiBH,KAAK,CAACI,YAAN,CAAmB,UAAnB,EAA+BtB,MAA/B,EAAuCF,OAAO,CAACyB,MAA/C,EAAuDzB,OAAO,CAAC0B,kBAA/D,CADjB,mBAEYX,OAFZ,eAE6BC,KAF7B,iBAGUI,KAAK,CAACO,WAAN,CAAkBR,UAAlB,EAA8BX,eAA9B,EAA+CR,OAAO,IAAIA,OAAO,CAAC4B,WAAlE,CAHV,CADJ,CAxB2E,CA8B3E;;;AACA,MAAI5B,OAAO,IAAIA,OAAO,CAAC6B,SAAvB,EAAkC;AAChCP,YAAQ,oBAAkBQ,kBAAkB,CAAC9B,OAAO,CAAC6B,SAAT,CAA5C;AACD;;AAEDT,OAAK,CAACW,WAAN,CAAkB;AAChBC,gBAAY,EAAE,UADE;AAEhBb,cAAU,EAAVA,UAFgB;AAGhBG,YAAQ,EAARA,QAHgB;AAIhBrB,qCAAiC,EAAjCA,iCAJgB;AAKhBO,mBAAe,EAAfA;AALgB,GAAlB;AAOD,CA1CD,C","file":"/packages/facebook-oauth.js","sourcesContent":["Facebook = {};\n\n// Request Facebook credentials for the user\n//\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nFacebook.requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({service: 'facebook'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  const credentialToken = Random.secret();\n  const mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(navigator.userAgent);\n  const display = mobile ? 'touch' : 'popup';\n\n  let scope = \"email\";\n  if (options && options.requestPermissions)\n    scope = options.requestPermissions.join(',');\n\n  const loginStyle = OAuth._loginStyle('facebook', config, options);\n\n  let loginUrl =\n      `https://www.facebook.com/v8.0/dialog/oauth?client_id=${config.appId}` +\n      `&redirect_uri=${OAuth._redirectUri('facebook', config, options.params, options.absoluteUrlOptions)}` +\n      `&display=${display}&scope=${scope}` +\n      `&state=${OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl)}`;\n\n  // Handle authentication type (e.g. for force login you need auth_type: \"reauthenticate\")\n  if (options && options.auth_type) {\n    loginUrl += `&auth_type=${encodeURIComponent(options.auth_type)}`;\n  }\n\n  OAuth.launchLogin({\n    loginService: \"facebook\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n  });\n};\n"]}}]