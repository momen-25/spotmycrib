[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/ctjp_meteor-intl-tel-input/packages/ctjp_meteor-intl-tel //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ctjp:meteor-intl-tel-input/lib/intl-tel-input/build/js/intlTelInput.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*\r                                                                                                                    // 1\nInternational Telephone Input v3.7.1\r                                                                                  // 2\nhttps://github.com/Bluefieldscom/intl-tel-input.git\r                                                                   // 3\n*/\r                                                                                                                    // 4\n// wrap in UMD - see https://github.com/umdjs/umd/blob/master/jqueryPlugin.js\r                                         // 5\n(function(factory) {\r                                                                                                  // 6\n    if (typeof define === \"function\" && define.amd) {\r                                                                 // 7\n        define([ \"jquery\" ], function($) {\r                                                                            // 8\n            factory($, window, document);\r                                                                             // 9\n        });\r                                                                                                           // 10\n    } else {\r                                                                                                          // 11\n        factory(jQuery, window, document);\r                                                                            // 12\n    }\r                                                                                                                 // 13\n})(function($, window, document, undefined) {\r                                                                         // 14\n    \"use strict\";\r                                                                                                     // 15\n    var pluginName = \"intlTelInput\", id = 1, // give each instance it's own id for namespaced event handling\r          // 16\n    defaults = {\r                                                                                                      // 17\n        // automatically format the number according to the selected country\r                                          // 18\n        autoFormat: true,\r                                                                                             // 19\n        // if there is just a dial code in the input: remove it on blur, and re-add it on focus\r                       // 20\n        autoHideDialCode: true,\r                                                                                       // 21\n        // default country\r                                                                                            // 22\n        defaultCountry: \"\",\r                                                                                           // 23\n        // token for ipinfo - required for https or over 1000 daily page views support\r                                // 24\n        ipinfoToken: \"\",\r                                                                                              // 25\n        // don't insert international dial codes\r                                                                      // 26\n        nationalMode: false,\r                                                                                          // 27\n        // number type to use for placeholders\r                                                                        // 28\n        numberType: \"MOBILE\",\r                                                                                         // 29\n        // display only these countries\r                                                                               // 30\n        onlyCountries: [],\r                                                                                            // 31\n        // the countries at the top of the list. defaults to united states and united kingdom\r                         // 32\n        preferredCountries: [ \"us\", \"gb\" ],\r                                                                           // 33\n        // make the dropdown the same width as the input\r                                                              // 34\n        responsiveDropdown: false,\r                                                                                    // 35\n        // specify the path to the libphonenumber script to enable validation/formatting\r                              // 36\n        utilsScript: \"\"\r                                                                                               // 37\n    }, keys = {\r                                                                                                       // 38\n        UP: 38,\r                                                                                                       // 39\n        DOWN: 40,\r                                                                                                     // 40\n        ENTER: 13,\r                                                                                                    // 41\n        ESC: 27,\r                                                                                                      // 42\n        PLUS: 43,\r                                                                                                     // 43\n        A: 65,\r                                                                                                        // 44\n        Z: 90,\r                                                                                                        // 45\n        ZERO: 48,\r                                                                                                     // 46\n        NINE: 57,\r                                                                                                     // 47\n        SPACE: 32,\r                                                                                                    // 48\n        BSPACE: 8,\r                                                                                                    // 49\n        DEL: 46,\r                                                                                                      // 50\n        CTRL: 17,\r                                                                                                     // 51\n        CMD1: 91,\r                                                                                                     // 52\n        // Chrome\r                                                                                                     // 53\n        CMD2: 224\r                                                                                                     // 54\n    }, windowLoaded = false;\r                                                                                          // 55\n    // keep track of if the window.load event has fired as impossible to check after the fact\r                         // 56\n    $(window).load(function() {\r                                                                                       // 57\n        windowLoaded = true;\r                                                                                          // 58\n    });\r                                                                                                               // 59\n    function Plugin(element, options) {\r                                                                               // 60\n        this.element = element;\r                                                                                       // 61\n        this.options = $.extend({}, defaults, options);\r                                                               // 62\n        this._defaults = defaults;\r                                                                                    // 63\n        // event namespace\r                                                                                            // 64\n        this.ns = \".\" + pluginName + id++;\r                                                                            // 65\n        // Chrome, FF, Safari, IE9+\r                                                                                   // 66\n        this.isGoodBrowser = Boolean(element.setSelectionRange);\r                                                      // 67\n        this.hadInitialPlaceholder = Boolean($(element).attr(\"placeholder\"));\r                                         // 68\n        this._name = pluginName;\r                                                                                      // 69\n        this.init();\r                                                                                                  // 70\n    }\r                                                                                                                 // 71\n    Plugin.prototype = {\r                                                                                              // 72\n        init: function() {\r                                                                                            // 73\n            var that = this;\r                                                                                          // 74\n            // if defaultCountry is set to \"auto\", we must do a lookup first\r                                          // 75\n            if (this.options.defaultCountry == \"auto\") {\r                                                              // 76\n                // reset this in case lookup fails\r                                                                    // 77\n                this.options.defaultCountry = \"\";\r                                                                     // 78\n                var ipinfoURL = \"//ipinfo.io\";\r                                                                        // 79\n                if (this.options.ipinfoToken) {\r                                                                       // 80\n                    ipinfoURL += \"?token=\" + this.options.ipinfoToken;\r                                                // 81\n                }\r                                                                                                     // 82\n                $.get(ipinfoURL, function(response) {\r                                                                 // 83\n                    if (response && response.country) {\r                                                               // 84\n                        that.options.defaultCountry = response.country.toLowerCase();\r                                 // 85\n                    }\r                                                                                                 // 86\n                }, \"jsonp\").always(function() {\r                                                                       // 87\n                    that._ready();\r                                                                                    // 88\n                });\r                                                                                                   // 89\n            } else {\r                                                                                                  // 90\n                this._ready();\r                                                                                        // 91\n            }\r                                                                                                         // 92\n        },\r                                                                                                            // 93\n        _ready: function() {\r                                                                                          // 94\n            // if in nationalMode, disable options relating to dial codes\r                                             // 95\n            if (this.options.nationalMode) {\r                                                                          // 96\n                this.options.autoHideDialCode = false;\r                                                                // 97\n            }\r                                                                                                         // 98\n            // IE Mobile doesn't support the keypress event (see issue 68) which makes autoFormat impossible\r          // 99\n            if (navigator.userAgent.match(/IEMobile/i)) {\r                                                             // 100\n                this.options.autoFormat = false;\r                                                                      // 101\n            }\r                                                                                                         // 102\n            // auto enable responsiveDropdown mode on small screens (dropdown is currently set to 430px in CSS)\r       // 103\n            if (window.innerWidth < 500) {\r                                                                            // 104\n                this.options.responsiveDropdown = true;\r                                                               // 105\n            }\r                                                                                                         // 106\n            // process all the data: onlyCountries, preferredCountries etc\r                                            // 107\n            this._processCountryData();\r                                                                               // 108\n            // generate the markup\r                                                                                    // 109\n            this._generateMarkup();\r                                                                                   // 110\n            // set the initial state of the input value and the selected flag\r                                         // 111\n            this._setInitialState();\r                                                                                  // 112\n            // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\r                  // 113\n            this._initListeners();\r                                                                                    // 114\n        },\r                                                                                                            // 115\n        /********************\r                                                                                         // 116\n   *  PRIVATE METHODS\r                                                                                                 // 117\n   ********************/\r                                                                                              // 118\n        // prepare all of the country data, including onlyCountries and preferredCountries options\r                    // 119\n        _processCountryData: function() {\r                                                                             // 120\n            // set the instances country data objects\r                                                                 // 121\n            this._setInstanceCountryData();\r                                                                           // 122\n            // set the preferredCountries property\r                                                                    // 123\n            this._setPreferredCountries();\r                                                                            // 124\n        },\r                                                                                                            // 125\n        // add a country code to this.countryCodes\r                                                                    // 126\n        _addCountryCode: function(iso2, dialCode, priority) {\r                                                         // 127\n            if (!(dialCode in this.countryCodes)) {\r                                                                   // 128\n                this.countryCodes[dialCode] = [];\r                                                                     // 129\n            }\r                                                                                                         // 130\n            var index = priority || 0;\r                                                                                // 131\n            this.countryCodes[dialCode][index] = iso2;\r                                                                // 132\n        },\r                                                                                                            // 133\n        // process onlyCountries array if present, and generate the countryCodes map\r                                  // 134\n        _setInstanceCountryData: function() {\r                                                                         // 135\n            var i;\r                                                                                                    // 136\n            // process onlyCountries option\r                                                                           // 137\n            if (this.options.onlyCountries.length) {\r                                                                  // 138\n                this.countries = [];\r                                                                                  // 139\n                for (i = 0; i < allCountries.length; i++) {\r                                                           // 140\n                    if ($.inArray(allCountries[i].iso2, this.options.onlyCountries) != -1) {\r                          // 141\n                        this.countries.push(allCountries[i]);\r                                                         // 142\n                    }\r                                                                                                 // 143\n                }\r                                                                                                     // 144\n            } else {\r                                                                                                  // 145\n                this.countries = allCountries;\r                                                                        // 146\n            }\r                                                                                                         // 147\n            // generate countryCodes map\r                                                                              // 148\n            this.countryCodes = {};\r                                                                                   // 149\n            for (i = 0; i < this.countries.length; i++) {\r                                                             // 150\n                var c = this.countries[i];\r                                                                            // 151\n                this._addCountryCode(c.iso2, c.dialCode, c.priority);\r                                                 // 152\n                // area codes\r                                                                                         // 153\n                if (c.areaCodes) {\r                                                                                    // 154\n                    for (var j = 0; j < c.areaCodes.length; j++) {\r                                                    // 155\n                        // full dial code is country code + dial code\r                                                 // 156\n                        this._addCountryCode(c.iso2, c.dialCode + c.areaCodes[j]);\r                                    // 157\n                    }\r                                                                                                 // 158\n                }\r                                                                                                     // 159\n            }\r                                                                                                         // 160\n        },\r                                                                                                            // 161\n        // process preferred countries - iterate through the preferences,\r                                             // 162\n        // fetching the country data for each one\r                                                                     // 163\n        _setPreferredCountries: function() {\r                                                                          // 164\n            this.preferredCountries = [];\r                                                                             // 165\n            for (var i = 0; i < this.options.preferredCountries.length; i++) {\r                                        // 166\n                var countryCode = this.options.preferredCountries[i], countryData = this._getCountryData(countryCode, false, true);\r\n                if (countryData) {\r                                                                                    // 168\n                    this.preferredCountries.push(countryData);\r                                                        // 169\n                }\r                                                                                                     // 170\n            }\r                                                                                                         // 171\n        },\r                                                                                                            // 172\n        // generate all of the markup for the plugin: the selected flag overlay, and the dropdown\r                     // 173\n        _generateMarkup: function() {\r                                                                                 // 174\n            // telephone input\r                                                                                        // 175\n            this.telInput = $(this.element);\r                                                                          // 176\n            // containers (mostly for positioning)\r                                                                    // 177\n            this.telInput.wrap($(\"<div>\", {\r                                                                           // 178\n                \"class\": \"intl-tel-input\"\r                                                                             // 179\n            }));\r                                                                                                      // 180\n            var flagsContainer = $(\"<div>\", {\r                                                                         // 181\n                \"class\": \"flag-dropdown\"\r                                                                              // 182\n            }).insertAfter(this.telInput);\r                                                                            // 183\n            // currently selected flag (displayed to left of input)\r                                                   // 184\n            var selectedFlag = $(\"<div>\", {\r                                                                           // 185\n                \"class\": \"selected-flag\"\r                                                                              // 186\n            }).appendTo(flagsContainer);\r                                                                              // 187\n            this.selectedFlagInner = $(\"<div>\", {\r                                                                     // 188\n                \"class\": \"flag\"\r                                                                                       // 189\n            }).appendTo(selectedFlag);\r                                                                                // 190\n            // CSS triangle\r                                                                                           // 191\n            $(\"<div>\", {\r                                                                                              // 192\n                \"class\": \"arrow\"\r                                                                                      // 193\n            }).appendTo(this.selectedFlagInner);\r                                                                      // 194\n            // country list contains: preferred countries, then divider, then all countries\r                           // 195\n            this.countryList = $(\"<ul>\", {\r                                                                            // 196\n                \"class\": \"country-list v-hide\"\r                                                                        // 197\n            }).appendTo(flagsContainer);\r                                                                              // 198\n            if (this.preferredCountries.length) {\r                                                                     // 199\n                this._appendListItems(this.preferredCountries, \"preferred\");\r                                          // 200\n                $(\"<li>\", {\r                                                                                           // 201\n                    \"class\": \"divider\"\r                                                                                // 202\n                }).appendTo(this.countryList);\r                                                                        // 203\n            }\r                                                                                                         // 204\n            this._appendListItems(this.countries, \"\");\r                                                                // 205\n            // now we can grab the dropdown height, and hide it properly\r                                              // 206\n            this.dropdownHeight = this.countryList.outerHeight();\r                                                     // 207\n            this.countryList.removeClass(\"v-hide\").addClass(\"hide\");\r                                                  // 208\n            // and set the width\r                                                                                      // 209\n            if (this.options.responsiveDropdown) {\r                                                                    // 210\n                this.countryList.outerWidth(this.telInput.outerWidth());\r                                              // 211\n            }\r                                                                                                         // 212\n            // this is useful in lots of places\r                                                                       // 213\n            this.countryListItems = this.countryList.children(\".country\");\r                                            // 214\n        },\r                                                                                                            // 215\n        // add a country <li> to the countryList <ul> container\r                                                       // 216\n        _appendListItems: function(countries, className) {\r                                                            // 217\n            // we create so many DOM elements, I decided it was faster to build a temp string\r                         // 218\n            // and then add everything to the DOM in one go at the end\r                                                // 219\n            var tmp = \"\";\r                                                                                             // 220\n            // for each country\r                                                                                       // 221\n            for (var i = 0; i < countries.length; i++) {\r                                                              // 222\n                var c = countries[i];\r                                                                                 // 223\n                // open the list item\r                                                                                 // 224\n                tmp += \"<li class='country \" + className + \"' data-dial-code='\" + c.dialCode + \"' data-country-code='\" + c.iso2 + \"'>\";\r\n                // add the flag\r                                                                                       // 226\n                tmp += \"<div class='flag \" + c.iso2 + \"'></div>\";\r                                                     // 227\n                // and the country name and dial code\r                                                                 // 228\n                tmp += \"<span class='country-name'>\" + c.name + \"</span>\";\r                                            // 229\n                tmp += \"<span class='dial-code'>+\" + c.dialCode + \"</span>\";\r                                          // 230\n                // close the list item\r                                                                                // 231\n                tmp += \"</li>\";\r                                                                                       // 232\n            }\r                                                                                                         // 233\n            this.countryList.append(tmp);\r                                                                             // 234\n        },\r                                                                                                            // 235\n        // set the initial state of the input value and the selected flag\r                                             // 236\n        _setInitialState: function() {\r                                                                                // 237\n            var val = this.telInput.val();\r                                                                            // 238\n            // if there is a number, and it's valid, we can go ahead and set the flag, else fall back to default\r      // 239\n            if (this._getDialCode(val)) {\r                                                                             // 240\n                this._updateFlagFromNumber(val);\r                                                                      // 241\n            } else {\r                                                                                                  // 242\n                var defaultCountry;\r                                                                                   // 243\n                // check the defaultCountry option, else fall back to the first in the list\r                           // 244\n                if (this.options.defaultCountry) {\r                                                                    // 245\n                    defaultCountry = this._getCountryData(this.options.defaultCountry, false, false);\r                 // 246\n                } else {\r                                                                                              // 247\n                    defaultCountry = this.preferredCountries.length ? this.preferredCountries[0] : this.countries[0];\r // 248\n                }\r                                                                                                     // 249\n                this._selectFlag(defaultCountry.iso2);\r                                                                // 250\n                // if empty, insert the default dial code (this function will check !nationalMode and !autoHideDialCode)\r\n                if (!val) {\r                                                                                           // 252\n                    this._updateDialCode(defaultCountry.dialCode, false);\r                                             // 253\n                }\r                                                                                                     // 254\n            }\r                                                                                                         // 255\n            // format\r                                                                                                 // 256\n            if (val) {\r                                                                                                // 257\n                // this wont be run after _updateDialCode as that's only called if no val\r                             // 258\n                this._updateVal(val, false);\r                                                                          // 259\n            }\r                                                                                                         // 260\n        },\r                                                                                                            // 261\n        // initialise the main event listeners: input keyup, and click selected flag\r                                  // 262\n        _initListeners: function() {\r                                                                                  // 263\n            var that = this;\r                                                                                          // 264\n            this._initKeyListeners();\r                                                                                 // 265\n            // autoFormat prevents the change event from firing, so we need to check for changes between focus and blur in order to manually trigger it\r\n            if (this.options.autoHideDialCode || this.options.autoFormat) {\r                                           // 267\n                this._initFocusListeners();\r                                                                           // 268\n            }\r                                                                                                         // 269\n            // hack for input nested inside label: clicking the selected-flag to open the dropdown would then automatically trigger a 2nd click on the input which would close it again\r\n            var label = this.telInput.closest(\"label\");\r                                                               // 271\n            if (label.length) {\r                                                                                       // 272\n                label.on(\"click\" + this.ns, function(e) {\r                                                             // 273\n                    // if the dropdown is closed, then focus the input, else ignore the click\r                         // 274\n                    if (that.countryList.hasClass(\"hide\")) {\r                                                          // 275\n                        that.telInput.focus();\r                                                                        // 276\n                    } else {\r                                                                                          // 277\n                        e.preventDefault();\r                                                                           // 278\n                    }\r                                                                                                 // 279\n                });\r                                                                                                   // 280\n            }\r                                                                                                         // 281\n            // toggle country dropdown on click\r                                                                       // 282\n            var selectedFlag = this.selectedFlagInner.parent();\r                                                       // 283\n            selectedFlag.on(\"click\" + this.ns, function(e) {\r                                                          // 284\n                // only intercept this event if we're opening the dropdown\r                                            // 285\n                // else let it bubble up to the top (\"click-off-to-close\" listener)\r                                   // 286\n                // we cannot just stopPropagation as it may be needed to close another instance\r                       // 287\n                if (that.countryList.hasClass(\"hide\") && !that.telInput.prop(\"disabled\")) {\r                           // 288\n                    that._showDropdown();\r                                                                             // 289\n                }\r                                                                                                     // 290\n            });\r                                                                                                       // 291\n            // if the user has specified the path to the utils script, fetch it on window.load\r                        // 292\n            if (this.options.utilsScript) {\r                                                                           // 293\n                // if the plugin is being initialised after the window.load event has already been fired\r              // 294\n                if (windowLoaded) {\r                                                                                   // 295\n                    this.loadUtils();\r                                                                                 // 296\n                } else {\r                                                                                              // 297\n                    // wait until the load event so we don't block any other requests e.g. the flags image\r            // 298\n                    $(window).load(function() {\r                                                                       // 299\n                        that.loadUtils();\r                                                                             // 300\n                    });\r                                                                                               // 301\n                }\r                                                                                                     // 302\n            }\r                                                                                                         // 303\n        },\r                                                                                                            // 304\n        _initKeyListeners: function() {\r                                                                               // 305\n            var that = this;\r                                                                                          // 306\n            if (this.options.autoFormat) {\r                                                                            // 307\n                // format number and update flag on keypress\r                                                          // 308\n                // use keypress event as we want to ignore all input except for a select few keys,\r                    // 309\n                // but we dont want to ignore the navigation keys like the arrows etc.\r                                // 310\n                // NOTE: no point in refactoring this to only bind these listeners on focus/blur because then you would need to have those 2 listeners running the whole time anyway...\r\n                this.telInput.on(\"keypress\" + this.ns, function(e) {\r                                                  // 312\n                    // 32 is space, and after that it's all chars (not meta/nav keys)\r                                 // 313\n                    // this fix is needed for Firefox, which triggers keypress event for some meta/nav keys\r           // 314\n                    // Update: also ignore if this is a metaKey e.g. FF and Safari trigger keypress on the v of Ctrl+v\r\n                    // Update: also check that we have utils before we do any autoFormat stuff\r                        // 316\n                    if (e.which >= keys.SPACE && !e.metaKey && window.intlTelInputUtils) {\r                            // 317\n                        e.preventDefault();\r                                                                           // 318\n                        // allowed keys are just numeric keys and plus\r                                                // 319\n                        // we must allow plus for the case where the user does select-all and then hits plus to start typing a new number. we could refine this logic to first check that the selection contains a plus, but that wont work in old browsers, and I think it's overkill anyway\r\n                        var isAllowedKey = e.which >= keys.ZERO && e.which <= keys.NINE || e.which == keys.PLUS, input = that.telInput[0], noSelection = that.isGoodBrowser && input.selectionStart == input.selectionEnd, max = that.telInput.attr(\"maxlength\"), // assumes that if max exists, it is >0\r\n                        isBelowMax = max ? that.telInput.val().length < max : true;\r                                   // 322\n                        // first: ensure we dont go over maxlength. we must do this here to prevent adding digits in the middle of the number\r\n                        // still reformat even if not an allowed key as they could by typing a formatting char, but ignore if there's a selection as doesn't make sense to replace selection with illegal char and then immediately remove it\r\n                        if (isBelowMax && (isAllowedKey || noSelection)) {\r                                            // 325\n                            var newChar = isAllowedKey ? String.fromCharCode(e.which) : null;\r                         // 326\n                            that._handleInputKey(newChar, true);\r                                                      // 327\n                        }\r                                                                                             // 328\n                        if (!isAllowedKey) {\r                                                                          // 329\n                            that.telInput.trigger(\"invalidkey\");\r                                                      // 330\n                        }\r                                                                                             // 331\n                    }\r                                                                                                 // 332\n                });\r                                                                                                   // 333\n            }\r                                                                                                         // 334\n            // handle keyup event\r                                                                                     // 335\n            // for autoFormat: we use keyup to catch delete events after the fact\r                                     // 336\n            this.telInput.on(\"keyup\" + this.ns, function(e) {\r                                                         // 337\n                // the \"enter\" key event from selecting a dropdown item is triggered here on the input, because the document.keydown handler that initially handles that event triggers a focus on the input, and so the keyup for that same key event gets triggered here. weird, but just make sure we dont bother doing any re-formatting in this case (we've already done preventDefault in the keydown handler, so it wont actually submit the form or anything).\r\n                if (e.which == keys.ENTER) {} else if (that.options.autoFormat && window.intlTelInputUtils) {\r         // 339\n                    var isCtrl = e.which == keys.CTRL || e.which == keys.CMD1 || e.which == keys.CMD2, input = that.telInput[0], // noSelection defaults to false for bad browsers, else would be reformatting on all ctrl keys e.g. select-all/copy\r\n                    noSelection = that.isGoodBrowser && input.selectionStart == input.selectionEnd, // cursorAtEnd defaults to false for bad browsers else they would never get a reformat on delete\r\n                    cursorAtEnd = that.isGoodBrowser && input.selectionStart == that.telInput.val().length;\r           // 342\n                    // if delete in the middle: reformat with no suffix (no need to reformat if delete at end)\r        // 343\n                    // if backspace: reformat with no suffix (need to reformat if at end to remove any lingering suffix - this is a feature)\r\n                    // if ctrl and no selection (i.e. could have just been a paste): reformat (if cursorAtEnd: add suffix)\r\n                    if (e.which == keys.DEL && !cursorAtEnd || e.which == keys.BSPACE || isCtrl && noSelection) {\r     // 346\n                        // important to remember never to add suffix on any delete key as can fuck up in ie8 so you can never delete a formatting char at the end\r\n                        that._handleInputKey(null, isCtrl && cursorAtEnd);\r                                            // 348\n                    }\r                                                                                                 // 349\n                    // prevent deleting the plus (if not in nationalMode)\r                                             // 350\n                    if (!that.options.nationalMode) {\r                                                                 // 351\n                        var val = that.telInput.val();\r                                                                // 352\n                        if (val.substr(0, 1) != \"+\") {\r                                                                // 353\n                            // newCursorPos is current pos + 1 to account for the plus we are about to add\r            // 354\n                            var newCursorPos = that.isGoodBrowser ? input.selectionStart + 1 : 0;\r                     // 355\n                            that.telInput.val(\"+\" + val);\r                                                             // 356\n                            if (that.isGoodBrowser) {\r                                                                 // 357\n                                input.setSelectionRange(newCursorPos, newCursorPos);\r                                  // 358\n                            }\r                                                                                         // 359\n                        }\r                                                                                             // 360\n                    }\r                                                                                                 // 361\n                } else {\r                                                                                              // 362\n                    // if no autoFormat, just update flag\r                                                             // 363\n                    that._updateFlagFromNumber(that.telInput.val());\r                                                  // 364\n                }\r                                                                                                     // 365\n            });\r                                                                                                       // 366\n        },\r                                                                                                            // 367\n        // when autoFormat is enabled: handle various key events on the input: the 2 main situations are 1) adding a new number character, which will replace any selection, reformat, and try to preserve the cursor position. and 2) reformatting on backspace, or paste event\r\n        _handleInputKey: function(newNumericChar, addSuffix) {\r                                                        // 369\n            var val = this.telInput.val(), newCursor = null, cursorAtEnd = false, // raw DOM element\r                  // 370\n            input = this.telInput[0];\r                                                                                 // 371\n            if (this.isGoodBrowser) {\r                                                                                 // 372\n                var selectionEnd = input.selectionEnd, originalLen = val.length;\r                                      // 373\n                cursorAtEnd = selectionEnd == originalLen;\r                                                            // 374\n                // if handling a new number character: insert it in the right place and calculate the new cursor position\r\n                if (newNumericChar) {\r                                                                                 // 376\n                    // replace any selection they may have made with the new char\r                                     // 377\n                    val = val.substr(0, input.selectionStart) + newNumericChar + val.substring(selectionEnd, originalLen);\r\n                    // if the cursor was not at the end then calculate it's new pos\r                                   // 379\n                    if (!cursorAtEnd) {\r                                                                               // 380\n                        newCursor = selectionEnd + (val.length - originalLen);\r                                        // 381\n                    }\r                                                                                                 // 382\n                } else {\r                                                                                              // 383\n                    // here we're not handling a new char, we're just doing a re-format, but we still need to maintain the cursor position\r\n                    newCursor = input.selectionStart;\r                                                                 // 385\n                }\r                                                                                                     // 386\n            } else if (newNumericChar) {\r                                                                              // 387\n                val += newNumericChar;\r                                                                                // 388\n            }\r                                                                                                         // 389\n            // update the number and flag\r                                                                             // 390\n            this.setNumber(val, addSuffix);\r                                                                           // 391\n            // update the cursor position\r                                                                             // 392\n            if (this.isGoodBrowser) {\r                                                                                 // 393\n                // if it was at the end, keep it there\r                                                                // 394\n                if (cursorAtEnd) {\r                                                                                    // 395\n                    newCursor = this.telInput.val().length;\r                                                           // 396\n                }\r                                                                                                     // 397\n                input.setSelectionRange(newCursor, newCursor);\r                                                        // 398\n            }\r                                                                                                         // 399\n        },\r                                                                                                            // 400\n        // listen for focus and blur\r                                                                                  // 401\n        _initFocusListeners: function() {\r                                                                             // 402\n            var that = this;\r                                                                                          // 403\n            if (this.options.autoHideDialCode) {\r                                                                      // 404\n                // mousedown decides where the cursor goes, so if we're focusing we must preventDefault as we'll be inserting the dial code, and we want the cursor to be at the end no matter where they click\r\n                this.telInput.on(\"mousedown\" + this.ns, function(e) {\r                                                 // 406\n                    if (!that.telInput.is(\":focus\") && !that.telInput.val()) {\r                                        // 407\n                        e.preventDefault();\r                                                                           // 408\n                        // but this also cancels the focus, so we must trigger that manually\r                          // 409\n                        that.telInput.focus();\r                                                                        // 410\n                    }\r                                                                                                 // 411\n                });\r                                                                                                   // 412\n            }\r                                                                                                         // 413\n            this.telInput.on(\"focus\" + this.ns, function() {\r                                                          // 414\n                var value = that.telInput.val();\r                                                                      // 415\n                // save this to compare on blur\r                                                                       // 416\n                that.telInput.data(\"focusVal\", value);\r                                                                // 417\n                if (that.options.autoHideDialCode) {\r                                                                  // 418\n                    // on focus: if empty, insert the dial code for the currently selected flag\r                       // 419\n                    if (!value) {\r                                                                                     // 420\n                        that._updateVal(\"+\" + that.selectedCountryData.dialCode, true);\r                               // 421\n                        // after auto-inserting a dial code, if the first key they hit is '+' then assume they are entering a new number, so remove the dial code. use keypress instead of keydown because keydown gets triggered for the shift key (required to hit the + key), and instead of keyup because that shows the new '+' before removing the old one\r\n                        that.telInput.one(\"keypress.plus\" + that.ns, function(e) {\r                                    // 423\n                            if (e.which == keys.PLUS) {\r                                                               // 424\n                                // if autoFormat is enabled, this key event will have already have been handled by another keypress listener (hence we need to add the \"+\"). if disabled, it will be handled after this by a keyup listener (hence no need to add the \"+\").\r\n                                var newVal = that.options.autoFormat && window.intlTelInputUtils ? \"+\" : \"\";\r          // 426\n                                that.telInput.val(newVal);\r                                                            // 427\n                            }\r                                                                                         // 428\n                        });\r                                                                                           // 429\n                        // after tabbing in, make sure the cursor is at the end we must use setTimeout to get outside of the focus handler as it seems the selection happens after that\r\n                        setTimeout(function() {\r                                                                       // 431\n                            var input = that.telInput[0];\r                                                             // 432\n                            if (that.isGoodBrowser) {\r                                                                 // 433\n                                var len = that.telInput.val().length;\r                                                 // 434\n                                input.setSelectionRange(len, len);\r                                                    // 435\n                            }\r                                                                                         // 436\n                        });\r                                                                                           // 437\n                    }\r                                                                                                 // 438\n                }\r                                                                                                     // 439\n            });\r                                                                                                       // 440\n            this.telInput.on(\"blur\" + this.ns, function() {\r                                                           // 441\n                if (that.options.autoHideDialCode) {\r                                                                  // 442\n                    // on blur: if just a dial code then remove it\r                                                    // 443\n                    var value = that.telInput.val(), startsPlus = value.substr(0, 1) == \"+\";\r                          // 444\n                    if (startsPlus) {\r                                                                                 // 445\n                        var numeric = that._getNumeric(value);\r                                                        // 446\n                        // if just a plus, or if just a dial code\r                                                     // 447\n                        if (!numeric || that.selectedCountryData.dialCode == numeric) {\r                               // 448\n                            that.telInput.val(\"\");\r                                                                    // 449\n                        }\r                                                                                             // 450\n                    }\r                                                                                                 // 451\n                    // remove the keypress listener we added on focus\r                                                 // 452\n                    that.telInput.off(\"keypress.plus\" + that.ns);\r                                                     // 453\n                }\r                                                                                                     // 454\n                // if autoFormat, we must manually trigger change event if value has changed\r                          // 455\n                if (that.options.autoFormat && window.intlTelInputUtils && that.telInput.val() != that.telInput.data(\"focusVal\")) {\r\n                    that.telInput.trigger(\"change\");\r                                                                  // 457\n                }\r                                                                                                     // 458\n            });\r                                                                                                       // 459\n        },\r                                                                                                            // 460\n        // extract the numeric digits from the given string\r                                                           // 461\n        _getNumeric: function(s) {\r                                                                                    // 462\n            return s.replace(/\\D/g, \"\");\r                                                                              // 463\n        },\r                                                                                                            // 464\n        // show the dropdown\r                                                                                          // 465\n        _showDropdown: function() {\r                                                                                   // 466\n            this._setDropdownPosition();\r                                                                              // 467\n            // update highlighting and scroll to active list item\r                                                     // 468\n            var activeListItem = this.countryList.children(\".active\");\r                                                // 469\n            this._highlightListItem(activeListItem);\r                                                                  // 470\n            // show it\r                                                                                                // 471\n            this.countryList.removeClass(\"hide\");\r                                                                     // 472\n            this._scrollTo(activeListItem);\r                                                                           // 473\n            // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\r                          // 474\n            this._bindDropdownListeners();\r                                                                            // 475\n            // update the arrow\r                                                                                       // 476\n            this.selectedFlagInner.children(\".arrow\").addClass(\"up\");\r                                                 // 477\n        },\r                                                                                                            // 478\n        // decide where to position dropdown (depends on position within viewport, and scroll)\r                        // 479\n        _setDropdownPosition: function() {\r                                                                            // 480\n            var inputTop = this.telInput.offset().top, windowTop = $(window).scrollTop(), // dropdownFitsBelow = (dropdownBottom < windowBottom)\r\n            dropdownFitsBelow = inputTop + this.telInput.outerHeight() + this.dropdownHeight < windowTop + $(window).height(), dropdownFitsAbove = inputTop - this.dropdownHeight > windowTop;\r\n            // dropdownHeight - 1 for border\r                                                                          // 483\n            var cssTop = !dropdownFitsBelow && dropdownFitsAbove ? \"-\" + (this.dropdownHeight - 1) + \"px\" : \"\";\r       // 484\n            this.countryList.css(\"top\", cssTop);\r                                                                      // 485\n        },\r                                                                                                            // 486\n        // we only bind dropdown listeners when the dropdown is open\r                                                  // 487\n        _bindDropdownListeners: function() {\r                                                                          // 488\n            var that = this;\r                                                                                          // 489\n            // when mouse over a list item, just highlight that one\r                                                   // 490\n            // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\r                       // 491\n            this.countryList.on(\"mouseover\" + this.ns, \".country\", function(e) {\r                                      // 492\n                that._highlightListItem($(this));\r                                                                     // 493\n            });\r                                                                                                       // 494\n            // listen for country selection\r                                                                           // 495\n            this.countryList.on(\"click\" + this.ns, \".country\", function(e) {\r                                          // 496\n                that._selectListItem($(this));\r                                                                        // 497\n            });\r                                                                                                       // 498\n            // click off to close\r                                                                                     // 499\n            // (except when this initial opening click is bubbling up)\r                                                // 500\n            // we cannot just stopPropagation as it may be needed to close another instance\r                           // 501\n            var isOpening = true;\r                                                                                     // 502\n            $(\"html\").on(\"click\" + this.ns, function(e) {\r                                                             // 503\n                if (!isOpening) {\r                                                                                     // 504\n                    that._closeDropdown();\r                                                                            // 505\n                }\r                                                                                                     // 506\n                isOpening = false;\r                                                                                    // 507\n            });\r                                                                                                       // 508\n            // listen for up/down scrolling, enter to select, or letters to jump to country name.\r                     // 509\n            // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\r                    // 510\n            // just hit down and hold it to scroll down (no keyup event).\r                                             // 511\n            // listen on the document because that's where key events are triggered if no input has focus\r             // 512\n            var query = \"\", queryTimer = null;\r                                                                        // 513\n            $(document).on(\"keydown\" + this.ns, function(e) {\r                                                         // 514\n                // prevent down key from scrolling the whole page,\r                                                    // 515\n                // and enter key from submitting a form etc\r                                                           // 516\n                e.preventDefault();\r                                                                                   // 517\n                if (e.which == keys.UP || e.which == keys.DOWN) {\r                                                     // 518\n                    // up and down to navigate\r                                                                        // 519\n                    that._handleUpDownKey(e.which);\r                                                                   // 520\n                } else if (e.which == keys.ENTER) {\r                                                                   // 521\n                    // enter to select\r                                                                                // 522\n                    that._handleEnterKey();\r                                                                           // 523\n                } else if (e.which == keys.ESC) {\r                                                                     // 524\n                    // esc to close\r                                                                                   // 525\n                    that._closeDropdown();\r                                                                            // 526\n                } else if (e.which >= keys.A && e.which <= keys.Z || e.which == keys.SPACE) {\r                         // 527\n                    // upper case letters (note: keyup/keydown only return upper case letters)\r                        // 528\n                    // jump to countries that start with the query string\r                                             // 529\n                    if (queryTimer) {\r                                                                                 // 530\n                        clearTimeout(queryTimer);\r                                                                     // 531\n                    }\r                                                                                                 // 532\n                    query += String.fromCharCode(e.which);\r                                                            // 533\n                    that._searchForCountry(query);\r                                                                    // 534\n                    // if the timer hits 1 second, reset the query\r                                                    // 535\n                    queryTimer = setTimeout(function() {\r                                                              // 536\n                        query = \"\";\r                                                                                   // 537\n                    }, 1e3);\r                                                                                          // 538\n                }\r                                                                                                     // 539\n            });\r                                                                                                       // 540\n        },\r                                                                                                            // 541\n        // highlight the next/prev item in the list (and ensure it is visible)\r                                        // 542\n        _handleUpDownKey: function(key) {\r                                                                             // 543\n            var current = this.countryList.children(\".highlight\").first();\r                                            // 544\n            var next = key == keys.UP ? current.prev() : current.next();\r                                              // 545\n            if (next.length) {\r                                                                                        // 546\n                // skip the divider\r                                                                                   // 547\n                if (next.hasClass(\"divider\")) {\r                                                                       // 548\n                    next = key == keys.UP ? next.prev() : next.next();\r                                                // 549\n                }\r                                                                                                     // 550\n                this._highlightListItem(next);\r                                                                        // 551\n                this._scrollTo(next);\r                                                                                 // 552\n            }\r                                                                                                         // 553\n        },\r                                                                                                            // 554\n        // select the currently highlighted item\r                                                                      // 555\n        _handleEnterKey: function() {\r                                                                                 // 556\n            var currentCountry = this.countryList.children(\".highlight\").first();\r                                     // 557\n            if (currentCountry.length) {\r                                                                              // 558\n                this._selectListItem(currentCountry);\r                                                                 // 559\n            }\r                                                                                                         // 560\n        },\r                                                                                                            // 561\n        // find the first list item whose name starts with the query string\r                                           // 562\n        _searchForCountry: function(query) {\r                                                                          // 563\n            for (var i = 0; i < this.countries.length; i++) {\r                                                         // 564\n                if (this._startsWith(this.countries[i].name, query)) {\r                                                // 565\n                    var listItem = this.countryList.children(\"[data-country-code=\" + this.countries[i].iso2 + \"]\").not(\".preferred\");\r\n                    // update highlighting and scroll\r                                                                 // 567\n                    this._highlightListItem(listItem);\r                                                                // 568\n                    this._scrollTo(listItem, true);\r                                                                   // 569\n                    break;\r                                                                                            // 570\n                }\r                                                                                                     // 571\n            }\r                                                                                                         // 572\n        },\r                                                                                                            // 573\n        // check if (uppercase) string a starts with string b\r                                                         // 574\n        _startsWith: function(a, b) {\r                                                                                 // 575\n            return a.substr(0, b.length).toUpperCase() == b;\r                                                          // 576\n        },\r                                                                                                            // 577\n        // update the input's value to the given val\r                                                                  // 578\n        // if autoFormat=true, format it first according to the country-specific formatting rules\r                     // 579\n        _updateVal: function(val, addSuffix) {\r                                                                        // 580\n            var formatted;\r                                                                                            // 581\n            if (this.options.autoFormat && window.intlTelInputUtils) {\r                                                // 582\n                formatted = intlTelInputUtils.formatNumber(val, this.selectedCountryData.iso2, addSuffix);\r            // 583\n                // ensure we dont go over maxlength. we must do this here to truncate any formatting suffix, and also handle paste events\r\n                var max = this.telInput.attr(\"maxlength\");\r                                                            // 585\n                if (max && formatted.length > max) {\r                                                                  // 586\n                    formatted = formatted.substr(0, max);\r                                                             // 587\n                }\r                                                                                                     // 588\n            } else {\r                                                                                                  // 589\n                // no autoFormat, so just insert the original value\r                                                   // 590\n                formatted = val;\r                                                                                      // 591\n            }\r                                                                                                         // 592\n            this.telInput.val(formatted);\r                                                                             // 593\n        },\r                                                                                                            // 594\n        // check if need to select a new flag based on the given number\r                                               // 595\n        _updateFlagFromNumber: function(number) {\r                                                                     // 596\n            // if we're in nationalMode and we're on US/Canada, make sure the number starts with a +1 so _getDialCode will be able to extract the area code\r\n            // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag from the number), that means we're initialising the plugin with a number that already has a dial code, so fine to ignore this bit\r\n            if (this.options.nationalMode && this.selectedCountryData && this.selectedCountryData.dialCode == \"1\" && number.substr(0, 1) != \"+\") {\r\n                number = \"+1\" + number;\r                                                                               // 600\n            }\r                                                                                                         // 601\n            // try and extract valid dial code from input\r                                                             // 602\n            var dialCode = this._getDialCode(number);\r                                                                 // 603\n            if (dialCode) {\r                                                                                           // 604\n                // check if one of the matching countries is already selected\r                                         // 605\n                var countryCodes = this.countryCodes[this._getNumeric(dialCode)], alreadySelected = false;\r            // 606\n                if (this.selectedCountryData) {\r                                                                       // 607\n                    for (var i = 0; i < countryCodes.length; i++) {\r                                                   // 608\n                        if (countryCodes[i] == this.selectedCountryData.iso2) {\r                                       // 609\n                            alreadySelected = true;\r                                                                   // 610\n                        }\r                                                                                             // 611\n                    }\r                                                                                                 // 612\n                }\r                                                                                                     // 613\n                // if a matching country is not already selected (or this is an unknown NANP area code): choose the first in the list\r\n                if (!alreadySelected || this._isUnknownNanp(number, dialCode)) {\r                                      // 615\n                    // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first non-empty index\r\n                    for (var j = 0; j < countryCodes.length; j++) {\r                                                   // 617\n                        if (countryCodes[j]) {\r                                                                        // 618\n                            this._selectFlag(countryCodes[j]);\r                                                        // 619\n                            break;\r                                                                                    // 620\n                        }\r                                                                                             // 621\n                    }\r                                                                                                 // 622\n                }\r                                                                                                     // 623\n            }\r                                                                                                         // 624\n        },\r                                                                                                            // 625\n        // check if the given number contains an unknown area code from the North American Numbering Plan i.e. the only dialCode that could be extracted was +1 but the actual number's length is >=4\r\n        _isUnknownNanp: function(number, dialCode) {\r                                                                  // 627\n            return dialCode == \"+1\" && this._getNumeric(number).length >= 4;\r                                          // 628\n        },\r                                                                                                            // 629\n        // remove highlighting from other list items and highlight the given item\r                                     // 630\n        _highlightListItem: function(listItem) {\r                                                                      // 631\n            this.countryListItems.removeClass(\"highlight\");\r                                                           // 632\n            listItem.addClass(\"highlight\");\r                                                                           // 633\n        },\r                                                                                                            // 634\n        // find the country data for the given country code\r                                                           // 635\n        // the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array\r             // 636\n        _getCountryData: function(countryCode, ignoreOnlyCountriesOption, allowFail) {\r                                // 637\n            var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\r                              // 638\n            for (var i = 0; i < countryList.length; i++) {\r                                                            // 639\n                if (countryList[i].iso2 == countryCode) {\r                                                             // 640\n                    return countryList[i];\r                                                                            // 641\n                }\r                                                                                                     // 642\n            }\r                                                                                                         // 643\n            if (allowFail) {\r                                                                                          // 644\n                return null;\r                                                                                          // 645\n            } else {\r                                                                                                  // 646\n                throw new Error(\"No country data for '\" + countryCode + \"'\");\r                                         // 647\n            }\r                                                                                                         // 648\n        },\r                                                                                                            // 649\n        // select the given flag, update the placeholder and the active list item\r                                     // 650\n        _selectFlag: function(countryCode) {\r                                                                          // 651\n            // do this first as it will throw an error and stop if countryCode is invalid\r                             // 652\n            this.selectedCountryData = this._getCountryData(countryCode, false, false);\r                               // 653\n            this.selectedFlagInner.attr(\"class\", \"flag \" + countryCode);\r                                              // 654\n            // update the selected country's title attribute\r                                                          // 655\n            var title = this.selectedCountryData.name + \": +\" + this.selectedCountryData.dialCode;\r                    // 656\n            this.selectedFlagInner.parent().attr(\"title\", title);\r                                                     // 657\n            // and the input's placeholder\r                                                                            // 658\n            this._updatePlaceholder();\r                                                                                // 659\n            // update the active list item\r                                                                            // 660\n            var listItem = this.countryListItems.children(\".flag.\" + countryCode).first().parent();\r                   // 661\n            this.countryListItems.removeClass(\"active\");\r                                                              // 662\n            listItem.addClass(\"active\");\r                                                                              // 663\n        },\r                                                                                                            // 664\n        // update the input placeholder to an example number from the currently selected country\r                      // 665\n        _updatePlaceholder: function() {\r                                                                              // 666\n            if (window.intlTelInputUtils && !this.hadInitialPlaceholder) {\r                                            // 667\n                var iso2 = this.selectedCountryData.iso2, numberType = intlTelInputUtils.numberType[this.options.numberType || \"FIXED_LINE\"], placeholder = intlTelInputUtils.getExampleNumber(iso2, this.options.nationalMode, numberType);\r\n                this.telInput.attr(\"placeholder\", placeholder);\r                                                       // 669\n            }\r                                                                                                         // 670\n        },\r                                                                                                            // 671\n        // called when the user selects a list item from the dropdown\r                                                 // 672\n        _selectListItem: function(listItem) {\r                                                                         // 673\n            // update selected flag and active list item\r                                                              // 674\n            var countryCode = listItem.attr(\"data-country-code\");\r                                                     // 675\n            this._selectFlag(countryCode);\r                                                                            // 676\n            this._closeDropdown();\r                                                                                    // 677\n            this._updateDialCode(listItem.attr(\"data-dial-code\"), true);\r                                              // 678\n            // always fire the change event as even if nationalMode=true (and we haven't updated the input val), the system as a whole has still changed - see country-sync example. think of it as making a selection from a select element.\r\n            this.telInput.trigger(\"change\");\r                                                                          // 680\n            // focus the input\r                                                                                        // 681\n            this.telInput.focus();\r                                                                                    // 682\n        },\r                                                                                                            // 683\n        // close the dropdown and unbind any listeners\r                                                                // 684\n        _closeDropdown: function() {\r                                                                                  // 685\n            this.countryList.addClass(\"hide\");\r                                                                        // 686\n            // update the arrow\r                                                                                       // 687\n            this.selectedFlagInner.children(\".arrow\").removeClass(\"up\");\r                                              // 688\n            // unbind key events\r                                                                                      // 689\n            $(document).off(this.ns);\r                                                                                 // 690\n            // unbind click-off-to-close\r                                                                              // 691\n            $(\"html\").off(this.ns);\r                                                                                   // 692\n            // unbind hover and click listeners\r                                                                       // 693\n            this.countryList.off(this.ns);\r                                                                            // 694\n        },\r                                                                                                            // 695\n        // check if an element is visible within it's container, else scroll until it is\r                              // 696\n        _scrollTo: function(element, middle) {\r                                                                        // 697\n            var container = this.countryList, containerHeight = container.height(), containerTop = container.offset().top, containerBottom = containerTop + containerHeight, elementHeight = element.outerHeight(), elementTop = element.offset().top, elementBottom = elementTop + elementHeight, newScrollTop = elementTop - containerTop + container.scrollTop(), middleOffset = containerHeight / 2 - elementHeight / 2;\r\n            if (elementTop < containerTop) {\r                                                                          // 699\n                // scroll up\r                                                                                          // 700\n                if (middle) {\r                                                                                         // 701\n                    newScrollTop -= middleOffset;\r                                                                     // 702\n                }\r                                                                                                     // 703\n                container.scrollTop(newScrollTop);\r                                                                    // 704\n            } else if (elementBottom > containerBottom) {\r                                                             // 705\n                // scroll down\r                                                                                        // 706\n                if (middle) {\r                                                                                         // 707\n                    newScrollTop += middleOffset;\r                                                                     // 708\n                }\r                                                                                                     // 709\n                var heightDifference = containerHeight - elementHeight;\r                                               // 710\n                container.scrollTop(newScrollTop - heightDifference);\r                                                 // 711\n            }\r                                                                                                         // 712\n        },\r                                                                                                            // 713\n        // replace any existing dial code with the new one (if not in nationalMode)\r                                   // 714\n        // also we need to know if we're focusing for a couple of reasons e.g. if so, we want to add any formatting suffix, also if the input is empty and we're not in nationalMode, then we want to insert the dial code\r\n        _updateDialCode: function(newDialCode, focusing) {\r                                                            // 716\n            var inputVal = this.telInput.val(), newNumber;\r                                                            // 717\n            // save having to pass this every time\r                                                                    // 718\n            newDialCode = \"+\" + newDialCode;\r                                                                          // 719\n            if (this.options.nationalMode && inputVal.substr(0, 1) != \"+\") {\r                                          // 720\n                // if nationalMode, we just want to re-format\r                                                         // 721\n                newNumber = inputVal;\r                                                                                 // 722\n            } else if (inputVal) {\r                                                                                    // 723\n                // if the previous number contained a valid dial code, replace it\r                                     // 724\n                // (if more than just a plus character)\r                                                               // 725\n                var prevDialCode = this._getDialCode(inputVal);\r                                                       // 726\n                if (prevDialCode.length > 1) {\r                                                                        // 727\n                    newNumber = inputVal.replace(prevDialCode, newDialCode);\r                                          // 728\n                } else {\r                                                                                              // 729\n                    // if the previous number didn't contain a dial code, we should persist it\r                        // 730\n                    var existingNumber = inputVal.substr(0, 1) != \"+\" ? $.trim(inputVal) : \"\";\r                        // 731\n                    newNumber = newDialCode + existingNumber;\r                                                         // 732\n                }\r                                                                                                     // 733\n            } else {\r                                                                                                  // 734\n                newNumber = !this.options.autoHideDialCode || focusing ? newDialCode : \"\";\r                            // 735\n            }\r                                                                                                         // 736\n            this._updateVal(newNumber, focusing);\r                                                                     // 737\n        },\r                                                                                                            // 738\n        // try and extract a valid international dial code from a full telephone number\r                               // 739\n        // Note: returns the raw string inc plus character and any whitespace/dots etc\r                                // 740\n        _getDialCode: function(number) {\r                                                                              // 741\n            var dialCode = \"\";\r                                                                                        // 742\n            // only interested in international numbers (starting with a plus)\r                                        // 743\n            if (number.charAt(0) == \"+\") {\r                                                                            // 744\n                var numericChars = \"\";\r                                                                                // 745\n                // iterate over chars\r                                                                                 // 746\n                for (var i = 0; i < number.length; i++) {\r                                                             // 747\n                    var c = number.charAt(i);\r                                                                         // 748\n                    // if char is number\r                                                                              // 749\n                    if ($.isNumeric(c)) {\r                                                                             // 750\n                        numericChars += c;\r                                                                            // 751\n                        // if current numericChars make a valid dial code\r                                             // 752\n                        if (this.countryCodes[numericChars]) {\r                                                        // 753\n                            // store the actual raw string (useful for matching later)\r                                // 754\n                            dialCode = number.substr(0, i + 1);\r                                                       // 755\n                        }\r                                                                                             // 756\n                        // longest dial code is 4 chars\r                                                               // 757\n                        if (numericChars.length == 4) {\r                                                               // 758\n                            break;\r                                                                                    // 759\n                        }\r                                                                                             // 760\n                    }\r                                                                                                 // 761\n                }\r                                                                                                     // 762\n            }\r                                                                                                         // 763\n            return dialCode;\r                                                                                          // 764\n        },\r                                                                                                            // 765\n        /********************\r                                                                                         // 766\n   *  PUBLIC METHODS\r                                                                                                  // 767\n   ********************/\r                                                                                              // 768\n        // remove plugin\r                                                                                              // 769\n        destroy: function() {\r                                                                                         // 770\n            // make sure the dropdown is closed (and unbind listeners)\r                                                // 771\n            this._closeDropdown();\r                                                                                    // 772\n            // key events, and focus/blur events if autoHideDialCode=true\r                                             // 773\n            this.telInput.off(this.ns);\r                                                                               // 774\n            // click event to open dropdown\r                                                                           // 775\n            this.selectedFlagInner.parent().off(this.ns);\r                                                             // 776\n            // label click hack\r                                                                                       // 777\n            this.telInput.closest(\"label\").off(this.ns);\r                                                              // 778\n            // remove markup\r                                                                                          // 779\n            var container = this.telInput.parent();\r                                                                   // 780\n            container.before(this.telInput).remove();\r                                                                 // 781\n        },\r                                                                                                            // 782\n        // format the number to E164\r                                                                                  // 783\n        getCleanNumber: function() {\r                                                                                  // 784\n            if (window.intlTelInputUtils) {\r                                                                           // 785\n                return intlTelInputUtils.formatNumberE164(this.telInput.val(), this.selectedCountryData.iso2);\r        // 786\n            }\r                                                                                                         // 787\n            return \"\";\r                                                                                                // 788\n        },\r                                                                                                            // 789\n        // get the type of the entered number e.g. landline/mobile\r                                                    // 790\n        getNumberType: function() {\r                                                                                   // 791\n            if (window.intlTelInputUtils) {\r                                                                           // 792\n                return intlTelInputUtils.getNumberType(this.telInput.val(), this.selectedCountryData.iso2);\r           // 793\n            }\r                                                                                                         // 794\n            return -99;\r                                                                                               // 795\n        },\r                                                                                                            // 796\n        // get the country data for the currently selected flag\r                                                       // 797\n        getSelectedCountryData: function() {\r                                                                          // 798\n            // if this is undefined, the plugin will return it's instance instead, so in that case an empty object makes more sense\r\n            return this.selectedCountryData || {};\r                                                                    // 800\n        },\r                                                                                                            // 801\n        // get the validation error\r                                                                                   // 802\n        getValidationError: function() {\r                                                                              // 803\n            if (window.intlTelInputUtils) {\r                                                                           // 804\n                return intlTelInputUtils.getValidationError(this.telInput.val(), this.selectedCountryData.iso2);\r      // 805\n            }\r                                                                                                         // 806\n            return -99;\r                                                                                               // 807\n        },\r                                                                                                            // 808\n        // validate the input val - assumes the global function isValidNumber (from utilsScript)\r                      // 809\n        isValidNumber: function() {\r                                                                                   // 810\n            var val = $.trim(this.telInput.val()), countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\", // libphonenumber allows alpha chars, but in order to allow that, we'd need a method to retrieve the processed number, with letters replaced with numbers\r\n            containsAlpha = /[a-zA-Z]/.test(val);\r                                                                     // 812\n            if (!containsAlpha && window.intlTelInputUtils) {\r                                                         // 813\n                return intlTelInputUtils.isValidNumber(val, countryCode);\r                                             // 814\n            }\r                                                                                                         // 815\n            return false;\r                                                                                             // 816\n        },\r                                                                                                            // 817\n        // load the utils script\r                                                                                      // 818\n        loadUtils: function(path) {\r                                                                                   // 819\n            var utilsScript = path || this.options.utilsScript;\r                                                       // 820\n            if (!$.fn[pluginName].loadedUtilsScript && utilsScript) {\r                                                 // 821\n                // don't do this twice! (dont just check if the global intlTelInputUtils exists as if init plugin multiple times in quick succession, it may not have finished loading yet)\r\n                $.fn[pluginName].loadedUtilsScript = true;\r                                                            // 823\n                // dont use $.getScript as it prevents caching\r                                                        // 824\n                $.ajax({\r                                                                                              // 825\n                    url: utilsScript,\r                                                                                 // 826\n                    success: function() {\r                                                                             // 827\n                        // tell all instances the utils are ready\r                                                     // 828\n                        $(\".intl-tel-input input\").intlTelInput(\"utilsLoaded\");\r                                       // 829\n                    },\r                                                                                                // 830\n                    dataType: \"script\",\r                                                                               // 831\n                    cache: true\r                                                                                       // 832\n                });\r                                                                                                   // 833\n            }\r                                                                                                         // 834\n        },\r                                                                                                            // 835\n        // update the selected flag, and update the input val accordingly\r                                             // 836\n        selectCountry: function(countryCode) {\r                                                                        // 837\n            // check if already selected\r                                                                              // 838\n            if (!this.selectedFlagInner.hasClass(countryCode)) {\r                                                      // 839\n                this._selectFlag(countryCode);\r                                                                        // 840\n                this._updateDialCode(this.selectedCountryData.dialCode, false);\r                                       // 841\n            }\r                                                                                                         // 842\n        },\r                                                                                                            // 843\n        // set the input value and update the flag\r                                                                    // 844\n        setNumber: function(number, addSuffix) {\r                                                                      // 845\n            // ensure starts with plus\r                                                                                // 846\n            if (!this.options.nationalMode && number.substr(0, 1) != \"+\") {\r                                           // 847\n                number = \"+\" + number;\r                                                                                // 848\n            }\r                                                                                                         // 849\n            // we must update the flag first, which updates this.selectedCountryData, which is used later for formatting the number before displaying it\r\n            this._updateFlagFromNumber(number);\r                                                                       // 851\n            this._updateVal(number, addSuffix);\r                                                                       // 852\n        },\r                                                                                                            // 853\n        // this is called when the utils are ready\r                                                                    // 854\n        utilsLoaded: function() {\r                                                                                     // 855\n            // if autoFormat is enabled and there's an initial value in the input, then format it\r                     // 856\n            if (this.options.autoFormat && this.telInput.val()) {\r                                                     // 857\n                this._updateVal(this.telInput.val());\r                                                                 // 858\n            }\r                                                                                                         // 859\n            this._updatePlaceholder();\r                                                                                // 860\n        }\r                                                                                                             // 861\n    };\r                                                                                                                // 862\n    // adapted to allow public functions\r                                                                              // 863\n    // using https://github.com/jquery-boilerplate/jquery-boilerplate/wiki/Extending-jQuery-Boilerplate\r               // 864\n    $.fn[pluginName] = function(options) {\r                                                                            // 865\n        var args = arguments;\r                                                                                         // 866\n        // Is the first parameter an object (options), or was omitted,\r                                                // 867\n        // instantiate a new instance of the plugin.\r                                                                  // 868\n        if (options === undefined || typeof options === \"object\") {\r                                                   // 869\n            return this.each(function() {\r                                                                             // 870\n                if (!$.data(this, \"plugin_\" + pluginName)) {\r                                                          // 871\n                    $.data(this, \"plugin_\" + pluginName, new Plugin(this, options));\r                                  // 872\n                }\r                                                                                                     // 873\n            });\r                                                                                                       // 874\n        } else if (typeof options === \"string\" && options[0] !== \"_\" && options !== \"init\") {\r                         // 875\n            // If the first parameter is a string and it doesn't start\r                                                // 876\n            // with an underscore or \"contains\" the `init`-function,\r                                                  // 877\n            // treat this as a call to a public method.\r                                                               // 878\n            // Cache the method call to make it possible to return a value\r                                            // 879\n            var returns;\r                                                                                              // 880\n            this.each(function() {\r                                                                                    // 881\n                var instance = $.data(this, \"plugin_\" + pluginName);\r                                                  // 882\n                // Tests that there's already a plugin-instance\r                                                       // 883\n                // and checks that the requested public method exists\r                                                 // 884\n                if (instance instanceof Plugin && typeof instance[options] === \"function\") {\r                          // 885\n                    // Call the method of our plugin instance,\r                                                        // 886\n                    // and pass it the supplied arguments.\r                                                            // 887\n                    returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));\r                 // 888\n                }\r                                                                                                     // 889\n                // Allow instances to be destroyed via the 'destroy' method\r                                           // 890\n                if (options === \"destroy\") {\r                                                                          // 891\n                    $.data(this, \"plugin_\" + pluginName, null);\r                                                       // 892\n                }\r                                                                                                     // 893\n            });\r                                                                                                       // 894\n            // If the earlier cached method gives a value back return the value,\r                                      // 895\n            // otherwise return this to preserve chainability.\r                                                        // 896\n            return returns !== undefined ? returns : this;\r                                                            // 897\n        }\r                                                                                                             // 898\n    };\r                                                                                                                // 899\n    /********************\r                                                                                             // 900\n *  STATIC METHODS\r                                                                                                    // 901\n ********************/\r                                                                                                // 902\n    // get the country data object\r                                                                                    // 903\n    $.fn[pluginName].getCountryData = function() {\r                                                                    // 904\n        return allCountries;\r                                                                                          // 905\n    };\r                                                                                                                // 906\n    // set the country data object\r                                                                                    // 907\n    $.fn[pluginName].setCountryData = function(obj) {\r                                                                 // 908\n        allCountries = obj;\r                                                                                           // 909\n    };\r                                                                                                                // 910\n    // Tell JSHint to ignore this warning: \"character may get silently deleted by one or more browsers\"\r               // 911\n    // jshint -W100\r                                                                                                   // 912\n    // Array of country objects for the flag dropdown.\r                                                                // 913\n    // Each contains a name, country code (ISO 3166-1 alpha-2) and dial code.\r                                         // 914\n    // Originally from https://github.com/mledoze/countries\r                                                           // 915\n    // then modified using the following JavaScript (NOW OUT OF DATE):\r                                                // 916\n    /*\r                                                                                                                // 917\nvar result = [];\r                                                                                                      // 918\n_.each(countries, function(c) {\r                                                                                       // 919\n  // ignore countries without a dial code\r                                                                             // 920\n  if (c.callingCode[0].length) {\r                                                                                      // 921\n    result.push({\r                                                                                                     // 922\n      // var locals contains country names with localised versions in brackets\r                                        // 923\n      n: _.findWhere(locals, {\r                                                                                        // 924\n        countryCode: c.cca2\r                                                                                           // 925\n      }).name,\r                                                                                                        // 926\n      i: c.cca2.toLowerCase(),\r                                                                                        // 927\n      d: c.callingCode[0]\r                                                                                             // 928\n    });\r                                                                                                               // 929\n  }\r                                                                                                                   // 930\n});\r                                                                                                                   // 931\nJSON.stringify(result);\r                                                                                               // 932\n*/\r                                                                                                                    // 933\n    // then with a couple of manual re-arrangements to be alphabetical\r                                                // 934\n    // then changed Kazakhstan from +76 to +7\r                                                                         // 935\n    // and Vatican City from +379 to +39 (see issue 50)\r                                                               // 936\n    // and Caribean Netherlands from +5997 to +599\r                                                                    // 937\n    // and Curacao from +5999 to +599\r                                                                                 // 938\n    // Removed: Åland Islands, Christmas Island, Cocos Islands, Guernsey, Isle of Man, Jersey, Kosovo, Mayotte, Pitcairn Islands, South Georgia, Svalbard, Western Sahara\r\n    // Update: converted objects to arrays to save bytes!\r                                                             // 940\n    // Update: added \"priority\" for countries with the same dialCode as others\r                                        // 941\n    // Update: added array of area codes for countries with the same dialCode as others\r                               // 942\n    // So each country array has the following information:\r                                                           // 943\n    // [\r                                                                                                              // 944\n    //    Country name,\r                                                                                               // 945\n    //    iso2 code,\r                                                                                                  // 946\n    //    International dial code,\r                                                                                    // 947\n    //    Order (if >1 country with same dial code),\r                                                                  // 948\n    //    Area codes (if >1 country with same dial code)\r                                                              // 949\n    // ]\r                                                                                                              // 950\n    var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1684\" ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1264\" ], [ \"Antigua and Barbuda\", \"ag\", \"1268\" ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Australia\", \"au\", \"61\" ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1242\" ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1246\" ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1441\" ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1284\" ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1 ], [ \"Cayman Islands\", \"ky\", \"1345\" ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1767\" ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\" ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1473\" ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1671\" ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1876\" ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1 ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1664\" ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\" ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1670\" ], [ \"Norway (Norge)\", \"no\", \"47\" ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\" ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy (Saint-Barthélemy)\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1869\" ], [ \"Saint Lucia\", \"lc\", \"1758\" ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1784\" ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1721\" ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Swaziland\", \"sz\", \"268\" ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1868\" ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1649\" ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1340\" ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\" ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1 ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna\", \"wf\", \"681\" ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ] ];\r\n    // loop over all of the countries above\r                                                                           // 952\n    for (var i = 0; i < allCountries.length; i++) {\r                                                                   // 953\n        var c = allCountries[i];\r                                                                                      // 954\n        allCountries[i] = {\r                                                                                           // 955\n            name: c[0],\r                                                                                               // 956\n            iso2: c[1],\r                                                                                               // 957\n            dialCode: c[2],\r                                                                                           // 958\n            priority: c[3] || 0,\r                                                                                      // 959\n            areaCodes: c[4] || null\r                                                                                   // 960\n        };\r                                                                                                            // 961\n    }\r                                                                                                                 // 962\n});                                                                                                                    // 963\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"ctjp:meteor-intl-tel-input\");\n\n})();\n","servePath":"/packages/ctjp_meteor-intl-tel-input.js"}]