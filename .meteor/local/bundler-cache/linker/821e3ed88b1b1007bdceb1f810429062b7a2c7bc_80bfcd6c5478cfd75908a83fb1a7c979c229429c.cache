[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/rcy_nouislider/packages/rcy_nouislider.js                //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/rcy:nouislider/lib/jquery.nouislider.all.js                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/*! noUiSlider - 7.0.6 - 2014-09-11 20:29:06 */                                                                      // 1\n                                                                                                                     // 2\n(function(){                                                                                                         // 3\n                                                                                                                     // 4\n        'use strict';                                                                                                // 5\n                                                                                                                     // 6\nvar                                                                                                                  // 7\n/** @const */ FormatOptions = [                                                                                      // 8\n        'decimals',                                                                                                  // 9\n        'thousand',                                                                                                  // 10\n        'mark',                                                                                                      // 11\n        'prefix',                                                                                                    // 12\n        'postfix',                                                                                                   // 13\n        'encoder',                                                                                                   // 14\n        'decoder',                                                                                                   // 15\n        'negativeBefore',                                                                                            // 16\n        'negative',                                                                                                  // 17\n        'edit',                                                                                                      // 18\n        'undo'                                                                                                       // 19\n];                                                                                                                   // 20\n                                                                                                                     // 21\n// General                                                                                                           // 22\n                                                                                                                     // 23\n        // Reverse a string                                                                                          // 24\n        function strReverse ( a ) {                                                                                  // 25\n                return a.split('').reverse().join('');                                                               // 26\n        }                                                                                                            // 27\n                                                                                                                     // 28\n        // Check if a string starts with a specified prefix.                                                         // 29\n        function strStartsWith ( input, match ) {                                                                    // 30\n                return input.substring(0, match.length) === match;                                                   // 31\n        }                                                                                                            // 32\n                                                                                                                     // 33\n        // Check is a string ends in a specified postfix.                                                            // 34\n        function strEndsWith ( input, match ) {                                                                      // 35\n                return input.slice(-1 * match.length) === match;                                                     // 36\n        }                                                                                                            // 37\n                                                                                                                     // 38\n        // Throw an error if formatting options are incompatible.                                                    // 39\n        function throwEqualError( F, a, b ) {                                                                        // 40\n                if ( (F[a] || F[b]) && (F[a] === F[b]) ) {                                                           // 41\n                        throw new Error(a);                                                                          // 42\n                }                                                                                                    // 43\n        }                                                                                                            // 44\n                                                                                                                     // 45\n        // Check if a number is finite and not NaN                                                                   // 46\n        function isValidNumber ( input ) {                                                                           // 47\n                return typeof input === 'number' && isFinite( input );                                               // 48\n        }                                                                                                            // 49\n                                                                                                                     // 50\n        // Provide rounding-accurate toFixed method.                                                                 // 51\n        function toFixed ( value, decimals ) {                                                                       // 52\n                var scale = Math.pow(10, decimals);                                                                  // 53\n                return ( Math.round(value * scale) / scale).toFixed( decimals );                                     // 54\n        }                                                                                                            // 55\n                                                                                                                     // 56\n                                                                                                                     // 57\n// Formatting                                                                                                        // 58\n                                                                                                                     // 59\n        // Accept a number as input, output formatted string.                                                        // 60\n        function formatTo ( decimals, thousand, mark, prefix, postfix, encoder, decoder, negativeBefore, negative, edit, undo, input ) {\n                                                                                                                     // 62\n                var originalInput = input, inputIsNegative, inputPieces, inputBase, inputDecimals = '', output = ''; // 63\n                                                                                                                     // 64\n                // Apply user encoder to the input.                                                                  // 65\n                // Expected outcome: number.                                                                         // 66\n                if ( encoder ) {                                                                                     // 67\n                        input = encoder(input);                                                                      // 68\n                }                                                                                                    // 69\n                                                                                                                     // 70\n                // Stop if no valid number was provided, the number is infinite or NaN.                              // 71\n                if ( !isValidNumber(input) ) {                                                                       // 72\n                        return false;                                                                                // 73\n                }                                                                                                    // 74\n                                                                                                                     // 75\n                // Rounding away decimals might cause a value of -0                                                  // 76\n                // when using very small ranges. Remove those cases.                                                 // 77\n                if ( decimals && parseFloat(input.toFixed(decimals)) === 0 ) {                                       // 78\n                        input = 0;                                                                                   // 79\n                }                                                                                                    // 80\n                                                                                                                     // 81\n                // Formatting is done on absolute numbers,                                                           // 82\n                // decorated by an optional negative symbol.                                                         // 83\n                if ( input < 0 ) {                                                                                   // 84\n                        inputIsNegative = true;                                                                      // 85\n                        input = Math.abs(input);                                                                     // 86\n                }                                                                                                    // 87\n                                                                                                                     // 88\n                // Reduce the number of decimals to the specified option.                                            // 89\n                if ( decimals !== false ) {                                                                          // 90\n                        input = toFixed( input, decimals );                                                          // 91\n                }                                                                                                    // 92\n                                                                                                                     // 93\n                // Transform the number into a string, so it can be split.                                           // 94\n                input = input.toString();                                                                            // 95\n                                                                                                                     // 96\n                // Break the number on the decimal separator.                                                        // 97\n                if ( input.indexOf('.') !== -1 ) {                                                                   // 98\n                        inputPieces = input.split('.');                                                              // 99\n                                                                                                                     // 100\n                        inputBase = inputPieces[0];                                                                  // 101\n                                                                                                                     // 102\n                        if ( mark ) {                                                                                // 103\n                                inputDecimals = mark + inputPieces[1];                                               // 104\n                        }                                                                                            // 105\n                                                                                                                     // 106\n                } else {                                                                                             // 107\n                                                                                                                     // 108\n                // If it isn't split, the entire number will do.                                                     // 109\n                        inputBase = input;                                                                           // 110\n                }                                                                                                    // 111\n                                                                                                                     // 112\n                // Group numbers in sets of three.                                                                   // 113\n                if ( thousand ) {                                                                                    // 114\n                        inputBase = strReverse(inputBase).match(/.{1,3}/g);                                          // 115\n                        inputBase = strReverse(inputBase.join( strReverse( thousand ) ));                            // 116\n                }                                                                                                    // 117\n                                                                                                                     // 118\n                // If the number is negative, prefix with negation symbol.                                           // 119\n                if ( inputIsNegative && negativeBefore ) {                                                           // 120\n                        output += negativeBefore;                                                                    // 121\n                }                                                                                                    // 122\n                                                                                                                     // 123\n                // Prefix the number                                                                                 // 124\n                if ( prefix ) {                                                                                      // 125\n                        output += prefix;                                                                            // 126\n                }                                                                                                    // 127\n                                                                                                                     // 128\n                // Normal negative option comes after the prefix. Defaults to '-'.                                   // 129\n                if ( inputIsNegative && negative ) {                                                                 // 130\n                        output += negative;                                                                          // 131\n                }                                                                                                    // 132\n                                                                                                                     // 133\n                // Append the actual number.                                                                         // 134\n                output += inputBase;                                                                                 // 135\n                output += inputDecimals;                                                                             // 136\n                                                                                                                     // 137\n                // Apply the postfix.                                                                                // 138\n                if ( postfix ) {                                                                                     // 139\n                        output += postfix;                                                                           // 140\n                }                                                                                                    // 141\n                                                                                                                     // 142\n                // Run the output through a user-specified post-formatter.                                           // 143\n                if ( edit ) {                                                                                        // 144\n                        output = edit ( output, originalInput );                                                     // 145\n                }                                                                                                    // 146\n                                                                                                                     // 147\n                // All done.                                                                                         // 148\n                return output;                                                                                       // 149\n        }                                                                                                            // 150\n                                                                                                                     // 151\n        // Accept a sting as input, output decoded number.                                                           // 152\n        function formatFrom ( decimals, thousand, mark, prefix, postfix, encoder, decoder, negativeBefore, negative, edit, undo, input ) {\n                                                                                                                     // 154\n                var originalInput = input, inputIsNegative, output = '';                                             // 155\n                                                                                                                     // 156\n                // User defined pre-decoder. Result must be a non empty string.                                      // 157\n                if ( undo ) {                                                                                        // 158\n                        input = undo(input);                                                                         // 159\n                }                                                                                                    // 160\n                                                                                                                     // 161\n                // Test the input. Can't be empty.                                                                   // 162\n                if ( !input || typeof input !== 'string' ) {                                                         // 163\n                        return false;                                                                                // 164\n                }                                                                                                    // 165\n                                                                                                                     // 166\n                // If the string starts with the negativeBefore value: remove it.                                    // 167\n                // Remember is was there, the number is negative.                                                    // 168\n                if ( negativeBefore && strStartsWith(input, negativeBefore) ) {                                      // 169\n                        input = input.replace(negativeBefore, '');                                                   // 170\n                        inputIsNegative = true;                                                                      // 171\n                }                                                                                                    // 172\n                                                                                                                     // 173\n                // Repeat the same procedure for the prefix.                                                         // 174\n                if ( prefix && strStartsWith(input, prefix) ) {                                                      // 175\n                        input = input.replace(prefix, '');                                                           // 176\n                }                                                                                                    // 177\n                                                                                                                     // 178\n                // And again for negative.                                                                           // 179\n                if ( negative && strStartsWith(input, negative) ) {                                                  // 180\n                        input = input.replace(negative, '');                                                         // 181\n                        inputIsNegative = true;                                                                      // 182\n                }                                                                                                    // 183\n                                                                                                                     // 184\n                // Remove the postfix.                                                                               // 185\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice     // 186\n                if ( postfix && strEndsWith(input, postfix) ) {                                                      // 187\n                        input = input.slice(0, -1 * postfix.length);                                                 // 188\n                }                                                                                                    // 189\n                                                                                                                     // 190\n                // Remove the thousand grouping.                                                                     // 191\n                if ( thousand ) {                                                                                    // 192\n                        input = input.split(thousand).join('');                                                      // 193\n                }                                                                                                    // 194\n                                                                                                                     // 195\n                // Set the decimal separator back to period.                                                         // 196\n                if ( mark ) {                                                                                        // 197\n                        input = input.replace(mark, '.');                                                            // 198\n                }                                                                                                    // 199\n                                                                                                                     // 200\n                // Prepend the negative symbol.                                                                      // 201\n                if ( inputIsNegative ) {                                                                             // 202\n                        output += '-';                                                                               // 203\n                }                                                                                                    // 204\n                                                                                                                     // 205\n                // Add the number                                                                                    // 206\n                output += input;                                                                                     // 207\n                                                                                                                     // 208\n                // Trim all non-numeric characters (allow '.' and '-');                                              // 209\n                output = output.replace(/[^0-9\\.\\-.]/g, '');                                                         // 210\n                                                                                                                     // 211\n                // The value contains no parse-able number.                                                          // 212\n                if ( output === '' ) {                                                                               // 213\n                        return false;                                                                                // 214\n                }                                                                                                    // 215\n                                                                                                                     // 216\n                // Covert to number.                                                                                 // 217\n                output = Number(output);                                                                             // 218\n                                                                                                                     // 219\n                // Run the user-specified post-decoder.                                                              // 220\n                if ( decoder ) {                                                                                     // 221\n                        output = decoder(output);                                                                    // 222\n                }                                                                                                    // 223\n                                                                                                                     // 224\n                // Check is the output is valid, otherwise: return false.                                            // 225\n                if ( !isValidNumber(output) ) {                                                                      // 226\n                        return false;                                                                                // 227\n                }                                                                                                    // 228\n                                                                                                                     // 229\n                return output;                                                                                       // 230\n        }                                                                                                            // 231\n                                                                                                                     // 232\n                                                                                                                     // 233\n// Framework                                                                                                         // 234\n                                                                                                                     // 235\n        // Validate formatting options                                                                               // 236\n        function validate ( inputOptions ) {                                                                         // 237\n                                                                                                                     // 238\n                var i, optionName, optionValue,                                                                      // 239\n                        filteredOptions = {};                                                                        // 240\n                                                                                                                     // 241\n                for ( i = 0; i < FormatOptions.length; i+=1 ) {                                                      // 242\n                                                                                                                     // 243\n                        optionName = FormatOptions[i];                                                               // 244\n                        optionValue = inputOptions[optionName];                                                      // 245\n                                                                                                                     // 246\n                        if ( optionValue === undefined ) {                                                           // 247\n                                                                                                                     // 248\n                                // Only default if negativeBefore isn't set.                                         // 249\n                                if ( optionName === 'negative' && !filteredOptions.negativeBefore ) {                // 250\n                                        filteredOptions[optionName] = '-';                                           // 251\n                                // Don't set a default for mark when 'thousand' is set.                              // 252\n                                } else if ( optionName === 'mark' && filteredOptions.thousand !== '.' ) {            // 253\n                                        filteredOptions[optionName] = '.';                                           // 254\n                                } else {                                                                             // 255\n                                        filteredOptions[optionName] = false;                                         // 256\n                                }                                                                                    // 257\n                                                                                                                     // 258\n                        // Floating points in JS are stable up to 7 decimals.                                        // 259\n                        } else if ( optionName === 'decimals' ) {                                                    // 260\n                                if ( optionValue >= 0 && optionValue < 8 ) {                                         // 261\n                                        filteredOptions[optionName] = optionValue;                                   // 262\n                                } else {                                                                             // 263\n                                        throw new Error(optionName);                                                 // 264\n                                }                                                                                    // 265\n                                                                                                                     // 266\n                        // These options, when provided, must be functions.                                          // 267\n                        } else if ( optionName === 'encoder' || optionName === 'decoder' || optionName === 'edit' || optionName === 'undo' ) {\n                                if ( typeof optionValue === 'function' ) {                                           // 269\n                                        filteredOptions[optionName] = optionValue;                                   // 270\n                                } else {                                                                             // 271\n                                        throw new Error(optionName);                                                 // 272\n                                }                                                                                    // 273\n                                                                                                                     // 274\n                        // Other options are strings.                                                                // 275\n                        } else {                                                                                     // 276\n                                                                                                                     // 277\n                                if ( typeof optionValue === 'string' ) {                                             // 278\n                                        filteredOptions[optionName] = optionValue;                                   // 279\n                                } else {                                                                             // 280\n                                        throw new Error(optionName);                                                 // 281\n                                }                                                                                    // 282\n                        }                                                                                            // 283\n                }                                                                                                    // 284\n                                                                                                                     // 285\n                // Some values can't be extracted from a                                                             // 286\n                // string if certain combinations are present.                                                       // 287\n                throwEqualError(filteredOptions, 'mark', 'thousand');                                                // 288\n                throwEqualError(filteredOptions, 'prefix', 'negative');                                              // 289\n                throwEqualError(filteredOptions, 'prefix', 'negativeBefore');                                        // 290\n                                                                                                                     // 291\n                return filteredOptions;                                                                              // 292\n        }                                                                                                            // 293\n                                                                                                                     // 294\n        // Pass all options as function arguments                                                                    // 295\n        function passAll ( options, method, input ) {                                                                // 296\n                var i, args = [];                                                                                    // 297\n                                                                                                                     // 298\n                // Add all options in order of FormatOptions                                                         // 299\n                for ( i = 0; i < FormatOptions.length; i+=1 ) {                                                      // 300\n                        args.push(options[FormatOptions[i]]);                                                        // 301\n                }                                                                                                    // 302\n                                                                                                                     // 303\n                // Append the input, then call the method, presenting all                                            // 304\n                // options as arguments.                                                                             // 305\n                args.push(input);                                                                                    // 306\n                return method.apply('', args);                                                                       // 307\n        }                                                                                                            // 308\n                                                                                                                     // 309\n        /** @constructor */                                                                                          // 310\n        function wNumb ( options ) {                                                                                 // 311\n                                                                                                                     // 312\n                if ( !(this instanceof wNumb) ) {                                                                    // 313\n                        return new wNumb ( options );                                                                // 314\n                }                                                                                                    // 315\n                                                                                                                     // 316\n                if ( typeof options !== \"object\" ) {                                                                 // 317\n                        return;                                                                                      // 318\n                }                                                                                                    // 319\n                                                                                                                     // 320\n                options = validate(options);                                                                         // 321\n                                                                                                                     // 322\n                // Call 'formatTo' with proper arguments.                                                            // 323\n                this.to = function ( input ) {                                                                       // 324\n                        return passAll(options, formatTo, input);                                                    // 325\n                };                                                                                                   // 326\n                                                                                                                     // 327\n                // Call 'formatFrom' with proper arguments.                                                          // 328\n                this.from = function ( input ) {                                                                     // 329\n                        return passAll(options, formatFrom, input);                                                  // 330\n                };                                                                                                   // 331\n        }                                                                                                            // 332\n                                                                                                                     // 333\n        /** @export */                                                                                               // 334\n        window.wNumb = wNumb;                                                                                        // 335\n                                                                                                                     // 336\n}());                                                                                                                // 337\n                                                                                                                     // 338\n/*jslint browser: true */                                                                                            // 339\n/*jslint white: true */                                                                                              // 340\n                                                                                                                     // 341\n(function( $ ){                                                                                                      // 342\n                                                                                                                     // 343\n        'use strict';                                                                                                // 344\n                                                                                                                     // 345\n// Helpers                                                                                                           // 346\n                                                                                                                     // 347\n        // Test in an object is an instance of jQuery or Zepto.                                                      // 348\n        function isInstance ( a ) {                                                                                  // 349\n                return a instanceof $ || ( $.zepto && $.zepto.isZ(a) );                                              // 350\n        }                                                                                                            // 351\n                                                                                                                     // 352\n                                                                                                                     // 353\n// Link types                                                                                                        // 354\n                                                                                                                     // 355\n        function fromPrefix ( target, method ) {                                                                     // 356\n                                                                                                                     // 357\n                // If target is a string, a new hidden input will be created.                                        // 358\n                if ( typeof target === 'string' && target.indexOf('-inline-') === 0 ) {                              // 359\n                                                                                                                     // 360\n                        // By default, use the 'html' method.                                                        // 361\n                        this.method = method || 'html';                                                              // 362\n                                                                                                                     // 363\n                        // Use jQuery to create the element                                                          // 364\n                        this.target = this.el = $( target.replace('-inline-', '') || '<div/>' );                     // 365\n                                                                                                                     // 366\n                        return true;                                                                                 // 367\n                }                                                                                                    // 368\n        }                                                                                                            // 369\n                                                                                                                     // 370\n        function fromString ( target ) {                                                                             // 371\n                                                                                                                     // 372\n                // If the string doesn't begin with '-', which is reserved, add a new hidden input.                  // 373\n                if ( typeof target === 'string' && target.indexOf('-') !== 0 ) {                                     // 374\n                                                                                                                     // 375\n                        this.method = 'val';                                                                         // 376\n                                                                                                                     // 377\n                        var element = document.createElement('input');                                               // 378\n                                element.name = target;                                                               // 379\n                                element.type = 'hidden';                                                             // 380\n                        this.target = this.el = $(element);                                                          // 381\n                                                                                                                     // 382\n                        return true;                                                                                 // 383\n                }                                                                                                    // 384\n        }                                                                                                            // 385\n                                                                                                                     // 386\n        function fromFunction ( target ) {                                                                           // 387\n                                                                                                                     // 388\n                // The target can also be a function, which will be called.                                          // 389\n                if ( typeof target === 'function' ) {                                                                // 390\n                        this.target = false;                                                                         // 391\n                        this.method = target;                                                                        // 392\n                                                                                                                     // 393\n                        return true;                                                                                 // 394\n                }                                                                                                    // 395\n        }                                                                                                            // 396\n                                                                                                                     // 397\n        function fromInstance ( target, method ) {                                                                   // 398\n                                                                                                                     // 399\n                if ( isInstance( target ) && !method ) {                                                             // 400\n                                                                                                                     // 401\n                // If a jQuery/Zepto input element is provided, but no method is set,                                // 402\n                // the element can assume it needs to respond to 'change'...                                         // 403\n                        if ( target.is('input, select, textarea') ) {                                                // 404\n                                                                                                                     // 405\n                                // Default to .val if this is an input element.                                      // 406\n                                this.method = 'val';                                                                 // 407\n                                                                                                                     // 408\n                                // Fire the API changehandler when the target changes.                               // 409\n                                this.target = target.on('change.liblink', this.changeHandler);                       // 410\n                                                                                                                     // 411\n                        } else {                                                                                     // 412\n                                                                                                                     // 413\n                                this.target = target;                                                                // 414\n                                                                                                                     // 415\n                                // If no method is set, and we are not auto-binding an input, default to 'html'.     // 416\n                                this.method = 'html';                                                                // 417\n                        }                                                                                            // 418\n                                                                                                                     // 419\n                        return true;                                                                                 // 420\n                }                                                                                                    // 421\n        }                                                                                                            // 422\n                                                                                                                     // 423\n        function fromInstanceMethod ( target, method ) {                                                             // 424\n                                                                                                                     // 425\n                // The method must exist on the element.                                                             // 426\n                if ( isInstance( target ) &&                                                                         // 427\n                        (typeof method === 'function' ||                                                             // 428\n                                (typeof method === 'string' && target[method]))                                      // 429\n                ) {                                                                                                  // 430\n                        this.method = method;                                                                        // 431\n                        this.target = target;                                                                        // 432\n                                                                                                                     // 433\n                        return true;                                                                                 // 434\n                }                                                                                                    // 435\n        }                                                                                                            // 436\n                                                                                                                     // 437\nvar                                                                                                                  // 438\n/** @const */                                                                                                        // 439\n        creationFunctions = [fromPrefix, fromString, fromFunction, fromInstance, fromInstanceMethod];                // 440\n                                                                                                                     // 441\n                                                                                                                     // 442\n// Link Instance                                                                                                     // 443\n                                                                                                                     // 444\n/** @constructor */                                                                                                  // 445\n        function Link ( target, method, format ) {                                                                   // 446\n                                                                                                                     // 447\n                var that = this, valid = false;                                                                      // 448\n                                                                                                                     // 449\n                // Forward calls within scope.                                                                       // 450\n                this.changeHandler = function ( changeEvent ) {                                                      // 451\n                        var decodedValue = that.formatInstance.from( $(this).val() );                                // 452\n                                                                                                                     // 453\n                        // If the value is invalid, stop this event, as well as it's propagation.                    // 454\n                        if ( decodedValue === false || isNaN(decodedValue) ) {                                       // 455\n                                                                                                                     // 456\n                                // Reset the value.                                                                  // 457\n                                $(this).val(that.lastSetValue);                                                      // 458\n                                return false;                                                                        // 459\n                        }                                                                                            // 460\n                                                                                                                     // 461\n                        that.changeHandlerMethod.call( '', changeEvent, decodedValue );                              // 462\n                };                                                                                                   // 463\n                                                                                                                     // 464\n                // See if this Link needs individual targets based on its usage.                                     // 465\n                // If so, return the element that needs to be copied by the                                          // 466\n                // implementing interface.                                                                           // 467\n                // Default the element to false.                                                                     // 468\n                this.el = false;                                                                                     // 469\n                                                                                                                     // 470\n                // Store the formatter, or use the default.                                                          // 471\n                this.formatInstance = format;                                                                        // 472\n                                                                                                                     // 473\n                // Try all Link types.                                                                               // 474\n                /*jslint unparam: true*/                                                                             // 475\n                $.each(creationFunctions, function(i, fn){                                                           // 476\n                        valid = fn.call(that, target, method);                                                       // 477\n                        return !valid;                                                                               // 478\n                });                                                                                                  // 479\n                /*jslint unparam: false*/                                                                            // 480\n                                                                                                                     // 481\n                // Nothing matched, throw error.                                                                     // 482\n                if ( !valid ) {                                                                                      // 483\n                        throw new RangeError(\"(Link) Invalid Link.\");                                                // 484\n                }                                                                                                    // 485\n        }                                                                                                            // 486\n                                                                                                                     // 487\n        // Provides external items with the object value.                                                            // 488\n        Link.prototype.set = function ( value ) {                                                                    // 489\n                                                                                                                     // 490\n                // Ignore the value, so only the passed-on arguments remain.                                         // 491\n                var args = Array.prototype.slice.call( arguments ),                                                  // 492\n                        additionalArgs = args.slice(1);                                                              // 493\n                                                                                                                     // 494\n                // Store some values. The actual, numerical value,                                                   // 495\n                // the formatted value and the parameters for use in 'resetValue'.                                   // 496\n                // Slice additionalArgs to break the relation.                                                       // 497\n                this.lastSetValue = this.formatInstance.to( value );                                                 // 498\n                                                                                                                     // 499\n                // Prepend the value to the function arguments.                                                      // 500\n                additionalArgs.unshift(                                                                              // 501\n                        this.lastSetValue                                                                            // 502\n                );                                                                                                   // 503\n                                                                                                                     // 504\n                // When target is undefined, the target was a function.                                              // 505\n                // In that case, provided the object as the calling scope.                                           // 506\n                // Branch between writing to a function or an object.                                                // 507\n                ( typeof this.method === 'function' ?                                                                // 508\n                        this.method :                                                                                // 509\n                        this.target[ this.method ] ).apply( this.target, additionalArgs );                           // 510\n        };                                                                                                           // 511\n                                                                                                                     // 512\n                                                                                                                     // 513\n// Developer API                                                                                                     // 514\n                                                                                                                     // 515\n/** @constructor */                                                                                                  // 516\n        function LinkAPI ( origin ) {                                                                                // 517\n                this.items = [];                                                                                     // 518\n                this.elements = [];                                                                                  // 519\n                this.origin = origin;                                                                                // 520\n        }                                                                                                            // 521\n                                                                                                                     // 522\n        LinkAPI.prototype.push = function( item, element ) {                                                         // 523\n                this.items.push(item);                                                                               // 524\n                                                                                                                     // 525\n                // Prevent 'false' elements                                                                          // 526\n                if ( element ) {                                                                                     // 527\n                        this.elements.push(element);                                                                 // 528\n                }                                                                                                    // 529\n        };                                                                                                           // 530\n                                                                                                                     // 531\n        LinkAPI.prototype.reconfirm = function ( flag ) {                                                            // 532\n                var i;                                                                                               // 533\n                for ( i = 0; i < this.elements.length; i += 1 ) {                                                    // 534\n                        this.origin.LinkConfirm(flag, this.elements[i]);                                             // 535\n                }                                                                                                    // 536\n        };                                                                                                           // 537\n                                                                                                                     // 538\n        LinkAPI.prototype.remove = function ( flag ) {                                                               // 539\n                var i;                                                                                               // 540\n                for ( i = 0; i < this.items.length; i += 1 ) {                                                       // 541\n                        this.items[i].target.off('.liblink');                                                        // 542\n                }                                                                                                    // 543\n                for ( i = 0; i < this.elements.length; i += 1 ) {                                                    // 544\n                        this.elements[i].remove();                                                                   // 545\n                }                                                                                                    // 546\n        };                                                                                                           // 547\n                                                                                                                     // 548\n        LinkAPI.prototype.change = function ( value ) {                                                              // 549\n                                                                                                                     // 550\n                if ( this.origin.LinkIsEmitting ) {                                                                  // 551\n                        return false;                                                                                // 552\n                }                                                                                                    // 553\n                                                                                                                     // 554\n                this.origin.LinkIsEmitting = true;                                                                   // 555\n                                                                                                                     // 556\n                var args = Array.prototype.slice.call( arguments, 1 ), i;                                            // 557\n                args.unshift( value );                                                                               // 558\n                                                                                                                     // 559\n                // Write values to serialization Links.                                                              // 560\n                // Convert the value to the correct relative representation.                                         // 561\n                for ( i = 0; i < this.items.length; i += 1 ) {                                                       // 562\n                        this.items[i].set.apply(this.items[i], args);                                                // 563\n                }                                                                                                    // 564\n                                                                                                                     // 565\n                this.origin.LinkIsEmitting = false;                                                                  // 566\n        };                                                                                                           // 567\n                                                                                                                     // 568\n                                                                                                                     // 569\n// jQuery plugin                                                                                                     // 570\n                                                                                                                     // 571\n        function binder ( flag, target, method, format ){                                                            // 572\n                                                                                                                     // 573\n                if ( flag === 0 ) {                                                                                  // 574\n                        flag = this.LinkDefaultFlag;                                                                 // 575\n                }                                                                                                    // 576\n                                                                                                                     // 577\n                // Create a list of API's (if it didn't exist yet);                                                  // 578\n                if ( !this.linkAPI ) {                                                                               // 579\n                        this.linkAPI = {};                                                                           // 580\n                }                                                                                                    // 581\n                                                                                                                     // 582\n                // Add an API point.                                                                                 // 583\n                if ( !this.linkAPI[flag] ) {                                                                         // 584\n                        this.linkAPI[flag] = new LinkAPI(this);                                                      // 585\n                }                                                                                                    // 586\n                                                                                                                     // 587\n                var linkInstance = new Link ( target, method, format || this.LinkDefaultFormatter );                 // 588\n                                                                                                                     // 589\n                // Default the calling scope to the linked object.                                                   // 590\n                if ( !linkInstance.target ) {                                                                        // 591\n                        linkInstance.target = $(this);                                                               // 592\n                }                                                                                                    // 593\n                                                                                                                     // 594\n                // If the Link requires creation of a new element,                                                   // 595\n                // Pass the element and request confirmation to get the changehandler.                               // 596\n                // Set the method to be called when a Link changes.                                                  // 597\n                linkInstance.changeHandlerMethod = this.LinkConfirm( flag, linkInstance.el );                        // 598\n                                                                                                                     // 599\n                // Store the linkInstance in the flagged list.                                                       // 600\n                this.linkAPI[flag].push( linkInstance, linkInstance.el );                                            // 601\n                                                                                                                     // 602\n                // Now that Link have been connected, request an update.                                             // 603\n                this.LinkUpdate( flag );                                                                             // 604\n        }                                                                                                            // 605\n                                                                                                                     // 606\n        /** @export */                                                                                               // 607\n        $.fn.Link = function( flag ){                                                                                // 608\n                                                                                                                     // 609\n                var that = this;                                                                                     // 610\n                                                                                                                     // 611\n                // Delete all linkAPI                                                                                // 612\n                if ( flag === false ) {                                                                              // 613\n                                                                                                                     // 614\n                        return that.each(function(){                                                                 // 615\n                                                                                                                     // 616\n                                // .Link(false) can be called on elements without Links.                             // 617\n                                // When that happens, the objects can't be looped.                                   // 618\n                                if ( !this.linkAPI ) {                                                               // 619\n                                        return;                                                                      // 620\n                                }                                                                                    // 621\n                                                                                                                     // 622\n                                $.map(this.linkAPI, function(api){                                                   // 623\n                                        api.remove();                                                                // 624\n                                });                                                                                  // 625\n                                                                                                                     // 626\n                                delete this.linkAPI;                                                                 // 627\n                        });                                                                                          // 628\n                }                                                                                                    // 629\n                                                                                                                     // 630\n                if ( flag === undefined ) {                                                                          // 631\n                                                                                                                     // 632\n                        flag = 0;                                                                                    // 633\n                                                                                                                     // 634\n                } else if ( typeof flag !== 'string') {                                                              // 635\n                                                                                                                     // 636\n                        throw new Error(\"Flag must be string.\");                                                     // 637\n                }                                                                                                    // 638\n                                                                                                                     // 639\n                return {                                                                                             // 640\n                        to: function( a, b, c ){                                                                     // 641\n                                return that.each(function(){                                                         // 642\n                                        binder.call(this, flag, a, b, c);                                            // 643\n                                });                                                                                  // 644\n                        }                                                                                            // 645\n                };                                                                                                   // 646\n        };                                                                                                           // 647\n                                                                                                                     // 648\n}( window.jQuery || window.Zepto ));                                                                                 // 649\n                                                                                                                     // 650\n/*jslint browser: true */                                                                                            // 651\n/*jslint white: true */                                                                                              // 652\n                                                                                                                     // 653\n(function( $ ){                                                                                                      // 654\n                                                                                                                     // 655\n        'use strict';                                                                                                // 656\n                                                                                                                     // 657\n                                                                                                                     // 658\n        // Removes duplicates from an array.                                                                         // 659\n        function unique(array) {                                                                                     // 660\n                return $.grep(array, function(el, index) {                                                           // 661\n                        return index === $.inArray(el, array);                                                       // 662\n                });                                                                                                  // 663\n        }                                                                                                            // 664\n                                                                                                                     // 665\n        // Round a value to the closest 'to'.                                                                        // 666\n        function closest ( value, to ) {                                                                             // 667\n                return Math.round(value / to) * to;                                                                  // 668\n        }                                                                                                            // 669\n                                                                                                                     // 670\n        // Checks whether a value is numerical.                                                                      // 671\n        function isNumeric ( a ) {                                                                                   // 672\n                return typeof a === 'number' && !isNaN( a ) && isFinite( a );                                        // 673\n        }                                                                                                            // 674\n                                                                                                                     // 675\n        // Rounds a number to 7 supported decimals.                                                                  // 676\n        function accurateNumber( number ) {                                                                          // 677\n                var p = Math.pow(10, 7);                                                                             // 678\n                return Number((Math.round(number*p)/p).toFixed(7));                                                  // 679\n        }                                                                                                            // 680\n                                                                                                                     // 681\n        // Sets a class and removes it after [duration] ms.                                                          // 682\n        function addClassFor ( element, className, duration ) {                                                      // 683\n                element.addClass(className);                                                                         // 684\n                setTimeout(function(){                                                                               // 685\n                        element.removeClass(className);                                                              // 686\n                }, duration);                                                                                        // 687\n        }                                                                                                            // 688\n                                                                                                                     // 689\n        // Limits a value to 0 - 100                                                                                 // 690\n        function limit ( a ) {                                                                                       // 691\n                return Math.max(Math.min(a, 100), 0);                                                                // 692\n        }                                                                                                            // 693\n                                                                                                                     // 694\n        // Wraps a variable as an array, if it isn't one yet.                                                        // 695\n        function asArray ( a ) {                                                                                     // 696\n                return $.isArray(a) ? a : [a];                                                                       // 697\n        }                                                                                                            // 698\n                                                                                                                     // 699\n                                                                                                                     // 700\n        var                                                                                                          // 701\n        // Cache the document selector;                                                                              // 702\n        /** @const */                                                                                                // 703\n        doc = $(document),                                                                                           // 704\n        // Make a backup of the original jQuery/Zepto .val() method.                                                 // 705\n        /** @const */                                                                                                // 706\n        $val = $.fn.val,                                                                                             // 707\n        // Namespace for binding and unbinding slider events;                                                        // 708\n        /** @const */                                                                                                // 709\n        namespace = '.nui',                                                                                          // 710\n        // Determine the events to bind. IE11 implements pointerEvents without                                       // 711\n        // a prefix, which breaks compatibility with the IE10 implementation.                                        // 712\n        /** @const */                                                                                                // 713\n        actions = window.navigator.pointerEnabled ? {                                                                // 714\n                start: 'pointerdown',                                                                                // 715\n                move: 'pointermove',                                                                                 // 716\n                end: 'pointerup'                                                                                     // 717\n        } : window.navigator.msPointerEnabled ? {                                                                    // 718\n                start: 'MSPointerDown',                                                                              // 719\n                move: 'MSPointerMove',                                                                               // 720\n                end: 'MSPointerUp'                                                                                   // 721\n        } : {                                                                                                        // 722\n                start: 'mousedown touchstart',                                                                       // 723\n                move: 'mousemove touchmove',                                                                         // 724\n                end: 'mouseup touchend'                                                                              // 725\n        },                                                                                                           // 726\n        // Re-usable list of classes;                                                                                // 727\n        /** @const */                                                                                                // 728\n        Classes = [                                                                                                  // 729\n/*  0 */  'noUi-target'                                                                                              // 730\n/*  1 */ ,'noUi-base'                                                                                                // 731\n/*  2 */ ,'noUi-origin'                                                                                              // 732\n/*  3 */ ,'noUi-handle'                                                                                              // 733\n/*  4 */ ,'noUi-horizontal'                                                                                          // 734\n/*  5 */ ,'noUi-vertical'                                                                                            // 735\n/*  6 */ ,'noUi-background'                                                                                          // 736\n/*  7 */ ,'noUi-connect'                                                                                             // 737\n/*  8 */ ,'noUi-ltr'                                                                                                 // 738\n/*  9 */ ,'noUi-rtl'                                                                                                 // 739\n/* 10 */ ,'noUi-dragable'                                                                                            // 740\n/* 11 */ ,''                                                                                                         // 741\n/* 12 */ ,'noUi-state-drag'                                                                                          // 742\n/* 13 */ ,''                                                                                                         // 743\n/* 14 */ ,'noUi-state-tap'                                                                                           // 744\n/* 15 */ ,'noUi-active'                                                                                              // 745\n/* 16 */ ,''                                                                                                         // 746\n/* 17 */ ,'noUi-stacking'                                                                                            // 747\n        ];                                                                                                           // 748\n                                                                                                                     // 749\n                                                                                                                     // 750\n// Value calculation                                                                                                 // 751\n                                                                                                                     // 752\n        // Determine the size of a sub-range in relation to a full range.                                            // 753\n        function subRangeRatio ( pa, pb ) {                                                                          // 754\n                return (100 / (pb - pa));                                                                            // 755\n        }                                                                                                            // 756\n                                                                                                                     // 757\n        // (percentage) How many percent is this value of this range?                                                // 758\n        function fromPercentage ( range, value ) {                                                                   // 759\n                return (value * 100) / ( range[1] - range[0] );                                                      // 760\n        }                                                                                                            // 761\n                                                                                                                     // 762\n        // (percentage) Where is this value on this range?                                                           // 763\n        function toPercentage ( range, value ) {                                                                     // 764\n                return fromPercentage( range, range[0] < 0 ?                                                         // 765\n                        value + Math.abs(range[0]) :                                                                 // 766\n                                value - range[0] );                                                                  // 767\n        }                                                                                                            // 768\n                                                                                                                     // 769\n        // (value) How much is this percentage on this range?                                                        // 770\n        function isPercentage ( range, value ) {                                                                     // 771\n                return ((value * ( range[1] - range[0] )) / 100) + range[0];                                         // 772\n        }                                                                                                            // 773\n                                                                                                                     // 774\n                                                                                                                     // 775\n// Range conversion                                                                                                  // 776\n                                                                                                                     // 777\n        function getJ ( value, arr ) {                                                                               // 778\n                                                                                                                     // 779\n                var j = 1;                                                                                           // 780\n                                                                                                                     // 781\n                while ( value >= arr[j] ){                                                                           // 782\n                        j += 1;                                                                                      // 783\n                }                                                                                                    // 784\n                                                                                                                     // 785\n                return j;                                                                                            // 786\n        }                                                                                                            // 787\n                                                                                                                     // 788\n        // (percentage) Input a value, find where, on a scale of 0-100, it applies.                                  // 789\n        function toStepping ( xVal, xPct, value ) {                                                                  // 790\n                                                                                                                     // 791\n                if ( value >= xVal.slice(-1)[0] ){                                                                   // 792\n                        return 100;                                                                                  // 793\n                }                                                                                                    // 794\n                                                                                                                     // 795\n                var j = getJ( value, xVal ), va, vb, pa, pb;                                                         // 796\n                                                                                                                     // 797\n                va = xVal[j-1];                                                                                      // 798\n                vb = xVal[j];                                                                                        // 799\n                pa = xPct[j-1];                                                                                      // 800\n                pb = xPct[j];                                                                                        // 801\n                                                                                                                     // 802\n                return pa + (toPercentage([va, vb], value) / subRangeRatio (pa, pb));                                // 803\n        }                                                                                                            // 804\n                                                                                                                     // 805\n        // (value) Input a percentage, find where it is on the specified range.                                      // 806\n        function fromStepping ( xVal, xPct, value ) {                                                                // 807\n                                                                                                                     // 808\n                // There is no range group that fits 100                                                             // 809\n                if ( value >= 100 ){                                                                                 // 810\n                        return xVal.slice(-1)[0];                                                                    // 811\n                }                                                                                                    // 812\n                                                                                                                     // 813\n                var j = getJ( value, xPct ), va, vb, pa, pb;                                                         // 814\n                                                                                                                     // 815\n                va = xVal[j-1];                                                                                      // 816\n                vb = xVal[j];                                                                                        // 817\n                pa = xPct[j-1];                                                                                      // 818\n                pb = xPct[j];                                                                                        // 819\n                                                                                                                     // 820\n                return isPercentage([va, vb], (value - pa) * subRangeRatio (pa, pb));                                // 821\n        }                                                                                                            // 822\n                                                                                                                     // 823\n        // (percentage) Get the step that applies at a certain value.                                                // 824\n        function getStep ( xPct, xSteps, snap, value ) {                                                             // 825\n                                                                                                                     // 826\n                if ( value === 100 ) {                                                                               // 827\n                        return value;                                                                                // 828\n                }                                                                                                    // 829\n                                                                                                                     // 830\n                var j = getJ( value, xPct ), a, b;                                                                   // 831\n                                                                                                                     // 832\n                // If 'snap' is set, steps are used as fixed points on the slider.                                   // 833\n                if ( snap ) {                                                                                        // 834\n                                                                                                                     // 835\n                        a = xPct[j-1];                                                                               // 836\n                        b = xPct[j];                                                                                 // 837\n                                                                                                                     // 838\n                        // Find the closest position, a or b.                                                        // 839\n                        if ((value - a) > ((b-a)/2)){                                                                // 840\n                                return b;                                                                            // 841\n                        }                                                                                            // 842\n                                                                                                                     // 843\n                        return a;                                                                                    // 844\n                }                                                                                                    // 845\n                                                                                                                     // 846\n                if ( !xSteps[j-1] ){                                                                                 // 847\n                        return value;                                                                                // 848\n                }                                                                                                    // 849\n                                                                                                                     // 850\n                return xPct[j-1] + closest(                                                                          // 851\n                        value - xPct[j-1],                                                                           // 852\n                        xSteps[j-1]                                                                                  // 853\n                );                                                                                                   // 854\n        }                                                                                                            // 855\n                                                                                                                     // 856\n                                                                                                                     // 857\n// Entry parsing                                                                                                     // 858\n                                                                                                                     // 859\n        function handleEntryPoint ( index, value, that ) {                                                           // 860\n                                                                                                                     // 861\n                var percentage;                                                                                      // 862\n                                                                                                                     // 863\n                // Wrap numerical input in an array.                                                                 // 864\n                if ( typeof value === \"number\" ) {                                                                   // 865\n                        value = [value];                                                                             // 866\n                }                                                                                                    // 867\n                                                                                                                     // 868\n                // Reject any invalid input, by testing whether value is an array.                                   // 869\n                if ( Object.prototype.toString.call( value ) !== '[object Array]' ){                                 // 870\n                        throw new Error(\"noUiSlider: 'range' contains invalid value.\");                              // 871\n                }                                                                                                    // 872\n                                                                                                                     // 873\n                // Covert min/max syntax to 0 and 100.                                                               // 874\n                if ( index === 'min' ) {                                                                             // 875\n                        percentage = 0;                                                                              // 876\n                } else if ( index === 'max' ) {                                                                      // 877\n                        percentage = 100;                                                                            // 878\n                } else {                                                                                             // 879\n                        percentage = parseFloat( index );                                                            // 880\n                }                                                                                                    // 881\n                                                                                                                     // 882\n                // Check for correct input.                                                                          // 883\n                if ( !isNumeric( percentage ) || !isNumeric( value[0] ) ) {                                          // 884\n                        throw new Error(\"noUiSlider: 'range' value isn't numeric.\");                                 // 885\n                }                                                                                                    // 886\n                                                                                                                     // 887\n                // Store values.                                                                                     // 888\n                that.xPct.push( percentage );                                                                        // 889\n                that.xVal.push( value[0] );                                                                          // 890\n                                                                                                                     // 891\n                // NaN will evaluate to false too, but to keep                                                       // 892\n                // logging clear, set step explicitly. Make sure                                                     // 893\n                // not to override the 'step' setting with false.                                                    // 894\n                if ( !percentage ) {                                                                                 // 895\n                        if ( !isNaN( value[1] ) ) {                                                                  // 896\n                                that.xSteps[0] = value[1];                                                           // 897\n                        }                                                                                            // 898\n                } else {                                                                                             // 899\n                        that.xSteps.push( isNaN(value[1]) ? false : value[1] );                                      // 900\n                }                                                                                                    // 901\n        }                                                                                                            // 902\n                                                                                                                     // 903\n        function handleStepPoint ( i, n, that ) {                                                                    // 904\n                                                                                                                     // 905\n                // Ignore 'false' stepping.                                                                          // 906\n                if ( !n ) {                                                                                          // 907\n                        return true;                                                                                 // 908\n                }                                                                                                    // 909\n                                                                                                                     // 910\n                // Factor to range ratio                                                                             // 911\n                that.xSteps[i] = fromPercentage([                                                                    // 912\n                         that.xVal[i]                                                                                // 913\n                        ,that.xVal[i+1]                                                                              // 914\n                ], n) / subRangeRatio (                                                                              // 915\n                        that.xPct[i],                                                                                // 916\n                        that.xPct[i+1] );                                                                            // 917\n        }                                                                                                            // 918\n                                                                                                                     // 919\n                                                                                                                     // 920\n// Interface                                                                                                         // 921\n                                                                                                                     // 922\n        // The interface to Spectrum handles all direction-based                                                     // 923\n        // conversions, so the above values are unaware.                                                             // 924\n                                                                                                                     // 925\n        function Spectrum ( entry, snap, direction, singleStep ) {                                                   // 926\n                                                                                                                     // 927\n                this.xPct = [];                                                                                      // 928\n                this.xVal = [];                                                                                      // 929\n                this.xSteps = [ singleStep || false ];                                                               // 930\n                this.xNumSteps = [ false ];                                                                          // 931\n                                                                                                                     // 932\n                this.snap = snap;                                                                                    // 933\n                this.direction = direction;                                                                          // 934\n                                                                                                                     // 935\n                var that = this, index;                                                                              // 936\n                                                                                                                     // 937\n                // Loop all entries.                                                                                 // 938\n                for ( index in entry ) {                                                                             // 939\n                        if ( entry.hasOwnProperty(index) ) {                                                         // 940\n                                handleEntryPoint(index, entry[index], that);                                         // 941\n                        }                                                                                            // 942\n                }                                                                                                    // 943\n                                                                                                                     // 944\n                // Store the actual step values.                                                                     // 945\n                that.xNumSteps = that.xSteps.slice(0);                                                               // 946\n                                                                                                                     // 947\n                for ( index in that.xNumSteps ) {                                                                    // 948\n                        if ( that.xNumSteps.hasOwnProperty(index) ) {                                                // 949\n                                handleStepPoint(Number(index), that.xNumSteps[index], that);                         // 950\n                        }                                                                                            // 951\n                }                                                                                                    // 952\n        }                                                                                                            // 953\n                                                                                                                     // 954\n        Spectrum.prototype.getMargin = function ( value ) {                                                          // 955\n                return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;                            // 956\n        };                                                                                                           // 957\n                                                                                                                     // 958\n        Spectrum.prototype.toStepping = function ( value ) {                                                         // 959\n                                                                                                                     // 960\n                value = toStepping( this.xVal, this.xPct, value );                                                   // 961\n                                                                                                                     // 962\n                // Invert the value if this is a right-to-left slider.                                               // 963\n                if ( this.direction ) {                                                                              // 964\n                        value = 100 - value;                                                                         // 965\n                }                                                                                                    // 966\n                                                                                                                     // 967\n                return value;                                                                                        // 968\n        };                                                                                                           // 969\n                                                                                                                     // 970\n        Spectrum.prototype.fromStepping = function ( value ) {                                                       // 971\n                                                                                                                     // 972\n                // Invert the value if this is a right-to-left slider.                                               // 973\n                if ( this.direction ) {                                                                              // 974\n                        value = 100 - value;                                                                         // 975\n                }                                                                                                    // 976\n                                                                                                                     // 977\n                return accurateNumber(fromStepping( this.xVal, this.xPct, value ));                                  // 978\n        };                                                                                                           // 979\n                                                                                                                     // 980\n        Spectrum.prototype.getStep = function ( value ) {                                                            // 981\n                                                                                                                     // 982\n                // Find the proper step for rtl sliders by search in inverse direction.                              // 983\n                // Fixes issue #262.                                                                                 // 984\n                if ( this.direction ) {                                                                              // 985\n                        value = 100 - value;                                                                         // 986\n                }                                                                                                    // 987\n                                                                                                                     // 988\n                value = getStep(this.xPct, this.xSteps, this.snap, value );                                          // 989\n                                                                                                                     // 990\n                if ( this.direction ) {                                                                              // 991\n                        value = 100 - value;                                                                         // 992\n                }                                                                                                    // 993\n                                                                                                                     // 994\n                return value;                                                                                        // 995\n        };                                                                                                           // 996\n                                                                                                                     // 997\n        Spectrum.prototype.getApplicableStep = function ( value ) {                                                  // 998\n                                                                                                                     // 999\n                // If the value is 100%, return the negative step twice.                                             // 1000\n                var j = getJ(value, this.xPct), offset = value === 100 ? 2 : 1;                                      // 1001\n                return [this.xNumSteps[j-2], this.xVal[j-offset], this.xNumSteps[j-offset]];                         // 1002\n        };                                                                                                           // 1003\n                                                                                                                     // 1004\n        // Outside testing                                                                                           // 1005\n        Spectrum.prototype.convert = function ( value ) {                                                            // 1006\n                return this.getStep(this.toStepping(value));                                                         // 1007\n        };                                                                                                           // 1008\n                                                                                                                     // 1009\n/*\tEvery input option is tested and parsed. This'll prevent                                                          // 1010\n        endless validation in internal methods. These tests are                                                      // 1011\n        structured with an item for every option available. An                                                       // 1012\n        option can be marked as required by setting the 'r' flag.                                                    // 1013\n        The testing function is provided with three arguments:                                                       // 1014\n                - The provided value for the option;                                                                 // 1015\n                - A reference to the options object;                                                                 // 1016\n                - The name for the option;                                                                           // 1017\n                                                                                                                     // 1018\n        The testing function returns false when an error is detected,                                                // 1019\n        or true when everything is OK. It can also modify the option                                                 // 1020\n        object, to make sure all values can be correctly looped elsewhere. */                                        // 1021\n                                                                                                                     // 1022\n        /** @const */                                                                                                // 1023\n        var defaultFormatter = { 'to': function( value ){                                                            // 1024\n                return value.toFixed(2);                                                                             // 1025\n        }, 'from': Number };                                                                                         // 1026\n                                                                                                                     // 1027\n        function testStep ( parsed, entry ) {                                                                        // 1028\n                                                                                                                     // 1029\n                if ( !isNumeric( entry ) ) {                                                                         // 1030\n                        throw new Error(\"noUiSlider: 'step' is not numeric.\");                                       // 1031\n                }                                                                                                    // 1032\n                                                                                                                     // 1033\n                // The step option can still be used to set stepping                                                 // 1034\n                // for linear sliders. Overwritten if set in 'range'.                                                // 1035\n                parsed.singleStep = entry;                                                                           // 1036\n        }                                                                                                            // 1037\n                                                                                                                     // 1038\n        function testRange ( parsed, entry ) {                                                                       // 1039\n                                                                                                                     // 1040\n                // Filter incorrect input.                                                                           // 1041\n                if ( typeof entry !== 'object' || $.isArray(entry) ) {                                               // 1042\n                        throw new Error(\"noUiSlider: 'range' is not an object.\");                                    // 1043\n                }                                                                                                    // 1044\n                                                                                                                     // 1045\n                // Catch missing start or end.                                                                       // 1046\n                if ( entry.min === undefined || entry.max === undefined ) {                                          // 1047\n                        throw new Error(\"noUiSlider: Missing 'min' or 'max' in 'range'.\");                           // 1048\n                }                                                                                                    // 1049\n                                                                                                                     // 1050\n                parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.dir, parsed.singleStep);                   // 1051\n        }                                                                                                            // 1052\n                                                                                                                     // 1053\n        function testStart ( parsed, entry ) {                                                                       // 1054\n                                                                                                                     // 1055\n                entry = asArray(entry);                                                                              // 1056\n                                                                                                                     // 1057\n                // Validate input. Values aren't tested, as the public .val method                                   // 1058\n                // will always provide a valid location.                                                             // 1059\n                if ( !$.isArray( entry ) || !entry.length || entry.length > 2 ) {                                    // 1060\n                        throw new Error(\"noUiSlider: 'start' option is incorrect.\");                                 // 1061\n                }                                                                                                    // 1062\n                                                                                                                     // 1063\n                // Store the number of handles.                                                                      // 1064\n                parsed.handles = entry.length;                                                                       // 1065\n                                                                                                                     // 1066\n                // When the slider is initialized, the .val method will                                              // 1067\n                // be called with the start options.                                                                 // 1068\n                parsed.start = entry;                                                                                // 1069\n        }                                                                                                            // 1070\n                                                                                                                     // 1071\n        function testSnap ( parsed, entry ) {                                                                        // 1072\n                                                                                                                     // 1073\n                // Enforce 100% stepping within subranges.                                                           // 1074\n                parsed.snap = entry;                                                                                 // 1075\n                                                                                                                     // 1076\n                if ( typeof entry !== 'boolean' ){                                                                   // 1077\n                        throw new Error(\"noUiSlider: 'snap' option must be a boolean.\");                             // 1078\n                }                                                                                                    // 1079\n        }                                                                                                            // 1080\n                                                                                                                     // 1081\n        function testAnimate ( parsed, entry ) {                                                                     // 1082\n                                                                                                                     // 1083\n                // Enforce 100% stepping within subranges.                                                           // 1084\n                parsed.animate = entry;                                                                              // 1085\n                                                                                                                     // 1086\n                if ( typeof entry !== 'boolean' ){                                                                   // 1087\n                        throw new Error(\"noUiSlider: 'animate' option must be a boolean.\");                          // 1088\n                }                                                                                                    // 1089\n        }                                                                                                            // 1090\n                                                                                                                     // 1091\n        function testConnect ( parsed, entry ) {                                                                     // 1092\n                                                                                                                     // 1093\n                if ( entry === 'lower' && parsed.handles === 1 ) {                                                   // 1094\n                        parsed.connect = 1;                                                                          // 1095\n                } else if ( entry === 'upper' && parsed.handles === 1 ) {                                            // 1096\n                        parsed.connect = 2;                                                                          // 1097\n                } else if ( entry === true && parsed.handles === 2 ) {                                               // 1098\n                        parsed.connect = 3;                                                                          // 1099\n                } else if ( entry === false ) {                                                                      // 1100\n                        parsed.connect = 0;                                                                          // 1101\n                } else {                                                                                             // 1102\n                        throw new Error(\"noUiSlider: 'connect' option doesn't match handle count.\");                 // 1103\n                }                                                                                                    // 1104\n        }                                                                                                            // 1105\n                                                                                                                     // 1106\n        function testOrientation ( parsed, entry ) {                                                                 // 1107\n                                                                                                                     // 1108\n                // Set orientation to an a numerical value for easy                                                  // 1109\n                // array selection.                                                                                  // 1110\n                switch ( entry ){                                                                                    // 1111\n                  case 'horizontal':                                                                                 // 1112\n                        parsed.ort = 0;                                                                              // 1113\n                        break;                                                                                       // 1114\n                  case 'vertical':                                                                                   // 1115\n                        parsed.ort = 1;                                                                              // 1116\n                        break;                                                                                       // 1117\n                  default:                                                                                           // 1118\n                        throw new Error(\"noUiSlider: 'orientation' option is invalid.\");                             // 1119\n                }                                                                                                    // 1120\n        }                                                                                                            // 1121\n                                                                                                                     // 1122\n        function testMargin ( parsed, entry ) {                                                                      // 1123\n                                                                                                                     // 1124\n                if ( !isNumeric(entry) ){                                                                            // 1125\n                        throw new Error(\"noUiSlider: 'margin' option must be numeric.\");                             // 1126\n                }                                                                                                    // 1127\n                                                                                                                     // 1128\n                parsed.margin = parsed.spectrum.getMargin(entry);                                                    // 1129\n                                                                                                                     // 1130\n                if ( !parsed.margin ) {                                                                              // 1131\n                        throw new Error(\"noUiSlider: 'margin' option is only supported on linear sliders.\");         // 1132\n                }                                                                                                    // 1133\n        }                                                                                                            // 1134\n                                                                                                                     // 1135\n        function testLimit ( parsed, entry ) {                                                                       // 1136\n                                                                                                                     // 1137\n                if ( !isNumeric(entry) ){                                                                            // 1138\n                        throw new Error(\"noUiSlider: 'limit' option must be numeric.\");                              // 1139\n                }                                                                                                    // 1140\n                                                                                                                     // 1141\n                parsed.limit = parsed.spectrum.getMargin(entry);                                                     // 1142\n                                                                                                                     // 1143\n                if ( !parsed.limit ) {                                                                               // 1144\n                        throw new Error(\"noUiSlider: 'limit' option is only supported on linear sliders.\");          // 1145\n                }                                                                                                    // 1146\n        }                                                                                                            // 1147\n                                                                                                                     // 1148\n        function testDirection ( parsed, entry ) {                                                                   // 1149\n                                                                                                                     // 1150\n                // Set direction as a numerical value for easy parsing.                                              // 1151\n                // Invert connection for RTL sliders, so that the proper                                             // 1152\n                // handles get the connect/background classes.                                                       // 1153\n                switch ( entry ) {                                                                                   // 1154\n                  case 'ltr':                                                                                        // 1155\n                        parsed.dir = 0;                                                                              // 1156\n                        break;                                                                                       // 1157\n                  case 'rtl':                                                                                        // 1158\n                        parsed.dir = 1;                                                                              // 1159\n                        parsed.connect = [0,2,1,3][parsed.connect];                                                  // 1160\n                        break;                                                                                       // 1161\n                  default:                                                                                           // 1162\n                        throw new Error(\"noUiSlider: 'direction' option was not recognized.\");                       // 1163\n                }                                                                                                    // 1164\n        }                                                                                                            // 1165\n                                                                                                                     // 1166\n        function testBehaviour ( parsed, entry ) {                                                                   // 1167\n                                                                                                                     // 1168\n                // Make sure the input is a string.                                                                  // 1169\n                if ( typeof entry !== 'string' ) {                                                                   // 1170\n                        throw new Error(\"noUiSlider: 'behaviour' must be a string containing options.\");             // 1171\n                }                                                                                                    // 1172\n                                                                                                                     // 1173\n                // Check if the string contains any keywords.                                                        // 1174\n                // None are required.                                                                                // 1175\n                var tap = entry.indexOf('tap') >= 0,                                                                 // 1176\n                        drag = entry.indexOf('drag') >= 0,                                                           // 1177\n                        fixed = entry.indexOf('fixed') >= 0,                                                         // 1178\n                        snap = entry.indexOf('snap') >= 0;                                                           // 1179\n                                                                                                                     // 1180\n                parsed.events = {                                                                                    // 1181\n                        tap: tap || snap,                                                                            // 1182\n                        drag: drag,                                                                                  // 1183\n                        fixed: fixed,                                                                                // 1184\n                        snap: snap                                                                                   // 1185\n                };                                                                                                   // 1186\n        }                                                                                                            // 1187\n                                                                                                                     // 1188\n        function testFormat ( parsed, entry ) {                                                                      // 1189\n                                                                                                                     // 1190\n                parsed.format = entry;                                                                               // 1191\n                                                                                                                     // 1192\n                // Any object with a to and from method is supported.                                                // 1193\n                if ( typeof entry.to === 'function' && typeof entry.from === 'function' ) {                          // 1194\n                        return true;                                                                                 // 1195\n                }                                                                                                    // 1196\n                                                                                                                     // 1197\n                throw new Error( \"noUiSlider: 'format' requires 'to' and 'from' methods.\");                          // 1198\n        }                                                                                                            // 1199\n                                                                                                                     // 1200\n        // Test all developer settings and parse to assumption-safe values.                                          // 1201\n        function testOptions ( options ) {                                                                           // 1202\n                                                                                                                     // 1203\n                var parsed = {                                                                                       // 1204\n                        margin: 0,                                                                                   // 1205\n                        limit: 0,                                                                                    // 1206\n                        animate: true,                                                                               // 1207\n                        format: defaultFormatter                                                                     // 1208\n                }, tests;                                                                                            // 1209\n                                                                                                                     // 1210\n                // Tests are executed in the order they are presented here.                                          // 1211\n                tests = {                                                                                            // 1212\n                        'step': { r: false, t: testStep },                                                           // 1213\n                        'start': { r: true, t: testStart },                                                          // 1214\n                        'connect': { r: true, t: testConnect },                                                      // 1215\n                        'direction': { r: true, t: testDirection },                                                  // 1216\n                        'snap': { r: false, t: testSnap },                                                           // 1217\n                        'animate': { r: false, t: testAnimate },                                                     // 1218\n                        'range': { r: true, t: testRange },                                                          // 1219\n                        'orientation': { r: false, t: testOrientation },                                             // 1220\n                        'margin': { r: false, t: testMargin },                                                       // 1221\n                        'limit': { r: false, t: testLimit },                                                         // 1222\n                        'behaviour': { r: true, t: testBehaviour },                                                  // 1223\n                        'format': { r: false, t: testFormat }                                                        // 1224\n                };                                                                                                   // 1225\n                                                                                                                     // 1226\n                // Set defaults where applicable.                                                                    // 1227\n                options = $.extend({                                                                                 // 1228\n                        'connect': false,                                                                            // 1229\n                        'direction': 'ltr',                                                                          // 1230\n                        'behaviour': 'tap',                                                                          // 1231\n                        'orientation': 'horizontal'                                                                  // 1232\n                }, options);                                                                                         // 1233\n                                                                                                                     // 1234\n                // Run all options through a testing mechanism to ensure correct                                     // 1235\n                // input. It should be noted that options might get modified to                                      // 1236\n                // be handled properly. E.g. wrapping integers in arrays.                                            // 1237\n                $.each( tests, function( name, test ){                                                               // 1238\n                                                                                                                     // 1239\n                        // If the option isn't set, but it is required, throw an error.                              // 1240\n                        if ( options[name] === undefined ) {                                                         // 1241\n                                                                                                                     // 1242\n                                if ( test.r ) {                                                                      // 1243\n                                        throw new Error(\"noUiSlider: '\" + name + \"' is required.\");                  // 1244\n                                }                                                                                    // 1245\n                                                                                                                     // 1246\n                                return true;                                                                         // 1247\n                        }                                                                                            // 1248\n                                                                                                                     // 1249\n                        test.t( parsed, options[name] );                                                             // 1250\n                });                                                                                                  // 1251\n                                                                                                                     // 1252\n                // Pre-define the styles.                                                                            // 1253\n                parsed.style = parsed.ort ? 'top' : 'left';                                                          // 1254\n                                                                                                                     // 1255\n                return parsed;                                                                                       // 1256\n        }                                                                                                            // 1257\n                                                                                                                     // 1258\n// Class handling                                                                                                    // 1259\n                                                                                                                     // 1260\n        // Delimit proposed values for handle positions.                                                             // 1261\n        function getPositions ( a, b, delimit ) {                                                                    // 1262\n                                                                                                                     // 1263\n                // Add movement to current position.                                                                 // 1264\n                var c = a + b[0], d = a + b[1];                                                                      // 1265\n                                                                                                                     // 1266\n                // Only alter the other position on drag,                                                            // 1267\n                // not on standard sliding.                                                                          // 1268\n                if ( delimit ) {                                                                                     // 1269\n                        if ( c < 0 ) {                                                                               // 1270\n                                d += Math.abs(c);                                                                    // 1271\n                        }                                                                                            // 1272\n                        if ( d > 100 ) {                                                                             // 1273\n                                c -= ( d - 100 );                                                                    // 1274\n                        }                                                                                            // 1275\n                                                                                                                     // 1276\n                        // Limit values to 0 and 100.                                                                // 1277\n                        return [limit(c), limit(d)];                                                                 // 1278\n                }                                                                                                    // 1279\n                                                                                                                     // 1280\n                return [c,d];                                                                                        // 1281\n        }                                                                                                            // 1282\n                                                                                                                     // 1283\n                                                                                                                     // 1284\n// Event handling                                                                                                    // 1285\n                                                                                                                     // 1286\n        // Provide a clean event with standardized offset values.                                                    // 1287\n        function fixEvent ( e ) {                                                                                    // 1288\n                                                                                                                     // 1289\n                // Prevent scrolling and panning on touch events, while                                              // 1290\n                // attempting to slide. The tap event also depends on this.                                          // 1291\n                e.preventDefault();                                                                                  // 1292\n                                                                                                                     // 1293\n                // Filter the event to register the type, which can be                                               // 1294\n                // touch, mouse or pointer. Offset changes need to be                                                // 1295\n                // made on an event specific basis.                                                                  // 1296\n                var  touch = e.type.indexOf('touch') === 0                                                           // 1297\n                        ,mouse = e.type.indexOf('mouse') === 0                                                       // 1298\n                        ,pointer = e.type.indexOf('pointer') === 0                                                   // 1299\n                        ,x,y, event = e;                                                                             // 1300\n                                                                                                                     // 1301\n                // IE10 implemented pointer events with a prefix;                                                    // 1302\n                if ( e.type.indexOf('MSPointer') === 0 ) {                                                           // 1303\n                        pointer = true;                                                                              // 1304\n                }                                                                                                    // 1305\n                                                                                                                     // 1306\n                // Get the originalEvent, if the event has been wrapped                                              // 1307\n                // by jQuery. Zepto doesn't wrap the event.                                                          // 1308\n                if ( e.originalEvent ) {                                                                             // 1309\n                        e = e.originalEvent;                                                                         // 1310\n                }                                                                                                    // 1311\n                                                                                                                     // 1312\n                if ( touch ) {                                                                                       // 1313\n                        // noUiSlider supports one movement at a time,                                               // 1314\n                        // so we can select the first 'changedTouch'.                                                // 1315\n                        x = e.changedTouches[0].pageX;                                                               // 1316\n                        y = e.changedTouches[0].pageY;                                                               // 1317\n                }                                                                                                    // 1318\n                                                                                                                     // 1319\n                if ( mouse || pointer ) {                                                                            // 1320\n                                                                                                                     // 1321\n                        // Polyfill the pageXOffset and pageYOffset                                                  // 1322\n                        // variables for IE7 and IE8;                                                                // 1323\n                        if( !pointer && window.pageXOffset === undefined ){                                          // 1324\n                                window.pageXOffset = document.documentElement.scrollLeft;                            // 1325\n                                window.pageYOffset = document.documentElement.scrollTop;                             // 1326\n                        }                                                                                            // 1327\n                                                                                                                     // 1328\n                        x = e.clientX + window.pageXOffset;                                                          // 1329\n                        y = e.clientY + window.pageYOffset;                                                          // 1330\n                }                                                                                                    // 1331\n                                                                                                                     // 1332\n                event.points = [x, y];                                                                               // 1333\n                event.cursor = mouse;                                                                                // 1334\n                                                                                                                     // 1335\n                return event;                                                                                        // 1336\n        }                                                                                                            // 1337\n                                                                                                                     // 1338\n                                                                                                                     // 1339\n// DOM additions                                                                                                     // 1340\n                                                                                                                     // 1341\n        // Append a handle to the base.                                                                              // 1342\n        function addHandle ( direction, index ) {                                                                    // 1343\n                                                                                                                     // 1344\n                var handle = $('<div><div/></div>').addClass( Classes[2] ),                                          // 1345\n                        additions = [ '-lower', '-upper' ];                                                          // 1346\n                                                                                                                     // 1347\n                if ( direction ) {                                                                                   // 1348\n                        additions.reverse();                                                                         // 1349\n                }                                                                                                    // 1350\n                                                                                                                     // 1351\n                handle.children().addClass(                                                                          // 1352\n                        Classes[3] + \" \" + Classes[3]+additions[index]                                               // 1353\n                );                                                                                                   // 1354\n                                                                                                                     // 1355\n                return handle;                                                                                       // 1356\n        }                                                                                                            // 1357\n                                                                                                                     // 1358\n        // Add the proper connection classes.                                                                        // 1359\n        function addConnection ( connect, target, handles ) {                                                        // 1360\n                                                                                                                     // 1361\n                // Apply the required connection classes to the elements                                             // 1362\n                // that need them. Some classes are made up for several                                              // 1363\n                // segments listed in the class list, to allow easy                                                  // 1364\n                // renaming and provide a minor compression benefit.                                                 // 1365\n                switch ( connect ) {                                                                                 // 1366\n                        case 1:\ttarget.addClass( Classes[7] );                                                       // 1367\n                                        handles[0].addClass( Classes[6] );                                           // 1368\n                                        break;                                                                       // 1369\n                        case 3: handles[1].addClass( Classes[6] );                                                   // 1370\n                                        /* falls through */                                                          // 1371\n                        case 2: handles[0].addClass( Classes[7] );                                                   // 1372\n                                        /* falls through */                                                          // 1373\n                        case 0: target.addClass(Classes[6]);                                                         // 1374\n                                        break;                                                                       // 1375\n                }                                                                                                    // 1376\n        }                                                                                                            // 1377\n                                                                                                                     // 1378\n        // Add handles to the slider base.                                                                           // 1379\n        function addHandles ( nrHandles, direction, base ) {                                                         // 1380\n                                                                                                                     // 1381\n                var index, handles = [];                                                                             // 1382\n                                                                                                                     // 1383\n                // Append handles.                                                                                   // 1384\n                for ( index = 0; index < nrHandles; index += 1 ) {                                                   // 1385\n                                                                                                                     // 1386\n                        // Keep a list of all added handles.                                                         // 1387\n                        handles.push( addHandle( direction, index ).appendTo(base) );                                // 1388\n                }                                                                                                    // 1389\n                                                                                                                     // 1390\n                return handles;                                                                                      // 1391\n        }                                                                                                            // 1392\n                                                                                                                     // 1393\n        // Initialize a single slider.                                                                               // 1394\n        function addSlider ( direction, orientation, target ) {                                                      // 1395\n                                                                                                                     // 1396\n                // Apply classes and data to the target.                                                             // 1397\n                target.addClass([                                                                                    // 1398\n                        Classes[0],                                                                                  // 1399\n                        Classes[8 + direction],                                                                      // 1400\n                        Classes[4 + orientation]                                                                     // 1401\n                ].join(' '));                                                                                        // 1402\n                                                                                                                     // 1403\n                return $('<div/>').appendTo(target).addClass( Classes[1] );                                          // 1404\n        }                                                                                                            // 1405\n                                                                                                                     // 1406\nfunction closure ( target, options, originalOptions ){                                                               // 1407\n                                                                                                                     // 1408\n// Internal variables                                                                                                // 1409\n                                                                                                                     // 1410\n        // All variables local to 'closure' are marked $.                                                            // 1411\n        var $Target = $(target),                                                                                     // 1412\n                $Locations = [-1, -1],                                                                               // 1413\n                $Base,                                                                                               // 1414\n                $Handles,                                                                                            // 1415\n                $Spectrum = options.spectrum,                                                                        // 1416\n                $Values = [],                                                                                        // 1417\n        // libLink. For rtl sliders, 'lower' and 'upper' should not be inverted                                      // 1418\n        // for one-handle sliders, so trim 'upper' it that case.                                                     // 1419\n                triggerPos = ['lower', 'upper'].slice(0, options.handles);                                           // 1420\n                                                                                                                     // 1421\n        // Invert the libLink connection for rtl sliders.                                                            // 1422\n        if ( options.dir ) {                                                                                         // 1423\n                triggerPos.reverse();                                                                                // 1424\n        }                                                                                                            // 1425\n                                                                                                                     // 1426\n// Helpers                                                                                                           // 1427\n                                                                                                                     // 1428\n        // Shorthand for base dimensions.                                                                            // 1429\n        function baseSize ( ) {                                                                                      // 1430\n                return $Base[['width', 'height'][options.ort]]();                                                    // 1431\n        }                                                                                                            // 1432\n                                                                                                                     // 1433\n        // External event handling                                                                                   // 1434\n        function fireEvents ( events ) {                                                                             // 1435\n                                                                                                                     // 1436\n                // Use the external api to get the values.                                                           // 1437\n                // Wrap the values in an array, as .trigger takes                                                    // 1438\n                // only one additional argument.                                                                     // 1439\n                var index, values = [ $Target.val() ];                                                               // 1440\n                                                                                                                     // 1441\n                for ( index = 0; index < events.length; index += 1 ){                                                // 1442\n                        $Target.trigger(events[index], values);                                                      // 1443\n                }                                                                                                    // 1444\n        }                                                                                                            // 1445\n                                                                                                                     // 1446\n        // Returns the input array, respecting the slider direction configuration.                                   // 1447\n        function inSliderOrder ( values ) {                                                                          // 1448\n                                                                                                                     // 1449\n                // If only one handle is used, return a single value.                                                // 1450\n                if ( values.length === 1 ){                                                                          // 1451\n                        return values[0];                                                                            // 1452\n                }                                                                                                    // 1453\n                                                                                                                     // 1454\n                if ( options.dir ) {                                                                                 // 1455\n                        return values.reverse();                                                                     // 1456\n                }                                                                                                    // 1457\n                                                                                                                     // 1458\n                return values;                                                                                       // 1459\n        }                                                                                                            // 1460\n                                                                                                                     // 1461\n// libLink integration                                                                                               // 1462\n                                                                                                                     // 1463\n        // Create a new function which calls .val on input change.                                                   // 1464\n        function createChangeHandler ( trigger ) {                                                                   // 1465\n                return function ( ignore, value ){                                                                   // 1466\n                        // Determine which array position to 'null' based on 'trigger'.                              // 1467\n                        $Target.val( [ trigger ? null : value, trigger ? value : null ], true );                     // 1468\n                };                                                                                                   // 1469\n        }                                                                                                            // 1470\n                                                                                                                     // 1471\n        // Called by libLink when it wants a set of links updated.                                                   // 1472\n        function linkUpdate ( flag ) {                                                                               // 1473\n                                                                                                                     // 1474\n                var trigger = $.inArray(flag, triggerPos);                                                           // 1475\n                                                                                                                     // 1476\n                // The API might not have been set yet.                                                              // 1477\n                if ( $Target[0].linkAPI && $Target[0].linkAPI[flag] ) {                                              // 1478\n                        $Target[0].linkAPI[flag].change(                                                             // 1479\n                                $Values[trigger],                                                                    // 1480\n                                $Handles[trigger].children(),                                                        // 1481\n                                $Target                                                                              // 1482\n                        );                                                                                           // 1483\n                }                                                                                                    // 1484\n        }                                                                                                            // 1485\n                                                                                                                     // 1486\n        // Called by libLink to append an element to the slider.                                                     // 1487\n        function linkConfirm ( flag, element ) {                                                                     // 1488\n                                                                                                                     // 1489\n                // Find the trigger for the passed flag.                                                             // 1490\n                var trigger = $.inArray(flag, triggerPos);                                                           // 1491\n                                                                                                                     // 1492\n                // If set, append the element to the handle it belongs to.                                           // 1493\n                if ( element ) {                                                                                     // 1494\n                        element.appendTo( $Handles[trigger].children() );                                            // 1495\n                }                                                                                                    // 1496\n                                                                                                                     // 1497\n                // The public API is reversed for rtl sliders, so the changeHandler                                  // 1498\n                // should not be aware of the inverted trigger positions.                                            // 1499\n                // On rtl slider with one handle, 'lower' should be used.                                            // 1500\n                if ( options.dir && options.handles > 1 ) {                                                          // 1501\n                        trigger = trigger === 1 ? 0 : 1;                                                             // 1502\n                }                                                                                                    // 1503\n                                                                                                                     // 1504\n                return createChangeHandler( trigger );                                                               // 1505\n        }                                                                                                            // 1506\n                                                                                                                     // 1507\n        // Place elements back on the slider.                                                                        // 1508\n        function reAppendLink ( ) {                                                                                  // 1509\n                                                                                                                     // 1510\n                var i, flag;                                                                                         // 1511\n                                                                                                                     // 1512\n                // The API keeps a list of elements: we can re-append them on rebuild.                               // 1513\n                for ( i = 0; i < triggerPos.length; i += 1 ) {                                                       // 1514\n                        if ( this.linkAPI && this.linkAPI[(flag = triggerPos[i])] ) {                                // 1515\n                                this.linkAPI[flag].reconfirm(flag);                                                  // 1516\n                        }                                                                                            // 1517\n                }                                                                                                    // 1518\n        }                                                                                                            // 1519\n                                                                                                                     // 1520\n        target.LinkUpdate = linkUpdate;                                                                              // 1521\n        target.LinkConfirm = linkConfirm;                                                                            // 1522\n        target.LinkDefaultFormatter = options.format;                                                                // 1523\n        target.LinkDefaultFlag = 'lower';                                                                            // 1524\n                                                                                                                     // 1525\n        target.reappend = reAppendLink;                                                                              // 1526\n                                                                                                                     // 1527\n                                                                                                                     // 1528\n        // Handler for attaching events trough a proxy.                                                              // 1529\n        function attach ( events, element, callback, data ) {                                                        // 1530\n                                                                                                                     // 1531\n                // This function can be used to 'filter' events to the slider.                                       // 1532\n                                                                                                                     // 1533\n                // Add the noUiSlider namespace to all events.                                                       // 1534\n                events = events.replace( /\\s/g, namespace + ' ' ) + namespace;                                       // 1535\n                                                                                                                     // 1536\n                // Bind a closure on the target.                                                                     // 1537\n                return element.on( events, function( e ){                                                            // 1538\n                                                                                                                     // 1539\n                        // jQuery and Zepto (1) handle unset attributes differently,                                 // 1540\n                        // but always falsy; #208                                                                    // 1541\n                        if ( !!$Target.attr('disabled') ) {                                                          // 1542\n                                return false;                                                                        // 1543\n                        }                                                                                            // 1544\n                                                                                                                     // 1545\n                        // Stop if an active 'tap' transition is taking place.                                       // 1546\n                        if ( $Target.hasClass( Classes[14] ) ) {                                                     // 1547\n                                return false;                                                                        // 1548\n                        }                                                                                            // 1549\n                                                                                                                     // 1550\n                        e = fixEvent(e);                                                                             // 1551\n                        e.calcPoint = e.points[ options.ort ];                                                       // 1552\n                                                                                                                     // 1553\n                        // Call the event handler with the event [ and additional data ].                            // 1554\n                        callback ( e, data );                                                                        // 1555\n                });                                                                                                  // 1556\n        }                                                                                                            // 1557\n                                                                                                                     // 1558\n        // Handle movement on document for handle and range drag.                                                    // 1559\n        function move ( event, data ) {                                                                              // 1560\n                                                                                                                     // 1561\n                var handles = data.handles || $Handles, positions, state = false,                                    // 1562\n                        proposal = ((event.calcPoint - data.start) * 100) / baseSize(),                              // 1563\n                        h = handles[0][0] !== $Handles[0][0] ? 1 : 0;                                                // 1564\n                                                                                                                     // 1565\n                // Calculate relative positions for the handles.                                                     // 1566\n                positions = getPositions( proposal, data.positions, handles.length > 1);                             // 1567\n                                                                                                                     // 1568\n                state = setHandle ( handles[0], positions[h], handles.length === 1 );                                // 1569\n                                                                                                                     // 1570\n                if ( handles.length > 1 ) {                                                                          // 1571\n                        state = setHandle ( handles[1], positions[h?0:1], false ) || state;                          // 1572\n                }                                                                                                    // 1573\n                                                                                                                     // 1574\n                // Fire the 'slide' event if any handle moved.                                                       // 1575\n                if ( state ) {                                                                                       // 1576\n                        fireEvents(['slide']);                                                                       // 1577\n                }                                                                                                    // 1578\n        }                                                                                                            // 1579\n                                                                                                                     // 1580\n        // Unbind move events on document, call callbacks.                                                           // 1581\n        function end ( event ) {                                                                                     // 1582\n                                                                                                                     // 1583\n                // The handle is no longer active, so remove the class.                                              // 1584\n                $('.' + Classes[15]).removeClass(Classes[15]);                                                       // 1585\n                                                                                                                     // 1586\n                // Remove cursor styles and text-selection events bound to the body.                                 // 1587\n                if ( event.cursor ) {                                                                                // 1588\n                        $('body').css('cursor', '').off( namespace );                                                // 1589\n                }                                                                                                    // 1590\n                                                                                                                     // 1591\n                // Unbind the move and end events, which are added on 'start'.                                       // 1592\n                doc.off( namespace );                                                                                // 1593\n                                                                                                                     // 1594\n                // Remove dragging class.                                                                            // 1595\n                $Target.removeClass(Classes[12]);                                                                    // 1596\n                                                                                                                     // 1597\n                // Fire the change and set events.                                                                   // 1598\n                fireEvents(['set', 'change']);                                                                       // 1599\n        }                                                                                                            // 1600\n                                                                                                                     // 1601\n        // Bind move events on document.                                                                             // 1602\n        function start ( event, data ) {                                                                             // 1603\n                                                                                                                     // 1604\n                // Mark the handle as 'active' so it can be styled.                                                  // 1605\n                if( data.handles.length === 1 ) {                                                                    // 1606\n                        data.handles[0].children().addClass(Classes[15]);                                            // 1607\n                }                                                                                                    // 1608\n                                                                                                                     // 1609\n                // A drag should never propagate up to the 'tap' event.                                              // 1610\n                event.stopPropagation();                                                                             // 1611\n                                                                                                                     // 1612\n                // Attach the move event.                                                                            // 1613\n                attach ( actions.move, doc, move, {                                                                  // 1614\n                        start: event.calcPoint,                                                                      // 1615\n                        handles: data.handles,                                                                       // 1616\n                        positions: [                                                                                 // 1617\n                                $Locations[0],                                                                       // 1618\n                                $Locations[$Handles.length - 1]                                                      // 1619\n                        ]                                                                                            // 1620\n                });                                                                                                  // 1621\n                                                                                                                     // 1622\n                // Unbind all movement when the drag ends.                                                           // 1623\n                attach ( actions.end, doc, end, null );                                                              // 1624\n                                                                                                                     // 1625\n                // Text selection isn't an issue on touch devices,                                                   // 1626\n                // so adding cursor styles can be skipped.                                                           // 1627\n                if ( event.cursor ) {                                                                                // 1628\n                                                                                                                     // 1629\n                        // Prevent the 'I' cursor and extend the range-drag cursor.                                  // 1630\n                        $('body').css('cursor', $(event.target).css('cursor'));                                      // 1631\n                                                                                                                     // 1632\n                        // Mark the target with a dragging state.                                                    // 1633\n                        if ( $Handles.length > 1 ) {                                                                 // 1634\n                                $Target.addClass(Classes[12]);                                                       // 1635\n                        }                                                                                            // 1636\n                                                                                                                     // 1637\n                        // Prevent text selection when dragging the handles.                                         // 1638\n                        $('body').on('selectstart' + namespace, false);                                              // 1639\n                }                                                                                                    // 1640\n        }                                                                                                            // 1641\n                                                                                                                     // 1642\n        // Move closest handle to tapped location.                                                                   // 1643\n        function tap ( event ) {                                                                                     // 1644\n                                                                                                                     // 1645\n                var location = event.calcPoint, total = 0, to;                                                       // 1646\n                                                                                                                     // 1647\n                // The tap event shouldn't propagate up and cause 'edge' to run.                                     // 1648\n                event.stopPropagation();                                                                             // 1649\n                                                                                                                     // 1650\n                // Add up the handle offsets.                                                                        // 1651\n                $.each( $Handles, function(){                                                                        // 1652\n                        total += this.offset()[ options.style ];                                                     // 1653\n                });                                                                                                  // 1654\n                                                                                                                     // 1655\n                // Find the handle closest to the tapped position.                                                   // 1656\n                total = ( location < total/2 || $Handles.length === 1 ) ? 0 : 1;                                     // 1657\n                                                                                                                     // 1658\n                location -= $Base.offset()[ options.style ];                                                         // 1659\n                                                                                                                     // 1660\n                // Calculate the new position.                                                                       // 1661\n                to = ( location * 100 ) / baseSize();                                                                // 1662\n                                                                                                                     // 1663\n                if ( !options.events.snap ) {                                                                        // 1664\n                        // Flag the slider as it is now in a transitional state.                                     // 1665\n                        // Transition takes 300 ms, so re-enable the slider afterwards.                              // 1666\n                        addClassFor( $Target, Classes[14], 300 );                                                    // 1667\n                }                                                                                                    // 1668\n                                                                                                                     // 1669\n                // Find the closest handle and calculate the tapped point.                                           // 1670\n                // The set handle to the new position.                                                               // 1671\n                setHandle( $Handles[total], to );                                                                    // 1672\n                                                                                                                     // 1673\n                fireEvents(['slide', 'set', 'change']);                                                              // 1674\n                                                                                                                     // 1675\n                if ( options.events.snap ) {                                                                         // 1676\n                        start(event, { handles: [$Handles[total]] });                                                // 1677\n                }                                                                                                    // 1678\n        }                                                                                                            // 1679\n                                                                                                                     // 1680\n        // Attach events to several slider parts.                                                                    // 1681\n        function events ( behaviour ) {                                                                              // 1682\n                                                                                                                     // 1683\n                var i, drag;                                                                                         // 1684\n                                                                                                                     // 1685\n                // Attach the standard drag event to the handles.                                                    // 1686\n                if ( !behaviour.fixed ) {                                                                            // 1687\n                                                                                                                     // 1688\n                        for ( i = 0; i < $Handles.length; i += 1 ) {                                                 // 1689\n                                                                                                                     // 1690\n                                // These events are only bound to the visual handle                                  // 1691\n                                // element, not the 'real' origin element.                                           // 1692\n                                attach ( actions.start, $Handles[i].children(), start, {                             // 1693\n                                        handles: [ $Handles[i] ]                                                     // 1694\n                                });                                                                                  // 1695\n                        }                                                                                            // 1696\n                }                                                                                                    // 1697\n                                                                                                                     // 1698\n                // Attach the tap event to the slider base.                                                          // 1699\n                if ( behaviour.tap ) {                                                                               // 1700\n                                                                                                                     // 1701\n                        attach ( actions.start, $Base, tap, {                                                        // 1702\n                                handles: $Handles                                                                    // 1703\n                        });                                                                                          // 1704\n                }                                                                                                    // 1705\n                                                                                                                     // 1706\n                // Make the range dragable.                                                                          // 1707\n                if ( behaviour.drag ){                                                                               // 1708\n                                                                                                                     // 1709\n                        drag = $Base.find( '.' + Classes[7] ).addClass( Classes[10] );                               // 1710\n                                                                                                                     // 1711\n                        // When the range is fixed, the entire range can                                             // 1712\n                        // be dragged by the handles. The handle in the first                                        // 1713\n                        // origin will propagate the start event upward,                                             // 1714\n                        // but it needs to be bound manually on the other.                                           // 1715\n                        if ( behaviour.fixed ) {                                                                     // 1716\n                                drag = drag.add($Base.children().not( drag ).children());                            // 1717\n                        }                                                                                            // 1718\n                                                                                                                     // 1719\n                        attach ( actions.start, drag, start, {                                                       // 1720\n                                handles: $Handles                                                                    // 1721\n                        });                                                                                          // 1722\n                }                                                                                                    // 1723\n        }                                                                                                            // 1724\n                                                                                                                     // 1725\n                                                                                                                     // 1726\n        // Test suggested values and apply margin, step.                                                             // 1727\n        function setHandle ( handle, to, noLimitOption ) {                                                           // 1728\n                                                                                                                     // 1729\n                var trigger = handle[0] !== $Handles[0][0] ? 1 : 0,                                                  // 1730\n                        lowerMargin = $Locations[0] + options.margin,                                                // 1731\n                        upperMargin = $Locations[1] - options.margin,                                                // 1732\n                        lowerLimit = $Locations[0] + options.limit,                                                  // 1733\n                        upperLimit = $Locations[1] - options.limit;                                                  // 1734\n                                                                                                                     // 1735\n                // For sliders with multiple handles,                                                                // 1736\n                // limit movement to the other handle.                                                               // 1737\n                // Apply the margin option by adding it to the handle positions.                                     // 1738\n                if ( $Handles.length > 1 ) {                                                                         // 1739\n                        to = trigger ? Math.max( to, lowerMargin ) : Math.min( to, upperMargin );                    // 1740\n                }                                                                                                    // 1741\n                                                                                                                     // 1742\n                // The limit option has the opposite effect, limiting handles to a                                   // 1743\n                // maximum distance from another. Limit must be > 0, as otherwise                                    // 1744\n                // handles would be unmoveable. 'noLimitOption' is set to 'false'                                    // 1745\n                // for the .val() method, except for pass 4/4.                                                       // 1746\n                if ( noLimitOption !== false && options.limit && $Handles.length > 1 ) {                             // 1747\n                        to = trigger ? Math.min ( to, lowerLimit ) : Math.max( to, upperLimit );                     // 1748\n                }                                                                                                    // 1749\n                                                                                                                     // 1750\n                // Handle the step option.                                                                           // 1751\n                to = $Spectrum.getStep( to );                                                                        // 1752\n                                                                                                                     // 1753\n                // Limit to 0/100 for .val input, trim anything beyond 7 digits, as                                  // 1754\n                // JavaScript has some issues in its floating point implementation.                                  // 1755\n                to = limit(parseFloat(to.toFixed(7)));                                                               // 1756\n                                                                                                                     // 1757\n                // Return false if handle can't move.                                                                // 1758\n                if ( to === $Locations[trigger] ) {                                                                  // 1759\n                        return false;                                                                                // 1760\n                }                                                                                                    // 1761\n                                                                                                                     // 1762\n                // Set the handle to the new position.                                                               // 1763\n                handle.css( options.style, to + '%' );                                                               // 1764\n                                                                                                                     // 1765\n                // Force proper handle stacking                                                                      // 1766\n                if ( handle.is(':first-child') ) {                                                                   // 1767\n                        handle.toggleClass(Classes[17], to > 50 );                                                   // 1768\n                }                                                                                                    // 1769\n                                                                                                                     // 1770\n                // Update locations.                                                                                 // 1771\n                $Locations[trigger] = to;                                                                            // 1772\n                                                                                                                     // 1773\n                // Convert the value to the slider stepping/range.                                                   // 1774\n                $Values[trigger] = $Spectrum.fromStepping( to );                                                     // 1775\n                                                                                                                     // 1776\n                linkUpdate(triggerPos[trigger]);                                                                     // 1777\n                                                                                                                     // 1778\n                return true;                                                                                         // 1779\n        }                                                                                                            // 1780\n                                                                                                                     // 1781\n        // Loop values from value method and apply them.                                                             // 1782\n        function setValues ( count, values ) {                                                                       // 1783\n                                                                                                                     // 1784\n                var i, trigger, to;                                                                                  // 1785\n                                                                                                                     // 1786\n                // With the limit option, we'll need another limiting pass.                                          // 1787\n                if ( options.limit ) {                                                                               // 1788\n                        count += 1;                                                                                  // 1789\n                }                                                                                                    // 1790\n                                                                                                                     // 1791\n                // If there are multiple handles to be set run the setting                                           // 1792\n                // mechanism twice for the first handle, to make sure it                                             // 1793\n                // can be bounced of the second one properly.                                                        // 1794\n                for ( i = 0; i < count; i += 1 ) {                                                                   // 1795\n                                                                                                                     // 1796\n                        trigger = i%2;                                                                               // 1797\n                                                                                                                     // 1798\n                        // Get the current argument from the array.                                                  // 1799\n                        to = values[trigger];                                                                        // 1800\n                                                                                                                     // 1801\n                        // Setting with null indicates an 'ignore'.                                                  // 1802\n                        // Inputting 'false' is invalid.                                                             // 1803\n                        if ( to !== null && to !== false ) {                                                         // 1804\n                                                                                                                     // 1805\n                                // If a formatted number was passed, attemt to decode it.                            // 1806\n                                if ( typeof to === 'number' ) {                                                      // 1807\n                                        to = String(to);                                                             // 1808\n                                }                                                                                    // 1809\n                                                                                                                     // 1810\n                                to = options.format.from( to );                                                      // 1811\n                                                                                                                     // 1812\n                                // Request an update for all links if the value was invalid.                         // 1813\n                                // Do so too if setting the handle fails.                                            // 1814\n                                if ( to === false || isNaN(to) || setHandle( $Handles[trigger], $Spectrum.toStepping( to ), i === (3 - options.dir) ) === false ) {\n                                                                                                                     // 1816\n                                        linkUpdate(triggerPos[trigger]);                                             // 1817\n                                }                                                                                    // 1818\n                        }                                                                                            // 1819\n                }                                                                                                    // 1820\n        }                                                                                                            // 1821\n                                                                                                                     // 1822\n        // Set the slider value.                                                                                     // 1823\n        function valueSet ( input ) {                                                                                // 1824\n                                                                                                                     // 1825\n                // LibLink: don't accept new values when currently emitting changes.                                 // 1826\n                if ( $Target[0].LinkIsEmitting ) {                                                                   // 1827\n                        return this;                                                                                 // 1828\n                }                                                                                                    // 1829\n                                                                                                                     // 1830\n                var count, values = asArray( input );                                                                // 1831\n                                                                                                                     // 1832\n                // The RTL settings is implemented by reversing the front-end,                                       // 1833\n                // internal mechanisms are the same.                                                                 // 1834\n                if ( options.dir && options.handles > 1 ) {                                                          // 1835\n                        values.reverse();                                                                            // 1836\n                }                                                                                                    // 1837\n                                                                                                                     // 1838\n                // Animation is optional.                                                                            // 1839\n                // Make sure the initial values where set before using animated                                      // 1840\n                // placement. (no report, unit testing);                                                             // 1841\n                if ( options.animate && $Locations[0] !== -1 ) {                                                     // 1842\n                        addClassFor( $Target, Classes[14], 300 );                                                    // 1843\n                }                                                                                                    // 1844\n                                                                                                                     // 1845\n                // Determine how often to set the handles.                                                           // 1846\n                count = $Handles.length > 1 ? 3 : 1;                                                                 // 1847\n                                                                                                                     // 1848\n                if ( values.length === 1 ) {                                                                         // 1849\n                        count = 1;                                                                                   // 1850\n                }                                                                                                    // 1851\n                                                                                                                     // 1852\n                setValues ( count, values );                                                                         // 1853\n                                                                                                                     // 1854\n                // Fire the 'set' event. As of noUiSlider 7,                                                         // 1855\n                // this is no longer optional.                                                                       // 1856\n                fireEvents(['set']);                                                                                 // 1857\n                                                                                                                     // 1858\n                return this;                                                                                         // 1859\n        }                                                                                                            // 1860\n                                                                                                                     // 1861\n        // Get the slider value.                                                                                     // 1862\n        function valueGet ( ) {                                                                                      // 1863\n                                                                                                                     // 1864\n                var i, retour = [];                                                                                  // 1865\n                                                                                                                     // 1866\n                // Get the value from all handles.                                                                   // 1867\n                for ( i = 0; i < options.handles; i += 1 ){                                                          // 1868\n                        retour[i] = options.format.to( $Values[i] );                                                 // 1869\n                }                                                                                                    // 1870\n                                                                                                                     // 1871\n                return inSliderOrder( retour );                                                                      // 1872\n        }                                                                                                            // 1873\n                                                                                                                     // 1874\n        // Destroy the slider and unbind all events.                                                                 // 1875\n        function destroyTarget ( ) {                                                                                 // 1876\n                                                                                                                     // 1877\n                // Unbind events on the slider, remove all classes and child elements.                               // 1878\n                $(this).off(namespace)                                                                               // 1879\n                        .removeClass(Classes.join(' '))                                                              // 1880\n                        .empty();                                                                                    // 1881\n                                                                                                                     // 1882\n                delete this.LinkUpdate;                                                                              // 1883\n                delete this.LinkConfirm;                                                                             // 1884\n                delete this.LinkDefaultFormatter;                                                                    // 1885\n                delete this.LinkDefaultFlag;                                                                         // 1886\n                delete this.reappend;                                                                                // 1887\n                delete this.vGet;                                                                                    // 1888\n                delete this.vSet;                                                                                    // 1889\n                delete this.getCurrentStep;                                                                          // 1890\n                delete this.getInfo;                                                                                 // 1891\n                delete this.destroy;                                                                                 // 1892\n                                                                                                                     // 1893\n                // Return the original options from the closure.                                                     // 1894\n                return originalOptions;                                                                              // 1895\n        }                                                                                                            // 1896\n                                                                                                                     // 1897\n        // Get the current step size for the slider.                                                                 // 1898\n        function getCurrentStep ( ) {                                                                                // 1899\n                                                                                                                     // 1900\n                // Check all locations, map them to their stepping point.                                            // 1901\n                // Get the step point, then find it in the input list.                                               // 1902\n                var retour = $.map($Locations, function( location, index ){                                          // 1903\n                                                                                                                     // 1904\n                        var step = $Spectrum.getApplicableStep( location ),                                          // 1905\n                                value = $Values[index],                                                              // 1906\n                                increment = step[2],                                                                 // 1907\n                                decrement = (value - step[2]) >= step[1] ? step[2] : step[0];                        // 1908\n                                                                                                                     // 1909\n                        return [[decrement, increment]];                                                             // 1910\n                });                                                                                                  // 1911\n                                                                                                                     // 1912\n                // Return values in the proper order.                                                                // 1913\n                return inSliderOrder( retour );                                                                      // 1914\n        }                                                                                                            // 1915\n                                                                                                                     // 1916\n        // Get the original set of options.                                                                          // 1917\n        function getOriginalOptions ( ) {                                                                            // 1918\n                return originalOptions;                                                                              // 1919\n        }                                                                                                            // 1920\n                                                                                                                     // 1921\n                                                                                                                     // 1922\n// Initialize slider                                                                                                 // 1923\n                                                                                                                     // 1924\n        // Throw an error if the slider was already initialized.                                                     // 1925\n        if ( $Target.hasClass(Classes[0]) ) {                                                                        // 1926\n                throw new Error('Slider was already initialized.');                                                  // 1927\n        }                                                                                                            // 1928\n                                                                                                                     // 1929\n        // Create the base element, initialise HTML and set classes.                                                 // 1930\n        // Add handles and links.                                                                                    // 1931\n        $Base = addSlider( options.dir, options.ort, $Target );                                                      // 1932\n        $Handles = addHandles( options.handles, options.dir, $Base );                                                // 1933\n                                                                                                                     // 1934\n        // Set the connect classes.                                                                                  // 1935\n        addConnection ( options.connect, $Target, $Handles );                                                        // 1936\n                                                                                                                     // 1937\n        // Attach user events.                                                                                       // 1938\n        events( options.events );                                                                                    // 1939\n                                                                                                                     // 1940\n// Methods                                                                                                           // 1941\n                                                                                                                     // 1942\n        target.vSet = valueSet;                                                                                      // 1943\n        target.vGet = valueGet;                                                                                      // 1944\n        target.destroy = destroyTarget;                                                                              // 1945\n                                                                                                                     // 1946\n        target.getCurrentStep = getCurrentStep;                                                                      // 1947\n        target.getOriginalOptions = getOriginalOptions;                                                              // 1948\n                                                                                                                     // 1949\n        target.getInfo = function(){                                                                                 // 1950\n                return [                                                                                             // 1951\n                        $Spectrum,                                                                                   // 1952\n                        options.style,                                                                               // 1953\n                        options.ort                                                                                  // 1954\n                ];                                                                                                   // 1955\n        };                                                                                                           // 1956\n                                                                                                                     // 1957\n        // Use the public value method to set the start values.                                                      // 1958\n        $Target.val( options.start );                                                                                // 1959\n                                                                                                                     // 1960\n}                                                                                                                    // 1961\n                                                                                                                     // 1962\n                                                                                                                     // 1963\n        // Run the standard initializer                                                                              // 1964\n        function initialize ( originalOptions ) {                                                                    // 1965\n                                                                                                                     // 1966\n                // Throw error if group is empty.                                                                    // 1967\n                if ( !this.length ){                                                                                 // 1968\n                        throw new Error(\"noUiSlider: Can't initialize slider on empty selection.\");                  // 1969\n                }                                                                                                    // 1970\n                                                                                                                     // 1971\n                // Test the options once, not for every slider.                                                      // 1972\n                var options = testOptions( originalOptions, this );                                                  // 1973\n                                                                                                                     // 1974\n                // Loop all items, and provide a new closed-scope environment.                                       // 1975\n                return this.each(function(){                                                                         // 1976\n                        closure(this, options, originalOptions);                                                     // 1977\n                });                                                                                                  // 1978\n        }                                                                                                            // 1979\n                                                                                                                     // 1980\n        // Destroy the slider, then re-enter initialization.                                                         // 1981\n        function rebuild ( options ) {                                                                               // 1982\n                                                                                                                     // 1983\n                return this.each(function(){                                                                         // 1984\n                                                                                                                     // 1985\n                        // The rebuild flag can be used if the slider wasn't initialized yet.                        // 1986\n                        if ( !this.destroy ) {                                                                       // 1987\n                                $(this).noUiSlider( options );                                                       // 1988\n                                return;                                                                              // 1989\n                        }                                                                                            // 1990\n                                                                                                                     // 1991\n                        // Get the current values from the slider,                                                   // 1992\n                        // including the initialization options.                                                     // 1993\n                        var values = $(this).val(), originalOptions = this.destroy(),                                // 1994\n                                                                                                                     // 1995\n                                // Extend the previous options with the newly provided ones.                         // 1996\n                                newOptions = $.extend( {}, originalOptions, options );                               // 1997\n                                                                                                                     // 1998\n                        // Run the standard initializer.                                                             // 1999\n                        $(this).noUiSlider( newOptions );                                                            // 2000\n                                                                                                                     // 2001\n                        // Place Link elements back.                                                                 // 2002\n                        this.reappend();                                                                             // 2003\n                                                                                                                     // 2004\n                        // If the start option hasn't changed,                                                       // 2005\n                        // reset the previous values.                                                                // 2006\n                        if ( originalOptions.start === newOptions.start ) {                                          // 2007\n                                $(this).val(values);                                                                 // 2008\n                        }                                                                                            // 2009\n                });                                                                                                  // 2010\n        }                                                                                                            // 2011\n                                                                                                                     // 2012\n        // Access the internal getting and setting methods based on argument count.                                  // 2013\n        function value ( ) {                                                                                         // 2014\n                return this[0][ !arguments.length ? 'vGet' : 'vSet' ].apply(this[0], arguments);                     // 2015\n        }                                                                                                            // 2016\n                                                                                                                     // 2017\n        // Override the .val() method. Test every element. Is it a slider? Go to                                     // 2018\n        // the slider value handling. No? Use the standard method.                                                   // 2019\n        // Note how $.fn.val expects 'this' to be an instance of $. For convenience,                                 // 2020\n        // the above 'value' function does too.                                                                      // 2021\n        $.fn.val = function ( ) {                                                                                    // 2022\n                                                                                                                     // 2023\n                // this === instanceof $                                                                             // 2024\n                                                                                                                     // 2025\n                function valMethod( a ){                                                                             // 2026\n                        return a.hasClass(Classes[0]) ? value : $val;                                                // 2027\n                }                                                                                                    // 2028\n                                                                                                                     // 2029\n                var args = arguments,                                                                                // 2030\n                        first = $(this[0]);                                                                          // 2031\n                                                                                                                     // 2032\n                if ( !arguments.length ) {                                                                           // 2033\n                        return valMethod(first).call(first);                                                         // 2034\n                }                                                                                                    // 2035\n                                                                                                                     // 2036\n                // Return the set so it remains chainable                                                            // 2037\n                return this.each(function(){                                                                         // 2038\n                        valMethod($(this)).apply($(this), args);                                                     // 2039\n                });                                                                                                  // 2040\n        };                                                                                                           // 2041\n                                                                                                                     // 2042\n// Extend jQuery/Zepto with the noUiSlider method.                                                                   // 2043\n        $.fn.noUiSlider = function ( options, rebuildFlag ) {                                                        // 2044\n                                                                                                                     // 2045\n                switch ( options ) {                                                                                 // 2046\n                        case 'step': return this[0].getCurrentStep();                                                // 2047\n                        case 'options': return this[0].getOriginalOptions();                                         // 2048\n                }                                                                                                    // 2049\n                                                                                                                     // 2050\n                return ( rebuildFlag ? rebuild : initialize ).call(this, options);                                   // 2051\n        };                                                                                                           // 2052\n                                                                                                                     // 2053\n        function getGroup ( $Spectrum, mode, values, stepped ) {                                                     // 2054\n                                                                                                                     // 2055\n                // Use the range.                                                                                    // 2056\n                if ( mode === 'range' || mode === 'steps' ) {                                                        // 2057\n                        return $Spectrum.xVal;                                                                       // 2058\n                }                                                                                                    // 2059\n                                                                                                                     // 2060\n                if ( mode === 'count' ) {                                                                            // 2061\n                                                                                                                     // 2062\n                        // Divide 0 - 100 in 'count' parts.                                                          // 2063\n                        var spread = ( 100 / (values-1) ), v, i = 0;                                                 // 2064\n                        values = [];                                                                                 // 2065\n                                                                                                                     // 2066\n                        // List these parts and have them handled as 'positions'.                                    // 2067\n                        while ((v=i++*spread) <= 100 ) {                                                             // 2068\n                                values.push(v);                                                                      // 2069\n                        }                                                                                            // 2070\n                                                                                                                     // 2071\n                        mode = 'positions';                                                                          // 2072\n                }                                                                                                    // 2073\n                                                                                                                     // 2074\n                if ( mode === 'positions' ) {                                                                        // 2075\n                                                                                                                     // 2076\n                        // Map all percentages to on-range values.                                                   // 2077\n                        return $.map(values, function( value ){                                                      // 2078\n                                return $Spectrum.fromStepping( stepped ? $Spectrum.getStep( value ) : value );       // 2079\n                        });                                                                                          // 2080\n                }                                                                                                    // 2081\n                                                                                                                     // 2082\n                if ( mode === 'values' ) {                                                                           // 2083\n                                                                                                                     // 2084\n                        // If the value must be stepped, it needs to be converted to a percentage first.             // 2085\n                        if ( stepped ) {                                                                             // 2086\n                                                                                                                     // 2087\n                                return $.map(values, function( value ){                                              // 2088\n                                                                                                                     // 2089\n                                        // Convert to percentage, apply step, return to value.                       // 2090\n                                        return $Spectrum.fromStepping( $Spectrum.getStep( $Spectrum.toStepping( value ) ) );\n                                });                                                                                  // 2092\n                                                                                                                     // 2093\n                        }                                                                                            // 2094\n                                                                                                                     // 2095\n                        // Otherwise, we can simply use the values.                                                  // 2096\n                        return values;                                                                               // 2097\n                }                                                                                                    // 2098\n        }                                                                                                            // 2099\n                                                                                                                     // 2100\n        function generateSpread ( $Spectrum, density, mode, group ) {                                                // 2101\n                                                                                                                     // 2102\n                var originalSpectrumDirection = $Spectrum.direction,                                                 // 2103\n                        indexes = {},                                                                                // 2104\n                        firstInRange = $Spectrum.xVal[0],                                                            // 2105\n                        lastInRange = $Spectrum.xVal[$Spectrum.xVal.length-1],                                       // 2106\n                        ignoreFirst = false,                                                                         // 2107\n                        ignoreLast = false,                                                                          // 2108\n                        prevPct = 0;                                                                                 // 2109\n                                                                                                                     // 2110\n                // This function loops the spectrum in an ltr linear fashion,                                        // 2111\n                // while the toStepping method is direction aware. Trick it into                                     // 2112\n                // believing it is ltr.                                                                              // 2113\n                $Spectrum.direction = 0;                                                                             // 2114\n                                                                                                                     // 2115\n                // Create a copy of the group, sort it and filter away all duplicates.                               // 2116\n                group = unique(group.slice().sort(function(a, b){ return a - b; }));                                 // 2117\n                                                                                                                     // 2118\n                // Make sure the range starts with the first element.                                                // 2119\n                if ( group[0] !== firstInRange ) {                                                                   // 2120\n                        group.unshift(firstInRange);                                                                 // 2121\n                        ignoreFirst = true;                                                                          // 2122\n                }                                                                                                    // 2123\n                                                                                                                     // 2124\n                // Likewise for the last one.                                                                        // 2125\n                if ( group[group.length - 1] !== lastInRange ) {                                                     // 2126\n                        group.push(lastInRange);                                                                     // 2127\n                        ignoreLast = true;                                                                           // 2128\n                }                                                                                                    // 2129\n                                                                                                                     // 2130\n                $.each(group, function ( index ) {                                                                   // 2131\n                                                                                                                     // 2132\n                        // Get the current step and the lower + upper positions.                                     // 2133\n                        var step, i, q,                                                                              // 2134\n                                low = group[index],                                                                  // 2135\n                                high = group[index+1],                                                               // 2136\n                                newPct, pctDifference, pctPos, type,                                                 // 2137\n                                steps, realSteps, stepsize;                                                          // 2138\n                                                                                                                     // 2139\n                        // When using 'steps' mode, use the provided steps.                                          // 2140\n                        // Otherwise, we'll step on to the next subrange.                                            // 2141\n                        if ( mode === 'steps' ) {                                                                    // 2142\n                                step = $Spectrum.xNumSteps[ index ];                                                 // 2143\n                        }                                                                                            // 2144\n                                                                                                                     // 2145\n                        // Default to a 'full' step.                                                                 // 2146\n                        if ( !step ) {                                                                               // 2147\n                                step = high-low;                                                                     // 2148\n                        }                                                                                            // 2149\n                                                                                                                     // 2150\n                        // Low can be 0, so test for false. If high is undefined,                                    // 2151\n                        // we are at the last subrange. Index 0 is already handled.                                  // 2152\n                        if ( low === false || high === undefined ) {                                                 // 2153\n                                return;                                                                              // 2154\n                        }                                                                                            // 2155\n                                                                                                                     // 2156\n                        // Find all steps in the subrange.                                                           // 2157\n                        for ( i = low; i <= high; i += step ) {                                                      // 2158\n                                                                                                                     // 2159\n                                // Get the percentage value for the current step,                                    // 2160\n                                // calculate the size for the subrange.                                              // 2161\n                                newPct = $Spectrum.toStepping( i );                                                  // 2162\n                                pctDifference = newPct - prevPct;                                                    // 2163\n                                                                                                                     // 2164\n                                steps = pctDifference / density;                                                     // 2165\n                                realSteps = Math.round(steps);                                                       // 2166\n                                                                                                                     // 2167\n                                // This ratio represents the ammount of percentage-space a point indicates.          // 2168\n                                // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-devided.\n                                // Round the percentage offset to an even number, then divide by two                 // 2170\n                                // to spread the offset on both sides of the range.                                  // 2171\n                                stepsize = pctDifference/realSteps;                                                  // 2172\n                                                                                                                     // 2173\n                                // Divide all points evenly, adding the correct number to this subrange.             // 2174\n                                // Run up to <= so that 100% gets a point, event if ignoreLast is set.               // 2175\n                                for ( q = 1; q <= realSteps; q += 1 ) {                                              // 2176\n                                                                                                                     // 2177\n                                        // The ratio between the rounded value and the actual size might be ~1% off. // 2178\n                                        // Correct the percentage offset by the number of points                     // 2179\n                                        // per subrange. density = 1 will result in 100 points on the                // 2180\n                                        // full range, 2 for 50, 4 for 25, etc.                                      // 2181\n                                        pctPos = prevPct + ( q * stepsize );                                         // 2182\n                                        indexes[pctPos.toFixed(5)] = ['x', 0];                                       // 2183\n                                }                                                                                    // 2184\n                                                                                                                     // 2185\n                                // Determine the point type.                                                         // 2186\n                                type = ($.inArray(i, group) > -1) ? 1 : ( mode === 'steps' ? 2 : 0 );                // 2187\n                                                                                                                     // 2188\n                                // Enforce the 'ignoreFirst' option by overwriting the type for 0.                   // 2189\n                                if ( !index && ignoreFirst && !low ) {                                               // 2190\n                                        type = 0;                                                                    // 2191\n                                }                                                                                    // 2192\n                                                                                                                     // 2193\n                                if ( !(i === high && ignoreLast)) {                                                  // 2194\n                                        // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value. // 2195\n                                        indexes[newPct.toFixed(5)] = [i, type];                                      // 2196\n                                }                                                                                    // 2197\n                                                                                                                     // 2198\n                                // Update the percentage count.                                                      // 2199\n                                prevPct = newPct;                                                                    // 2200\n                        }                                                                                            // 2201\n                });                                                                                                  // 2202\n                                                                                                                     // 2203\n                // Reset the spectrum.                                                                               // 2204\n                $Spectrum.direction = originalSpectrumDirection;                                                     // 2205\n                                                                                                                     // 2206\n                return indexes;                                                                                      // 2207\n        }                                                                                                            // 2208\n                                                                                                                     // 2209\n        function addMarking ( CSSstyle, orientation, direction, spread, filterFunc, formatter ) {                    // 2210\n                                                                                                                     // 2211\n                var style = ['horizontal', 'vertical'][orientation],                                                 // 2212\n                        element = $('<div/>');                                                                       // 2213\n                                                                                                                     // 2214\n                element.addClass('noUi-pips noUi-pips-'+style);                                                      // 2215\n                                                                                                                     // 2216\n                function getSize( type, value ){                                                                     // 2217\n                        return [ '-normal', '-large', '-sub' ][(type&&filterFunc) ? filterFunc(value, type) : type]; // 2218\n                }                                                                                                    // 2219\n                function getTags( offset, source, values ) {                                                         // 2220\n                        return 'class=\"' + source + ' ' +                                                            // 2221\n                                source + '-' + style + ' ' +                                                         // 2222\n                                source + getSize(values[1], values[0]) +                                             // 2223\n                                '\" style=\"' + CSSstyle + ': ' + offset + '%\"';                                       // 2224\n                }                                                                                                    // 2225\n                function addSpread ( offset, values ){                                                               // 2226\n                                                                                                                     // 2227\n                        if ( direction ) {                                                                           // 2228\n                                offset = 100 - offset;                                                               // 2229\n                        }                                                                                            // 2230\n                                                                                                                     // 2231\n                        // Add a marker for every point                                                              // 2232\n                        element.append('<div '+getTags(offset, 'noUi-marker', values)+'></div>');                    // 2233\n                                                                                                                     // 2234\n                        // Values are only appended for points marked '1' or '2'.                                    // 2235\n                        if ( values[1] ) {                                                                           // 2236\n                                element.append('<div '+getTags(offset, 'noUi-value', values)+'>' + formatter.to(values[0]) + '</div>');\n                        }                                                                                            // 2238\n                }                                                                                                    // 2239\n                                                                                                                     // 2240\n                // Append all points.                                                                                // 2241\n                $.each(spread, addSpread);                                                                           // 2242\n                                                                                                                     // 2243\n                return element;                                                                                      // 2244\n        }                                                                                                            // 2245\n                                                                                                                     // 2246\n        $.fn.noUiSlider_pips = function ( grid ) {                                                                   // 2247\n                                                                                                                     // 2248\n        var mode = grid.mode,                                                                                        // 2249\n                density = grid.density || 1,                                                                         // 2250\n                filter = grid.filter || false,                                                                       // 2251\n                values = grid.values || false,                                                                       // 2252\n                format = grid.format || {                                                                            // 2253\n                        to: Math.round                                                                               // 2254\n                },                                                                                                   // 2255\n                stepped = grid.stepped || false;                                                                     // 2256\n                                                                                                                     // 2257\n                return this.each(function(){                                                                         // 2258\n                                                                                                                     // 2259\n                var info = this.getInfo(),                                                                           // 2260\n                        group = getGroup( info[0], mode, values, stepped ),                                          // 2261\n                        spread = generateSpread( info[0], density, mode, group );                                    // 2262\n                                                                                                                     // 2263\n                        return $(this).append(addMarking(                                                            // 2264\n                                info[1],                                                                             // 2265\n                                info[2],                                                                             // 2266\n                                info[0].direction,                                                                   // 2267\n                                spread,                                                                              // 2268\n                                filter,                                                                              // 2269\n                                format                                                                               // 2270\n                        ));                                                                                          // 2271\n                });                                                                                                  // 2272\n        };                                                                                                           // 2273\n                                                                                                                     // 2274\n}( window.jQuery || window.Zepto ));                                                                                 // 2275\n                                                                                                                     // 2276\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"rcy:nouislider\");\n\n})();\n","servePath":"/packages/rcy_nouislider.js"}]