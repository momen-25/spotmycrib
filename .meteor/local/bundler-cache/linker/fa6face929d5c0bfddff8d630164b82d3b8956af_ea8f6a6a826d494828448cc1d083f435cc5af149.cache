[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar LinkedIn = Package['pauli:linkedin'].LinkedIn;\nvar Accounts = Package['accounts-base'].Accounts;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                       //\n// packages/jaakhermans_meteor-linkedin-connect/packages/jaakhermans_meteor-linkedin-connect.js          //\n//                                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                         //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/jaakhermans:meteor-linkedin-connect/server.js                                         //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\n// OVERRIDE CORE METHOD for custom linkedin user selection on email                               // 1\n// this can be removed when the pull-request is merged                                            // 2\n// https://github.com/meteor/meteor/pull/2318                                                     // 3\n                                                                                                  // 4\n///                                                                                               // 5\n/// OAuth Encryption Support                                                                      // 6\n///                                                                                               // 7\n                                                                                                  // 8\nvar OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption; // 9\n                                                                                                  // 10\n                                                                                                  // 11\nvar usingOAuthEncryption = function () {                                                          // 12\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();                                        // 13\n};                                                                                                // 14\n                                                                                                  // 15\n                                                                                                  // 16\n// OAuth service data is temporarily stored in the pending credentials                            // 17\n// collection during the oauth authentication process.  Sensitive data                            // 18\n// such as access tokens are encrypted without the user id because                                // 19\n// we don't know the user id yet.  We re-encrypt these fields with the                            // 20\n// user id included when storing the service data permanently in                                  // 21\n// the users collection.                                                                          // 22\n//                                                                                                // 23\nvar pinEncryptedFieldsToUser = function (serviceData, userId) {                                   // 24\n  _.each(_.keys(serviceData), function (key) {                                                    // 25\n    var value = serviceData[key];                                                                 // 26\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))                                       // 27\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);                          // 28\n    serviceData[key] = value;                                                                     // 29\n  });                                                                                             // 30\n};                                                                                                // 31\n                                                                                                  // 32\n///                                                                                               // 33\n/// MANAGING USER OBJECTS                                                                         // 34\n///                                                                                               // 35\n                                                                                                  // 36\n// Updates or creates a user after we authenticate with a 3rd party.                              // 37\n//                                                                                                // 38\n// @param serviceName {String} Service name (eg, linkedin).                                       // 39\n// @param serviceData {Object} Data to store in the user's record                                 // 40\n//        under services[serviceName]. Must include an \"id\" field                                 // 41\n//        which is a unique identifier for the user in the service.                               // 42\n// @param options {Object, optional} Other options to pass to insertUserDoc                       // 43\n//        (eg, profile)                                                                           // 44\n// @returns {Object} Object with token and id keys, like the result                               // 45\n//        of the \"login\" method.                                                                  // 46\n//                                                                                                // 47\nAccounts.updateOrCreateUserFromExternalService = function(                                        // 48\n  serviceName, serviceData, options) {                                                            // 49\n  options = _.clone(options || {});                                                               // 50\n  if (serviceName === \"password\" || serviceName === \"resume\")                                     // 51\n    throw new Error(                                                                              // 52\n      \"Can't use updateOrCreateUserFromExternalService with internal service \"                    // 53\n        + serviceName);                                                                           // 54\n  if (!_.has(serviceData, 'id'))                                                                  // 55\n    throw new Error(                                                                              // 56\n      \"Service data for service \" + serviceName + \" must include id\");                            // 57\n                                                                                                  // 58\n  var selector = Accounts.externalServiceSelector(serviceName, serviceData, options);             // 59\n                                                                                                  // 60\n  if (! selector)                                                                                 // 61\n    return false;                                                                                 // 62\n                                                                                                  // 63\n  var user = Meteor.users.findOne(selector);                                                      // 64\n                                                                                                  // 65\n  if (user) {                                                                                     // 66\n    pinEncryptedFieldsToUser(serviceData, user._id);                                              // 67\n                                                                                                  // 68\n    // We *don't* process options (eg, profile) for update, but we do replace                     // 69\n    // the serviceData (eg, so that we keep an unexpired access token and                         // 70\n    // don't cache old email addresses in serviceData.email).                                     // 71\n    // XXX provide an onUpdateUser hook which would let apps update                               // 72\n    //     the profile too                                                                        // 73\n    var setAttrs = {};                                                                            // 74\n    _.each(serviceData, function(value, key) {                                                    // 75\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;                                    // 76\n    });                                                                                           // 77\n                                                                                                  // 78\n    // XXX Maybe we should re-use the selector above and notice if the update                     // 79\n    //     touches nothing?                                                                       // 80\n    Meteor.users.update(user._id, {$set: setAttrs});                                              // 81\n    return {                                                                                      // 82\n      type: serviceName,                                                                          // 83\n      userId: user._id                                                                            // 84\n    };                                                                                            // 85\n  } else {                                                                                        // 86\n    // Create a new user with the service data. Pass other options through to                     // 87\n    // insertUserDoc.                                                                             // 88\n    user = {services: {}};                                                                        // 89\n    user.services[serviceName] = serviceData;                                                     // 90\n    return {                                                                                      // 91\n      type: serviceName,                                                                          // 92\n      userId: Accounts.insertUserDoc(options, user)                                               // 93\n    };                                                                                            // 94\n  }                                                                                               // 95\n};                                                                                                // 96\n                                                                                                  // 97\nAccounts.externalServiceSelector = function(                                                      // 98\n  serviceName, serviceData, options){                                                             // 99\n  var selector = false;                                                                           // 100\n                                                                                                  // 101\n  //check if specific selector is available for service                                           // 102\n  //eg externalServiceSelectorLinkedin                                                            // 103\n  var selectorMethod = \"externalServiceSelector\";                                                 // 104\n    selectorMethod += serviceName.charAt(0).toUpperCase() + serviceName.slice(1);                 // 105\n                                                                                                  // 106\n  if (!! Accounts[selectorMethod]){                                                               // 107\n    selector = Accounts[selectorMethod](serviceName, serviceData, options);                       // 108\n  }                                                                                               // 109\n                                                                                                  // 110\n  // Look for a user with the appropriate service user id.                                        // 111\n  if(! selector && !! serviceData.id) {                                                           // 112\n    selector = {};                                                                                // 113\n    selector[\"services.\" + serviceName + \".id\"] = serviceData.id;                                 // 114\n  }                                                                                               // 115\n                                                                                                  // 116\n  return selector;                                                                                // 117\n};                                                                                                // 118\n                                                                                                  // 119\nAccounts.externalServiceSelectorLinkedIn = function(                                              // 120\n  serviceName, serviceData, options){                                                             // 121\n    return Accounts.retrieveExternalServiceSelector(serviceName, serviceData, options);           // 122\n};                                                                                                // 123\n                                                                                                  // 124\nAccounts.retrieveExternalServiceSelector = function (serviceName, serviceData, options) {         // 125\n  var serviceIdKey = \"services.\" + serviceName + \".id\";                                           // 126\n  var selector = {};                                                                              // 127\n  selector[\"$or\"] = [{},{}];                                                                      // 128\n  selector[\"$or\"][0][serviceIdKey] = serviceData.id;                                              // 129\n  //also check on email                                                                           // 130\n  selector[\"$or\"][1][\"emails.address\"] = serviceData.email;                                       // 131\n  if (! serviceData.email)                                                                        // 132\n    selector = false;                                                                             // 133\n  return selector;                                                                                // 134\n}                                                                                                 // 135\n                                                                                                  // 136\nMeteor.methods({                                                                                  // 137\n  connectUserWithLinkedIn: function (token, secret) {                                             // 138\n    //errors                                                                                      // 139\n    if (! this.userId)                                                                            // 140\n      throw new Meteor.Error(403, \"user must be loggedin\");                                       // 141\n                                                                                                  // 142\n    var user = Meteor.user();                                                                     // 143\n    if (user.services && user.services.linkedin)                                                  // 144\n      throw new Meteor.Error(403, \"user can not have a linkedin connected account\");              // 145\n                                                                                                  // 146\n    if (Meteor.isServer) {                                                                        // 147\n      var data = LinkedIn.retrieveCredential(token, secret);                                      // 148\n                                                                                                  // 149\n      if (! data)                                                                                 // 150\n        throw new Meteor.Error(403, \"not able to retreive linkedin data\");                        // 151\n                                                                                                  // 152\n      //check if no accounts exists for this linkedin user                                        // 153\n      var existing = Meteor.users.find({'services.linkedin.id': data.serviceData.id}).count();    // 154\n      if (existing)                                                                               // 155\n        throw new Meteor.Error(403, \"user found with same linkedin account\");                     // 156\n                                                                                                  // 157\n      Meteor.users.update(this.userId, {$set: {'services.linkedin': data.serviceData}});          // 158\n    }                                                                                             // 159\n  }                                                                                               // 160\n});                                                                                               // 161\n                                                                                                  // 162\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jaakhermans:meteor-linkedin-connect\");\n\n})();\n","servePath":"/packages/jaakhermans_meteor-linkedin-connect.js"}]