[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar MeteorX = Package['lamhieu:meteorx'].MeteorX;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/lamhieu_unblock/src/unblock.js                                              //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nlet cachedUnblock;\n\nfunction emptyFunction() {};\n\nconst originalSub = MeteorX.Session.prototype.protocol_handlers.sub;\nMeteorX.Session.prototype.protocol_handlers.sub = function(msg, unblock) {\n  const self = this;\n  // cacheUnblock temporarly, so we can capture it later\n  // we will use unblock in current eventLoop, so this is safe\n  cachedUnblock = unblock;\n  originalSub.call(self, msg, unblock);\n  // cleaning cached unblock\n  cachedUnblock = null;\n};\n\n// We simply replace current implementation with a simple modification\n// to add add the unblock\nMeteorX.Session.prototype._startSubscription = function(handler, subId, params, name) {\n  const self = this;\n  const sub = new MeteorX.Subscription(self, handler, subId, params, name);\n\n  let unblockHander = cachedUnblock;\n  // _startSubscription may call from a lot places\n  // so cachedUnblock might be null in somecases\n  // assign the cachedUnblock\n  sub.unblock = unblockHander || emptyFunction;\n\n  if (subId) {\n    const isMap = self._namedSubs instanceof Map;\n    if (isMap) {\n      // 1.7+\n      self._namedSubs.set(subId, sub);\n    } else {\n      self._namedSubs[subId] = sub;\n    }\n  } else {\n    self._universalSubs.push(sub);\n  }\n\n  sub._runHandler();\n};\n\n// sometimes _runHandler will be called directly and\n// we won't have the session context and cachedUnblock\n// so, those situations, set a dummy function for unblock\n// this happens often when logging in and out\nconst originalRunHandler = MeteorX.Subscription.prototype._runHandler;\nMeteorX.Subscription.prototype._runHandler = function() {\n  if (!this.unblock) {\n    this.unblock = emptyFunction;\n  }\n  originalRunHandler.call(this);\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"lamhieu:unblock\");\n\n})();\n","servePath":"/packages/lamhieu_unblock.js"}]