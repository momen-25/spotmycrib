var require = meteorInstall({"client":{"accounts":{"forgot":{"template.forgot.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/forgot/template.forgot.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("loginFormResetPasswordView");
Template["loginFormResetPasswordView"] = new Template("Template.loginFormResetPasswordView", (function() {
  var view = this;
  return Blaze.Unless(function() {
    return Spacebars.call(view.lookup("showForm"));
  }, function() {
    return [ HTML.Raw('\n        <div class="refund-div"><h2>We just emailed you a link</h2></div>\n        '), HTML.DIV({
      class: "profile-text"
    }, HTML.Raw('\n            <h5 class="no-capitalize">Please check your email and click the secure link.</h5>\n            <div class="signup-btn">\n                <button class="transparent-btn btns tryAgainBtn">Try again</button>\n            </div>\n            <p></p>\n            '), HTML.P({
      class: "color-text contactusBtn"
    }, "If you don’t see our email, check your spam folder or ", HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("pathFor"), "contactus");
      }
    }, "Contact us")), "\n\n        "), "\n        " ];
  }, function() {
    return [ HTML.Raw('\n\n    <div class="refund-div"><h2>Forgot password?</h2></div>\n\n    '), HTML.DIV({
      class: "profile-text"
    }, HTML.Raw('\n        <h5 class="no-capitalize">Enter your registered Email ID</h5>\n\n        '), HTML.FORM({
      class: "signin-form"
    }, "\n            ", HTML.DIV({
      class: "form-border"
    }, "\n\n                ", HTML.DIV({
      class: function() {
        return [ "styled-input underline  ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "email")) ];
      }
    }, "\n                    ", HTML.INPUT({
      class: "login-input-email",
      value: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("credentials"), "email"));
      },
      type: "email",
      name: "email",
      required: "",
      for: function() {
        return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
      }
    }), "\n                    ", HTML.LABEL({
      for: function() {
        return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
      }
    }, "EMAIL ID"), HTML.Raw("\n                    <span></span>\n                  "), Blaze.If(function() {
      return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "email"));
    }, function() {
      return [ "\n                      ", HTML.SPAN({
        class: "help-block"
      }, "\n                        ", Blaze.View("lookup:messages.errors.email", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("messages"), "errors", "email"));
      }), "\n                      "), "\n                  " ];
    }), "\n                "), "\n            "), "\n\n            ", HTML.DIV({
      class: "signup-btn"
    }, "\n\n                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("isLoading"));
    }, function() {
      return HTML.Raw('\n                    <button class="transparent-btn btns">Loading...</button>\n                ');
    }, function() {
      return HTML.Raw('\n                    <button class="blue-btn btns" type="Submit" data-event-category="accounts" data-event-action="reset-password">Reset My Password</button>\n                ');
    }), HTML.Raw('\n                <!--<p class="color-text">Verification mail will be sent to the Email ID.</p>-->\n              '), Blaze._TemplateWith(function() {
      return {
        messages: Spacebars.call(view.lookup("messages"))
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("loginFormMessages"));
    }), HTML.Raw('\n                <h6><span style="color:#0c68a7" data-event-category="accounts" data-event-action="signIn">Sign In</span></h6>\n            ')), "\n        "), "\n    "), "\n    " ];
  });
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forgot.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/forgot/forgot.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("../helpers.js");
module.link("../validation.js");
Template.loginFormResetPasswordView.events({
  /**
   * Submit the password reset form
   * @param {Event} event - jQuery Event
   * @param {Object} template - Blaze Template
   * @return {void}
   */
  "click .tryAgainBtn": function () {
    Template.instance().showForm.set(true);
  },
  "click .contactusBtn": function () {
    if ($) if ($.fancybox) $.fancybox.close();
  },
  "click [data-event-action=signIn]": function (event, template) {
    var isOnPage = false;
    if (template.data) if (template.data.onPage) isOnPage = true;

    if (!isOnPage) {
      Session.set('showForgotForm', false);
      Session.set('showSignupForm', false);
      Session.set('showLoginSignupFancyBoxDialog', true);
      Session.set('showLoginDialog', true);
    } else {
      Session.set('showForgotForm', false);
    }
  },
  "submit form": function (event, template) {
    event.preventDefault();
    var emailAddress = template.$(".login-input-email").val().trim();
    var validatedEmail = LoginFormValidation.email(emailAddress);
    var templateInstance = Template.instance();
    var errors = [];
    templateInstance.formMessages.set({});
    templateInstance.isLoading.set(true);

    if (validatedEmail !== true) {
      errors.push(validatedEmail);
    }

    if (errors.length) {
      templateInstance.formMessages.set({
        errors: errors
      }); // prevent signup

      templateInstance.isLoading.set(false);
      return;
    }

    Accounts.forgotPassword({
      email: emailAddress
    }, function (error) {
      templateInstance.isLoading.set(false); // Show some message confirming result

      if (error) {
        console.log(error);
        templateInstance.formMessages.set({
          errors: [error]
        });
      } else {
        templateInstance.showForm.set(false);
        templateInstance.formMessages.set({
          info: [{
            reason: "Password reset mail sent."
          }]
        });
      }
    });
  }
});
/**
 * loginFormResetPasswordView
 *
 */

Template.loginFormResetPasswordView.onCreated(function () {
  var template = Template.instance(); // template.uniqueId = Random.id();

  template.formMessages = new ReactiveVar({});
  template.showForm = new ReactiveVar(true);
  template.isLoading = new ReactiveVar(true);
});
Template.loginFormResetPasswordView.onRendered(function () {
  $('#signin-div').find('#email').focus();
  $('.new-focus').click(function () {
    $('#signin-div').find('#email').focus();
  });
  Template.instance().isLoading.set(false);
});
Template.loginFormResetPasswordView.helpers(LoginFormSharedHelpers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"signIn":{"template.signIn.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/signIn/template.signIn.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("loginFormSignInView");
Template["loginFormSignInView"] = new Template("Template.loginFormSignInView", (function() {
  var view = this;
  return [ HTML.Raw('<div class="refund-div"><h2>Sign In</h2></div>\n\n    '), HTML.DIV({
    class: "profile-text"
  }, "\n        ", Blaze.Unless(function() {
    return Spacebars.call(view.lookup("onPage"));
  }, function() {
    return [ "\n            ", Blaze._TemplateWith(function() {
      return {
        buttonFor: Spacebars.call("login"),
        usedInDlg: Spacebars.call("login")
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("socialLoginButtons"));
    }), HTML.Raw('\n            <div class="seperator" style="margin: 0 0 30px 0px;"><span></span></div>\n        ') ];
  }), HTML.Raw("\n\n\n        <h5>Enter your email and password below</h5>\n\n        "), HTML.FORM({
    class: "signin-form"
  }, HTML.Raw('<!--autocomplete="off" -->\n            '), HTML.DIV({
    class: "form-border"
  }, "\n\n                ", HTML.DIV({
    class: function() {
      return [ "styled-input  ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "email")) ];
    }
  }, "\n                    ", HTML.INPUT({
    autocomplete: "email",
    type: "email",
    name: "email",
    required: "",
    for: function() {
      return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
    },
    class: "login-input-email"
  }), "\n                    ", HTML.LABEL({
    for: function() {
      return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "EMAIL ID"), HTML.Raw("\n                    <span></span>\n                ")), "\n\n                ", HTML.DIV({
    class: function() {
      return [ "styled-input underline ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password")) ];
    }
  }, "\n                    ", HTML.INPUT({
    autocomplete: "current-password",
    type: "password",
    name: "password",
    class: " login-input-password",
    required: "",
    for: function() {
      return [ "password-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }), "\n                    ", HTML.LABEL({
    for: function() {
      return [ "password-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "PASSWORD"), HTML.Raw("\n                    <span></span>\n                ")), "\n\n\n\n            "), "\n            ", Blaze._TemplateWith(function() {
    return {
      messages: Spacebars.call(view.lookup("messages"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("loginFormMessages"));
  }), "\n            ", HTML.DIV({
    class: "signup-btn"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("isLoading"));
  }, function() {
    return HTML.Raw('\n                <button class="transparent-btn btns">Loading...</button>\n                ');
  }, function() {
    return HTML.Raw('\n                <button class="blue-btn btns" type="submit" data-event-action="submitSignInForm">SIGN IN</button>\n                ');
  }), HTML.Raw('\n                <h5 data-event-action="forgotPassword">Forgot password?</h5>\n                '), Blaze.Unless(function() {
    return Spacebars.call(view.lookup("onPage"));
  }, function() {
    return HTML.Raw('\n                <h6>Not registered? <span style="color:#0c68a7" data-event-action="signUp">Sign Up now</span></h6>\n                ');
  }), "\n            "), HTML.Raw('\n            <div class="form-group">\n\n            </div>\n\n\n        ')), "\n    "), HTML.Raw('\n\n    <!--<div class="profile-text">-->\n        <!--&lt;!&ndash;{{#if loginFailedError}}&ndash;&gt;-->\n        <!--&lt;!&ndash;<div class="alert alert-danger" role="alert" style="font-size: 13px;">&ndash;&gt;-->\n            <!--&lt;!&ndash;<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>&ndash;&gt;-->\n            <!--&lt;!&ndash;Invalid email or password. Try again.&ndash;&gt;-->\n        <!--&lt;!&ndash;</div>&ndash;&gt;-->\n        <!--&lt;!&ndash;{{/if}}&ndash;&gt;-->\n        <!---->\n\n    <!--</div>-->') ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"signIn.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/signIn/signIn.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("../helpers.js");
module.link("../validation.js");
Template.loginFormSignInView.onCreated(function () {
  var template = Template.instance(); // template.uniqueId = Random.id();

  template.formMessages = new ReactiveVar({});
  template.loginFailedError = new ReactiveVar(false);
  template.isLoading = new ReactiveVar(true);
});
Template.loginFormSignInView.onRendered(function () {
  $('#signin-div').find('#email').focus();
  $('.new-focus').click(function () {
    $('#signin-div').find('#email').focus();
  });
  Template.instance().isLoading.set(false);
});
Template.loginFormSignInView.helpers(LoginFormSharedHelpers);
/**
 * Events: Login form sign in view
 */

Template.loginFormSignInView.events({
  /**
   * Submit sign in form
   * @param  {Event} event - jQuery Event
   * @param  {Template} template - Blaze Template
   * @return {void}
   */
  "click [data-event-action=signUp]": function (event, template) {
    Session.set('showForgotForm', false);
    Session.set('showSignupForm', true);
    Session.set('showLoginSignupFancyBoxDialog', true);
    Session.set('showLoginDialog', true);
  },
  "click [data-event-action=forgotPassword]": function (event, template) {
    var isOnPage = false;
    if (template.data) if (template.data.onPage) isOnPage = true;

    if (!isOnPage) {
      Session.set('showForgotForm', true);
      Session.set('showSignupForm', false);
      Session.set('showLoginSignupFancyBoxDialog', true);
      Session.set('showLoginDialog', true);
    } else {
      Session.set('showForgotForm', true);
    }
  },
  "submit form": function (event, template) {
    console.log("jns");
    event.preventDefault();
    var usernameInput = template.$(".login-input-email");
    var passwordInput = template.$(".login-input-password");
    var username = usernameInput.val().trim();
    var password = passwordInput.val().trim();
    var validatedEmail = LoginFormValidation.email(username);
    var validatedPassword = LoginFormValidation.password(password, {
      validationLevel: "exists"
    });
    var templateInstance = Template.instance();
    var errors = [];
    templateInstance.formMessages.set({});
    templateInstance.isLoading.set(true);
    templateInstance.loginFailedError.set(false);

    if (validatedEmail !== true) {
      errors.push(validatedEmail);
    }

    if (validatedPassword !== true) {
      errors.push(validatedPassword);
    }

    if (errors.length) {
      templateInstance.formMessages.set({
        errors: errors
      }); // prevent signup

      templateInstance.isLoading.set(false);
      return;
    }

    Meteor.loginWithPassword(username, password, function (error) {
      templateInstance.isLoading.set(false);

      if (error) {
        console.log(error);
        templateInstance.loginFailedError.set(true);
        debugger;

        if (error.reason == 'User has no password set' || error.reason == 'User not found') {
          Meteor.call('isSocialAccount', username, function (err1, result) {
            if (err1) templateInstance.formMessages.set({
              errors: [err1]
            });else templateInstance.formMessages.set({
              info: [result]
            });
          });
        } // Show some error messages above the form fields


        templateInstance.formMessages.set({
          errors: [error]
        });
      } else {
        var isOnPage = false;
        if (templateInstance.data) if (templateInstance.data.onPage) isOnPage = true;

        if (!isOnPage) {
          $('#signin-div , .fancybox-overlay').hide();
          Session.set('showLoginDialog', false);
          Session.set('showSignupDialog', false);
          Session.set('showLoginSignupFancyBoxDialog', false);
        }

        Session.set('loginFlowComplete', true);
        Session.set('loginFlowStart', undefined);
        delete Session.keys.loginFlowStart;
        Meteor.call("userLoggedIn");
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"signUp":{"template.signUp.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/signUp/template.signUp.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("loginFormSignUpView");
Template["loginFormSignUpView"] = new Template("Template.loginFormSignUpView", (function() {
  var view = this;
  return [ HTML.Raw('<div class="refund-div"><h2>Sign Up</h2></div>\n\n    '), HTML.DIV({
    class: "profile-text userSignup-div"
  }, "\n\n        ", Blaze.Unless(function() {
    return Spacebars.call(view.lookup("onPage"));
  }, function() {
    return [ "\n            ", Blaze._TemplateWith(function() {
      return {
        buttonFor: Spacebars.call("signup"),
        usedInDlg: Spacebars.call("signup")
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("socialLoginButtons"));
    }), HTML.Raw('\n            <div class="seperator" style="margin: 0 0 30px 0px;"><span></span></div>\n        ') ];
  }), HTML.Raw("\n\n        <h5>Enter your details below</h5>\n\n        "), HTML.FORM({
    class: "signin-form"
  }, "\n            ", HTML.DIV({
    class: "form-border"
  }, "\n\n                ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "fullName")) ];
    }
  }, "\n                    ", HTML.INPUT({
    autocomplete: "name",
    class: "login-input-fullName",
    type: "text",
    name: "name",
    required: "",
    for: function() {
      return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
    },
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("credentials"), "fullName"));
    }
  }), HTML.Raw("<br>\n                    "), HTML.LABEL({
    for: function() {
      return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "FULL NAME"), HTML.Raw("\n                    <span></span>\n                  "), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "fullName"));
  }, function() {
    return [ "\n                      ", HTML.SPAN({
      class: "help-block"
    }, "\n                        ", Blaze.View("lookup:messages.errors.fullName", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("messages"), "errors", "fullName"));
    }), "\n                      "), "\n                  " ];
  }), "\n                "), "\n\n                ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "email")) ];
    }
  }, "\n                    ", HTML.INPUT({
    autocomplete: "email",
    class: " login-input-email",
    type: "email",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("credentials"), "email"));
    },
    name: "email",
    required: "",
    for: function() {
      return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }), "\n                    ", HTML.LABEL({
    for: function() {
      return [ "email-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "EMAIL ID"), HTML.Raw("\n                    <span></span>\n                  "), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "email"));
  }, function() {
    return [ "\n                      ", HTML.SPAN({
      class: "help-block"
    }, "\n                        ", Blaze.View("lookup:messages.errors.email", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("messages"), "errors", "email"));
    }), "\n                      "), "\n                  " ];
  }), "\n                "), "\n\n                ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password")) ];
    }
  }, "\n                    ", HTML.INPUT({
    autocomplete: "new-password",
    class: "login-input-password",
    type: "password",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("credentials"), "password"));
    },
    name: "password",
    required: "",
    for: function() {
      return [ "password-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }), "\n                    ", HTML.LABEL({
    for: function() {
      return [ "password-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "PASSWORD"), HTML.Raw("\n                    <span></span>\n                  "), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password"));
  }, function() {
    return [ "\n                      ", HTML.SPAN({
      class: "help-block"
    }, "\n                        ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "errors", "password"));
    }, function() {
      return [ "\n                            ", HTML.P(Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      })), "\n                        " ];
    }), "\n                      "), "\n                  " ];
  }), "\n                "), "\n\n                ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "mobile")) ];
    }
  }, "\n                    ", HTML.INPUT({
    autocomplete: "tel",
    class: "login-input-mobile SignupFormMobileField",
    type: "text",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("credentials"), "mobile"));
    },
    name: "mobile",
    for: function() {
      return [ "mobile-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }), "\n                    ", HTML.LABEL({
    for: function() {
      return [ "mobile-", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "MOBILE"), HTML.Raw("\n                    <span></span>\n                  "), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "mobile"));
  }, function() {
    return [ "\n                      ", HTML.SPAN({
      class: "help-block",
      style: "background: #f9f9f9 !important;height: 36px;border-top: 1px solid rgb(68, 68, 68);"
    }, "\n                        ", Blaze.View("lookup:messages.errors.mobile", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("messages"), "errors", "mobile"));
    }), "\n                      "), "\n                  " ];
  }), "\n                "), "\n            "), "\n            ", Blaze._TemplateWith(function() {
    return {
      messages: Spacebars.call(view.lookup("messages"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("loginFormMessages"));
  }), "\n            ", HTML.DIV({
    class: "signup-btn"
  }, "\n", Blaze.If(function() {
    return Spacebars.call(view.lookup("isLoading"));
  }, function() {
    return HTML.Raw('\n        <button class="transparent-btn btns">Loading...</button>\n');
  }, function() {
    return HTML.Raw('\n                <button class="blue-btn btns" type="Submit" data-event-category="accounts" data-event-action="register">SIGN UP</button>\n');
  }), "\n                ", Blaze.Unless(function() {
    return Spacebars.call(view.lookup("onPage"));
  }, function() {
    return HTML.Raw('\n                    <p>Already have an account? <a href="javascript:;"><span style="color:#0c67a6;" data-event-category="accounts" data-event-action="signIn">Sign In</span></a></p>\n                ');
  }), "\n\n            "), "\n\n\n        "), "\n\n    ") ];
}));

Template.__checkName("loginFormSignUpViewLandlord");
Template["loginFormSignUpViewLandlord"] = new Template("Template.loginFormSignUpViewLandlord", (function() {
  var view = this;
  return [ HTML.Raw("<!--landLordSignup-->\n    \n    \n    <!--Put your signup code here.-->\n    \n    \n    \n        "), HTML.DIV({
    class: "landlordSignup-div signup-div"
  }, HTML.Raw('\n    \n     <div class="refund-div"><h2>Landlord Join Now</h2> </div>\n      '), HTML.DIV({
    class: "profile-text"
  }, HTML.Raw('\n      \t<div class="row">\n      \t\t<div class="col-md-12 rd-details">\n      \t\t\t<span>I am a</span>\n      \t\t\t<label class="account-type-label" for="rd1">\n                <input class="account-type-radio" name="accountType" value="LANDLORD" type="radio" checked="">\n                Landlord\n              </label>\n              <label class="account-type-label">\n                <input class="account-type-radio" name="accountType" value="LANDLORD" type="radio">\n                Agent\n              </label>\n              <label class="account-type-label">\n                <input class="account-type-radio" name="accountType" value="LANDLORD" type="radio">\n                Building Manager\n              </label>\n      \t\t\t<label class="account-type-label">\n                <input class="account-type-radio" name="accountType" value="LANDLORD" type="radio">\n                Tenant\n              </label>\n      \t\t</div>\n      \t</div>\n          \n              \n          '), HTML.FORM({
    class: "signin-form"
  }, "\n            ", HTML.DIV({
    class: "form-border"
  }, HTML.Raw('\n           <div class="row frm-group">\n            <div class="col-sm-6">\n            <div class="styled-input">\n              <input autocomplete="name" type="text" name="name" class="login-input-fullName" required=""><br>\n              <label>FULL NAME</label>\n              <span></span>\n              </div>\n            </div>\n              <div class="col-sm-6">\n              \t<div class="styled-input">\n              <input autocomplete="email" type="email" name="email" class="login-input-email" required="">\n              <label>EMAIL ID</label>\n              <span></span> \n              </div>\n            </div>\n              \n              <div class="col-sm-6">\n              \t<div class="styled-input">\n              <input autocomplete="new-password" type="password" name="password" class="login-input-password" required="">\n              <label>PASSWORD</label>\n              <span></span> </div>\n              </div>\n\n              <div class="col-sm-6">\n              \t<div class="styled-input">\n              <input autocomplete="tel" type="number" name="mobile" class="login-input-mobile SignupFormMobileField" required="">\n              <label>MOBILE</label>\n              <span></span> \n              </div>\n            </div>\n          </div>\n\n                '), Blaze._TemplateWith(function() {
    return {
      messages: Spacebars.call(view.lookup("messages"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("loginFormMessages"));
  }), "\n\n            "), "  \n          ", HTML.DIV({
    class: "signup-btn"
  }, "\n          \t", HTML.DIV({
    class: "styled-input"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("isLoading"));
  }, function() {
    return HTML.Raw('\n                    <button class="transparent-btn btns">Loading...</button>\n                ');
  }, function() {
    return HTML.Raw('\n                    <button class="blue-btn btns" type="submit">SIGN UP</button>\n                ');
  }), "\n          "), "\n              ", Blaze.Unless(function() {
    return Spacebars.call(view.lookup("onPage"));
  }, function() {
    return HTML.Raw('\n                  <p style="padding-top:0;">Already have an account? <a href="javascript:;"><span style="color:#0c67a6;" data-event-category="accounts" data-event-action="signIn">Sign In</span></a></p>\n              ');
  }), "\n           "), "\n          "), "\n           \n      "), "\n  ") ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"signUp.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/signUp/signUp.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("../helpers.js");
module.link("../validation.js");
Template.loginFormSignUpView.onCreated(function () {
  var template = Template.instance(); // template.uniqueId = Random.id();

  template.formMessages = new ReactiveVar({});
  template.type = "signUp";
  template.isOTPverified = new ReactiveVar(false);
  template.isLoading = new ReactiveVar(true);
});
Template.loginFormSignUpView.onRendered(function () {
  // This is the new 1 line code I have added
  this.$(".SignupFormMobileField").intlTelInput({
    preferredCountries: ["ie", "gb", 'in']
  });
  $('#signin-div').find('#name').focus();
  $('.new-focus').click(function () {
    $('#signin-div').find('#name').focus();
  });
  Template.instance().isLoading.set(false);
});
Template.loginFormSignUpView.helpers(LoginFormSharedHelpers);
/**
 * Events: Login form sign up view
 */

Template.loginFormSignUpView.events({
  /**
   * Submit sign up form
   * @param  {Event} event - jQuery Event
   * @param  {Template} template - Blaze Template
   * @return {void}
   */
  "click [data-event-action=signIn]": function (event, template) {
    Session.set('showForgotForm', false);
    Session.set('showSignupForm', false);
    Session.set('showLoginSignupFancyBoxDialog', true);
    Session.set('showLoginDialog', true);
  },
  "submit form": function (event, template) {
    event.preventDefault(); // var usernameInput = template.$(".login-input--username");

    var emailInput = template.$(".login-input-email");
    var passwordInput = template.$(".login-input-password");
    var fullNameInput = template.$(".login-input-fullName");
    var mobileInput = template.$(".login-input-mobile");
    var email = emailInput.val().trim();
    var password = passwordInput.val().trim();
    var fullName = fullNameInput.val().trim();
    var mobile = mobileInput.val().trim(); // mobile = mobileInput.intlTelInput("getNumber");//not working
    // mobileInput.val();

    var validatedEmail = LoginFormValidation.email(email);
    var validatedFullName = LoginFormValidation.username(fullName);
    var validatedPassword = LoginFormValidation.password(password, {
      validationLevel: "length"
    });
    var validatedMobile = LoginFormValidation.mobile(mobile);
    var templateInstance = Template.instance();
    var errors = [];
    templateInstance.formMessages.set({});
    templateInstance.isLoading.set(true);

    if (validatedEmail !== true) {
      errors.push(validatedEmail);
    }

    if (validatedFullName !== true) {
      errors.push(validatedFullName);
    }

    if (validatedMobile !== true) {
      errors.push(validatedMobile);
    }

    if (validatedPassword !== true) {
      errors.push(validatedPassword);
    }

    if (errors.length) {
      templateInstance.formMessages.set({
        errors: errors
      }); // prevent signup

      templateInstance.isLoading.set(false);
      return;
    } //if(!templateInstance.isOTPverified.get()){
    //  //Show OTP screen
    //
    //}


    var newUserData = {
      // username: username,
      email: email,
      password: password,
      profile: {
        name: fullName,
        email: email,
        mobile: mobile
      }
    };
    Accounts.createUser(newUserData, function (error, result) {
      templateInstance.isLoading.set(false);

      if (error) {
        // Show some error message
        templateInstance.formMessages.set({
          errors: [error]
        });
      } else {
        var isOnPage = false;
        if (templateInstance.data) if (templateInstance.data.onPage) isOnPage = true;

        if (!isOnPage) {
          $('#signin-div , .fancybox-overlay').hide();
          Session.set('showLoginDialog', false);
          Session.set('showSignupDialog', false);
          Session.set('showLoginSignupFancyBoxDialog', false);
        }

        Session.set('loginFlowComplete', true);
        Session.set('loginFlowStart', undefined);
        delete Session.keys.loginFlowStart;
      }
    }); //,
    //name: fullName,
    //  "profile.mobile" :[mobile]
  }
});
Template.loginFormSignUpViewLandlord.onCreated(function () {
  var template = Template.instance(); // template.uniqueId = Random.id();

  template.formMessages = new ReactiveVar({});
  template.type = "signUp";
  template.isOTPverified = new ReactiveVar(false);
  template.isLoading = new ReactiveVar(true);
});
Template.loginFormSignUpViewLandlord.onRendered(function () {
  this.$(".SignupFormMobileField").intlTelInput({
    preferredCountries: ["ie", "gb", 'in']
  });
  $('#signin-div').find('#name').focus();
  $('.new-focus').click(function () {
    $('#signin-div').find('#name').focus();
  });
  Template.instance().isLoading.set(false);
});
Template.loginFormSignUpViewLandlord.helpers(LoginFormSharedHelpers);
/**
 * Events: Login form sign up view
 */

Template.loginFormSignUpViewLandlord.events({
  "click [data-event-action=signIn]": function (event, template) {
    Session.set('showForgotForm', false);
    Session.set('showSignupForm', false);
    Session.set('showLoginSignupFancyBoxDialog', true);
    Session.set('showLoginDialog', true);
  },

  /**
   * Submit sign up form
   * @param  {Event} event - jQuery Event
   * @param  {Template} template - Blaze Template
   * @return {void}
   */
  "submit form": function (event, template) {
    event.preventDefault(); // var usernameInput = template.$(".login-input--username");

    var emailInput = template.$(".login-input-email");
    var passwordInput = template.$(".login-input-password");
    var fullNameInput = template.$(".login-input-fullName");
    var mobileInput = template.$(".login-input-mobile");
    var email = emailInput.val().trim();
    var password = passwordInput.val().trim();
    var fullName = fullNameInput.val().trim();
    var mobile = mobileInput.val().trim();
    var validatedEmail = LoginFormValidation.email(email);
    var validatedFullName = LoginFormValidation.username(fullName);
    var validatedPassword = LoginFormValidation.password(password, {
      validationLevel: "length"
    });
    var validatedMobile = LoginFormValidation.mobile(mobile);
    var templateInstance = Template.instance();
    var errors = [];
    templateInstance.formMessages.set({});
    templateInstance.isLoading.set(true);

    if (validatedEmail !== true) {
      errors.push(validatedEmail);
    }

    if (validatedFullName !== true) {
      errors.push(validatedFullName);
    }

    if (validatedMobile !== true) {
      errors.push(validatedMobile);
    }

    if (validatedPassword !== true) {
      errors.push(validatedPassword);
    }

    if (errors.length) {
      templateInstance.formMessages.set({
        errors: errors
      }); // prevent signup

      templateInstance.isLoading.set(false);
      return;
    } //if(!templateInstance.isOTPverified.get()){
    //  //Show OTP screen
    //
    //}


    var newUserData = {
      // username: username,
      email: email,
      password: password,
      profile: {
        name: fullName,
        email: email,
        mobile: mobile
      }
    };
    Accounts.createUser(newUserData, function (error, result) {
      templateInstance.isLoading.set(false);

      if (error) {
        // Show some error message
        templateInstance.formMessages.set({
          errors: [error]
        });
      } else {
        var isOnPage = false;
        if (templateInstance.data) if (templateInstance.data.onPage) isOnPage = true;

        if (!isOnPage) {
          $('#signin-div , .fancybox-overlay').hide();
          Session.set('showLoginDialog', false);
          Session.set('showSignupDialog', false);
          Session.set('showLoginSignupFancyBoxDialog', false);
        }

        Session.set('loginFlowComplete', true);
        Session.set('loginFlowStart', undefined);
        delete Session.keys.loginFlowStart;
      }
    }); //,
    //name: fullName,
    //  "profile.mobile" :[mobile]
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"template.general.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/template.general.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("loginPageHorizontal");
Template["loginPageHorizontal"] = new Template("Template.loginPageHorizontal", (function() {
  var view = this;
  return HTML.SECTION({
    class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
  }, "\n\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("isTemplateLoaded"));
  }, function() {
    return [ "\n            ", HTML.DIV({
      class: "container"
    }, "\n                ", HTML.DIV({
      class: "filter-holder"
    }, "\n                    ", HTML.DIV({
      class: "head-border-bottom"
    }, "\n                        ", Spacebars.include(view.lookupTemplate("loginFormHorizontal")), "\n                    "), "\n                "), "\n            "), "\n        " ];
  }, function() {
    return [ "\n            ", Spacebars.include(view.lookupTemplate("loading")), "\n        " ];
  }), "\n\n    ");
}));

Template.__checkName("socialLoginButtons");
Template["socialLoginButtons"] = new Template("Template.socialLoginButtons", (function() {
  var view = this;
  return [ HTML.DIV({
    id: "facebook-login",
    class: "blue-btn btns social-button",
    "data-max-rows": "1",
    "data-size": "medium",
    "data-show-faces": "false",
    "data-auto-logout-link": "false"
  }, Blaze.View("lookup:buttonForText", function() {
    return Spacebars.mustache(view.lookup("buttonForText"));
  }), " with Facebook"), HTML.Raw('\n    <!--<div id="twitter-login" style="margin-top: 10px;" class="blue-btn btns social-button" data-max-rows="1" data-size="medium" data-show-faces="false" data-auto-logout-link="false">{{buttonForText}} with Twitter</div>-->\n    '), HTML.DIV({
    id: "google-login",
    style: "margin-top: 10px;",
    class: "blue-btn btns social-button",
    "data-max-rows": "1",
    "data-size": "medium",
    "data-show-faces": "false",
    "data-auto-logout-link": "false"
  }, Blaze.View("lookup:buttonForText", function() {
    return Spacebars.mustache(view.lookup("buttonForText"));
  }), " with Google"), "\n    ", Blaze.If(function() {
    return Spacebars.call(view.lookup("dontShow"));
  }, function() {
    return HTML.Raw('\n        <!--Not properly working. will create a new user if there is not existing link.-->\n        <div id="linkedin-login" style="margin-top: 10px;" class="blue-btn btns social-button" data-max-rows="1" data-size="medium" data-show-faces="false" data-auto-logout-link="false">Login with LinkedIn</div>\n    ');
  }), HTML.Raw("\n\n    <br>\n    "), Blaze._TemplateWith(function() {
    return {
      messages: Spacebars.call(view.lookup("errorMessages"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("loginFormMessages"));
  }), HTML.Raw("\n    <br>") ];
}));

Template.__checkName("loginFormHorizontal");
Template["loginFormHorizontal"] = new Template("Template.loginFormHorizontal", (function() {
  var view = this;
  return HTML.DIV({
    class: "loginForm onpageSignin-form"
  }, "\n        ", HTML.DIV({
    class: "row"
  }, "\n            ", Spacebars.include(view.lookupTemplate("socialLoginButtons")), "\n        "), "\n        ", HTML.DIV({
    class: "row text-center"
  }, "\n            ", HTML.DIV({
    class: "col-md-6 col-sm-12"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("showForgotForm"));
  }, function() {
    return [ "\n                    ", Blaze._TemplateWith(function() {
      return {
        onPage: Spacebars.call(true)
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("loginFormResetPasswordView"));
    }), "\n                " ];
  }, function() {
    return [ "\n                    ", Blaze._TemplateWith(function() {
      return {
        onPage: Spacebars.call(true)
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("loginFormSignInView"));
    }), "\n                " ];
  }), "\n            "), "\n            ", HTML.DIV({
    class: "col-md-6 col-sm-12"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("isLandLordMode"));
  }, function() {
    return [ "\n                    ", Blaze._TemplateWith(function() {
      return {
        onPage: Spacebars.call(true)
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("loginFormSignUpViewLandlord"));
    }), "\n                " ];
  }, function() {
    return [ "\n                    ", Blaze._TemplateWith(function() {
      return {
        onPage: Spacebars.call(true)
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("loginFormSignUpView"));
    }), "\n                " ];
  }), "\n            "), "\n        "), "\n    ");
}));

Template.__checkName("loginPage");
Template["loginPage"] = new Template("Template.loginPage", (function() {
  var view = this;
  return HTML.SECTION({
    class: "mar-top-20 no-print"
  }, "\n        ", HTML.DIV({
    class: "container"
  }, "\n            ", HTML.DIV({
    class: "filter-holder"
  }, "\n                ", HTML.DIV({
    class: "head-border-bottom"
  }, "\n                    ", Spacebars.include(view.lookupTemplate("loginForm")), "\n                "), "\n            "), "\n        "), "\n    ");
}));

Template.__checkName("loginForm");
Template["loginForm"] = new Template("Template.loginForm", (function() {
  var view = this;
  return HTML.DIV({
    class: "loginForm"
  }, "\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("showForgotForm"));
  }, function() {
    return [ "\n            ", Spacebars.include(view.lookupTemplate("loginFormResetPasswordView")), "\n        " ];
  }, function() {
    return [ "\n            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("showSignupForm"));
    }, function() {
      return [ "\n                ", Blaze.If(function() {
        return Spacebars.call(view.lookup("isLandLordMode"));
      }, function() {
        return [ "\n                    ", Spacebars.include(view.lookupTemplate("loginFormSignUpViewLandlord")), "\n                " ];
      }, function() {
        return [ "\n                    ", Spacebars.include(view.lookupTemplate("loginFormSignUpView")), "\n                " ];
      }), "\n            " ];
    }, function() {
      return [ "\n                ", Spacebars.include(view.lookupTemplate("loginFormSignInView")), "\n            " ];
    }), "\n        " ];
  }), "\n    ");
}));

Template.__checkName("loginFormMessages");
Template["loginFormMessages"] = new Template("Template.loginFormMessages", (function() {
  var view = this;
  return [ Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("messages"), "info"));
  }, function() {
    return [ "\n        ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "info"));
    }, function() {
      return [ "\n            ", HTML.DIV({
        class: "changePwdAlertMsgs alert alert-info",
        role: "alert"
      }, HTML.Raw('\n                <span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>&nbsp; '), Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      }), "\n            "), "\n        " ];
    }), "\n    " ];
  }), "\n    ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("messages"), "warning"));
  }, function() {
    return [ "\n        ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "warning"));
    }, function() {
      return [ "\n            ", HTML.DIV({
        class: "changePwdAlertMsgs alert alert-warning",
        role: "alert"
      }, HTML.Raw('\n                <span class="glyphicon glyphicon-warning-sign" aria-hidden="true"></span>&nbsp; '), Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      }), "\n            "), "\n        " ];
    }), "\n    " ];
  }), "\n    ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("messages"), "success"));
  }, function() {
    return [ "\n        ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "success"));
    }, function() {
      return [ "\n            ", HTML.DIV({
        class: "changePwdAlertMsgs alert alert-success",
        role: "alert"
      }, HTML.Raw('\n                <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>&nbsp; '), Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      }), "\n            "), "\n        " ];
    }), "\n    " ];
  }), "\n    ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("messages"), "errors"));
  }, function() {
    return [ "\n        ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "errors"));
    }, function() {
      return [ "\n            ", HTML.DIV({
        class: "changePwdAlertMsgs alert alert-danger",
        role: "alert"
      }, HTML.Raw('\n                <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>&nbsp; '), Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      }), "\n            "), "\n        " ];
    }), "\n    " ];
  }), "\n    ", Blaze.If(function() {
    return false;
  }, function() {
    return HTML.Raw('\n\n\n        <!--<div class="changePwdAlertMsgs">-->\n            <!--{{#each messages.alerts}}-->\n        <!--<p class="color-text alerts">{{reason}}</p>-->\n            <!--{{/each}}-->\n        <!--</div>-->\n    ');
  }) ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"countries.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/countries.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * Created by njanjanam on 25/12/2017.
 */
if (Meteor.isClient) {
  Countries = function () {
    return [{
      name: 'Afghanistan'
    }, {
      name: 'Albania'
    }, {
      name: 'Algeria'
    }, {
      name: 'Andorra'
    }, {
      name: 'Angola'
    }, {
      name: 'Antigua and Barbuda'
    }, {
      name: 'Argentina'
    }, {
      name: 'Armenia'
    }, {
      name: 'Aruba'
    }, {
      name: 'Australia'
    }, {
      name: 'Austria'
    }, {
      name: 'Azerbaijan'
    }, {
      name: 'Bahamas, The'
    }, {
      name: 'Bahrain'
    }, {
      name: 'Bangladesh'
    }, {
      name: 'Barbados'
    }, {
      name: 'Belarus'
    }, {
      name: 'Belgium'
    }, {
      name: 'Belize'
    }, {
      name: 'Benin'
    }, {
      name: 'Bhutan'
    }, {
      name: 'Bolivia'
    }, {
      name: 'Bosnia and Herzegovina'
    }, {
      name: 'Botswana'
    }, {
      name: 'Brazil'
    }, {
      name: 'Brunei'
    }, {
      name: 'Bulgaria'
    }, {
      name: 'Burkina Faso'
    }, {
      name: 'Burma'
    }, {
      name: 'Burundi'
    }, {
      name: 'Cambodia'
    }, {
      name: 'Cameroon'
    }, {
      name: 'Canada'
    }, {
      name: 'Cape Verde'
    }, {
      name: 'Central African Republic'
    }, {
      name: 'Chad'
    }, {
      name: 'Chile'
    }, {
      name: 'China'
    }, {
      name: 'Colombia'
    }, {
      name: 'Comoros'
    }, {
      name: 'Congo, Democratic Republic of the'
    }, {
      name: 'Congo, Republic of the'
    }, {
      name: 'Costa Rica'
    }, {
      name: 'Cote d\'Ivoire'
    }, {
      name: 'Croatia'
    }, {
      name: 'Cuba'
    }, {
      name: 'Curacao'
    }, {
      name: 'Cyprus'
    }, {
      name: 'Czech Republic'
    }, {
      name: 'Denmark'
    }, {
      name: 'Djibouti'
    }, {
      name: 'Dominica'
    }, {
      name: 'Dominican Republic'
    }, {
      name: 'East Timor (see Timor-Leste)'
    }, {
      name: 'Ecuador'
    }, {
      name: 'Egypt'
    }, {
      name: 'El Salvador'
    }, {
      name: 'Equatorial Guinea'
    }, {
      name: 'Eritrea'
    }, {
      name: 'Estonia'
    }, {
      name: 'Ethiopia'
    }, {
      name: 'Fiji'
    }, {
      name: 'Finland'
    }, {
      name: 'France'
    }, {
      name: 'Gabon'
    }, {
      name: 'Gambia, The'
    }, {
      name: 'Georgia'
    }, {
      name: 'Germany'
    }, {
      name: 'Ghana'
    }, {
      name: 'Greece'
    }, {
      name: 'Grenada'
    }, {
      name: 'Guatemala'
    }, {
      name: 'Guinea'
    }, {
      name: 'Guinea-Bissau'
    }, {
      name: 'Guyana'
    }, {
      name: 'Haiti'
    }, {
      name: 'Holy See'
    }, {
      name: 'Honduras'
    }, {
      name: 'Hong Kong'
    }, {
      name: 'Hungary'
    }, {
      name: 'Iceland'
    }, {
      name: 'India'
    }, {
      name: 'Indonesia'
    }, {
      name: 'Iran'
    }, {
      name: 'Iraq'
    }, {
      name: 'Ireland'
    }, {
      name: 'Israel'
    }, {
      name: 'Italy'
    }, {
      name: 'Jamaica'
    }, {
      name: 'Japan'
    }, {
      name: 'Jordan'
    }, {
      name: 'Kazakhstan'
    }, {
      name: 'Kenya'
    }, {
      name: 'Kiribati'
    }, {
      name: 'Korea, North'
    }, {
      name: 'Korea, South'
    }, {
      name: 'Kosovo'
    }, {
      name: 'Kuwait'
    }, {
      name: 'Kyrgyzstan'
    }, {
      name: 'Laos'
    }, {
      name: 'Latvia'
    }, {
      name: 'Lebanon'
    }, {
      name: 'Lesotho'
    }, {
      name: 'Liberia'
    }, {
      name: 'Libya'
    }, {
      name: 'Liechtenstein'
    }, {
      name: 'Lithuania'
    }, {
      name: 'Luxembourg'
    }, {
      name: 'Macau'
    }, {
      name: 'Macedonia'
    }, {
      name: 'Madagascar'
    }, {
      name: 'Malawi'
    }, {
      name: 'Malaysia'
    }, {
      name: 'Maldives'
    }, {
      name: 'Mali'
    }, {
      name: 'Malta'
    }, {
      name: 'Marshall Islands'
    }, {
      name: 'Mauritania'
    }, {
      name: 'Mauritius'
    }, {
      name: 'Mexico'
    }, {
      name: 'Micronesia'
    }, {
      name: 'Moldova'
    }, {
      name: 'Monaco'
    }, {
      name: 'Mongolia'
    }, {
      name: 'Montenegro'
    }, {
      name: 'Morocco'
    }, {
      name: 'Mozambique'
    }, {
      name: 'Namibia'
    }, {
      name: 'Nauru'
    }, {
      name: 'Nepal'
    }, {
      name: 'Netherlands'
    }, {
      name: 'Netherlands Antilles'
    }, {
      name: 'New Zealand'
    }, {
      name: 'Nicaragua'
    }, {
      name: 'Niger'
    }, {
      name: 'Nigeria'
    }, {
      name: 'North Korea'
    }, {
      name: 'Norway'
    }, {
      name: 'Oman'
    }, {
      name: 'Pakistan'
    }, {
      name: 'Palau'
    }, {
      name: 'Palestinian Territories'
    }, {
      name: 'Panama'
    }, {
      name: 'Papua New Guinea'
    }, {
      name: 'Paraguay'
    }, {
      name: 'Peru'
    }, {
      name: 'Philippines'
    }, {
      name: 'Poland'
    }, {
      name: 'Portugal'
    }, {
      name: 'Qatar'
    }, {
      name: 'Romania'
    }, {
      name: 'Russia'
    }, {
      name: 'Rwanda'
    }, {
      name: 'Saint Kitts and Nevis'
    }, {
      name: 'Saint Lucia'
    }, {
      name: 'Saint Vincent and the Grenadines'
    }, {
      name: 'Samoa '
    }, {
      name: 'San Marino'
    }, {
      name: 'Sao Tome and Principe'
    }, {
      name: 'Saudi Arabia'
    }, {
      name: 'Senegal'
    }, {
      name: 'Serbia'
    }, {
      name: 'Seychelles'
    }, {
      name: 'Sierra Leone'
    }, {
      name: 'Singapore'
    }, {
      name: 'Sint Maarten'
    }, {
      name: 'Slovakia'
    }, {
      name: 'Slovenia'
    }, {
      name: 'Solomon Islands'
    }, {
      name: 'Somalia'
    }, {
      name: 'South Africa'
    }, {
      name: 'South Korea'
    }, {
      name: 'South Sudan'
    }, {
      name: 'Spain '
    }, {
      name: 'Sri Lanka'
    }, {
      name: 'Sudan'
    }, {
      name: 'Suriname'
    }, {
      name: 'Swaziland '
    }, {
      name: 'Sweden'
    }, {
      name: 'Switzerland'
    }, {
      name: 'Syria'
    }, {
      name: 'Taiwan'
    }, {
      name: 'Tajikistan'
    }, {
      name: 'Tanzania'
    }, {
      name: 'Thailand '
    }, {
      name: 'Timor-Leste'
    }, {
      name: 'Togo'
    }, {
      name: 'Tonga'
    }, {
      name: 'Trinidad and Tobago'
    }, {
      name: 'Tunisia'
    }, {
      name: 'Turkey'
    }, {
      name: 'Turkmenistan'
    }, {
      name: 'Tuvalu'
    }, {
      name: 'Uganda'
    }, {
      name: 'Ukraine'
    }, {
      name: 'United Arab Emirates'
    }, {
      name: 'United Kingdom'
    }, {
      name: 'United States'
    }, {
      name: 'Uruguay'
    }, {
      name: 'Uzbekistan'
    }, {
      name: 'Vanuatu'
    }, {
      name: 'Venezuela'
    }, {
      name: 'Vietnam'
    }, {
      name: 'Yemen'
    }, {
      name: 'Zambia'
    }, {
      name: 'Zimbabwe'
    }];
  };

  UI.registerHelper('countries', function () {
    return Countries();
  }); //     {{#each countries}}
  // <option value="{{name}}">{{name}}</option>
  //     {{/each}}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"general.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/general.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template;
module.link("meteor/templating", {
  Template: function (v) {
    Template = v;
  }
}, 0);
Template.loginForm.helpers({
  showSignupForm: function () {
    return Session.get('showSignupForm');
  },
  showForgotForm: function () {
    return Session.get('showForgotForm');
  },
  isLandLordMode: function () {
    return Session.get('isLandLordMode');
  }
});
Template.socialLoginButtons.onCreated(function () {
  Session.set('loginFlowStart', true);
  Session.set('loginFlowComplete', undefined);
  delete Session.keys.loginFlowComplete;
  this.errorMessages = new ReactiveVar({});
});
Template.socialLoginButtons.helpers({
  showSignupForm: function () {
    return Session.get('showSignupForm');
  },
  showForgotForm: function () {
    return Session.get('showForgotForm');
  },
  errorMessages: function () {
    return Template.instance().errorMessages.get();
  },
  buttonForText: function () {
    var buttonFor;
    if (Template.instance().data) buttonFor = Template.instance().data.buttonFor;

    switch (buttonFor) {
      case 'login':
        return 'Login';

      case 'signup':
        return 'Signup';

      default:
        return 'Login / Signup';
    }
  }
});
Template.socialLoginButtons.events({
  'click #facebook-login': function (event) {
    var templateInstance = Template.instance();
    templateInstance.errorMessages.set({});
    Meteor.loginWithFacebook({}, function (err) {
      if (err) {
        console.log(err);
        var msg = 'Connect with Facebook failed. ';
        if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
          msg += err.reason + ' ';
        } else if (err.message) msg += err.message + '. ';
        msg += "Please try again. Contact us if needed.";
        var errors = [];
        errors.push({
          "error": "SOCIALLOGIN_FAIL",
          "reason": msg
        });
        templateInstance.errorMessages.set({
          errors: errors
        });
      } else {
        if (templateInstance.data.usedInDlg) {
          Session.set('showLoginSignupFancyBoxDialog', false);
          Session.set('showForgotForm', false);
          Session.set('showSignupForm', true);
          Session.set('showLoginDialog', true);
        }

        Session.set('loginFlowComplete', true);
        Session.set('loginFlowStart', undefined);
        delete Session.keys.loginFlowStart;
      }
    });
  },
  'click #twitter-login': function (event) {
    var templateInstance = Template.instance();
    templateInstance.errorMessages.set({});
    Meteor.loginWithTwitter({}, function (err) {
      if (err) {
        console.log(err);
        var msg = 'Connect with Twitter failed. ';
        if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
          msg += err.reason + ' ';
        } else if (err.message) msg += err.message + '. ';
        msg += "Please try again. Contact us if needed.";
        var errors = [];
        errors.push({
          "error": "SOCIALLOGIN_FAIL",
          "reason": msg
        });
        templateInstance.errorMessages.set({
          errors: errors
        });
      } else {
        if (templateInstance.data.usedInDlg) {
          Session.set('showLoginSignupFancyBoxDialog', false);
          Session.set('showForgotForm', false);
          Session.set('showSignupForm', true);
          Session.set('showLoginDialog', true);
        }

        Session.set('loginFlowComplete', true);
        Session.set('loginFlowStart', undefined);
        delete Session.keys.loginFlowStart;
      }
    });
  },
  'click #google-login': function (event) {
    var templateInstance = Template.instance();
    templateInstance.errorMessages.set({});
    Meteor.loginWithGoogle({}, function (err) {
      if (err) {
        console.log(err);
        var msg = 'Connect with Google failed. ';
        if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
          msg += err.reason + ' ';
        } else if (err.message) msg += err.message + '. ';
        msg += "Please try again. Contact us if needed.";
        var errors = [];
        errors.push({
          "error": "SOCIALLOGIN_FAIL",
          "reason": msg
        });
        templateInstance.errorMessages.set({
          errors: errors
        });
      } else {
        if (templateInstance.data.usedInDlg) {
          Session.set('showLoginSignupFancyBoxDialog', false);
          Session.set('showForgotForm', false);
          Session.set('showSignupForm', true);
          Session.set('showLoginDialog', true);
        }

        Session.set('loginFlowComplete', true);
        Session.set('loginFlowStart', undefined);
        delete Session.keys.loginFlowStart;
      }
    });
  },
  'click #linkedin-login': function (event) {
    var templateInstance = Template.instance();
    templateInstance.errorMessages.set({});
    Meteor.loginWithLinkedIn({}, function (err) {
      if (err) {
        console.log(err);
        var msg = 'Connect with LinkedIn failed. ';
        if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
          msg += err.reason + ' ';
        } else if (err.message) msg += err.message + '. ';
        msg += "Please try again. Contact us if needed.";
        var errors = [];
        errors.push({
          "error": "SOCIALLOGIN_FAIL",
          "reason": msg
        });
        templateInstance.errorMessages.set({
          errors: errors
        });
      } else {
        if (templateInstance.data.usedInDlg) {
          Session.set('showLoginSignupFancyBoxDialog', false);
          Session.set('showForgotForm', false);
          Session.set('showSignupForm', true);
          Session.set('showLoginDialog', true);
        }

        Session.set('loginFlowComplete', true);
        Session.set('loginFlowStart', undefined);
        delete Session.keys.loginFlowStart;
      }
    });
  }
});
Template.loginPageHorizontal.onCreated(function () {
  var instance = this;
  instance.isTempLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    instance.subscribe('userData');

    if (instance.subscriptionsReady()) {
      instance.isTempLoaded.set(true);
    }
  });
});
Template.loginPageHorizontal.helpers({
  isTemplateLoaded: function () {
    return Template.instance().subscriptionsReady();
  }
});
Template.loginFormHorizontal.helpers({
  showForgotForm: function () {
    return Session.get('showForgotForm');
  },
  isLandLordMode: function () {
    var mode = '';
    if (Template.instance().data) mode = Template.instance().data.isLandLordMode;
    return mode; // return Session.get('isLandLordMode');
  }
});
Template.loginFormHorizontal.onRendered(function () {
  var user = Meteor.user(); //when u load this form if the user is alredy loggedin then throw an event.

  if (user) Session.set('loginFlowComplete', true);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/helpers.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
window.LoginFormSharedHelpers = {
  showForm: function () {
    return Template.instance().showForm.get();
  },
  isLoading: function () {
    return Template.instance().isLoading.get();
  },
  loginFailedError: function () {
    return Template.instance().loginFailedError.get();
  },
  messages: function () {
    // console.log(Template.instance().formMessages.get())
    return Template.instance().formMessages.get();
  },
  hasError: function (error) {
    // True here means the field is valid
    // We're checking if theres some other message to display
    if (error !== true && typeof error !== "undefined") {
      return "has-error has-feedback";
    }

    return false;
  },
  formErrors: function () {
    return Template.instance().formErrors.get();
  },
  uniqueId: function () {
    // return Template.instance().uniqueId;
    return 1;
  },
  services: function () {
    var serviceHelper = new ReactionServiceHelper();
    return serviceHelper.services();
  },
  shouldShowSeperator: function () {
    var serviceHelper = new ReactionServiceHelper();
    var services = serviceHelper.services();

    var enabledServices = _.where(services, {
      enabled: true
    });

    return !!Package["accounts-password"] && enabledServices.length > 0;
  },
  hasPasswordService: function () {
    return !!Package["accounts-password"];
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validation.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/accounts/validation.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
$.validator.setDefaults({
  rules: {
    "address.address": {
      required: true,
      minlength: 2
    },
    "contacts.0.phone": {
      required: false,
      digits: true // minlength:10,
      // maxlength:10

    },
    "baths": {
      required: true,
      range: [1, 100]
    },
    "numBedRoomCount": {
      required: true,
      range: [1, 100]
    },
    email: {
      email: true
    } // password: {
    //     required: true,
    //     minlength: 6
    // }

  },
  messages: {
    email: {
      required: "You must enter an email address.",
      email: "You've entered an invalid email address."
    },
    password: {
      required: "You must enter a password.",
      minlength: "Your password must be at least {0} characters."
    }
  }
});
window.LoginFormValidation = {
  username: function (username) {
    // Valid
    if (username.length >= 3) {
      return true;
    } // Invalid


    return {
      "error": "INVALID_USERNAME",
      "reason": "Username must be at least 3 characters long"
    };
  },
  mobile: function (mobile, optional) {
    mobile = mobile.trim(); // Valid

    if (optional === true && mobile.length === 0) {
      return true;
    } else if (/^\d{10}$/.test(mobile)) {
      return true;
    }

    if (mobile.length === 0) {
      //Removed 10 digit validation.
      // Invalid
      return {
        error: "INVALID_MOBILE",
        reason: "Please enter a valid mobile number" //"Please enter a valid 10 digit mobile number in format 0891234567"

      };
    }

    return true;
  },
  email: function (email, optional) {
    email = email.trim();
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; // Valid

    if (optional === true && email.length === 0) {
      return true;
    } else if (re.test(email)) {
      return true;
    } // Invalid


    return {
      error: "INVALID_EMAIL",
      reason: "Please enter a valid email address in format pat@gmail.com"
    };
  },
  password: function (password, options) {
    // Must have one number and/or symbol
    var validPasswordRegex = /^.*(?=.*[a-z])(?=.*[\d\W]).*$/;
    options = options || {}; // Only check if a password has been entered at all.
    // This is usefull for the login forms

    if (options.validationLevel === 'exists') {
      if (password.length > 0) {
        return true;
      } else {
        return {
          error: "INVALID_PASSWORD",
          reason: "Password is required"
        };
      }
    }

    if (options.validationLevel === 'length') {
      if (password.length < 6) {
        return {
          error: "INVALID_PASSWORD",
          reason: "Password must be at least 6 characters long"
        };
      } else if (password.length > 30) {
        return {
          error: "INVALID_PASSWORD",
          reason: "Password must be less than 30 characters long"
        };
      } else return true;
    } // ---
    // Validate the password pased on some rules
    // This is useful for cases where a password needs to be created or updated.
    //


    if (password.length < 6) {
      return {
        error: "INVALID_PASSWORD",
        reason: "Password must be at least 6 characters long"
      };
    }

    if (password.match(validPasswordRegex) === null) {
      return {
        error: "INVALID_PASSWORD",
        reason: "Password must have one number and/or symbol"
      };
    } // Otherwise the password is valid


    return true;
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"template.main.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/template.main.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.body.addContent((function() {
  var view = this;
  return HTML.Raw('<!-- Google Tag Manager (noscript) -->\n    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NLVCPLK" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>\n    <!-- End Google Tag Manager (noscript) -->\n    <noscript><div style="padding: 40px; font-size: 200%; text-align: center;">This site requires JavaScript. Please enable it in your browser settings.</div></noscript>');
}));
Meteor.startup(Template.body.renderToDocument);

Template.__checkName("loading");
Template["loading"] = new Template("Template.loading", (function() {
  var view = this;
  return HTML.Raw('<div class="container text-center mar-top-20 pad-btm-30">\n        <div class="filter-holder">\n            <div class="mar-top-30">\n                <h2>Loading...</h2>\n            </div>\n        </div>\n    </div>');
}));

Template.__checkName("notFound");
Template["notFound"] = new Template("Template.notFound", (function() {
  var view = this;
  return HTML.Raw('<div class="container text-center mar-top-20 pad-btm-30">\n        <div class="filter-holder">\n            <div class="mar-top-30">\n                <h2>Page Not Found</h2><br>\n                <button class="blue-btn btns backBtn" type="button">Try again</button>\n            </div>\n        </div>\n    </div>');
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"main.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/main.js                                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * Created by njanjanam on 05/04/2017.
 */
Template.notFound.events({
  "click .backBtn": function (event, template) {
    var prevRoute = Session.get('prevRoute');

    if (prevRoute) {
      Router.go(prevRoute.name, prevRoute.args);
      Session.set('prevRoute', false);

      if (prevRoute.scrollTo) {
        scrollTo(prevRoute.scrollTo, 0, 500);
      }
    } else {
      history.go(-1);
    }
  }
});
Template.registerHelper("cdnPath", function (url) {
  return cdnPath(url);
});
Template.registerHelper("pathFor", function (hash) {
  try {
    var params = {};
    var query = {};
    var route = '';
    if (typeof hash === 'string' || hash instanceof String) route = hash;

    if (hash.hash) {
      if (hash.hash.route) {
        route = hash.hash.route;
        delete hash.hash.route;
      }

      if (hash.hash.query) {
        query = hash.hash.query;
        delete hash.hash.query;
      }

      if (hash.hash.data) {
        params = hash.hash.data;
        delete hash.hash.data;
      } else {
        params = hash.hash;
      }
    }

    return FlowRouter.path(route, params, query); // return FlowRouter.path(pathDef, params, queryParams);
  } catch (e) {
    console.log(e);
  }

  return '';
});
Template.registerHelper("urlFor", function (hash) {
  try {
    var params = {};
    var query = {};
    var route = '';
    if (typeof hash === 'string' || hash instanceof String) route = hash;

    if (hash.hash) {
      if (hash.hash.route) {
        route = hash.hash.route;
        delete hash.hash.route;
      }

      if (hash.hash.query) {
        query = hash.hash.query;
        delete hash.hash.query;
      }

      if (hash.hash.data) {
        params = hash.hash.data;
        delete hash.hash.data;
      } else {
        params = hash.hash;
      }
    }

    return FlowRouter.url(route, params, query);
  } catch (e) {
    console.log(e);
  }

  return '';
});
Template.registerHelper("hostname", function () {
  return Meteor.absoluteUrl();
});
Template.registerHelper("titleCase", function (str) {
  return titleCase(str);
});
Template.registerHelper("nlToBr", function (str) {
  if (!str) return '';
  return str.replace(/(?:\r\n|\r|\n)/g, '<br />');
});
Template.registerHelper("arrLength", function (arr) {
  if (Array.isArray(arr)) return arr.length;else 0;
});
Template.registerHelper("dontShow", function () {
  return false;
});
UI.registerHelper("getProfilePic", function () {
  var user = Meteor.user(); // debugger;
  // if(user.services)
  // if(user.services.twitter)
  // if(user.services.twitter.profile_image_url){
  //     return user.services.twitter.profile_image_url;
  // }

  if (user.profile.picture) {
    try {
      if (user.services.facebook) if (user.services.facebook.indexOf('?width=40') == -1) return user.profile.picture + "?width=40"; //@BCompatibility : adding ?width=40 to it
    } catch (e) {}

    return user.profile.picture;
  }

  return "/images/user-img.png";
});
UI.registerHelper("addCommaToEach", function (arr) {
  if (!arr) return '';
  return arr.join(', ');
});
Template.registerHelper("objectToPairs", function (object) {
  return _.map(object, function (value, key) {
    return {
      key: key,
      value: value
    };
  });
});
UI.registerHelper("dateFormat", function (text) {
  var date = new Date(text);
  if (date.toString() == "Invalid Date") return 'N/A';
  return date.toDateString();
});
UI.registerHelper("dateTimeFormat", function (text) {
  var date = new Date(text);
  if (date.toString() == "Invalid Date") return 'N/A';
  return date.toDateString() + ' ' + date.toLocaleTimeString();
});
UI.registerHelper("possessionDate", function (inputDate) {
  var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  var monthNames = ["JAN", "FEB", "MAR", "APR", "MAY", "JUNE", "JULY", "AUG", "SEPT", "OCT", "NOV", "DEC"];
  var date = new Date(inputDate);
  var day = date.getDate();
  var monthIndex = date.getMonth();
  var year = date.getFullYear(); //return date.toDateString();

  return monthNames[monthIndex] + ' ' + year;
});
Template.registerHelper("displayName", function () {
  try {
    var user = Meteor.user();

    if (user) {
      if (user.profile && user.profile.name) {
        return user.profile.name;
      }
    }
  } catch (e) {}

  return "Guest";
});
Template.registerHelper("fName", function (displayUser) {
  var user = displayUser || Meteor.user();

  if (user && user.profile && user.profile.name) {
    return user.profile.name.split(" ")[0];
  } else if (user && user.username) {
    return user.username.name.split(" ")[0];
  }

  if (user && user.services) {
    var username = function () {
      switch (false) {
        case !user.services.twitter:
          return user.services.twitter.first_name;

        case !user.services.google:
          return user.services.google.given_name;

        case !user.services.facebook:
          return user.services.facebook.first_name;

        case !user.services.instagram:
          return user.services.instagram.first_name;

        case !user.services.pinterest:
          return user.services.pinterest.first_name;

        default:
          return i18n.t("accountsUI.guest") || "Guest";
      }
    }();

    return username;
  }

  return i18n.t("accountsUI.signIn") || "Sign in";
});
Template.registerHelper("numDifferentiation", function (val) {
  if (isNaN(val)) return 0;
  val = parseInt(val);
  if (val >= 1000000000) val = (val / 1000000000).toFixed(2) + ' Billion';else if (val >= 1000000) val = (val / 1000000).toFixed(2) + ' Million';else if (val >= 1000) val = val.toFixed(2);else val = val.toFixed(0);
  return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
});

isLoggedOn = function () {
  if (Meteor.userId()) {
    return true;
  }

  return false;
};

scrollTo = function (ele, adjustment, delay) {
  setTimeout(function () {
    if ($(ele).length) {
      var to = $(ele).first().offset().top + adjustment;
      if (to < 0) to = 0;
      $('html, body').animate({
        scrollTop: to
      }, 500);
    }
  }, delay);
};

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"imports":{"ui":{"layout":{"footer.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/footer.html                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.footer.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.footer.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/template.footer.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("footerExtended");
Template["footerExtended"] = new Template("Template.footerExtended", (function() {
  var view = this;
  return [ HTML.Raw("<!-- footer -->\n    "), HTML.SECTION({
    class: "footer-div"
  }, "\n        ", HTML.DIV({
    class: "container"
  }, "\n            ", HTML.DIV({
    class: "row"
  }, "\n                ", HTML.DIV({
    class: "col-md-9 col-sm-12 col-xs-12 foot-menu"
  }, "\n                    ", HTML.DIV({
    class: "col-md-3 col-sm-3 col-xs-12 foot-logo"
  }, "\n                        ", HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "home");
    }
  }, HTML.IMG({
    src: function() {
      return Spacebars.mustache(view.lookup("cdnPath"), "/images/spot-my-crib-logo.png");
    },
    height: "32px",
    alt: ""
  })), "\n                    "), "\n                    ", HTML.DIV({
    class: "col-md-9 col-sm-9 col-xs-12 pad0"
  }, "\n                        ", HTML.DIV({
    class: "col-md-4 col-sm-4 col-xs-12"
  }, "\n                            ", HTML.UL(HTML.Raw('\n                                <li><h6 class="pad-bot-2">TENANTS</h6></li>\n                                '), HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("RouteB"), "rent-in-dublin-ireland");
    }
  }, "Rent in Dublin")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("RouteB"), "rent-in-cork-ireland");
    }
  }, "Rent in Cork")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("RouteB"), "rent-in-kildare-ireland");
    }
  }, "Rent in Kildare")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("RouteB"), "rent-in-galway-ireland");
    }
  }, "Rent in Galway")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("RouteB"), "rent-in-meath-ireland");
    }
  }, "Rent in Meath")), HTML.Raw("\n                                <!--<li><a href=\"{{urlFor 'privacy'}}\">Student Accomodiation</a></li>-->\n                                <!--<li><a href=\"{{urlFor 'cookiepolicy'}}\">Apartment Sharing</a></li>-->\n                                <!--<li><a href=\"{{urlFor 'cookiepolicy'}}\">Holiday Homes</a></li>-->\n                            ")), "\n                        "), "\n                        ", HTML.DIV({
    class: "col-md-4 col-sm-4 col-xs-12"
  }, "\n                            ", HTML.UL(HTML.Raw('\n                                <!--<h6>SpotMyCrib</h6>-->\n                                <li><h6 class="pad-bot-2">LANDLORS</h6></li>\n                                '), HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "advertisewithus");
    }
  }, "List My Property")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "estateagent");
    }
  }, "Estate Agents/Landlords")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "howitworks");
    }
  }, "How it Works?")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "faqs");
    }
  }, "FAQs")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "contactus");
    }
  }, "Contact Us")), HTML.Raw('\n\n                                <!--<li><a id="video1" style="cursor: pointer;">How it Works?</a></li>-->\n                            ')), "\n                        "), HTML.Raw('\n                        <!--<div class="col-md-4 col-sm-4 col-xs-12">-->\n                        <!--<ul>-->\n                        <!--&lt;!&ndash;<h6>SpotMyCrib</h6>&ndash;&gt;-->\n                        <!--<li><h6 class="pad-bot-2">COMPANY</h6></li>-->\n                        <!--<li><a href="{{urlFor \'about\'}}">About Us</a></li>-->\n                        <!--&lt;!&ndash;<li><a href="{{urlFor \'howitworks\'}}" >How it Works?</a></li>&ndash;&gt;-->\n                        <!--&lt;!&ndash;<li><a href="{{urlFor \'estateagent\'}}">Estate Agents/Landlords</a></li>&ndash;&gt;-->\n                        <!--&lt;!&ndash;<li><a href="{{urlFor \'faqs\'}}">FAQs</a></li>&ndash;&gt;-->\n                        <!--<li><a href="{{urlFor \'contactus\'}}">Contact Us</a></li>-->\n\n                        <!--&lt;!&ndash;<li><a id="video1" style="cursor: pointer;">How it Works?</a></li>&ndash;&gt;-->\n                        <!--</ul>-->\n                        <!--</div>-->\n                        '), HTML.DIV({
    class: "col-md-4 col-sm-4 col-xs-12"
  }, "\n                            ", HTML.UL(HTML.Raw('\n                                <!--<ul class="new-footer">-->\n                                <li><h6 class="pad-bot-2">SPOTMYCRIB</h6></li>\n                                <!--<li><h6 class="pad-bot-2">LEGAL</h6></li>-->\n                                '), HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "about");
    }
  }, "About Us")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "bloghome");
    }
  }, "Blog")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "careers");
    }
  }, "Careers")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "gdpr");
    }
  }, "Data Protection / EU GDPR")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "terms");
    }
  }, "Legal")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "privacy");
    }
  }, "Privacy Policy")), "\n                                ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("urlFor"), "cookiepolicy");
    }
  }, "Cookie Policy")), "\n                            "), "\n                        "), "\n                    "), "\n                "), "\n\n                ", HTML.DIV({
    class: "col-md-3 col-sm-12 col-xs-12 social-icon"
  }, HTML.Raw('\n                    <!--<div class="col-md-5 col-sm-12 col-xs-12 padding0">-->\n                    <!--&lt;!&ndash;<ul class="toll-free">&ndash;&gt;-->\n                    <!--&lt;!&ndash;<li><a href="tel:+353892213737">&ndash;&gt;-->\n                    <!--&lt;!&ndash;<div class="pull-left menu-padding"><img src="/images/call-icon.png" /></div>&ndash;&gt;-->\n                    <!--&lt;!&ndash;<div class="pull-right">&ndash;&gt;-->\n                    <!--&lt;!&ndash;<h4 class="text-left">CALL US</h4>&ndash;&gt;-->\n                    <!--&lt;!&ndash;<h5 style="line-height: 15px;">+353 892213737</h5>&ndash;&gt;-->\n                    <!--&lt;!&ndash;</div></a>&ndash;&gt;-->\n                    <!--&lt;!&ndash;</li>&ndash;&gt;-->\n                    <!--&lt;!&ndash;</ul>&ndash;&gt;-->\n                    <!--</div>-->\n                    '), HTML.DIV({
    class: "col-md-12 col-sm-12 col-xs-12"
  }, "\n                        ", HTML.UL("\n                            ", HTML.LI(HTML.A({
    href: "https://www.facebook.com/SpotMyCrib/",
    target: "_blank"
  }, HTML.IMG({
    src: function() {
      return Spacebars.mustache(view.lookup("cdnPath"), "/images/facebook-icon.png");
    },
    alt: ""
  }))), "\n                            ", HTML.LI(HTML.A({
    href: "https://twitter.com/SpotMyCrib",
    target: "_blank"
  }, HTML.IMG({
    src: function() {
      return Spacebars.mustache(view.lookup("cdnPath"), "/images/twitter-icon.png");
    },
    alt: ""
  }))), "\n                            ", HTML.LI(HTML.A({
    href: "https://www.linkedin.com/company/11223356/",
    target: "_blank"
  }, HTML.IMG({
    src: function() {
      return Spacebars.mustache(view.lookup("cdnPath"), "/images/linkedin-icon.png");
    },
    alt: ""
  }))), "\n                        "), "\n                    "), "\n                "), "\n            "), "\n        "), "\n    "), HTML.Raw('\n    <section class="copyright" style="display:none;">\n        <div class="container">\n            <ul class="footer-left visible-md">\n                <!--<li>Copyright &copy; 2017 SpotMyCrib. All rights reserved. </li>-->\n                <li>SpotMyCrib. </li>\n            </ul>\n            <!--<ul class="footer-right">-->\n            <!--<li><a href="{{urlFor \'privacy\'}}" >Privacy Policy</a></li>-->\n            <!--<li><a href="{{urlFor \'terms\'}}">Terms and Conditions</a></li>-->\n            <!--</ul>-->\n            <ul class="footer-left hidden-md">\n                <li>SpotMyCrib. </li>\n            </ul>\n        </div>\n    </section>\n    <!-- footer -->\n\n    <!-- video -->\n    <div id="video-div1" style="display:none;">\n        <iframe width="560" height="315" src="" frameborder="0" allowfullscreen=""></iframe>\n    </div>\n    <!-- video -->') ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"header.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/header.html                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.header.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.header.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/template.header.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("headerExtended");
Template["headerExtended"] = new Template("Template.headerExtended", (function() {
  var view = this;
  return [ Blaze.If(function() {
    return Spacebars.call(view.lookup("showCookieConsent"));
  }, function() {
    return [ "\n        ", HTML.SECTION({
      class: "scroll-menu-div cookieConsentArea",
      style: ""
    }, "\n            ", HTML.DIV({
      class: "container"
    }, "\n\n                ", HTML.DIV({
      class: "scroll-menu"
    }, "\n                    ", HTML.DIV({
      class: "left-menu text-center",
      style: "color: white;"
    }, HTML.P("  SpotMyCrib uses cookies. By continuing to use this site you consent to the use of cookies in accordance to our  ", HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("pathFor"), "cookiepolicy");
      },
      class: ""
    }, " cookie policy "), HTML.Raw('.<button class="green-btn btns cookieConsentBtn" type="button" style="\n    margin-left: 20px;\n">I understand</button>')), "\n\n                    "), "\n\n                "), "\n            "), "\n        "), "\n    " ];
  }), HTML.Raw("\n    <!-- Header -->\n    "), HTML.SECTION({
    class: "header"
  }, "\n        ", HTML.DIV({
    class: "container"
  }, "\n            ", HTML.DIV({
    class: "logo-holder-div"
  }, HTML.Raw('\n                <div class="xs-menu-icon-master">\n                <div class="xs-menu-icon">\n                    <span class="menu-xs sprite"></span>\n                </div>\n                </div>\n\n                '), HTML.DIV({
    class: "logo-holder"
  }, "\n                    ", HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "home");
    }
  }, "\n                        ", HTML.IMG({
    src: function() {
      return Spacebars.mustache(view.lookup("cdnPath"), "/images/spot-my-crib-logo.png");
    },
    alt: "",
    class: "logo-big"
  }), "\n                        ", HTML.IMG({
    src: function() {
      return Spacebars.mustache(view.lookup("cdnPath"), "/images/spotmycrib-logo-130.jpg");
    },
    alt: "",
    class: "logo-xs"
  }), "\n                    "), "\n                "), "\n                ", HTML.DIV({
    class: "menu"
  }, "\n\n                    ", HTML.UL(HTML.Raw('\n                        <!--<li><a href="tel:+353892213737"><div class="pull-left menu-padding"><img src="/images/call-icon.png" /></div>-->\n                        <!--<div class="pull-right hidden-xs hidden-sm">-->\n                        <!--<h4 class="text-left">CALL US</h4>-->\n                        <!--<h5>+353 892213737</h5>-->\n                        <!--</div></a>-->\n                        <!--</li>-->\n                        <!--<li class="right-border hidden-xs"><a href="{{pathFor \'about\'}}">ABOUT US</a></li>-->\n                        <!--<li class="right-border hidden-xs"><a href="{{pathFor \'faqs\'}}">FAQ</a></li>-->\n                        <!--<li class="hidden-xs"><a href="{{pathFor \'contactus\'}}">CONTACT US</a></li>-->\n                        <li class="hidden-xs"><button class="btns green-btn addPropertyHeaderBtn" type="button"><span class="glyphicon glyphicon-object-align-bottom" aria-hidden="true"></span> Advertise property</button></li>\n                        '), Blaze.If(function() {
    return Spacebars.call(view.lookup("currentUser"));
  }, function() {
    return [ "\n                            ", Blaze.Unless(function() {
      return Spacebars.call(view.lookup("isAgentRole"));
    }, function() {
      return [ "\n                                ", HTML.LI({
        class: "login-menu hidden-xs"
      }, HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), "account/mybids");
        }
      }, "MY BIDS")), "\n                            " ];
    }), "\n                            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("isAgentRole"));
    }, function() {
      return [ "\n                                ", HTML.LI({
        class: "login-menu hidden-xs"
      }, HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), "account/myProperties");
        }
      }, HTML.Raw('<span class="glyphicon glyphicon-object-align-bottom" aria-hidden="true"></span> MY PROPERTIES'))), "\n                            " ];
    }), "\n                            ", HTML.LI({
      class: "login-menu hidden-xs"
    }, HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("pathFor"), "account/profile");
      }
    }, HTML.Raw('<span class="glyphicon glyphicon-check" aria-hidden="true"></span> MY REFERENCES'))), HTML.Raw('\n                            <li class="login-menu hidden-xs"><a href="javascript:void(0);" class="logoutBtn">SIGN OUT</a></li>\n                            '), HTML.LI("\n                                ", HTML.DIV({
      class: "navbar-accounts"
    }, "\n                                    ", HTML.DIV({
      class: "dropdown",
      role: "menu"
    }, "\n                                        ", Blaze.If(function() {
      return Spacebars.call(view.lookup("currentUser"));
    }, function() {
      return [ "\n                                            ", HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), "account/profile");
        }
      }, "\n                                                ", HTML.IMG({
        class: "circular-icon profileBtn",
        src: function() {
          return Spacebars.mustache(view.lookup("getProfilePic"));
        },
        width: "40px",
        height: "40px"
      }), "\n                                                ", HTML.SPAN({
        id: "logged-in-display-name profileBtn"
      }, " ", Blaze.View("lookup:displayName", function() {
        return Spacebars.mustache(view.lookup("displayName"));
      }), HTML.Raw('\n                                                    <!--<b class="caret"></b>-->\n                                                ')), "\n                                            "), "\n                                            ", Blaze.If(function() {
        return false;
      }, function() {
        return [ "\n                                            ", HTML.DIV({
          class: "dropdown-toggle",
          "data-toggle": "dropdown",
          "data-hover": "dropdown",
          "data-delay": "1000",
          id: "avatardropdown"
        }, "\n\n                                                ", HTML.IMG({
          class: "circular-icon profileBtn",
          src: function() {
            return Spacebars.mustache(view.lookup("getProfilePic"));
          },
          width: "40px",
          height: "40px"
        }), "\n                                                ", HTML.SPAN({
          id: "logged-in-display-name profileBtn"
        }, " ", Blaze.View("lookup:displayName", function() {
          return Spacebars.mustache(view.lookup("displayName"));
        }), HTML.Raw('\n                                                    <!--<b class="caret"></b>-->\n                                                ')), HTML.Raw('\n                                                <!--<div class="btn btn-primary btn-block logoutBtn" id="">Sign Out</div>-->\n                                            ')), HTML.Raw('\n                                            <div class="dropdown-menu pull-right" role="menu" aria-labelledby="avatardropdown">\n                                                <div class="user-accounts-dropdown">\n                                                    <div class="user-accounts-dropdown-content">\n\n                                                    </div>\n                                                    <div class="btn btn-primary btn-block profileBtn"><span class="glyphicon glyphicon-cog" aria-hidden="true"></span> Settings</div>\n                                                    <div class="btn btn-primary btn-block logoutBtn" id="logout">Sign Out</div>\n                                                </div>\n                                            </div>\n                                            ') ];
      }), "\n                                        " ];
    }, function() {
      return [ "\n                                            ", HTML.DIV({
        class: "accounts-dropdown",
        "data-event-category": "accounts",
        "data-event-action": "accounts-dropdown-click"
      }, HTML.Raw('\n                                                <div class="dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-delay="1000">\n                                                    <span data-i18n="accountsUI.signIn">Sign In</span><b class="caret"></b></div>\n                                                '), HTML.DIV({
        class: "accounts-dialog accounts-layout dropdown-menu pull-right"
      }, "\n                                                    ", Spacebars.include(view.lookupTemplate("loginForm")), "\n                                                "), "\n                                            "), "\n                                        " ];
    }), "\n                                    "), "\n                                "), "\n                            "), "\n\n                        " ];
  }, function() {
    return HTML.Raw('\n                            <ul class="oval logedout-menu">\n                                <li><a class="right-border showLoginDialog" href="javascript:;">SIGN IN</a></li>\n                                <li><a href="javascript:;" class="showSignupDialog">SIGN UP</a></li>\n                                    <!--{{#if showLoginDialog}}-->\n                                <!--<span class="closeLoginDialog" style="position: relative;top: 33px;right: -37px;z-index: 3500;cursor: pointer;"><i class="fa fa-times"></i></span>-->\n                                <!--<div class="accounts-dialog accounts-layout dropdown-menu pull-right"-->\n                                <!--style="display:block;    top: 55px;right: 25px;">-->\n                                <!--{{> loginForm}}-->\n                                <!--</div>-->\n                                    <!--{{/if}}-->\n                            </ul>\n                        ');
  }), "\n                    "), "\n                "), "\n                ", HTML.DIV({
    class: "xs-menu visible-xs transition"
  }, HTML.Raw('\n                    <div class="xs-menu-close-icon text-right">\n                        <span class="sprite xs-close"></span>\n                    </div>\n                    '), HTML.UL({
    class: "transition"
  }, "\n                        ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "home");
    }
  }, "HOME / SEARCH")), "\n                        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("currentUser"));
  }, function() {
    return [ "\n                            ", HTML.LI(HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("pathFor"), "account/profile");
      }
    }, "MY REFERENCES")), "\n                        " ];
  }), "\n                        ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "advertisewithus");
    }
  }, "LIST PROPERTY")), "\n                        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("currentUser"));
  }, function() {
    return [ "\n                            ", HTML.LI(HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("pathFor"), "account/myProperties");
      }
    }, "MY PROPERTIES")), "\n                        " ];
  }), "\n                        ", Blaze.If(function() {
    return false;
  }, function() {
    return [ "\n                            ", Blaze.Unless(function() {
      return Spacebars.call(view.lookup("isAgentRole"));
    }, function() {
      return HTML.Raw('\n                                <!--<li><a href="{{pathFor "account/mybids"}}">MY BIDS</a></li>-->\n                            ');
    }), "\n                            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("isAgentRole"));
    }, function() {
      return [ "\n                                ", HTML.LI(HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), "account/myProperties");
        }
      }, "MY PROPERTIES")), "\n                            " ];
    }), "\n                            ", HTML.LI(HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("pathFor"), "account/profile");
      }
    }, "MY PROFILE")), "\n                        " ];
  }), "\n                        ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "estateagent");
    }
  }, "AGENTS/LANDLORDS")), "\n                        ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "howitworks");
    }
  }, "HOW IT WORKS?")), "\n                        ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "faqs");
    }
  }, "FAQ")), HTML.Raw("\n                        <!--<li><a href=\"{{pathFor 'about'}}\">ABOUT US</a></li>-->\n                        "), HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "contactus");
    }
  }, "CONTACT US")), "\n                        ", HTML.LI(HTML.A({
    href: function() {
      return Spacebars.mustache(view.lookup("pathFor"), "careers");
    }
  }, "CAREERS")), "\n                        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("currentUser"));
  }, function() {
    return HTML.Raw('\n                            <li><a href="javascript:void(0);" class="logoutBtn">SIGN OUT</a></li>\n                        ');
  }), "\n\n                    "), "\n                "), "\n            "), "\n        "), "\n\n\n    "), "\n\n    ", Blaze.View("lookup:loginFlowCompleteManager", function() {
    return Spacebars.mustache(view.lookup("loginFlowCompleteManager"));
  }), "\n    ", HTML.DIV({
    id: "errorModel",
    class: "alert alert-danger ",
    style: "display:none;"
  }, "\n        ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("errorModel"));
  }, function() {
    return HTML.P(Blaze.View("lookup:.", function() {
      return Spacebars.mustache(view.lookup("."));
    }));
  }), "\n    "), "\n    ", HTML.DIV({
    id: "signin-div",
    class: "signin1",
    style: "display:none;"
  }, "\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("showLoginDialog"));
  }, function() {
    return [ "\n            ", Spacebars.include(view.lookupTemplate("loginForm")), "\n        " ];
  }), "\n    "), "\n    ", HTML.DIV({
    id: "addPropertyHeader-div",
    class: "signin1",
    style: "display:none;"
  }, "\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("showAddPropertyHeaderTemplate"));
  }, function() {
    return [ "\n            ", HTML.SECTION({
      class: "mar-top-20 no-print"
    }, "\n                ", HTML.DIV({
      class: "container"
    }, "\n                    ", HTML.DIV({
      class: "filter-holder"
    }, "\n                        ", HTML.DIV({
      class: "head-border-bottom"
    }, HTML.Raw('\n\n                            <div class="refund-div">\n                                <h2 style="text-align:center;font-weight:bold;">List Your Rental For Free</h2>\n                            </div>\n                            '), HTML.DIV({
      style: "margin-top:25px;"
    }, "\n                                ", Spacebars.include(view.lookupTemplate("addPropertyHeaderTemplate")), "\n                            "), "\n                        "), "\n                    "), "\n                "), "\n\n            "), "\n        " ];
  }), "\n    "), HTML.Raw("\n\n    <!-- <noscript><iframe src=\"//www.googletagmanager.com/ns.html?id=GTM-KQSCJ4\"\n            height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n            <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n              new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n              j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n              '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n                })(window,document,'script','dataLayer','GTM-KQSCJ4');</script> -->") ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"layout.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/layout.html                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.layout.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.layout.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/template.layout.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("reactLayout");
Template["reactLayout"] = new Template("Template.reactLayout", (function() {
  var view = this;
  return [ Spacebars.include(view.lookupTemplate("headerExtended")), "\n    ", HTML.MAIN({
    role: "main",
    id: "main"
  }, "\n        ", Blaze._TemplateWith(function() {
    return {
      template: Spacebars.call(view.lookup("templateName")),
      data: Spacebars.call(view.lookup("dataContext"))
    };
  }, function() {
    return Spacebars.include(function() {
      return Spacebars.call(Template.__dynamic);
    });
  }), "\n    "), "\n    ", HTML.FOOTER({
    class: "footer-default"
  }, "\n        ", Spacebars.include(view.lookupTemplate("footerExtended")), "\n    ") ];
}));

Template.__checkName("reactPlainLayout");
Template["reactPlainLayout"] = new Template("Template.reactPlainLayout", (function() {
  var view = this;
  return Blaze._TemplateWith(function() {
    return {
      template: Spacebars.call(view.lookup("templateName")),
      data: Spacebars.call(view.lookup("dataContext"))
    };
  }, function() {
    return Spacebars.include(function() {
      return Spacebars.call(Template.__dynamic);
    });
  });
}));

Template.__checkName("printExtended");
Template["printExtended"] = new Template("Template.printExtended", (function() {
  var view = this;
  return [ Spacebars.include(view.lookupTemplate("yield")), HTML.Raw("<!---->") ];
}));

Template.__checkName("plainLayout");
Template["plainLayout"] = new Template("Template.plainLayout", (function() {
  var view = this;
  return Spacebars.include(view.lookupTemplate("yield"));
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"footer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/footer.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template;
module.link("meteor/templating", {
  Template: function (v) {
    Template = v;
  }
}, 0);
module.link("./footer.html");
Template.footerExtended.helpers({
  RouteB: function (slug) {
    return FlowRouter.url('b', {
      slug: slug
    });
  } // customSocialSettings: function() {
  //   return {
  //     placement: 'footer',
  //     faClass: 'square',
  //     faSize: 'fa-3x',
  //     appsOrder: ['facebook', 'twitter', 'pinterest', 'googleplus']
  //   };
  // }

}); // Template.footerExtended.replaces("layoutFooter");
// Template.footerExtended.onRendered(function(){
//  $("#video1").click(function () {
//     $.fancybox({
//       'padding': 0,
//       'href': '#video-div1',
//     });
//   });
//  });
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"header.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/header.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template;
module.link("meteor/templating", {
  Template: function (v) {
    Template = v;
  }
}, 0);
module.link("./header.html");
Template.headerExtended.onRendered(function () {
  $.getScript(cdnPath('/js/bootstrap.js'), function () {// console.log("Bootstrap loaded")
  }); // $.getScript(cdnPath('//static.filestackapi.com/filestack-js/1.x.x/filestack.min.js'), function(){
  //     console.log("Filestack loaded")
  // });

  $.getScript('plugins/fancybox/js/jquery.fancybox.js', function () {
    // script should be loaded and do something with it.
    $('.fancybox').fancybox({
      scrolling: 'no',
      helpers: {
        overlay: {
          locked: true
        }
      }
    });
  });
  setTimeout(delayedFunctions, 1500);
});
isMobileMenuEventAttached = false;

function delayedFunctions() {
  // $('.xs-menu-icon').click(function(){
  //     $('.xs-menu').addClass('slide-right');
  // });
  // $('.xs-menu-close-icon, .xs-menu a').click(function(){
  //     $('.xs-menu').removeClass('slide-right');
  // });
  // if(!isMobileMenuEventAttached) {
  $(document).unbind('click').bind('click', function (e) {
    if (!$('.xs-menu').hasClass('slide-right')) {
      //Its not open
      if ($(e.target).closest(".xs-menu-icon-master").length > 0) {
        if (FlowRouter.current().route.name == 'home') $('.carousel-indicators').addClass('carousel-indicatorsLowZindex');
        $('.xs-menu').addClass('slide-right');
        return true;
      } else return true;
    } else {
      //Its open
      if ($(e.target).closest(".xs-menu-close-icon .xs-close, .xs-menu a").length > 0 || $(e.target).closest(".slide-right").length < 1) {
        $('.xs-menu').removeClass('slide-right');
        if (FlowRouter.current().route.name == 'home') setTimeout(function () {
          if (FlowRouter.current().route.name == 'home') $('.carousel-indicators').removeClass('carousel-indicatorsLowZindex');
        }, 250);
        return true;
      }
    }
  }); // isMobileMenuEventAttached = true;
  // }
}

Template.headerExtended.onCreated(function () {
  Session.set('showLoginDialog', false);
  Session.set('showForgotForm', false);
  Session.set('showLoginDialog', false);
  Session.set('showLoginSignupFancyBoxDialog', false);
  Session.set('showAddPropertyHeaderTemplate', false);
  Session.set('showAddPropertyHeaderFancyBoxDialog', false);
  if (!Session.get("showErrorDlg")) Session.set("showErrorDlg", []);
});
Template.headerExtended.helpers({
  loginFlowCompleteManager: function () {
    if (Session.get('loginFlowComplete')) {
      setTimeout(function () {
        Session.set('loginFlowComplete', undefined);
      }, 1000);
    }
  },
  errorModel: function () {
    var tmp = Session.get("showErrorDlg");
    if (!tmp) tmp = [];
    if (tmp) if (tmp.length) {
      var timeoutVal = 0;
      if (!$.fancybox) timeoutVal = 3000;
      setTimeout(function () {
        $.fancybox({
          'padding': 0,
          'href': '#errorModel',
          // afterShow:function(template){
          //     setTimeout(function () {
          //         $.fancybox.close();
          //     },3000)
          // },
          afterClose: function () {
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            tmp.shift();
            Session.set("showErrorDlg", tmp);
          }
        });
      }, timeoutVal);
    }
    return Session.get("showErrorDlg");
  },
  showAddPropertyHeaderTemplate: function () {
    if (Session.get('showAddPropertyHeaderFancyBoxDialog')) {
      showAddPropertyHeaderPopup();
    } else {
      if ($) if ($.fancybox) $.fancybox.close();
    }

    return Session.get('showAddPropertyHeaderTemplate');
  },
  showLoginDialog: function () {
    //Reason to create this method is for the lazyloading of signIn and signUp templates
    if (Session.get('showLoginSignupFancyBoxDialog')) {
      showLoginPopup();
    } else {
      if ($) if ($.fancybox) $.fancybox.close();
    }

    return Session.get('showLoginDialog');
  },
  isAgentRole: function () {
    var user = Meteor.user();
    if (!user) return false;

    if (user.profile.role == 'agent') {
      return true;
    }

    return false;
  },
  showCookieConsent: function () {
    return !parseInt(readCookie('cookieConsent')); // var userConfig = Session.get('userConfig');
    // if(!userConfig) return false;
    // return userConfig.cookieConsent;
  }
});
Template.headerExtended.events({
  "click .showLoginDialog": function (event, template) {
    showLoginDialog();
  },
  "click .showSignupDialog": function (event, template) {
    showSignupDialog();
  },
  "click .logoutBtn": function () {
    Meteor.logout(function (err) {
      if (err) {
        throw new Meteor.Error("Logout failed");
      }
    });
  },
  "click .addPropertyHeaderBtn": function () {
    FlowRouter.go('advertisewithus');
    console.log("added add property form"); // Session.set('showAddPropertyHeaderTemplate',true)
    //        Session.set('showAddPropertyHeaderFancyBoxDialog',true)
  },
  "click .profileBtn": function () {
    FlowRouter.go('account/profile');
  },
  "click .cookieConsentBtn": function () {
    createCookie('cookieConsent', 1, 365);
    $('.cookieConsentArea').remove(); // var userConfig = Session.get('userConfig');
    //
    // if(!userConfig){
    //     Session.set('userConfig',{cookieConsent:1})
    // }else if(!userConfig.cookieConsent){
    //     Session.set('userConfig',{cookieConsent:1})
    // }
  }
});

function showLoginDialog() {
  Session.set('showForgotForm', false);
  Session.set('showSignupForm', false);
  Session.set('showLoginSignupFancyBoxDialog', true);
  Session.set('showLoginDialog', true);
}

function showSignupDialog() {
  Session.set('showForgotForm', false);
  Session.set('showSignupForm', true);
  Session.set('showLoginSignupFancyBoxDialog', true);
  Session.set('showLoginDialog', true);
}

function showLoginPopup() {
  $.fancybox({
    'padding': 0,
    'href': '#signin-div',
    afterClose: function (template) {
      console.log(template); //template.showLoginDialog.set(false);

      Session.set('isLandLordMode', false);
      Session.set('showLoginDialog', false);
      Session.set('showLoginSignupFancyBoxDialog', false);
    }
  });
}

function showAddPropertyHeaderPopup() {
  $.fancybox({
    'padding': 0,
    'href': '#addPropertyHeader-div',
    afterClose: function (template) {
      //console.log(template);
      Session.set('showAddPropertyHeaderTemplate', false);
      Session.set('showAddPropertyHeaderFancyBoxDialog', false);
    }
  });
}

function createCookie(name, value, days) {
  var expires = "";

  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toUTCString();
  }

  document.cookie = name + "=" + value + expires + "; path=/";
}

function readCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');

  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];

    while (c.charAt(0) == ' ') {
      c = c.substring(1, c.length);
    }

    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
  }

  return null;
}

function eraseCookie(name) {
  createCookie(name, "", -1);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"layout.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layout/layout.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./layout.html");
module.link("./header.js");
module.link("./footer.js");

if (Meteor.isClient) {
  Meteor.startup(function () {
    Blaze._allowJavascriptUrls();
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"templates":{"editProperty.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/editProperty.html                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.editProperty.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.editProperty.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.editProperty.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("editProperty");
Template["editProperty"] = new Template("Template.editProperty", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n\n", Blaze.If(function() {
        return Spacebars.call(view.lookup("propertyFound"));
      }, function() {
        return [ "\n    ", HTML.SECTION({
          class: "unitspage-holder"
        }, "\n        ", HTML.SECTION({
          class: "logo-below-div"
        }, "\n            ", HTML.DIV({
          class: "container"
        }, "\n                ", HTML.DIV({
          class: "logo-holder-div"
        }, "\n                    ", HTML.DIV({
          class: "logo-holder"
        }, "\n                        ", HTML.UL("\n                            ", HTML.LI(HTML.SPAN({
          class: "backBtn",
          style: "cursor: pointer;"
        }, HTML.IMG({
          src: function() {
            return Spacebars.mustache(view.lookup("cdnPath"), "/images/back-arrow.png");
          }
        }))), "\n                            ", HTML.LI({
          class: "longTitle"
        }, HTML.H3(Blaze.View("lookup:propertyData.address.address", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "address"));
        }), " ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
        }, function() {
          return [ ", ", Blaze.View("lookup:propertyData.address.area", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
          }), " " ];
        }), Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
        }, function() {
          return [ ", ", Blaze.View("lookup:propertyData.address.county", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
          }), " " ];
        }), " "), "\n                            ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "auction"));
        }, function() {
          return [ "\n                                ", HTML.H4("PROPERTY KEY : ", Blaze.View("lookup:propertyData.auction.lettingAuctionCode", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "auction", "lettingAuctionCode"));
          }), "\n                                    ", HTML.SPAN({
            class: "auction-number pad-left-15"
          }, HTML.A({
            target: "_blank",
            href: function() {
              return Spacebars.mustache(view.lookup("pathFor"), Spacebars.kw({
                route: "letting",
                key: Spacebars.dot(view.lookup("propertyData"), "auction", "lettingAuctionCode")
              }));
            },
            class: "viewListing",
            style: "font-size:11px;"
          }, "VIEW ADVERT")), HTML.Raw('\n                                    <span class="auction-number pad-left-15"><a href="javascript:void(0);" class="showCopyDlg" style="font-size:11px;"><i class="glyphicon glyphicon-thumbs-up" aria-hidden="true" style="font-size: 11px;"></i> SHARE</a></span>\n                                ')), "\n                            " ];
        }), "\n                            "), "\n                        "), "\n                    "), "\n                    ", HTML.DIV({
          class: "menu"
        }, "\n                        ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "auctionId"));
        }, function() {
          return HTML.Raw('\n                            <button class="transparent-btn btns deactivatePropertyBtn" type="button"><span class="glyphicon glyphicon-off" aria-hidden="true"></span> Deactivate</button>\n                        ');
        }), HTML.Raw('\n                            <button class="transparent-btn btns archivePropertyBtn" type="button"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span> Archive</button>\n\n                    ')), "\n                "), "\n            "), "\n        "), "\n\n\n        ", HTML.SECTION({
          class: "mar-top-20 "
        }, "\n            ", HTML.DIV({
          class: "container"
        }, "\n                ", HTML.DIV({
          class: "filter-holder"
        }, "\n                    ", HTML.DIV({
          class: "head-border-bottom"
        }, "\n                        ", HTML.DIV({
          class: "apt-info1 background-white clearfix showEditAuctionForm autoFrm"
        }, "\n                            ", Spacebars.include(view.lookupTemplate("editPropertyForm")), "\n\n\n                        "), "\n\n                    "), "\n                "), "\n            "), "\n        "), HTML.Raw('\n\n        <div class="verification-div1" id="propertyLinkDlg" style="display:none;">\n            <div class="refund-div"><h2>Share Property</h2></div>\n            <div class="profile-text text-left">\n                <p class="no-capitalize">Please use this email to use in daft.ie, rent.ie etc ads.</p>\n\n                <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                    <div class="form-group col-sm-10" style="padding: 0;">\n                        <input type="text" class="form-control" placeholder="" name="agentPropertyEmailField" id="agentPropertyEmailField" readonly="" style="width: 100%;padding: 0;">\n                    </div>\n                    <button type="submit" class="btn btn-primary col-sm-2 copyEmailBtn">Copy</button>\n                </form>\n\n                <p class="no-capitalize mar-top-15">Please use this link to share in facebook, twitter etc. </p>\n\n                <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                    <div class="form-group col-sm-10" style="padding: 0;">\n                        <input type="text" class="form-control" placeholder="" name="propertyLinkField" id="propertyLinkField" readonly="" style="width: 100%;padding: 0;">\n                    </div>\n                    <button type="submit" class="btn btn-primary col-sm-2 copyLinkBtn">Copy</button>\n                </form>\n\n                <form class="signin-form">\n\n                    <div class="signup-btn">\n                        <button class="transparent-btn btns cancelBtn" type="button">CLOSE</button>\n                    </div>\n\n                </form>\n\n            </div>\n\n        </div>\n        '), HTML.DIV({
          id: "conf-dactivate-pop",
          class: "confPopup",
          style: "display:none;"
        }, HTML.Raw('\n\n            <div class="refund-div"><h2>Confirm Deactivate?</h2></div>\n            '), HTML.DIV({
          class: "profile-text"
        }, HTML.Raw("\n                <h3>Are sure you want to deactivate ?</h3>\n                "), Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
        }, function() {
          return [ HTML.P("This property has ", Blaze.View("lookup:propertyData.applicationsActiveCount", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
          }), " active applications. You will not be able to choose any application if deactivated. "), "\n                " ];
        }, function() {
          return HTML.Raw("\n                    <p></p>\n                ");
        }), "\n\n                ", HTML.UL("\n                    ", HTML.LI(HTML.BUTTON({
          class: "transparent-btn btns deactivateConfirmBtn",
          type: "button"
        }, Blaze.If(function() {
          return Spacebars.call(view.lookup("deactivateInProgress"));
        }, function() {
          return "Deactivating...";
        }, function() {
          return "Deactivate";
        }))), HTML.Raw('\n                    <li><button class="blue-btn btns closePopupBtn" type="button">Cancel</button></li>\n                ')), "\n            "), "\n        "), "\n        ", HTML.DIV({
          id: "conf-archive-pop",
          class: "confPopup",
          style: "display:none;"
        }, HTML.Raw('\n\n            <div class="refund-div"><h2>Confirm Archive?</h2></div>\n            '), HTML.DIV({
          class: "profile-text"
        }, HTML.Raw("\n                <h3>Are sure you want to archive? </h3>\n                "), Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
        }, function() {
          return [ HTML.P("This property has ", Blaze.View("lookup:propertyData.applicationsActiveCount", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
          }), " active applications. You will not be able to choose any application if deactivated. "), "\n                " ];
        }, function() {
          return HTML.Raw("\n                    <p></p>\n                ");
        }), HTML.Raw("\n                <p>Please note that archiving will also deactivate it and will disable all the applications received on it.</p>\n\n                "), HTML.UL("\n                    ", HTML.LI(HTML.BUTTON({
          class: "transparent-btn btns archiveConfirmBtn",
          type: "button"
        }, Blaze.If(function() {
          return Spacebars.call(view.lookup("archiveInProgress"));
        }, function() {
          return "Archiving...";
        }, function() {
          return "Archive";
        }))), HTML.Raw('\n                    <li><button class="blue-btn btns closePopupBtn" type="button">Cancel</button></li>\n                ')), "\n            "), "\n        "), "\n\n    "), "\n" ];
      }, function() {
        return HTML.Raw('\n    <section class="mar-top-20 ">\n        <div class="container text-center mar-top-20 pad-btm-30">\n            <div class="filter-holder">\n                <div class="mar-top-30">\n                        <strong>This property is not found. Please try again.</strong><br><br>\n                        <button class="blue-btn btns backBtn" type="button">Try again</button>\n                </div>\n            </div>\n        </div>\n    </section>\n');
      }), "\n" ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

Template.__checkName("imageEditView");
Template["imageEditView"] = new Template("Template.imageEditView", (function() {
  var view = this;
  return HTML.DIV({
    class: "row"
  }, "\n        ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("images"));
  }, function() {
    return [ "\n            ", Spacebars.include(view.lookupTemplate("imgEditTag")), "\n        " ];
  }), "\n\n    ");
}));

Template.__checkName("imgEditTag");
Template["imgEditTag"] = new Template("Template.imgEditTag", (function() {
  var view = this;
  return [ HTML.Raw('<!--<div class="col-sm-3 col-xs-6">-->\n        '), HTML.DIV({
    class: "thumbnail"
  }, HTML.Raw('\n            <div class="frow">\n                <a href="javascript:void(0)" class="editImgBtn"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span> Edit</a>\n                <a href="javascript:void(0)" class="deleteImgBtn"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</a>\n            </div>\n            '), HTML.DIV({
    class: "secrow"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("handle"));
  }, function() {
    return [ "\n                    ", HTML.IMG({
      src: function() {
        return [ "https://process.filestackapi.com/resize=width:250/", Spacebars.mustache(view.lookup("handle")) ];
      },
      alt: "",
      class: "img-responsive"
    }), "\n                " ];
  }, function() {
    return [ "\n                    ", HTML.IMG({
      src: function() {
        return [ "https://process.filestackapi.com/AIPACLEs7ShGwwPh6fMTxz/resize=width:250/", Spacebars.mustache(view.lookup("url")) ];
      },
      alt: "",
      class: "img-responsive"
    }), "\n                " ];
  }), "\n            "), "\n        "), HTML.Raw("\n    <!--</div>-->") ];
}));

Template.__checkName("oldAddPropertyFormData");
Template["oldAddPropertyFormData"] = new Template("Template.oldAddPropertyFormData", (function() {
  var view = this;
  return [ Blaze._TemplateWith(function() {
    return {
      collection: Spacebars.call("Collections.Properties"),
      id: Spacebars.call("editPropertiesForm"),
      type: Spacebars.call("update"),
      doc: Spacebars.call(view.lookup("propertyData"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {
      return [ "\n        ", Blaze.Each(function() {
        return Spacebars.call(view.lookup("afFieldNames"));
      }, function() {
        return [ "\n            ", Blaze.Unless(function() {
          return Spacebars.dataMustache(view.lookup("inIgnoreList"), Spacebars.dot(view.lookup("."), "name"));
        }, function() {
          return [ "\n                ", Blaze._TemplateWith(function() {
            return {
              name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),
              options: Spacebars.call(view.lookup("afOptionsFromSchema"))
            };
          }, function() {
            return Spacebars.include(view.lookupTemplate("afQuickField"));
          }), "\n            " ];
        }), "\n        " ];
      }), HTML.Raw('\n\n        <div class="form-group">\n            <label for="selectPropertyImages">Property images</label>\n            <input type="file" multiple="true" class="selectPropertyImages" id="selectPropertyImages">\n            <!--<p class="help-block">Example block-level help text here.</p>-->\n        </div>\n        '), Spacebars.include(view.lookupTemplate("imageEditView")), HTML.Raw('\n\n        <ul class="bid-button-div pull-left">\n            <li>\n                <button type="submit" class="btns green-btn color-white ">Save</button>\n            </li>\n            <li>\n                <button class="transparent-btn btns backBtn" type="button">Cancel</button>\n            </li>\n        </ul>\n    ') ];
    });
  }), HTML.Raw("\n    <br><br><br><br>\n    <h2>Activation details</h2>\n    <br>\n    "), Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "auction"));
  }, function() {
    return [ "\n        ", Blaze._TemplateWith(function() {
      return {
        collection: Spacebars.call("Collections.Auctions"),
        id: Spacebars.call("editAuctionsForm"),
        type: Spacebars.call("update"),
        doc: Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "auction"))
      };
    }, function() {
      return Spacebars.include(view.lookupTemplate("autoForm"), function() {
        return [ "\n            ", Blaze.Each(function() {
          return Spacebars.call(view.lookup("afFieldNames"));
        }, function() {
          return [ "\n                ", Blaze.Unless(function() {
            return Spacebars.dataMustache(view.lookup("inIgnoreList"), Spacebars.dot(view.lookup("."), "name"));
          }, function() {
            return [ "\n                    ", Blaze._TemplateWith(function() {
              return {
                name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),
                options: Spacebars.call(view.lookup("afOptionsFromSchema"))
              };
            }, function() {
              return Spacebars.include(view.lookupTemplate("afQuickField"));
            }), "\n                " ];
          }), "\n            " ];
        }), HTML.Raw('\n\n            <ul class="bid-button-div pull-left">\n                <li>\n                    <button type="submit" class="btns green-btn color-white ">Save</button>\n                </li>\n                <li>\n                    <button class="transparent-btn btns backBtn" type="button">Cancel</button>\n                </li>\n            </ul>\n        ') ];
      });
    }), "\n    " ];
  }, function() {
    return HTML.Raw('\n        <p class="pull-left">This property is not active yet. Activate it first from My Properties page.</p>\n        <br>\n        <button class="transparent-btn btns backBtn" type="button">Activate</button>\n    ');
  }) ];
}));

Template.__checkName("editPropertyForm");
Template["editPropertyForm"] = new Template("Template.editPropertyForm", (function() {
  var view = this;
  return HTML.FORM({
    class: "signin-form cf-1",
    id: "editPropertyFormCF"
  }, "\n        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("data"), "auction"));
  }, function() {
    return [ HTML.Raw('\n            <h2 style="margin-bottom: 30px">Edit Advertisement</h2>\n        <input type="hidden" name="advertiseFormActive" value="yes">\n        <input type="hidden" name="currency" value="eur">\n        '), HTML.INPUT({
      type: "hidden",
      name: "propertyId",
      value: function() {
        return Spacebars.mustache(view.lookup("_id"));
      }
    }), "\n        ", HTML.DIV({
      class: "clearfix"
    }, "\n            ", HTML.DIV({
      class: "styled-input "
    }, "\n                ", HTML.INPUT({
      type: "text",
      name: "price",
      id: "rent",
      required: "",
      value: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "auction", "price"));
      }
    }), HTML.Raw('\n                <label id="rent" class="error" for="rent">This field is required.</label>\n                <br>\n                <label>Rent *</label>\n                <span></span>\n            ')), "\n\n            ", HTML.DIV({
      class: "styled-input "
    }, "\n                ", HTML.INPUT({
      type: "text",
      name: "readyFrom",
      id: "readyFrom",
      value: function() {
        return Spacebars.mustache(view.lookup("dateTimeFormat"), Spacebars.dot(view.lookup("data"), "auction", "readyFrom"));
      }
    }), HTML.Raw('\n                <label class="" for="rent"></label>\n                <br>\n                <label>Ready to move in from?</label>\n                <span></span>\n            ')), "\n\n            ", HTML.DIV({
      class: "styled-input styled-input-select"
    }, HTML.Raw("\n                <label>Lease until?</label>\n                "), HTML.SELECT({
      name: "lease",
      autocomplete: ""
    }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), Blaze.Each(function() {
      return Spacebars.call(view.lookup("leaseUntil"));
    }, function() {
      return [ "\n                        ", HTML.OPTION(HTML.Attrs({
        value: function() {
          return Spacebars.mustache(view.lookup("."));
        }
      }, function() {
        return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "auction", "lease"), view.lookup("."));
      }), Blaze.View("lookup:.", function() {
        return Spacebars.mustache(view.lookup("."));
      })), "\n                    " ];
    }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n\n            ", HTML.DIV({
      class: "styled-input styled-input-select"
    }, HTML.Raw("\n                <label>Rent type</label>\n                "), HTML.SELECT({
      name: "rentType",
      autocomplete: ""
    }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), HTML.OPTION(HTML.Attrs({
      value: "weekly"
    }, function() {
      return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "auction", "rentType"), "weekly");
    }), "Weekly"), "\n                    ", HTML.OPTION(HTML.Attrs({
      value: "monthly"
    }, function() {
      return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "auction", "rentType"), "monthly");
    }), "Monthly"), "\n                    ", HTML.OPTION(HTML.Attrs({
      value: "other"
    }, function() {
      return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "auction", "rentType"), "other");
    }), "Other"), "\n                "), HTML.Raw("\n                <span></span>\n            ")), HTML.Raw('\n\n            <div class="w-100"></div>\n\n            '), HTML.DIV({
      class: "sep-section"
    }, HTML.Raw('\n                <label class="sep-label">Contact person for this advertisement</label>\n                '), HTML.DIV({
      class: "styled-input underline"
    }, "\n                    ", HTML.INPUT({
      type: "text",
      name: "advertContacts.0.name",
      value: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("advertisementContact"), "name"));
      }
    }), HTML.Raw("\n                    <label>Name</label>\n                    <span></span>\n                ")), "\n                ", HTML.DIV({
      class: "styled-input underline"
    }, "\n                    ", HTML.INPUT({
      type: "text",
      name: "advertContacts.0.phone",
      value: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("advertisementContact"), "phone"));
      }
    }), HTML.Raw("\n                    <label>Mobile</label>\n                    <span></span>\n                ")), "\n                ", HTML.DIV({
      class: "styled-input underline"
    }, "\n                    ", HTML.INPUT({
      type: "email",
      name: "advertContacts.0.email",
      value: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("advertisementContact"), "email"));
      }
    }), HTML.Raw("\n                    <label>Email</label>\n                    <span></span>\n                ")), "\n            "), HTML.Raw('\n\n            <div class="w-100"></div>\n\n\n            '), HTML.DIV({
      class: "styled-full-width"
    }, "\n                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("editPropertyFormSaving"));
    }, function() {
      return HTML.Raw('\n                    <button type="button" class="btns transparent-btn">Saving</button>\n                ');
    }, function() {
      return HTML.Raw('\n                    <button type="submit" class="btns blue-btn editPropertyFormSaveBtn">Save</button>\n                ');
    }), HTML.Raw('\n                <!--<button type="button" class="btns blue-btn addPropertyFormSaveActivateBtn">Save and Activate</button>-->\n                <button type="button" class="btns transparent-btn editPropertyFormCancelBtn">Cancel</button>\n            ')), HTML.Raw('\n\n            <div class="w-100"></div>\n        ')), "\n            " ];
  }, function() {
    return HTML.Raw('\n            <h2 style="margin-bottom: 30px">Edit Advertisement</h2>\n            <p>This property is not advertised. <a href="javascript:void(0)" class="backBtn">Visit</a> previous page to advertise. </p>\n        ');
  }), HTML.Raw('\n\n        <h2 style="margin-bottom: 30px">Edit Property</h2>\n\n        '), HTML.DIV({
    class: "clearfix"
  }, "\n            ", HTML.DIV({
    class: "styled-input "
  }, "\n                ", HTML.INPUT({
    type: "text",
    name: "address.address",
    id: "address.address",
    required: "",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "address", "address"));
    }
  }), HTML.Raw('\n                <label id="address.address-error" class="error" for="address.address">This field is required.</label>\n                <br>\n                <label>Name and Street *</label>\n                <span></span>\n            ')), "\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>Country</label>\n                "), HTML.SELECT({
    name: "address.country",
    required: "",
    autocomplete: ""
  }, "\n                    ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("countries"));
  }, function() {
    return [ "\n                        ", HTML.OPTION(HTML.Attrs({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, function() {
      return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "address", "country"), view.lookup("value"));
    }), Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>County</label>\n                "), HTML.SELECT({
    name: "address.county",
    required: "",
    autocomplete: "",
    class: "countySelected"
  }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), Blaze.Each(function() {
    return Spacebars.call(view.lookup("counties"));
  }, function() {
    return [ "\n                        ", HTML.OPTION(HTML.Attrs({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, function() {
      return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "address", "county"), view.lookup("value"));
    }), Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>Area *</label>\n                "), HTML.SELECT({
    name: "address.area",
    required: "",
    autocomplete: "",
    class: ""
  }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), Blaze.Each(function() {
    return Spacebars.call(view.lookup("areas"));
  }, function() {
    return [ "\n                        ", HTML.OPTION(HTML.Attrs({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, function() {
      return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "address", "area"), view.lookup("value"));
    }), Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>Property type *</label>\n                "), HTML.SELECT({
    name: "type",
    required: "",
    autocomplete: ""
  }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), Blaze.Each(function() {
    return Spacebars.call(view.lookup("propertyTypes"));
  }, function() {
    return [ "\n                        ", HTML.OPTION(HTML.Attrs({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, function() {
      return Spacebars.attrMustache(view.lookup("isEqualSelect"), Spacebars.dot(view.lookup("data"), "type"), view.lookup("value"));
    }), Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n\n\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>Furnished? *</label>\n                "), HTML.SELECT({
    name: "furnished",
    required: "",
    autocomplete: ""
  }, "\n                    ", Blaze.Each(function() {
    return Spacebars.dataMustache(view.lookup("furnishedOptions"), Spacebars.dot(view.lookup("data"), "furnished"));
  }, function() {
    return [ "\n                        ", HTML.OPTION(HTML.Attrs({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, function() {
      return Spacebars.attrMustache(view.lookup("selected"));
    }), Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n\n            ", HTML.DIV({
    class: "styled-input underline"
  }, "\n                ", HTML.INPUT({
    type: "number",
    name: "baths",
    id: "baths",
    required: "",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "baths"));
    }
  }), HTML.Raw("\n                <label>Number of bathrooms</label>\n                <span></span>\n            ")), "\n\n            ", HTML.DIV({
    class: "styled-input underline"
  }, "\n                ", HTML.INPUT({
    type: "number",
    name: "numBedRoomCount",
    id: "numBedRoomCount",
    required: "",
    value: function() {
      return Spacebars.mustache(view.lookup("arrLength"), Spacebars.dot(view.lookup("data"), "bedrooms"));
    }
  }), HTML.Raw("\n                <label>Number of bedrooms</label>\n                <span></span>\n            ")), "\n\n            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("numBedRoomCount"));
  }, function() {
    return [ "\n                ", HTML.DIV({
      class: "styled-full-width"
    }, HTML.Raw('\n                    <label class="sep-label">Ensuite? </label>\n\n                    '), Blaze.Each(function() {
      return Spacebars.dataMustache(view.lookup("ensuiteLoop"), view.lookup("numBedRoomCount"));
    }, function() {
      return [ "\n                        ", HTML.DIV({
        class: "styled-input-select styled-input-checkbox max-20"
      }, "\n                            ", HTML.DIV({
        class: function() {
          return [ "checkbox ", Blaze.Unless(function() {
            return Spacebars.dataMustache(view.lookup("ensuiteLoopCheckbox"), view.lookup("@index"));
          }, function() {
            return "disabled";
          }) ];
        }
      }, "\n                                ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
        type: "checkbox",
        name: function() {
          return [ "bedrooms.", Spacebars.mustache(view.lookup("@index")), ".ensuite" ];
        }
      }, function() {
        return Spacebars.attrMustache(view.lookup("ensuiteLoopCheckbox"), view.lookup("@index"));
      })), "Bedroom ", Blaze.View("lookup:i", function() {
        return Spacebars.mustache(view.lookup("i"));
      }), " Ensuite?"), "\n                            "), HTML.Raw("\n                            <label>Bed Type</label>\n                            "), HTML.SELECT({
        required: "",
        autocomplete: "",
        name: function() {
          return [ "bedrooms.", Spacebars.mustache(view.lookup("@index")), ".bedType" ];
        }
      }, "\n                                ", Blaze.Each(function() {
        return Spacebars.dataMustache(view.lookup("ensuiteLoopBedTypeOptions"), view.lookup("@index"));
      }, function() {
        return [ "\n                                    ", HTML.OPTION(HTML.Attrs({
          value: function() {
            return Spacebars.mustache(view.lookup("value"));
          },
          jns: "",
          nha: ""
        }, function() {
          return Spacebars.attrMustache(view.lookup("sel"));
        }), Blaze.View("lookup:label", function() {
          return Spacebars.mustache(view.lookup("label"));
        })), "\n                                " ];
      }), "\n                            "), HTML.Raw("\n                            <span></span>\n                        ")), "\n                    " ];
    }), "\n\n                "), HTML.Raw('<div class="w-100"></div>\n            ') ];
  }), "\n\n            ", HTML.DIV({
    class: "styled-full-width"
  }, HTML.Raw('\n                <label class="cf-title">About</label><br>\n                '), HTML.TEXTAREA({
    name: "about",
    class: "styled-input-textarea autoGrowTA",
    placeholder: "Enter any additional info about this letting.",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "about"));
    }
  }), "\n\n            "), HTML.Raw('\n\n            <div class="w-100"></div>\n\n            '), HTML.DIV({
    class: "styled-full-width styled-input-checkbox"
  }, HTML.Raw('\n                <label class="cf-title">Amenities</label><br>\n                '), HTML.DIV({
    class: "cb-subsec"
  }, "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Parking"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Parking");
  })), "Parking"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Club House"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Club House");
  })), "Club House"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Swimming Pool"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Swimming Pool");
  })), "Swimming Pool"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Mini Theater"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Mini Theater");
  })), "Mini Theater"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Gym"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Gym");
  })), "Gym"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Meditation Hall"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Meditation Hall");
  })), "Meditation Hall"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Cable Television"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Cable Television");
  })), "Cable Television"), "\n                    "), "\n                "), "\n                ", HTML.DIV({
    class: "cb-subsec"
  }, "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Dishwasher"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Dishwasher");
  })), "Dishwasher"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Garden / Patio / Balcony"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Garden / Patio / Balcony");
  })), "Garden / Patio / Balcony"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Internet"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Internet");
  })), "Internet"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Serviced Property"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Serviced Property");
  })), "Serviced Property"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Washing Machine"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Washing Machine");
  })), "Washing Machine"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Central Heating"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Central Heating");
  })), "Central Heating"), "\n                    "), "\n                "), "\n                ", HTML.DIV({
    class: "cb-subsec"
  }, "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Dryer"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Dryer");
  })), "Dryer"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "House Alarm"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "House Alarm");
  })), "House Alarm"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Microwave"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Microwave");
  })), "Microwave"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Pets Allowed"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Pets Allowed");
  })), "Pets Allowed"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Smoking"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Smoking");
  })), "Smoking"), "\n                    "), "\n                    ", HTML.DIV({
    class: "checkbox disabled"
  }, "\n                        ", HTML.LABEL(HTML.INPUT(HTML.Attrs({
    type: "checkbox",
    name: "amenities",
    value: "Wheelchair Access"
  }, function() {
    return Spacebars.attrMustache(view.lookup("hasAmenityCheckbox"), "Wheelchair Access");
  })), "Wheelchair Access"), "\n                    "), "\n                "), HTML.Raw("\n                <span></span>\n            ")), HTML.Raw('\n\n            <div class="w-100"></div>\n\n            '), HTML.DIV({
    class: "sep-section"
  }, HTML.Raw('\n                <label class="sep-label">Contact details of the property owner if any</label>\n                '), HTML.DIV({
    class: "styled-input underline"
  }, "\n                    ", HTML.INPUT({
    type: "text",
    name: "contacts.0.name",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("propertyContact"), "name"));
    }
  }), HTML.Raw('\n                    <label>Owners Name <i title="This info will not be displayed to users. It confidential and will be used only for record purpose.">(Private)</i></label>\n                    <span></span>\n                ')), "\n                ", HTML.DIV({
    class: "styled-input underline"
  }, "\n                    ", HTML.INPUT({
    type: "text",
    name: "contacts.0.phone",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("propertyContact"), "phone"));
    }
  }), HTML.Raw('\n                    <label>Owners Mobile <i title="This info will not be displayed to users. It confidential and will be used only for record purpose.">(Private)</i></label>\n                    <span></span>\n                ')), "\n                ", HTML.DIV({
    class: "styled-input underline"
  }, "\n                    ", HTML.INPUT({
    type: "email",
    name: "contacts.0.email",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("propertyContact"), "email"));
    }
  }), HTML.Raw('\n                    <label>Owners Email <i title="This info will not be displayed to users. It confidential and will be used only for record purpose.">(Private)</i></label>\n                    <span></span>\n                ')), "\n            "), HTML.Raw('\n\n            <div class="w-100"></div>\n\n\n            <div class="styled-full-width">\n                <button class="btns blue-btn openFileUploader">Add Images</button>\n                <!--<label for="selectPropertyImages">Property images</label>-->\n                <!--<input type="file" multiple="true" class="selectPropertyImages"  id="selectPropertyImages"/>-->\n                <!--<p class="help-block">Example block-level help text here.</p>-->\n            </div>\n\n            <div class="w-100"></div>\n\n\n            '), Spacebars.include(view.lookupTemplate("imageEditView")), "\n\n            ", HTML.DIV({
    class: "styled-full-width"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("editPropertyFormSaving"));
  }, function() {
    return HTML.Raw('\n                    <button type="button" class="btns transparent-btn">Saving</button>\n                ');
  }, function() {
    return HTML.Raw('\n                    <button type="submit" class="btns blue-btn editPropertyFormSaveBtn">Save</button>\n                ');
  }), HTML.Raw('\n                <!--<button type="button" class="btns blue-btn addPropertyFormSaveActivateBtn">Save and Activate</button>-->\n                <button type="button" class="btns transparent-btn editPropertyFormCancelBtn">Cancel</button>\n            ')), HTML.Raw('\n\n            <div class="w-100"></div>\n        ')), "\n    ");
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"imageView.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/imageView.html                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.imageView.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.imageView.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.imageView.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("imageView");
Template["imageView"] = new Template("Template.imageView", (function() {
  var view = this;
  return HTML.DIV({
    class: "row"
  }, "\n        ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("images"));
  }, function() {
    return [ "\n            ", Spacebars.include(view.lookupTemplate("imgTag")), "\n        " ];
  }), "\n\n    ");
}));

Template.__checkName("imgTag");
Template["imgTag"] = new Template("Template.imgTag", (function() {
  var view = this;
  return HTML.DIV({
    class: "col-sm-3 col-xs-6"
  }, "\n        ", HTML.DIV({
    class: "thumbnail"
  }, HTML.Raw('\n            <div class="frow">\n                <a href="javascript:void(0)" class="editImgBtn"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span> Edit</a>\n                <a href="javascript:void(0)" class="deleteImgBtn"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</a>\n            </div>\n            '), HTML.DIV({
    class: "secrow"
  }, "\n                ", HTML.IMG({
    src: function() {
      return [ "https://process.filestackapi.com/resize=width:250/", Spacebars.mustache(view.lookup("handle")) ];
    },
    alt: "",
    class: "img-responsive"
  }), "\n            "), "\n        "), "\n    ");
}));

Template.__checkName("imgTagOld");
Template["imgTagOld"] = new Template("Template.imgTagOld", (function() {
  var view = this;
  return HTML.DIV({
    class: "col-sm-3 col-xs-6"
  }, "\n        ", HTML.DIV({
    class: "thumbnail"
  }, HTML.Raw('\n            <div class="frow">\n                <a href="javascript:void(0)" class="editImgBtn"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span> Edit</a>\n                <a href="javascript:void(0)" class="deleteImgBtn"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</a>\n            </div>\n            '), HTML.DIV({
    class: "secrow"
  }, "\n                ", HTML.IMG({
    src: function() {
      return Spacebars.mustache(view.lookup("secure_url"));
    },
    alt: "",
    class: "img-responsive"
  }), "\n            "), "\n            ", Blaze.Unless(function() {
    return Spacebars.call(view.lookup("loaded"));
  }, function() {
    return [ "\n                ", HTML.DIV({
      class: "caption"
    }, "\n                    ", HTML.P(Blaze.View("lookup:percent_uploaded", function() {
      return Spacebars.mustache(view.lookup("percent_uploaded"));
    }), " %"), "\n                "), "\n            " ];
  }), "\n        "), "\n    ");
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lettingprintview.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/lettingprintview.html                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.lettingprintview.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.lettingprintview.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.lettingprintview.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("lettingprintview");
Template["lettingprintview"] = new Template("Template.lettingprintview", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n\n    ", HTML.SECTION({
        class: "mar-top-20 no-print"
      }, "\n            ", HTML.DIV({
        class: "container"
      }, "\n                ", HTML.DIV({
        class: "filter-holder"
      }, "\n                    ", HTML.DIV({
        class: "head-border-bottom"
      }, "\n                        ", HTML.DIV({
        class: "purva"
      }, HTML.Raw('\n                            <!--<img src="/images/property-list/thumbnail/purva-small-img.png" alt="" />-->\n                            '), HTML.H1("Your KEY: ", Blaze.View("lookup:data.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "lettingAuctionCode"));
      })), "\n\n                            ", HTML.ADDRESS({
        class: "mar-top-15"
      }, "\n                                ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "address", "address"));
      }), Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "PD", "address", "area"));
      }, function() {
        return [ ", ", Blaze.View("lookup:titleCase", function() {
          return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "address", "area"));
        }), " " ];
      }), Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "PD", "address", "county"));
      }, function() {
        return [ ", ", Blaze.View("lookup:titleCase", function() {
          return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "address", "county"));
        }), " " ];
      }), "\n                            "), "\n\n                            ", HTML.UL({
        style: "margin-left: 20px;"
      }, "\n                                ", HTML.LI("\n                                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Rent</span> :  '), Blaze.View("lookup:data.price", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "price"));
      })), "\n                                "), "\n                                ", HTML.LI("\n                                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Type</span> :  '), Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "type"));
      })), "\n                                "), "\n                                ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "PD", "furnished"));
      }, function() {
        return HTML.Raw("\n                                    <li>\n                                        <p>Furnished </p>\n                                    </li>\n                                ");
      }, function() {
        return HTML.Raw("\n                                    <li>\n                                        <p>Unfurnished </p>\n                                    </li>\n                                ");
      }), "\n                                ", HTML.LI("\n                                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Beds</span> :  '), Blaze.View("lookup:data.PD.bedroomsCount", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "PD", "bedroomsCount"));
      })), "\n                                "), "\n                                ", HTML.LI("\n                                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Baths</span> :  '), Blaze.View("lookup:data.PD.baths", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "PD", "baths"));
      })), "\n                                "), "\n\n                            "), HTML.Raw("\n                            <h3>Please follow below steps to apply for this property.&nbsp;</h3>\n                            "), HTML.UL({
        style: "margin-left: 20px;"
      }, HTML.Raw("\n                                <li>\n                                    <p>Open www.spotmycrib.ie in your laptop.</p>\n                                </li>\n                                "), HTML.LI("\n                                    ", HTML.P("Type ", HTML.STRONG(Blaze.View("lookup:data.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "lettingAuctionCode"));
      })), " key into key area and hit find."), "\n                                "), HTML.Raw('\n                                <li>\n                                    <p>Click apply.</p>\n                                    <ul style="margin-left: 20px;">\n                                        <li>\n                                            <p>If asked, login with your Facebook/Twitter/Google.</p>\n                                        </li>\n                                    </ul>\n                                </li>\n                                <li>\n                                    <p>Enter your offer for the property and click submit.</p>\n                                </li>\n                                <li>\n                                    <p>Upload your references in your profile.</p>\n                                </li>\n\n\n\n                            ')), HTML.Raw('\n\n                            <div style="padding: 10px;margin: 10px 0;background-color: #fafafa;">\n                                <h3 style="padding: 10px 0;">Privacy</h3>\n                                <p>\n                                    We at SpotMyCrib respect your privacy and will not share your personal data with anyone except your landlord &#47; agent. It will only be shown as a supporting documents for your application.\n                                </p><br>\n                            </div>\n\n                        ')), "\n                    "), "\n                "), "\n            "), "\n        "), "\n    ", HTML.DIV({
        class: "head-border-bottom show-only-on-print"
      }, "\n        ", HTML.DIV({
        class: "purva"
      }, HTML.Raw('\n            <!--<img src="/images/property-list/thumbnail/purva-small-img.png" alt="" />-->\n            '), HTML.H1("Your KEY: ", Blaze.View("lookup:data.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "lettingAuctionCode"));
      })), "\n\n            ", HTML.ADDRESS({
        class: "mar-top-15"
      }, "\n                ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "address", "address"));
      }), Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "PD", "address", "area"));
      }, function() {
        return [ ", ", Blaze.View("lookup:titleCase", function() {
          return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "address", "area"));
        }), " " ];
      }), Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "PD", "address", "county"));
      }, function() {
        return [ ", ", Blaze.View("lookup:titleCase", function() {
          return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "address", "county"));
        }), " " ];
      }), "\n            "), "\n\n            ", HTML.UL({
        style: "margin-left: 20px;"
      }, "\n                ", HTML.LI("\n                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Rent</span> :  '), Blaze.View("lookup:data.price", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "price"));
      })), "\n                "), "\n                ", HTML.LI("\n                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Type</span> :  '), Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("data"), "PD", "type"));
      })), "\n                "), "\n                ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "PD", "furnished"));
      }, function() {
        return HTML.Raw("\n                    <li>\n                        <p>Furnished </p>\n                    </li>\n                ");
      }, function() {
        return HTML.Raw("\n                    <li>\n                        <p>Unfurnished </p>\n                    </li>\n                ");
      }), "\n                ", HTML.LI("\n                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Beds</span> :  '), Blaze.View("lookup:data.PD.bedroomsCount", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "PD", "bedroomsCount"));
      })), "\n                "), "\n                ", HTML.LI("\n                    ", HTML.P(HTML.Raw('<span style="color:#b3b3b3;">Baths</span> :  '), Blaze.View("lookup:data.PD.baths", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "PD", "baths"));
      })), "\n                "), "\n\n            "), HTML.Raw("\n            <h3>Please follow below steps to apply for this property.&nbsp;</h3>\n            "), HTML.UL({
        style: "margin-left: 20px;"
      }, HTML.Raw("\n                <li>\n                    <p>Open www.spotmycrib.ie in your laptop.</p>\n                </li>\n                "), HTML.LI("\n                    ", HTML.P("Type ", HTML.STRONG(Blaze.View("lookup:data.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "lettingAuctionCode"));
      })), " key into key area and hit find."), "\n                "), HTML.Raw('\n                <li>\n                    <p>Click apply.</p>\n                    <ul style="margin-left: 20px;">\n                        <li>\n                            <p>If asked, login with your Facebook/Twitter/Google.</p>\n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    <p>Enter your offer for the property and click submit.</p>\n                </li>\n                <li>\n                    <p>Upload your references in your profile.</p>\n                </li>\n\n\n\n            ')), HTML.Raw('\n\n            <div style="padding: 10px;margin: 10px 0;background-color: #fafafa;">\n                <h3 style="padding: 10px 0;">Privacy</h3>\n                <p>\n                    We at SpotMyCrib respect your privacy and your personal data will not be shared with anyone landlord. It will only be shown as a supporting documents for your application.\n                </p><br>\n            </div>\n\n        ')), "\n    "), "\n\n" ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"myProperties.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/myProperties.html                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.myProperties.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.myProperties.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.myProperties.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("myProperties");
Template["myProperties"] = new Template("Template.myProperties", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "unitspage-holder"
      }, "\n        ", HTML.SECTION({
        class: "logo-below-div"
      }, "\n            ", HTML.DIV({
        class: "container"
      }, "\n                ", HTML.DIV({
        class: "logo-holder-div"
      }, "\n                    ", HTML.DIV({
        class: "logo-holder"
      }, "\n                        ", HTML.UL(HTML.Raw('\n                            <!--<li><span class="backBtn" style="cursor: pointer;"><img src="{{cdnPath \'/images/back-arrow.png\'}}"></span></li>-->\n                            '), HTML.LI(HTML.Raw("<h3>MY PROPERTIES</h3>\n                                "), HTML.H4("Total : ", Blaze.View("lookup:data.totalResultsCount", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "totalResultsCount"));
      }), " "), HTML.Raw('\n                                <!--<h4 style="">Showing 3 of 14 (<a href="javascript:void(0)" style="color:#18bc9c">Edit filters</a>)</h4>-->\n                            ')), "\n                        "), "\n                    "), "\n                    ", HTML.DIV({
        class: "menu"
      }, "\n                        ", HTML.UL(HTML.Raw('\n                            <!--<li class="left-border">-->\n                                <!--<h4>Filters (<a href="javascript:void(0)" style="color: #18bc9c;">Edit</a>)</h4>-->\n                                <!--<h3 class="pad-btm-0 text-center">2</h3>-->\n                            <!--</li>-->\n                            '), HTML.LI({
        class: "left-border"
      }, HTML.Raw("\n                                <h4>ACTIVE PROPERTIES</h4>\n                                "), HTML.H3({
        class: "pad-btm-0 text-center"
      }, Blaze.View("lookup:agentStats.activeAuctions", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("agentStats"), "activeAuctions"));
      })), "\n                            "), "\n                            ", HTML.LI({
        class: "left-border"
      }, HTML.Raw("\n                                <h4>APPLICATIONS RECEIVED</h4>\n                                "), HTML.H3({
        class: "pad-btm-0 text-center"
      }, Blaze.View("lookup:agentStats.totalBidsReceived", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("agentStats"), "totalBidsReceived"));
      })), "\n                            "), "\n                            ", HTML.LI({
        class: "left-border  text-left"
      }, HTML.Raw("\n                                <h4>EST. PROFIT</h4>\n                                "), HTML.H3({
        class: "pad-btm-0 text-center"
      }, HTML.Raw("&euro; "), Blaze.View("lookup:agentStats.bidProfit", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("agentStats"), "bidProfit"));
      })), "\n                            "), "\n                            ", HTML.LI({
        class: "addPropertyBtnLi"
      }, "\n", Blaze.If(function() {
        return Spacebars.call(view.lookup("showAddProperty"));
      }, function() {
        return HTML.Raw('<button class="transparent-btn btns addPropertyBtn" type="button">HIDE</button>');
      }, function() {
        return HTML.Raw('\n                                <button class="green-btn btns addPropertyBtn" type="button"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span> ADD PROPERTY</button>\n');
      }), "\n                            "), "\n\n                        "), "\n                    "), "\n                "), "\n            "), "\n        "), "\n\n        ", Blaze.If(function() {
        return Spacebars.call(view.lookup("showAddProperty"));
      }, function() {
        return [ "\n        ", HTML.SECTION({
          class: "mar-top-20 "
        }, "\n            ", HTML.DIV({
          class: "container background-white"
        }, "\n                ", HTML.DIV({
          class: "filter-holder mar-top-20"
        }, "\n                    ", HTML.DIV({
          class: "autoFrm"
        }, HTML.Raw("\n                        <h3>Add Property Form</h3>\n                        <p>Enter the details of the property below and click submit.<br><br></p>\n\n                        "), Spacebars.include(view.lookupTemplate("addPropertyForm")), "\n\n                    "), "\n                "), "\n            "), "\n        "), "\n\n        " ];
      }), "\n\n        ", Blaze.If(function() {
        return Spacebars.call(view.lookup("showFilters"));
      }, function() {
        return [ HTML.Raw("\n        <!-- units property div -->\n        "), HTML.SECTION({
          class: "mar-top-20 xs-filter"
        }, "\n            ", HTML.DIV({
          class: "container"
        }, HTML.Raw('\n                <!--  <div class="head-border-bottom"><h2>Choose Your Home</h2></div> -->\n                <!-- filter section -->\n                '), HTML.DIV({
          class: "filter-holder"
        }, HTML.Raw('\n                    <span class="visible-xs filter-close fancybox-close"></span>\n                    '), HTML.DIV({
          class: "head-border-bottom"
        }, "\n                        ", HTML.UL({
          class: "new-filter"
        }, "\n                            ", HTML.LI(HTML.DIV({
          class: "pad-bot-15"
        }, HTML.Raw('\n                                <h4 class="color-grey text-left"><label> Home type</label></h4>\n                                '), HTML.SELECT({
          id: "myselect",
          class: "form-control filterUnitType"
        }, HTML.Raw('\n                                    <option value="any">Any</option>\n                                    '), Blaze.Each(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("projectData"), "filter", "homeType"));
        }, function() {
          return [ "\n                                        ", HTML.OPTION({
            value: function() {
              return Spacebars.mustache(view.lookup("."));
            }
          }, Blaze.View("lookup:.", function() {
            return Spacebars.mustache(view.lookup("."));
          })), "\n                                    " ];
        }), "\n                                "), "\n                            "), "\n                            "), "\n                            ", HTML.LI("\n                                ", HTML.DIV({
          class: "pad-bot-15"
        }, HTML.Raw('\n                                    <h4 class="color-grey text-left"><label> Facing</label></h4>\n                                    '), HTML.SELECT({
          id: "myselect2",
          class: "form-control filterUnitFacing"
        }, HTML.Raw('\n                                        <option value="any">Any</option>\n                                        '), Blaze.Each(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("projectData"), "filter", "facing"));
        }, function() {
          return [ "\n                                            ", HTML.OPTION({
            value: function() {
              return Spacebars.mustache(view.lookup("."));
            }
          }, Blaze.View("lookup:.", function() {
            return Spacebars.mustache(view.lookup("."));
          })), "\n                                        " ];
        }), "\n                                    "), "\n                                "), "\n                            "), "\n                            ", HTML.LI("\n                                ", HTML.DIV({
          class: "input-field"
        }, HTML.Raw('\n                                    <h4 class="color-grey text-uppercase text-left pad-btm-30">Floor level</h4>\n                                    '), HTML.DIV({
          class: "range-holder"
        }, "\n                                        ", HTML.DIV({
          class: "range-value-holder clearfix"
        }, "\n                                            ", HTML.DIV({
          class: "left value pull-left"
        }, "\n                                                ", HTML.P({
          class: "filterS1l"
        }, Blaze.View("lookup:projectData.filter.floor.0", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("projectData"), "filter", "floor", "0"));
        })), "\n                                            "), "\n                                            ", HTML.DIV({
          class: "right value pull-right"
        }, "\n                                                ", HTML.P({
          class: "filterS1h"
        }, Blaze.View("lookup:projectData.filter.floor.1", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("projectData"), "filter", "floor", "1"));
        })), "\n                                            "), "\n                                        "), HTML.Raw('\n                                        <div id="range-input"></div>\n                                        '), HTML.DIV({
          class: "input-select-new"
        }, HTML.Raw('\n                                            <select id="input-select"></select>\n                                            '), HTML.SPAN({
          class: "cross-new"
        }, HTML.IMG({
          src: function() {
            return Spacebars.mustache(view.lookup("cdnPath"), "/images/clear-cross-btn.png");
          },
          class: "close-icon"
        })), "\n                                        "), "\n                                        ", HTML.DIV({
          class: "input-new"
        }, HTML.Raw('\n                                            <input type="number" min="3" max="25" step="1" id="input-number">'), HTML.SPAN({
          class: "cross-new1"
        }, HTML.IMG({
          src: function() {
            return Spacebars.mustache(view.lookup("cdnPath"), "/images/clear-cross-btn.png");
          },
          class: "close-icon"
        })), "\n                                        "), "\n\n                                    "), "\n                                "), "\n\n                            "), "\n                            ", HTML.LI("\n                                ", HTML.DIV({
          class: "input-field"
        }, HTML.Raw('\n                                    <h4 class="color-grey text-uppercase text-left pad-btm-30">Rent range</h4>\n                                    '), HTML.DIV({
          class: "range-holder"
        }, "\n                                        ", HTML.DIV({
          class: "range-value-holder clearfix"
        }, "\n                                            ", HTML.DIV({
          class: "left value pull-left"
        }, "\n                                                ", HTML.P({
          class: "filterS2l"
        }, Blaze.View("lookup:numDifferentiation", function() {
          return Spacebars.mustache(view.lookup("numDifferentiation"), Spacebars.dot(view.lookup("projectData"), "filter", "priceRange", "0"));
        })), "\n                                            "), "\n                                            ", HTML.DIV({
          class: "right value pull-right"
        }, "\n                                                ", HTML.P({
          class: "filterS2h"
        }, Blaze.View("lookup:numDifferentiation", function() {
          return Spacebars.mustache(view.lookup("numDifferentiation"), Spacebars.dot(view.lookup("projectData"), "filter", "priceRange", "1"));
        })), "\n                                            "), "\n                                        "), HTML.Raw('\n                                        <div id="range-input1"></div>\n                                        '), HTML.DIV({
          class: "input-select-new1"
        }, HTML.Raw('\n                                            <select id="input-select1"></select>'), HTML.SPAN({
          class: "cross-new2"
        }, HTML.IMG({
          src: function() {
            return Spacebars.mustache(view.lookup("cdnPath"), "/images/clear-cross-btn.png");
          },
          class: "close-icon"
        })), "\n                                        "), "\n                                        ", HTML.DIV({
          class: "input-new1"
        }, HTML.Raw('\n                                            <input type="number" min="67.45" max="97.45" step="1" id="input-number1">'), HTML.SPAN({
          class: "cross-new3"
        }, HTML.IMG({
          src: function() {
            return Spacebars.mustache(view.lookup("cdnPath"), "/images/clear-cross-btn.png");
          },
          class: "close-icon"
        })), "\n                                        "), "\n                                    "), "\n                                "), "\n                            "), "\n                        "), "\n                    "), HTML.Raw("\n                    <!-- filter section -->\n                    <!--  for clear div section -->\n                    "), HTML.DIV({
          class: "clear-all-div clearfix hidden-xs"
        }, "\n                        ", Blaze.If(function() {
          return Spacebars.call(view.lookup("filters"));
        }, function() {
          return [ "\n                            ", HTML.UL({
            class: "for-left-side"
          }, "\n                                ", Blaze.Each(function() {
            return Spacebars.dataMustache(view.lookup("objectToPairs"), Spacebars.dot(view.lookup("filters"), "data"));
          }, function() {
            return [ "\n                                    ", HTML.LI({
              class: "list1"
            }, HTML.H5({
              key: function() {
                return Spacebars.mustache(view.lookup("key"));
              }
            }, Blaze.View("lookup:key", function() {
              return Spacebars.mustache(view.lookup("key"));
            }), "\n                                        ", Blaze.Each(function() {
              return Spacebars.call(view.lookup("value"));
            }, function() {
              return [ "\n                                            ", HTML.SPAN({
                val: function() {
                  return Spacebars.mustache(view.lookup("."));
                }
              }, Blaze.View("lookup:.", function() {
                return Spacebars.mustache(view.lookup("."));
              }), " ", HTML.A({
                href: "javascript:void(0)"
              }, HTML.IMG({
                src: function() {
                  return Spacebars.mustache(view.lookup("cdnPath"), "/images/clear-cross-btn.png");
                },
                class: "clearFilterBtn"
              })), HTML.Raw("&nbsp;\n                    ")), "\n                                        " ];
            }), "\n                                    ")), "\n                                " ];
          }), "\n                            "), "\n                            ", HTML.UL({
            class: "for-right-side"
          }, "\n                                ", Blaze.If(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("filters"), "count"));
          }, function() {
            return HTML.Raw('\n                                    <li><button class="transparent-btn btns clearFilters" type="button">CLEAR ALL</button></li>\n                                ');
          }), "\n                            "), "\n                        " ];
        }, function() {
          return "\n\n                        ";
        }), HTML.Raw('\n                        <!--<ul class="for-left-side">-->\n                        <!--<li class="list1"><h5><span>2 BHK <a><img src="{{cdnPath \'/images/clear-cross-btn.png\'}}"></a></span></h5></li>-->\n                        <!--&lt;!&ndash; <li><h5>Floor<span>2 to 15 <a><img src="{{cdnPath \'/images/clear-cross-btn.png\'}}"></a></span></h5></li> &ndash;&gt;-->\n                        <!--<li  class="list2"><h5><span>East<a><img src="{{cdnPath \'/images/clear-cross-btn.png\'}}"></a></span></h5></li>-->\n                        <!--</ul>-->\n                        <!--<ul class="for-right-side">-->\n                        <!--<li><button class="transparent-btn btns for-hide clearFilters" type="button">CLEAR ALL</button></li>-->\n                        <!--</ul>-->\n                    ')), HTML.Raw('\n                    <div class="text-center mar-top-15 mar-btm-20 visible-xs">\n                        <button class="blue-btn btns filterCloseBtn" type="button">Close</button>\n                    </div>\n                ')), HTML.Raw("\n                <!--  for clear div section -->\n            ")), "\n        "), HTML.Raw('\n        <section class="text-center visible-xs xs-filter-btn">\n            <a id="filter-slide" class="green-btn">Filter</a>\n        </section>\n        ') ];
      }, function() {
        return HTML.Raw('\n            <section class="mar-top-20 ">\n                &nbsp;\n            </section>\n        ');
      }), "\n    "), "\n\n    ", HTML.SECTION({
        class: "paginationArea"
      }, "\n        ", HTML.DIV({
        class: "container"
      }, "\n            ", HTML.DIV({
        class: "row"
      }, "\n                ", HTML.DIV({
        class: "col-md-12"
      }, "\n                ", Blaze._TemplateWith(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "pagination"));
      }, function() {
        return Spacebars.include(view.lookupTemplate("pagination"));
      }), "\n                "), "\n            "), "\n        "), "\n    "), "\n\n\n    ", Blaze.Each(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "results"));
      }, function() {
        return [ "\n        ", Spacebars.include(view.lookupTemplate("propertyList")), "\n    " ];
      }), "\n\n    ", Blaze.If(function() {
        return Spacebars.call(view.lookup("showDemoProp"));
      }, function() {
        return [ "\n        ", Blaze.Each(function() {
          return Spacebars.call(view.lookup("demoProperty"));
        }, function() {
          return [ "\n            ", Spacebars.include(view.lookupTemplate("propertyList")), "\n        " ];
        }), "\n    " ];
      }), "\n\n\n    ", HTML.SECTION({
        class: "paginationArea"
      }, "\n        ", HTML.DIV({
        class: "container"
      }, "\n            ", HTML.DIV({
        class: "row"
      }, "\n                ", HTML.DIV({
        class: "col-md-12"
      }, "\n                    ", Blaze._TemplateWith(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "pagination"));
      }, function() {
        return Spacebars.include(view.lookupTemplate("pagination"));
      }), "\n                "), "\n            "), "\n        "), "\n    "), HTML.Raw('\n\n\n\n    <div class="verification-div1" id="propertyLinkDlg" style="display:none;">\n        <div class="refund-div"><h2>Share Property</h2></div>\n        <div class="profile-text text-left">\n            <p class="no-capitalize">Please use this email to use in daft.ie, rent.ie etc ads.</p>\n\n            <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                <div class="form-group col-sm-10" style="padding: 0;">\n                    <input type="text" class="form-control" placeholder="" name="agentPropertyEmailField" id="agentPropertyEmailField" readonly="" style="width: 100%;padding: 0;">\n                </div>\n                <button class="btn btn-primary col-sm-2 copyEmailBtn">Copy</button>\n            </form>\n\n            <p class="no-capitalize mar-top-15">Please use this link to share in facebook, twitter etc. </p>\n\n            <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                <div class="form-group col-sm-10" style="padding: 0;">\n                    <input type="text" class="form-control" placeholder="" name="propertyLinkField" id="propertyLinkField" readonly="" style="width: 100%;padding: 0;">\n                </div>\n                <button class="btn btn-primary col-sm-2 copyLinkBtn">Copy</button>\n            </form>\n\n            <form class="signin-form">\n\n                <div class="signup-btn">\n                    <button class="transparent-btn btns cancelBtn" type="button">CLOSE</button>\n                </div>\n\n            </form>\n\n        </div>\n\n    </div>\n') ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

Template.__checkName("propertyList");
Template["propertyList"] = new Template("Template.propertyList", (function() {
  var view = this;
  return HTML.SECTION({
    class: "main-holder border-top",
    id: function() {
      return [ "property_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, "\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("expanded"));
  }, function() {
    return "";
  }, function() {
    return [ "\n            ", HTML.SECTION({
      class: "border-top act-div"
    }, "\n                ", HTML.DIV({
      class: "container"
    }, "\n                    ", HTML.DIV({
      class: "act-box"
    }, "\n                        ", HTML.DIV({
      class: "background-white"
    }, "\n                            ", HTML.DIV({
      class: "logo-holder-div"
    }, "\n                                ", HTML.DIV({
      class: "logo-holder"
    }, "\n                                    ", HTML.UL("\n                                        ", HTML.LI("\n                                            ", HTML.H3({
      class: "pad-btm-0"
    }, Blaze.View("lookup:titleCase", function() {
      return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "address"));
    }), Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("address"), "area"));
    }, function() {
      return [ ", ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "area"));
      }), " " ];
    }), Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("address"), "county"));
    }, function() {
      return [ ", ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "county"));
      }), " " ];
    }), HTML.Raw(' <span class="auction-number pad-left-10"><a href="javascript:void(0)" class="managePropertyLink" style="font-size:11px;">MANAGE</a></span>')), "\n                                            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("auctionId"));
    }, function() {
      return [ "\n                                                ", HTML.SPAN({
        class: "auction-number"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">LETTING CODE </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ":  ", Blaze.View("lookup:auction.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "lettingAuctionCode"));
      }))), "\n                                                ", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">VIEWS </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ": ", Blaze.View("lookup:auction.views", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "views"));
      }))), "\n                                                ", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">APPLICATIONS </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ": ", Blaze.View("lookup:auction.bids", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "bids"));
      }))), "\n                                                ", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.A({
        target: "_blank",
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), Spacebars.kw({
            route: "letting",
            key: Spacebars.dot(view.lookup("auction"), "lettingAuctionCode")
          }));
        },
        class: "viewListing",
        style: "font-size:11px;"
      }, "VIEW ADVERT")), HTML.Raw('\n<span class="auction-number pad-left-15"><a href="javascript:void(0);" class="showCopyDlg" style="font-size:11px;"><i class="glyphicon glyphicon-thumbs-up" aria-hidden="true" style="font-size: 11px;"></i> SHARE</a></span>\n                                            ') ];
    }), "\n                                        "), "\n                                    "), "\n                                "), "\n\n                                ", HTML.DIV({
      class: "menu"
    }, "\n                                    ", HTML.UL({
      class: "pull-right",
      style: "list-style-type: none;"
    }, "\n            ", Blaze.Unless(function() {
      return Spacebars.call(view.lookup("auctionId"));
    }, function() {
      return [ "\n                                        ", HTML.LI("\n                                            ", Blaze.If(function() {
        return Spacebars.call(view.lookup("showAddAuctionForm"));
      }, function() {
        return HTML.Raw('\n                                                <button class="btns transparent-btn hideAddAuctionForm" type="button">Cancel</button>\n                                            ');
      }, function() {
        return HTML.Raw('\n                                                <button class="btns blue-btn color-white ActivateBtn" type="button">Advertise</button>\n                                                ');
      }), "\n\n                                        "), "\n            " ];
    }), "\n                                        ", HTML.LI({
      class: "see-more-li"
    }, "\n                                            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("expanded"));
    }, function() {
      return [ "\n                                                ", HTML.P({
        class: "see_more_btn"
      }, "See less", HTML.SPAN({
        style: "margin-left:8px;"
      }, HTML.IMG({
        src: function() {
          return Spacebars.mustache(view.lookup("cdnPath"), "/images/accord-top-arrow.png");
        }
      }))), "\n                                            " ];
    }, function() {
      return [ "\n                                                ", HTML.P({
        class: "see_more_btn"
      }, "See more", HTML.SPAN({
        style: "margin-left:8px;"
      }, HTML.IMG({
        src: function() {
          return Spacebars.mustache(view.lookup("cdnPath"), "/images/accord-bottom-arrow.png");
        }
      }))), "\n                                            " ];
    }), "\n\n                                            ", HTML.P({
      class: "showEditPropertyForm"
    }, HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("showEditPropertyForm"));
      },
      style: "color: #0c68a7"
    }, HTML.Raw('Edit <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>'))), "\n\n                                        "), "\n                                    "), "\n                                "), "\n\n\n                            "), HTML.Raw('\n\n\n                            <!--<div class="see-more-btn1"></div>-->\n\n\n\n\n                        ')), "\n\n                        ", Blaze.If(function() {
      return Spacebars.call(view.lookup("showAddAuctionForm"));
    }, function() {
      return [ "\n                            ", HTML.DIV({
        class: "apt-info apt-info1 background-white clearfix showAddAuctionForm autoFrm"
      }, "\n                                ", Spacebars.include(view.lookupTemplate("advertiseForm")), HTML.Raw("\n                                <br><br>\n                            ")), "\n                        " ];
    }), HTML.Raw("\n\n                        <!--act-box-->\n                        "), Blaze.Unless(function() {
      return Spacebars.call(view.lookup("isSubsLoaded"));
    }, function() {
      return [ "\n                            ", HTML.DIV({
        class: function() {
          return [ "apt-info apt-info1 text-center background-white clearfix property_auction_", Spacebars.mustache(view.lookup("auctionId")) ];
        }
      }, "\n                                Loading...\n                            "), "\n                        " ];
    }), "\n                        ", Blaze.If(function() {
      return Spacebars.call(view.lookup("auction"));
    }, function() {
      return [ "\n                            ", HTML.DIV({
        class: function() {
          return [ "apt-info apt-info1 background-white clearfix property_auction_", Spacebars.mustache(view.lookup("auctionId")) ];
        }
      }, "\n                                ", HTML.UL({
        class: "superbuilt-div"
      }, "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Rent</h5>\n                                        "), HTML.H6(HTML.Raw("&euro; "), Blaze.View("lookup:auction.price", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "price"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Lease</h5>\n                                        "), HTML.H6("  ", Blaze.View("lookup:auction.lease", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "lease"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Rent Type</h5>\n                                        "), HTML.H6(" ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("auction"), "rentType"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Ready From</h5>\n                                        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, Blaze.View("lookup:dateFormat", function() {
        return Spacebars.mustache(view.lookup("dateFormat"), Spacebars.dot(view.lookup("auction"), "readyFrom"));
      }), " "), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Activated On</h5>\n                                        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, Blaze.View("lookup:dateFormat", function() {
        return Spacebars.mustache(view.lookup("dateFormat"), Spacebars.dot(view.lookup("auction"), "createdAt"));
      }), " "), "\n                                    "), "\n                                "), "\n                                ", HTML.UL({
        class: "bid-button-div left-line pull-right"
      }, "\n                                    ", HTML.LI("\n                                        ", HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("urlFor"), Spacebars.kw({
            route: "lettingprintview",
            key: view.lookup("lettingprintviewData")
          }));
        },
        target: "_blank",
        class: "transparent-btn btns printView"
      }, "Print KEY"), "\n                                    "), HTML.Raw('\n                                    <li>\n                                        <button class="green-btn btns viewApplications">View Applications</button>\n                                    </li>\n                                ')), "\n\n\n                            "), "\n                        " ];
    }), HTML.Raw("\n                        <!--act-box-->\n                    ")), "\n                "), "\n            "), "\n        " ];
  }), "\n\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("expanded"));
  }, function() {
    return [ HTML.Raw("\n            <!--hide-accord-->\n            "), HTML.SECTION({
      class: function() {
        return Spacebars.mustache(view.lookup("showMyBidsClass"));
      }
    }, "\n                ", HTML.DIV({
      class: "container"
    }, "\n                    ", HTML.DIV({
      class: "act-box"
    }, "\n                        ", HTML.DIV({
      class: "background-white"
    }, "\n                            ", HTML.DIV({
      class: "logo-holder-div"
    }, "\n                                ", HTML.DIV({
      class: "logo-holder"
    }, "\n                                    ", HTML.UL("\n                                        ", HTML.LI("\n                                            ", HTML.H3({
      class: "pad-btm-0"
    }, Blaze.View("lookup:titleCase", function() {
      return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "address"));
    }), Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("address"), "area"));
    }, function() {
      return [ ", ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "area"));
      }), " " ];
    }), Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("address"), "county"));
    }, function() {
      return [ ", ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "county"));
      }), " " ];
    }), HTML.Raw(' <span class="auction-number pad-left-10"><a href="javascript:void(0)" class="managePropertyLink" style="font-size:11px;">MANAGE</a></span>')), "\n            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("auctionId"));
    }, function() {
      return [ "\n", HTML.SPAN({
        class: "auction-number"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">AUCTION CODE </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ":  ", Blaze.View("lookup:auction.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "lettingAuctionCode"));
      }))), "\n", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">VIEWS </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ": ", Blaze.View("lookup:auction.views", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "views"));
      }))), "\n", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">APPLICATIONS </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ": ", Blaze.View("lookup:auction.bids", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "bids"));
      }))), "\n", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.A({
        target: "_blank",
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), Spacebars.kw({
            route: "letting",
            key: Spacebars.dot(view.lookup("auction"), "lettingAuctionCode")
          }));
        },
        class: "viewListing",
        style: "font-size:11px;"
      }, "VIEW ADVERT")), HTML.Raw('\n<span class="auction-number pad-left-15"><a href="javascript:void(0);" class="showCopyDlg" style="font-size:11px;"><i class="glyphicon glyphicon-thumbs-up" aria-hidden="true" style="font-size: 11px;"></i> SHARE</a></span>\n<!--<span class="auction-number pad-left-15"><a href="javascript:void(0);" class="viewApplications">(view)</a></span>-->\n            ') ];
    }), "\n                                        "), "\n                                    "), "\n                                "), "\n\n                            "), "\n                        "), "\n                        ", Blaze.If(function() {
      return Spacebars.call(view.lookup("auctionId"));
    }, function() {
      return [ "\n                            ", HTML.DIV({
        class: "apt-info apt-info1 background-white clearfix"
      }, "\n                                ", HTML.UL({
        class: "superbuilt-div"
      }, "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Rent</h5>\n                                        "), HTML.H6(HTML.Raw("&euro; "), Blaze.View("lookup:auction.price", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "price"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Lease</h5>\n                                        "), HTML.H6("  ", Blaze.View("lookup:auction.lease", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "lease"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Rent Type</h5>\n                                        "), HTML.H6(" ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("auction"), "rentType"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Ready From</h5>\n                                        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, Blaze.View("lookup:dateFormat", function() {
        return Spacebars.mustache(view.lookup("dateFormat"), Spacebars.dot(view.lookup("auction"), "readyFrom"));
      }), " "), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Activated On</h5>\n                                        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, Blaze.View("lookup:dateFormat", function() {
        return Spacebars.mustache(view.lookup("dateFormat"), Spacebars.dot(view.lookup("auction"), "createdAt"));
      }), " "), "\n                                    "), "\n                                "), "\n                                ", HTML.UL({
        class: "bid-button-div left-line pull-right"
      }, "\n                                    ", HTML.LI("\n                                        ", HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("urlFor"), Spacebars.kw({
            route: "lettingprintview",
            data: view.lookup("lettingprintviewData")
          }));
        },
        target: "_blank",
        class: "transparent-btn btns printView"
      }, "Print Tokens"), "\n                                    "), HTML.Raw('\n                                    <li>\n                                        <button class="green-btn btns viewApplications">View Applications</button>\n                                    </li>\n                                ')), "\n\n\n                            "), "\n                        " ];
    }), "\n                        ", HTML.DIV({
      class: "apt-info background-white"
    }, "\n                            ", HTML.DIV({
      class: "box-bdr"
    }, "\n                                ", HTML.DIV({
      class: " box-inner"
    }, "\n                                    ", HTML.DIV({
      class: "clearfix accord-open-border background-halfwhite"
    }, "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Type</h5>\n                                            "), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, Blaze.View("lookup:type", function() {
      return Spacebars.mustache(view.lookup("type"));
    })), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Beds</h5>\n                                            "), HTML.H6("  ", Blaze.View("lookup:bedroomsCount", function() {
      return Spacebars.mustache(view.lookup("bedroomsCount"));
    }), " "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Baths</h5>\n                                            "), HTML.H6("  ", Blaze.View("lookup:baths", function() {
      return Spacebars.mustache(view.lookup("baths"));
    }), " "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Furnished</h5>\n                                            "), HTML.H6("  ", Blaze.If(function() {
      return Spacebars.call(view.lookup("furnished"));
    }, function() {
      return "Yes";
    }, function() {
      return "No";
    })), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Added On</h5>\n                                            "), HTML.H6(" ", Blaze.View("lookup:dateFormat", function() {
      return Spacebars.mustache(view.lookup("dateFormat"), view.lookup("createdAt"));
    }), " "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Edited On</h5>\n                                            "), HTML.H6(" ", Blaze.View("lookup:dateFormat", function() {
      return Spacebars.mustache(view.lookup("dateFormat"), view.lookup("updatedAt"));
    }), " "), "\n                                        "), "\n                                    "), "\n                                    ", HTML.DIV({
      class: "clearfix accord-open-border background-halfwhite"
    }, "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-2 col-sm-2"
    }, HTML.Raw("\n                                            <h5>Images</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("gallery"));
    }, function() {
      return [ "\n                                                    ", Blaze.View("lookup:gallery.length", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("gallery"), "length"));
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    0\n                                                ";
    }), "\n                                            "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-3 col-xs-6 col-sm-3"
    }, HTML.Raw("\n                                            <h5>Bedrooms</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("bedrooms"));
    }, function() {
      return [ "\n                                                    ", Blaze.Each(function() {
        return Spacebars.dataMustache(view.lookup("objectToPairs"), view.lookup("bedrooms"));
      }, function() {
        return [ Blaze.If(function() {
          return Spacebars.call(view.lookup("key"));
        }, function() {
          return ", ";
        }), Blaze.View("lookup:value.bedType", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("value"), "bedType"));
        }), " ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("value"), "ensuite"));
        }, function() {
          return "(Ensuite)";
        }) ];
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    N/A\n                                                ";
    }), "\n                                            "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-3 col-xs-6 col-sm-3 "
    }, HTML.Raw("\n                                            <h5>Amenities</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("amenities"));
    }, function() {
      return [ "\n                                                ", Blaze.View("lookup:addCommaToEach", function() {
        return Spacebars.mustache(view.lookup("addCommaToEach"), view.lookup("amenities"));
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    N/A\n                                                ";
    }), "\n                                            "), "\n                                        "), HTML.Raw('\n                                        <!--<div class="col-md-3 col-xs-6 col-sm-3">-->\n                                            <!--<h5></h5>-->\n                                            <!--<h6>-->\n                                                <!--<a href="http://www.google.com/maps/place/{{address.geoCodeLat}},{{address.geoCodeLong}}" target="_blank">-->\n                                                    <!--<span style="margin-right:8px;vertical-align:middle;" class="glyphicon glyphicon-map-marker" ></span><span style="vertical-align:middle;" class="color-blue">Location</span>-->\n                                                <!--</a>-->\n                                            <!--</h6>-->\n                                        <!--</div>-->\n                                        '), HTML.DIV({
      class: "col-md-3 col-xs-6 col-sm-3"
    }, HTML.Raw("\n                                            <h5>BER</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("BER"));
    }, function() {
      return [ "\n                                                    ", Blaze.View("lookup:addCommaToEach", function() {
        return Spacebars.mustache(view.lookup("addCommaToEach"), view.lookup("BER"));
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    N/A\n                                                ";
    }), "\n                                            "), "\n                                        "), "\n                                    "), "\n                                    ", Blaze.If(function() {
      return Spacebars.call(view.lookup("contacts"));
    }, function() {
      return [ "\n                                    ", HTML.DIV({
        class: "clearfix accord-open-border background-halfwhite"
      }, "\n                                        ", Blaze.Each(function() {
        return Spacebars.call(view.lookup("contacts"));
      }, function() {
        return [ "\n                                        ", HTML.DIV({
          class: "col-md-3 col-xs-6 col-sm-3 "
        }, HTML.Raw("\n                                            <h5>Contact details of the property owner</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.View("lookup:name", function() {
          return Spacebars.mustache(view.lookup("name"));
        }), "\n                                                ", Blaze.If(function() {
          return Spacebars.call(view.lookup("phone"));
        }, function() {
          return [ " (", Blaze.View("lookup:phone", function() {
            return Spacebars.mustache(view.lookup("phone"));
          }), HTML.Raw(")<br>") ];
        }), "\n                                                ", Blaze.If(function() {
          return Spacebars.call(view.lookup("email"));
        }, function() {
          return Blaze.View("lookup:email", function() {
            return Spacebars.mustache(view.lookup("email"));
          });
        }), "\n                                            "), "\n                                        "), "\n                                        " ];
      }), "\n\n                                    "), "\n                                    " ];
    }), "\n                                    ", Blaze.If(function() {
      return Spacebars.call(view.lookup("auctionId"));
    }, function() {
      return [ "\n                                    ", HTML.DIV({
        class: "clearfix accord-open-border background-halfwhite"
      }, "\n                                        ", Blaze.Each(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("auction"), "contacts"));
      }, function() {
        return [ "\n                                        ", HTML.DIV({
          class: "col-md-3 col-xs-6 col-sm-3 "
        }, HTML.Raw("\n                                            <h5>Contact persons for this advert</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.View("lookup:name", function() {
          return Spacebars.mustache(view.lookup("name"));
        }), "\n                                                ", Blaze.If(function() {
          return Spacebars.call(view.lookup("phone"));
        }, function() {
          return [ " (", Blaze.View("lookup:phone", function() {
            return Spacebars.mustache(view.lookup("phone"));
          }), HTML.Raw(")<br>") ];
        }), "\n                                                ", Blaze.If(function() {
          return Spacebars.call(view.lookup("email"));
        }, function() {
          return Blaze.View("lookup:email", function() {
            return Spacebars.mustache(view.lookup("email"));
          });
        }), "\n                                            "), "\n                                        "), "\n                                        " ];
      }), "\n\n                                    "), "\n                                    " ];
    }), "\n                                "), "\n                                ", HTML.DIV({
      class: "clearfix accord-open-border accord-top-border background-halfwhite"
    }, "\n                                    ", HTML.P({
      class: "accor-padd"
    }, Blaze.View("lookup:nlToBr", function() {
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("nlToBr"), view.lookup("about")));
    })), "\n                                "), "\n\n                            "), "\n                            ", HTML.DIV({
      class: "see-more-btn1 see_more_btn"
    }, "\n                                ", HTML.P("See less", HTML.SPAN({
      style: "margin-left:8px;"
    }, HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/accord-top-arrow.png");
      }
    }))), "\n                                ", HTML.P({
      class: "showEditPropertyForm"
    }, HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("showEditPropertyForm"));
      },
      style: "color: #0c68a7"
    }, HTML.Raw('Edit <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>'))), "\n                            "), "\n                        "), HTML.Raw("<!--act-box-->\n                    ")), "\n                "), "\n            "), "\n\n        " ];
  }), "\n    ");
}));

Template.__checkName("advertiseForm");
Template["advertiseForm"] = new Template("Template.advertiseForm", (function() {
  var view = this;
  return [ HTML.Raw('<h3>Advertise Form</h3>\n    <p style="text-align: left;margin-bottom: 20px;">Enter the rent details of the property below and click submit.<br><br></p>\n\n    '), HTML.FORM({
    class: "signin-form cf-1",
    id: "advertiseFormCF"
  }, HTML.Raw('\n\n        <input type="hidden" name="currency" value="eur">\n        '), HTML.INPUT({
    type: "hidden",
    name: "propertyId",
    value: function() {
      return Spacebars.mustache(view.lookup("_id"));
    }
  }), "\n        ", HTML.DIV({
    class: "clearfix"
  }, HTML.Raw('\n            <div class="styled-input ">\n                <input type="text" name="price" id="rent" required="">\n                <label id="rent" class="error" for="rent">This field is required.</label>\n                <br>\n                <label>Rent *</label>\n                <span></span>\n            </div>\n\n            <div class="styled-input ">\n                <input type="text" name="readyFrom" id="readyFrom">\n                <label class="" for="rent"></label>\n                <br>\n                <label>Ready to move in from?</label>\n                <span></span>\n            </div>\n\n            <div class="styled-input styled-input-select">\n                <label>Lease until?</label>\n                <select name="lease" autocomplete="">\n\n\n\n                        <option value="">(Select One)</option>\n\n\n\n                        <option value="1 month">1 month</option>\n\n\n\n                        <option value="2 months">2 months</option>\n\n\n\n                        <option value="3 months">3 months</option>\n\n\n\n                        <option value="4 months">4 months</option>\n\n\n\n                        <option value="5  months">5  months</option>\n\n\n\n                        <option value="6 months">6 months</option>\n\n\n\n                        <option value="7 months">7 months</option>\n\n\n\n                        <option value="8 months">8 months</option>\n\n\n\n                        <option value="9 months">9 months</option>\n\n\n\n                        <option value="10 months">10 months</option>\n\n\n\n                        <option value="11 months">11 months</option>\n\n\n\n                        <option value="1 year">1 year</option>\n\n\n\n                        <option value="More than a year">More than a year</option>\n\n\n\n                </select>\n                <span></span>\n            </div>\n\n            <div class="styled-input styled-input-select">\n                <label>Rent type</label>\n                <select name="rentType" autocomplete="">\n                    <option value="">(Select One)</option>\n                    <option value="weekly">Weekly</option>\n                    <option value="monthly">Monthly</option>\n                    <option value="other">Other</option>\n                </select>\n                <span></span>\n            </div>\n\n            <div class="w-100"></div>\n\n            <div class="sep-section">\n                <label class="sep-label">Contact person for this advertisement</label>\n                <div class="styled-input underline">\n                    <input type="text" name="contacts.0.name">\n                    <label>Name</label>\n                    <span></span>\n                </div>\n                <div class="styled-input underline">\n                    <input type="text" name="contacts.0.phone">\n                    <label>Mobile</label>\n                    <span></span>\n                </div>\n                <div class="styled-input underline">\n                    <input type="email" name="contacts.0.email">\n                    <label>Email</label>\n                    <span></span>\n                </div>\n            </div>\n\n            <div class="w-100"></div>\n\n\n            '), HTML.DIV({
    class: "styled-full-width"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("advertiseFormSaving"));
  }, function() {
    return HTML.Raw('\n                    <button type="button" class="btns transparent-btn">Saving</button>\n                ');
  }, function() {
    return HTML.Raw('\n                    <button type="submit" class="btns blue-btn">Save</button>\n                ');
  }), HTML.Raw('\n                <button type="button" class="btns transparent-btn advertiseFormCancelBtn">Cancel</button>\n            ')), HTML.Raw('\n\n            <div class="w-100"></div>\n        ')), "\n    ") ];
}));

Template.__checkName("addPropertyForm");
Template["addPropertyForm"] = new Template("Template.addPropertyForm", (function() {
  var view = this;
  return HTML.FORM({
    class: "signin-form cf-1",
    id: "addPropertyFormCF"
  }, "\n        ", HTML.DIV({
    class: "clearfix"
  }, "\n", Blaze.If(function() {
    return Spacebars.call(view.lookup("isSA"));
  }, function() {
    return HTML.Raw('\n            <div class="styled-full-width">\n                <label class="cf-title">Importer</label><br>\n                <input type="text" name="url" class="styled-input-textarea url text-left" style="text-align:left;" placeholder="Enter any url">\n            </div>\n\n           <input type="hidden" name="isImported" value="true">\n');
  }), HTML.Raw('\n            <div class="w-100"></div>\n\n            <div class="styled-input ">\n                <input type="text" name="address.address" id="address.address" required="">\n                <label id="address.address-error" class="error" for="address.address">This field is required.</label>\n                <br>\n                <label>Name and Street *</label>\n                <span></span>\n            </div>\n\n            <div class="styled-input ">\n                <input type="text" name="price">\n                <!--<label id="address.address-error" class="error" for="address.address">This field is required.</label>-->\n                <br>\n                <label>Rent *</label>\n                <span></span>\n            </div>\n\n            '), HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>Country</label>\n                "), HTML.SELECT({
    name: "address.country",
    required: "",
    autocomplete: "",
    class: ""
  }, "\n                    ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("countries"));
  }, function() {
    return [ "\n                        ", HTML.OPTION({
      value: function() {
        return [ Spacebars.mustache(view.lookup("value")), " ", Spacebars.mustache(view.lookup("selected")) ];
      }
    }, Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>County</label>\n                "), HTML.SELECT({
    name: "address.county",
    required: "",
    autocomplete: "",
    class: "countySelected"
  }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), Blaze.Each(function() {
    return Spacebars.call(view.lookup("counties"));
  }, function() {
    return [ "\n                        ", HTML.OPTION({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>Area *</label>\n                "), HTML.SELECT({
    name: "address.area",
    required: "",
    autocomplete: "",
    class: ""
  }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), Blaze.Each(function() {
    return Spacebars.call(view.lookup("areas"));
  }, function() {
    return [ "\n                        ", HTML.OPTION({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), "\n\n            ", HTML.DIV({
    class: "styled-input styled-input-select"
  }, HTML.Raw("\n                <label>Property type *</label>\n                "), HTML.SELECT({
    name: "type",
    required: "",
    autocomplete: ""
  }, HTML.Raw('\n                    <option value="">(Select One)</option>\n                    '), Blaze.Each(function() {
    return Spacebars.call(view.lookup("propertyTypes"));
  }, function() {
    return [ "\n                        ", HTML.OPTION({
      value: function() {
        return Spacebars.mustache(view.lookup("value"));
      }
    }, Blaze.View("lookup:label", function() {
      return Spacebars.mustache(view.lookup("label"));
    })), "\n                    " ];
  }), "\n                "), HTML.Raw("\n                <span></span>\n            ")), HTML.Raw('\n\n\n            <div class="styled-input styled-input-select">\n                <label>Furnished? *</label>\n                <select name="furnished" required="" autocomplete="">\n                    <option value="true">Yes</option>\n                    <option value="false">No</option>\n                </select>\n                <span></span>\n            </div>\n\n            <div class="styled-input underline">\n                <input type="number" name="baths" id="baths" required="">\n                <label>Number of bathrooms</label>\n                <span></span>\n            </div>\n\n            <div class="styled-input underline">\n                <input type="number" name="numBedRoomCount" id="numBedRoomCount" required="">\n                <label>Number of bedrooms</label>\n                <span></span>\n            </div>\n\n            '), Blaze.If(function() {
    return Spacebars.call(view.lookup("numBedRoomCount"));
  }, function() {
    return [ "\n            ", HTML.DIV({
      class: "styled-full-width"
    }, HTML.Raw('\n                <label class="sep-label">Ensuite? </label>\n\n                '), Blaze.Each(function() {
      return Spacebars.dataMustache(view.lookup("ensuiteLoop"), view.lookup("numBedRoomCount"));
    }, function() {
      return [ "\n                ", HTML.DIV({
        class: "styled-input-select styled-input-checkbox max-20"
      }, "\n                    ", HTML.DIV({
        class: "checkbox disabled"
      }, "\n                        ", HTML.LABEL(HTML.INPUT({
        type: "checkbox",
        name: function() {
          return [ "bedrooms.", Spacebars.mustache(view.lookup("@index")), ".ensuite" ];
        }
      }), "Bedroom ", Blaze.View("lookup:i", function() {
        return Spacebars.mustache(view.lookup("i"));
      }), " Ensuite?"), "\n                    "), HTML.Raw("\n                    <label>Bed Type</label>\n                    "), HTML.SELECT({
        required: "",
        autocomplete: "",
        name: function() {
          return [ "bedrooms.", Spacebars.mustache(view.lookup("@index")), ".bedType" ];
        }
      }, HTML.Raw('\n                        <option value="single">Single</option>\n                        <option value="double">Double</option>\n                        <option value="twin">Twin</option>\n                    ')), HTML.Raw("\n                    <span></span>\n                ")), "\n            " ];
    }), "\n\n            "), HTML.Raw('<div class="w-100"></div>\n            ') ];
  }), "\n\n            ", HTML.DIV({
    class: "styled-full-width"
  }, HTML.Raw('\n                <label class="cf-title">About</label><br>\n                '), HTML.TEXTAREA({
    name: "about",
    class: "styled-input-textarea autoGrowTA",
    placeholder: "Enter any additional info about this letting."
  }), "\n\n            "), HTML.Raw('\n\n            <div class="w-100"></div>\n\n            <div class="styled-full-width styled-input-checkbox">\n                <label class="cf-title">Amenities</label><br>\n                <div class="cb-subsec">\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Parking">Parking</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Club House">Club House</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Swimming Pool">Swimming Pool</label>\n                    </div>\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Mini Theater">Mini Theater</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Gym">Gym</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Meditation Hall">Meditation Hall</label>\n                    </div>\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Cable Television">Cable Television</label>\n                    </div>\n                </div>\n                <div class="cb-subsec">\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Dishwasher">Dishwasher</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Garden / Patio / Balcony">Garden / Patio / Balcony</label>\n                    </div>\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Internet">Internet</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Serviced Property">Serviced Property</label>\n                    </div>\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Washing Machine">Washing Machine</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Central Heating">Central Heating</label>\n                    </div>\n                </div>\n                <div class="cb-subsec">\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Dryer">Dryer</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="House Alarm">House Alarm</label>\n                    </div>\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Microwave">Microwave</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Pets Allowed">Pets Allowed</label>\n                    </div>\n                    <div class="checkbox">\n                        <label><input type="checkbox" name="amenities" value="Smoking ">Smoking</label>\n                    </div>\n                    <div class="checkbox disabled">\n                        <label><input type="checkbox" name="amenities" value="Wheelchair Access">Wheelchair Access</label>\n                    </div>\n                </div>\n                <span></span>\n            </div>\n\n            <div class="w-100"></div>\n\n            <div class="sep-section">\n                <label class="sep-label">Contact details of the property owner if any</label>\n                <div class="styled-input underline">\n                    <input type="text" name="contacts.0.name">\n                    <label>Owners Name <i title="This info will not be displayed to users. It confidential and will be used only for record purpose.">(Private)</i></label>\n                    <span></span>\n                </div>\n                <div class="styled-input underline">\n                    <input type="text" name="contacts.0.phone">\n                    <label>Owners Mobile <i title="This info will not be displayed to users. It confidential and will be used only for record purpose.">(Private)</i></label>\n                    <span></span>\n                </div>\n                <div class="styled-input underline">\n                    <input type="email" name="contacts.0.email">\n                    <label>Owners Email <i title="This info will not be displayed to users. It confidential and will be used only for record purpose.">(Private)</i></label>\n                    <span></span>\n                </div>\n            </div>\n\n            <div class="w-100"></div>\n\n\n            <div class="styled-full-width">\n                <button class="btns blue-btn openFileUploader">Add Images</button>\n                <!--<label for="selectPropertyImages">Property images</label>-->\n                <!--<input type="file" multiple="true" class="selectPropertyImages"  id="selectPropertyImages"/>-->\n                <!--<p class="help-block">Example block-level help text here.</p>-->\n            </div>\n\n            <div class="w-100"></div>\n\n\n            '), Spacebars.include(view.lookupTemplate("imageView")), "\n\n            ", HTML.DIV({
    class: "styled-full-width"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("addPropertyFormSaving"));
  }, function() {
    return HTML.Raw('\n                    <button type="button" class="btns transparent-btn">Saving</button>\n                ');
  }, function() {
    return HTML.Raw('\n                    <button type="submit" class="btns blue-btn addPropertyFormSaveBtn">Save</button>\n                ');
  }), HTML.Raw('\n                <button type="button" class="btns blue-btn addPropertyFormSaveAdvertiseBtn">Save and Advertise</button>\n                <button type="button" class="btns transparent-btn addPropertyFormCancelBtn">Cancel</button>\n            ')), HTML.Raw('\n\n            <div class="w-100"></div>\n        ')), "\n    ");
}));

Template.__checkName("addPropertyForm1");
Template["addPropertyForm1"] = new Template("Template.addPropertyForm1", (function() {
  var view = this;
  return Blaze._TemplateWith(function() {
    return {
      collection: Spacebars.call("Collections.Properties"),
      id: Spacebars.call("insertPropertiesForm"),
      type: Spacebars.call("insert")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {
      return [ "\n        ", Blaze.Each(function() {
        return Spacebars.call(view.lookup("afFieldNames"));
      }, function() {
        return [ "\n            ", Blaze._TemplateWith(function() {
          return {
            name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),
            options: Spacebars.call(view.lookup("afOptionsFromSchema"))
          };
        }, function() {
          return Spacebars.include(view.lookupTemplate("afQuickField"));
        }), "\n        " ];
      }), HTML.Raw('\n\n        <div class="form-group">\n            <label for="selectPropertyImages">Property images</label>\n            <input type="file" multiple="true" class="selectPropertyImages" id="selectPropertyImages">\n            <!--<p class="help-block">Example block-level help text here.</p>-->\n        </div>\n\n        '), Spacebars.include(view.lookupTemplate("imageView")), HTML.Raw('\n\n\n        <button type="submit" class="btns blue-btn addPropertyFormSaveBtn">Save</button>\n        <button type="button" class="btns transparent-btn addPropertyFormCancelBtn">Cancel</button>\n\n    ') ];
    });
  });
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"pagination.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/pagination.html                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.pagination.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.pagination.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.pagination.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("pagination");
Template["pagination"] = new Template("Template.pagination", (function() {
  var view = this;
  return HTML.NAV("\n        ", Blaze.If(function() {
    return false;
  }, function() {
    return [ "\n        ", HTML.UL({
      class: "pagination"
    }, "\n            ", HTML.LI("\n                ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("prevPage"), "href"));
      },
      "aria-label": function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("prevPage"), "text"));
      }
    }, HTML.Raw('\n                    <span aria-hidden="true">&laquo;</span>\n                ')), "\n            "), "\n            ", Blaze.Each(function() {
      return Spacebars.call(view.lookup("pages"));
    }, function() {
      return [ "\n                ", HTML.LI(HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("href"));
        }
      }, Blaze.View("lookup:text", function() {
        return Spacebars.mustache(view.lookup("text"));
      }))), "\n            " ];
    }), HTML.Raw('\n            <!--<li><a href="javascript:void(0)">2</a></li>-->\n            <!--<li><a href="javascript:void(0)">3</a></li>-->\n            <!--<li><a href="javascript:void(0)">4</a></li>-->\n            <!--<li><a href="javascript:void(0)">5</a></li>-->\n            '), HTML.LI("\n                ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("nextPage"), "href"));
      },
      "aria-label": function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("nextPage"), "text"));
      }
    }, HTML.Raw('\n                    <span aria-hidden="true">&raquo;</span>\n                ')), "\n            "), "\n        "), "\n        " ];
  }), "\n        ", HTML.UL({
    class: "pagination"
  }, "\n            ", HTML.LI({
    class: function() {
      return [ "page-item ", Spacebars.mustache(Spacebars.dot(view.lookup("prevPage"), "disabled")) ];
    }
  }, "\n                ", HTML.A({
    class: "page-link",
    href: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("prevPage"), "href"));
    },
    tabindex: "-1"
  }, Blaze.View("lookup:prevPage.text", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("prevPage"), "text"));
  })), "\n            "), "\n            ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("pages"));
  }, function() {
    return [ "\n                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("current"));
    }, function() {
      return [ "\n                    ", HTML.LI({
        class: "page-item active"
      }, "\n                        ", HTML.A({
        class: "page-link",
        href: function() {
          return Spacebars.mustache(view.lookup("href"));
        }
      }, Blaze.View("lookup:text", function() {
        return Spacebars.mustache(view.lookup("text"));
      }), HTML.Raw(' <span class="sr-only">(current)</span>')), "\n                    "), "\n                " ];
    }, function() {
      return [ "\n                    ", HTML.LI({
        class: "page-item"
      }, HTML.A({
        class: "page-link",
        href: function() {
          return Spacebars.mustache(view.lookup("href"));
        }
      }, Blaze.View("lookup:text", function() {
        return Spacebars.mustache(view.lookup("text"));
      }))), "\n                " ];
    }), "\n            " ];
  }), "\n            ", HTML.LI({
    class: function() {
      return [ "page-item ", Spacebars.mustache(Spacebars.dot(view.lookup("nextPage"), "disabled")) ];
    }
  }, "\n                ", HTML.A({
    class: "page-link",
    href: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("nextPage"), "href"));
    }
  }, Blaze.View("lookup:nextPage.text", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("nextPage"), "text"));
  })), "\n            "), "\n        "), "\n    ");
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"profile.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/profile.html                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.profile.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.profile.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.profile.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("profile");
Template["profile"] = new Template("Template.profile", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n\n    ", Blaze.If(function() {
        return Spacebars.call(view.lookup("currentUser"));
      }, function() {
        return [ "\n        ", Spacebars.include(view.lookupTemplate("userProfile")), "\n    " ];
      }, function() {
        return "\n\n    ";
      }), "\n\n" ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

Template.__checkName("accountProfileExtended");
Template["accountProfileExtended"] = new Template("Template.accountProfileExtended", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("currentUser"));
  }, function() {
    return [ "\n        ", Spacebars.include(view.lookupTemplate("userProfile")), "\n    " ];
  }, function() {
    return "\n\n    ";
  });
}));

Template.__checkName("userProfile");
Template["userProfile"] = new Template("Template.userProfile", (function() {
  var view = this;
  return [ HTML.DIV({
    class: "profile-page"
  }, "\n        ", HTML.SECTION({
    class: "logo-below-div"
  }, "\n            ", HTML.DIV({
    class: "container"
  }, "\n                ", HTML.DIV({
    class: "logo-holder-div"
  }, "\n                    ", HTML.DIV({
    class: "logo-holder"
  }, "\n                        ", HTML.UL("\n                            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("backBtnNeeded"));
  }, function() {
    return HTML.LI(HTML.SPAN({
      class: "backBtn",
      style: "cursor: pointer;"
    }, HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/back-arrow.png");
      }
    })));
  }), "\n                            ", HTML.LI("\n                                ", HTML.H2("\n                                    ", Blaze.If(function() {
    return Spacebars.call(view.lookup("displayName"));
  }, function() {
    return [ Blaze.View("lookup:displayName", function() {
      return Spacebars.mustache(view.lookup("displayName"));
    }), HTML.Raw("&#39;s Profile\n                                            ") ];
  }, function() {
    return "My Profile\n                                    ";
  }), "\n                                "), "\n                            "), "\n                        "), "\n                    "), "\n                    ", Blaze.If(function() {
    return Spacebars.call(view.lookup("backBtnNeeded"));
  }, function() {
    return HTML.Raw('\n                        <div class="menu">\n                            <ul>\n                                <li class="text-center">\n                                    <button class="blue-btn btns backBtn" type="button" style="margin-bottom: 5px;">\n                                        Back to Property\n                                    </button>\n\n                                </li>\n                            </ul>\n                        </div>\n                    ');
  }), "\n                "), "\n            "), "\n        "), "\n\n        ", HTML.SECTION({
    class: "myprofile-info mar-top-20 mar-btm-30 pad-btm-20"
  }, "\n            ", HTML.DIV({
    class: "container"
  }, "\n                ", HTML.DIV({
    class: "text-center"
  }, HTML.Raw('\n                    <!--<h2 class="text-center">{{displayName}}</h2>-->\n                    <p class="text-center">Wouldn\'t it be great if landlords find you? Make your profile public now to find house faster. Its safe and quick. </p>\n                    '), HTML.H3({
    class: function() {
      return [ "text-center ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "isPublic"));
      }, function() {
        return "green-text";
      }, function() {
        return "text-warning";
      }) ];
    }
  }, HTML.SELECT({
    class: "togglePublicProfileSetting"
  }, HTML.OPTION(HTML.Attrs({
    value: "yes"
  }, function() {
    return Spacebars.attrMustache(view.lookup("isPublicProfileSelectYes"));
  }), "Yes"), HTML.OPTION(HTML.Attrs({
    value: "no"
  }, function() {
    return Spacebars.attrMustache(view.lookup("isPublicProfileSelectNo"));
  }), "No")), "\n                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "isPublic"));
  }, function() {
    return "Landlords can find and invite me for house viewings.\n                        ";
  }, function() {
    return "Landlords can't find me.";
  }), "\n                    "), "\n", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "isPublic"));
  }, function() {
    return [ "\n                    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "username"));
    }, function() {
      return [ "\n                        ", HTML.FORM({
        class: "profileurl-form"
      }, "\n                            ", HTML.DIV({
        class: "input-group"
      }, "\n                                ", HTML.INPUT({
        type: "text",
        value: function() {
          return [ "https://www.spotmycrib.ie/tenant/", Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "username")) ];
        },
        class: "form-control profileLinkField",
        name: "profileLinkField",
        id: "profileLinkField",
        style: ""
      }), HTML.Raw('\n                                <span class="input-group-btn">\n                                <button class="btns transparent-btn profileLinkCopyBtn" type="button">Copy</button>\n                            </span>\n                            ')), "\n                        "), "\n                    " ];
    }), "\n" ];
  }), "\n                "), "\n                ", HTML.DIV({
    class: "background-white mar-top-20 pad-btm-30"
  }, HTML.Raw('\n                    <div class="padding30">\n\n                    </div>\n                    '), HTML.DIV({
    class: "grey-box "
  }, "\n                        ", HTML.DIV({
    class: "text-center"
  }, HTML.Raw("<h3>Profile completion</h3>\n                            "), HTML.DIV({
    class: "progress",
    style: "height: 21px;margin: 0 auto;margin-bottom: 10px;"
  }, "\n                                ", HTML.DIV({
    class: function() {
      return [ "progress-bar ", Spacebars.mustache(Spacebars.dot(view.lookup("progress"), "css")) ];
    },
    role: "progressbar",
    "aria-valuenow": "60",
    "aria-valuemin": "0",
    "aria-valuemax": "100",
    style: function() {
      return [ "width: ", Spacebars.mustache(Spacebars.dot(view.lookup("progress"), "percent")), ";height: 21px;line-height: 21px;" ];
    }
  }, "\n                                    ", Blaze.View("lookup:progress.percent", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("progress"), "percent"));
  }), "\n                                "), "\n                            "), HTML.Raw("\n\n                            <p> Complete profiles are given preference. </p>\n\n                            "), Blaze.Each(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("progress"), "issues"));
  }, function() {
    return [ "\n                                ", HTML.P(Blaze.View("lookup:.", function() {
      return Spacebars.mustache(view.lookup("."));
    })), "\n                            " ];
  }), "\n\n                        "), "\n\n                        ", HTML.FORM({
    action: ""
  }, "\n                            ", HTML.DIV({
    class: "inp-wrap mar-btm-20"
  }, HTML.Raw("\n                                <label>\n                                    Email\n                                </label>\n                                "), HTML.DIV({
    class: "inp-hold"
  }, "\n                                    ", HTML.INPUT({
    type: "email",
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userEmail"));
    },
    class: "form-control"
  }), "\n                                    ", HTML.SPAN({
    class: "overlay-text",
    placeholder: "abc@gmail.com"
  }, Blaze.View("lookup:data.userEmail", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userEmail"));
  })), HTML.Raw('\n                                    <!--<span class="color-green green-bdr-btm change-clk change-click change-text">Change</span>-->\n                                    <!--<button class="color-green green-bdr-btm change-clk save-btn transition" type="button">Save</button>-->\n                                    <!--<div class="cancel-div transition"><button class="color-green green-bdr-btm cancel-clk" type="button">Cancel</button></div>-->\n                                ')), "\n                            "), HTML.Raw('\n                                <!--{{#if data.userEmailVerified}}{{else}}-->\n                            <!--<div class="inp-wrap mar-btm-20">-->\n                            <!--<div class="request-hold hideen-div">-->\n                            <!--<h5>Email not verified?</h5>-->\n                            <!--<span class="color-blue blue-bdr-btm request-clk sendEmailVerification">Send verification link</span>-->\n                            <!--<span class="sent-req color-grey transition"><span class="fa-check fa color-green pad-right-10"></span>Request Sent</span>-->\n\n                            <!--</div>-->\n                            <!--</div>-->\n                                <!--{{/if}}-->\n                            '), HTML.DIV({
    class: "inp-wrap mar-btm-20"
  }, HTML.Raw('\n                                <label>\n                                    Mobile\n                                </label>\n                                <div class="alert alert-success mobileValidationErrors" style="">\n\n                                </div>\n                                '), HTML.DIV({
    class: "inp-hold"
  }, "\n                                    ", HTML.INPUT({
    type: "text",
    placeholder: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "mobile"));
    },
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "mobile"));
    },
    class: "form-control db-data changeMobileValue"
  }), "\n                                    ", HTML.SPAN({
    class: "overlay-text"
  }, Blaze.View("lookup:data.userData.profile.mobile", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "mobile"));
  })), HTML.Raw('\n                                    <span class="color-blue blue-bdr-btm change-clk change-click change-text">Change</span>\n                                    <button class="color-blue blue-bdr-btm change-clk save-btn transition changeMobileConfirmation" type="button">Save</button>\n                                    <div class="cancel-div transition"><button class="color-blue blue-bdr-btm cancel-clk" type="button">Cancel</button></div>\n                                ')), "\n                            "), "\n                            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("hasPasswordSetReqCompleted"));
  }, function() {
    return [ "\n                            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("hasPasswordSet"));
    }, function() {
      return HTML.Raw('\n                                <div class="inp-wrap request-hold mar-btm-20 change-pwd-link">\n                                    <h5>Change password?</h5>\n                                    <button class="changepass1 changePwdBtn" type="button">Change Password</button>\n                                </div>\n                            ');
    }, function() {
      return HTML.Raw('\n                                <div class="inp-wrap request-hold mar-btm-20 change-pwd-link">\n                                    <h5>Set password</h5>\n                                    <button class="changepass1 setPwdBtn" type="button">Set Password</button>\n                                </div>\n                            ');
    }), "\n                            " ];
  }), "\n                            ", HTML.DIV({
    class: "inp-wrap request-hold mar-btm-20 change-pwd-link"
  }, "\n                                ", HTML.H5(Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "facebook"));
  }, function() {
    return HTML.Raw('<span class="green-text">Connected to Facebook</span>');
  }, function() {
    return "Link with Facebook";
  })), "\n                                ", Blaze.Unless(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "facebook"));
  }, function() {
    return HTML.Raw('<button class="changepass1 linkWithFacebookBtn" type="button">Link with Facebook</button>');
  }), "\n                            "), "\n                            ", HTML.DIV({
    class: "inp-wrap request-hold mar-btm-20 change-pwd-link"
  }, "\n                                ", HTML.H5(Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "twitter"));
  }, function() {
    return HTML.Raw('<span class="green-text">Connected to Twitter</span>');
  }, function() {
    return "Link with Twitter";
  })), "\n                                ", Blaze.Unless(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "twitter"));
  }, function() {
    return HTML.Raw('<button class="changepass1 linkWithTwitterBtn" type="button">Link with Twitter</button>');
  }), "\n                            "), "\n                            ", HTML.DIV({
    class: "inp-wrap request-hold mar-btm-20 change-pwd-link"
  }, "\n                                ", HTML.H5(Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "linkedin"));
  }, function() {
    return HTML.Raw('<span class="green-text">Connected to LinkedIn</span>');
  }, function() {
    return "Link with LinkedIn";
  })), "\n                                ", Blaze.Unless(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "linkedin"));
  }, function() {
    return HTML.Raw('<button class="changepass1 linkWithLinkedInBtn" type="button">Link with LinkedIn</button>');
  }), "\n                            "), "\n                            ", HTML.DIV({
    class: "inp-wrap request-hold mar-btm-20 change-pwd-link"
  }, "\n                                ", HTML.H5(Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "google"));
  }, function() {
    return HTML.Raw('<span class="green-text">Connected to Google</span>');
  }, function() {
    return "Link with Google";
  })), "\n                                ", Blaze.Unless(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("currentUser"), "services", "google"));
  }, function() {
    return HTML.Raw('<button class="changepass1 linkWithGoogleBtn" type="button">Link with Google</button>');
  }), "\n                            "), "\n                            ", HTML.DIV({
    class: "inp-wrap mar-btm-20"
  }, HTML.Raw("\n                                <label>\n                                    Employer name\n                                </label>\n                                "), HTML.DIV({
    class: "inp-hold"
  }, "\n                                    ", HTML.INPUT({
    type: "text",
    placeholder: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerName"));
    },
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerName"));
    },
    class: "form-control db-data changeEmployerNameValue"
  }), "\n                                    ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerName"));
  }, function() {
    return [ "\n                                        ", HTML.SPAN({
      class: "overlay-text",
      placeholder: ""
    }, Blaze.View("lookup:data.userData.profile.references.employerName", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerName"));
    })), "\n                                    " ];
  }, function() {
    return HTML.Raw('\n                                        <span class="overlay-text" placeholder=""> ? </span>\n                                    ');
  }), HTML.Raw('\n                                    <span class="color-blue blue-bdr-btm change-clk change-click change-text">Update</span>\n                                    <button class="color-blue blue-bdr-btm change-clk save-btn transition changeEmployerNameConfirmation" type="button">Save</button>\n                                    <div class="cancel-div transition"><button class="color-blue green-bdr-btm cancel-clk" type="button">Cancel</button></div>\n                                ')), "\n                            "), "\n                            ", HTML.DIV({
    class: "inp-wrap mar-btm-20"
  }, "\n                                ", HTML.LABEL({
    title: "This information will not be shared with anyone, it will only be used to calculate your profile completion score. "
  }, "\n                                    Monthly take home salary (private) ", HTML.A({
    href: "javascript:void(0);",
    class: "privacyTermsMore_btn"
  }, Blaze.If(function() {
    return Spacebars.call(view.lookup("privacyTermsMore"));
  }, function() {
    return "less";
  }, function() {
    return "more";
  })), "\n                                    ", Blaze.If(function() {
    return Spacebars.call(view.lookup("privacyTermsMore"));
  }, function() {
    return [ HTML.Raw("\n                                        <br>"), HTML.SPAN("This information will not be shared with anyone, it will only be used to calculate your profile completion score. ", HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("pathFor"), "privacy");
      }
    }, "Privacy")) ];
  }), "\n                                "), "\n                                ", HTML.DIV({
    class: "inp-hold"
  }, "\n                                    ", HTML.INPUT({
    type: "text",
    placeholder: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerTakeHome"));
    },
    value: function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerTakeHome"));
    },
    class: "form-control db-data changeEmployerTakeHomeValue"
  }), "\n                                    ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerTakeHome"));
  }, function() {
    return [ "\n                                        ", HTML.SPAN({
      class: "overlay-text",
      placeholder: ""
    }, Blaze.View("lookup:data.userData.profile.references.employerTakeHome", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "employerTakeHome"));
    })), "\n                                    " ];
  }, function() {
    return HTML.Raw('\n                                        <span class="overlay-text" placeholder=""> ? </span>\n                                    ');
  }), HTML.Raw('\n                                    <span class="color-blue blue-bdr-btm change-clk change-click change-text">Update</span>\n                                    <button class="color-blue blue-bdr-btm change-clk save-btn transition changeEmployerTakeHomeConfirmation" type="button">Save</button>\n                                    <div class="cancel-div transition"><button class="color-blue green-bdr-btm cancel-clk" type="button">Cancel</button></div>\n                                ')), "\n                            "), "\n\n                            ", Blaze._TemplateWith(function() {
    return {
      title: Spacebars.call("Passport"),
      hasIt: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "hasPassport")),
      link: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "passport", "url"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("fileUploadArea"));
  }), "\n                            ", Blaze._TemplateWith(function() {
    return {
      title: Spacebars.call("Work Reference"),
      hasIt: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "hasWorkRef")),
      link: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "workRef", "url"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("fileUploadArea"));
  }), "\n                            ", Blaze._TemplateWith(function() {
    return {
      title: Spacebars.call("Landlord Reference"),
      hasIt: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "hasLandlordRef")),
      link: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "landlordRef", "url"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("fileUploadArea"));
  }), "\n                            ", Blaze._TemplateWith(function() {
    return {
      title: Spacebars.call("PPS"),
      hasIt: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "hasPPS")),
      link: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "PPS", "url"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("fileUploadArea"));
  }), "\n                            ", Blaze._TemplateWith(function() {
    return {
      title: Spacebars.call("Financial Reference"),
      hasIt: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "hasFinancialRef")),
      link: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "financialRef", "url"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("fileUploadArea"));
  }), "\n                            ", Blaze._TemplateWith(function() {
    return {
      title: Spacebars.call("Government ID"),
      hasIt: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "hasGovtID")),
      link: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "govtID", "url"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("fileUploadArea"));
  }), "\n                            ", Blaze._TemplateWith(function() {
    return {
      title: Spacebars.call("Resume"),
      hasIt: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "hasResume")),
      link: Spacebars.call(Spacebars.dot(view.lookup("data"), "userData", "profile", "references", "resume", "url"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("fileUploadArea"));
  }), "\n\n\n                        "), "\n                    "), "\n                "), "\n            "), "\n        "), "\n    "), HTML.Raw("\n\n    <!-- change password  -->\n    "), HTML.DIV({
    id: "changepass-dlg",
    class: "changepass-div",
    style: "display:none;"
  }, HTML.Raw('\n        <div class="refund-div"><h2>Change Password</h2></div>\n        '), HTML.DIV({
    class: "profile-text"
  }, "\n            ", Spacebars.include(view.lookupTemplate("loginFormChangePassword")), "\n        "), "\n    "), HTML.Raw("\n    <!-- </div> -->\n\n    "), HTML.DIV({
    id: "setpass-dlg",
    class: "changepass-div",
    style: "display:none;"
  }, HTML.Raw('\n        <div class="refund-div"><h2>Set Password</h2></div>\n        '), HTML.DIV({
    class: "profile-text"
  }, "\n            ", Spacebars.include(view.lookupTemplate("loginFormSetPassword")), "\n        "), "\n    "), "\n\n    ", Blaze.View("lookup:showHideFileDlg", function() {
    return Spacebars.mustache(view.lookup("showHideFileDlg"));
  }), "\n    ", HTML.DIV({
    id: "fileupload-dlg",
    class: "fileupload-dlg",
    style: "display:none;"
  }, "\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("showFileTemplate"));
  }, function() {
    return [ "\n            ", Spacebars.include(view.lookupTemplate("fileUploadDlgTemplate")), "\n        " ];
  }), "\n    ") ];
}));

Template.__checkName("loginFormSetPassword");
Template["loginFormSetPassword"] = new Template("Template.loginFormSetPassword", (function() {
  var view = this;
  return HTML.FORM("\n\n        ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password1")) ];
    }
  }, "\n            ", HTML.INPUT({
    type: "password",
    name: "name",
    required: "",
    for: function() {
      return [ "currentPassword_", Spacebars.mustache(view.lookup("uniqueId")) ];
    },
    value: function() {
      return Spacebars.mustache(view.lookup("password1"));
    },
    class: "newpwd login-input--password1 show-pwd"
  }), HTML.Raw("<br>\n            "), HTML.LABEL({
    for: function() {
      return [ "currentPassword_", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "ENTER NEW PASSWORD"), HTML.Raw('<label class="eyebtn"><img src="/images/pass-eye.png"></label>\n            <span></span>\n            '), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password1"));
  }, function() {
    return [ "\n                ", HTML.SPAN({
      class: "help-block",
      style: "position: relative;background: none !important;min-height:30px;"
    }, "\n                    ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "errors", "password1"));
    }, function() {
      return [ "\n                        ", HTML.P(Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      })), "\n                    " ];
    }), "\n                "), "\n            " ];
  }), "\n        "), "\n\n\n        ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password2")) ];
    }
  }, "\n            ", HTML.INPUT({
    type: "password",
    name: "email",
    required: "",
    for: function() {
      return [ "password_", Spacebars.mustache(view.lookup("uniqueId")) ];
    },
    class: "newpwdconfirm login-input--password2",
    value: function() {
      return Spacebars.mustache(view.lookup("password2"));
    }
  }), "\n            ", HTML.LABEL({
    for: function() {
      return [ "password_", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "CONFIRM NEW PASSWORD"), HTML.Raw("\n            <span></span>\n            "), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password2"));
  }, function() {
    return [ "\n                ", HTML.SPAN({
      class: "help-block",
      style: "position: relative;background: none !important;min-height:30px;"
    }, "\n                    ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "errors", "password2"));
    }, function() {
      return [ "\n                        ", HTML.P(Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      })), "\n                    " ];
    }), "\n                "), "\n            " ];
  }), "\n        "), HTML.Raw('\n\n        <!--<div class="styled-input">-->\n        <!--<input type="password" name="phone" id="phone" onKeyPress="return isNumberKey(event);" required/>-->\n        <!--<label>CONFIRM NEW PASSWORD</label>-->\n        <!--<span></span> </div>-->\n\n        <!--<p class="color-text">Passwords do not match!!</p>-->\n        '), Blaze._TemplateWith(function() {
    return {
      messages: Spacebars.call(view.lookup("messages"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("loginFormMessages"));
  }), "\n        ", HTML.UL(HTML.Raw('\n            <li><button class="transparent-btn btns noBtn" type="button" data-event-category="accounts" data-event-action="change-password-cancel">CANCEL</button></li>\n            '), HTML.LI("\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("isLoading"));
  }, function() {
    return HTML.Raw('\n                    <button class="transparent-btn btns">Loading...</button>\n                ');
  }, function() {
    return HTML.Raw('\n                    <button class="blue-btn btns" type="Submit" data-event-category="accounts" data-event-action="change-password">APPLY</button>\n                ');
  }), "\n            "), "\n        "), "\n\n    ");
}));

Template.__checkName("loginFormChangePassword");
Template["loginFormChangePassword"] = new Template("Template.loginFormChangePassword", (function() {
  var view = this;
  return HTML.FORM("\n\n        ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "oldPassword")) ];
    }
  }, "\n            ", HTML.INPUT({
    type: "password",
    name: "name",
    required: "",
    for: function() {
      return [ "currentPassword_", Spacebars.mustache(view.lookup("uniqueId")) ];
    },
    value: function() {
      return Spacebars.mustache(view.lookup("oldPassword"));
    },
    class: "oldpwd login-input--oldPassword show-pwd"
  }), HTML.Raw("<br>\n            "), HTML.LABEL({
    for: function() {
      return [ "currentPassword_", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "ENTER CURRENT PASSWORD"), HTML.Raw('<label class="eyebtn"><img src="/images/pass-eye.png"></label>\n            <span></span>\n            '), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "oldPassword"));
  }, function() {
    return [ "\n                ", HTML.SPAN({
      class: "help-block",
      style: "position: relative;background: none !important;min-height:30px;"
    }, "\n                    ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "errors", "oldPassword"));
    }, function() {
      return [ "\n                        ", HTML.P(Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      })), "\n                    " ];
    }), "\n                "), "\n            " ];
  }), "\n        "), "\n\n\n        ", HTML.DIV({
    class: function() {
      return [ "styled-input ", Spacebars.mustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password")) ];
    }
  }, "\n            ", HTML.INPUT({
    type: "password",
    name: "email",
    required: "",
    for: function() {
      return [ "password_", Spacebars.mustache(view.lookup("uniqueId")) ];
    },
    class: "newpwd login-input--password",
    value: function() {
      return Spacebars.mustache(view.lookup("password"));
    }
  }), "\n            ", HTML.LABEL({
    for: function() {
      return [ "password_", Spacebars.mustache(view.lookup("uniqueId")) ];
    }
  }, "ENTER NEW PASSWORD"), HTML.Raw("\n            <span></span>\n            "), Blaze.If(function() {
    return Spacebars.dataMustache(view.lookup("hasError"), Spacebars.dot(view.lookup("messages"), "errors", "password"));
  }, function() {
    return [ "\n                ", HTML.SPAN({
      class: "help-block",
      style: "position: relative;background: none !important;min-height:30px;"
    }, "\n                    ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("messages"), "errors", "password"));
    }, function() {
      return [ "\n                        ", HTML.P(Blaze.View("lookup:reason", function() {
        return Spacebars.mustache(view.lookup("reason"));
      })), "\n                    " ];
    }), "\n                "), "\n            " ];
  }), "\n        "), HTML.Raw('\n\n        <!--<div class="styled-input">-->\n        <!--<input type="password" name="phone" id="phone" onKeyPress="return isNumberKey(event);" required/>-->\n        <!--<label>CONFIRM NEW PASSWORD</label>-->\n        <!--<span></span> </div>-->\n\n        <!--<p class="color-text">Passwords do not match!!</p>-->\n        '), Blaze._TemplateWith(function() {
    return {
      messages: Spacebars.call(view.lookup("messages"))
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("loginFormMessages"));
  }), "\n        ", HTML.UL(HTML.Raw('\n            <li><button class="transparent-btn btns noBtn" type="button" data-event-category="accounts" data-event-action="change-password-cancel">CANCEL</button></li>\n            '), HTML.LI("\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("isLoading"));
  }, function() {
    return HTML.Raw('\n                    <button class="transparent-btn btns">Loading...</button>\n                ');
  }, function() {
    return HTML.Raw('\n                    <button class="blue-btn btns" type="Submit" data-event-category="accounts" data-event-action="change-password">APPLY</button>\n                ');
  }), "\n\n            "), "\n        "), "\n\n    ");
}));

Template.__checkName("fileUploadArea");
Template["fileUploadArea"] = new Template("Template.fileUploadArea", (function() {
  var view = this;
  return HTML.DIV({
    class: "inp-wrap request-hold mar-btm-20 change-pwd-link profileFileUploadArea"
  }, "\n        ", HTML.SPAN({
    class: "col-md-4  col-xs-12",
    style: "padding-left: 0;"
  }, HTML.H5(Blaze.View("lookup:title", function() {
    return Spacebars.mustache(view.lookup("title"));
  }))), "\n        ", HTML.SPAN({
    class: "col-md-4  col-xs-6"
  }, "\n            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("hasIt"));
  }, function() {
    return [ "\n                ", HTML.A({
      href: function() {
        return Spacebars.mustache(view.lookup("link"));
      },
      target: "_blank"
    }, "View"), "\n            " ];
  }, function() {
    return [ "\n                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("uploading"));
    }, function() {
      return HTML.Raw('\n                    <p class="">Uploading...</p>\n                ');
    }, function() {
      return [ "\n                    ", HTML.P({
        class: ""
      }, "Please upload your ", Blaze.View("lookup:title", function() {
        return Spacebars.mustache(view.lookup("title"));
      })), "\n                " ];
    }), "\n            " ];
  }), "\n        "), "\n        ", HTML.SPAN({
    class: "col-md-3 col-xs-6"
  }, HTML.Raw('\n        <!--<label >-->\n            <!--<span class="btns {{#if hasIt}} transparent-btn {{else}}{{/if}} blue-btn">{{#if hasIt}}Update{{else}}Upload{{/if}}</span>-->\n            <!--<input type="file" cate="{{title}}" class="uploadBtn" accept="{{validFileExtensions}}">-->\n        <!--</label>-->\n            '), HTML.A({
    class: function() {
      return [ "showUploadDlg btns ", Blaze.If(function() {
        return Spacebars.call(view.lookup("hasIt"));
      }, function() {
        return " transparent-btn ";
      }, function() {
        return null;
      }), " blue-btn" ];
    }
  }, Blaze.If(function() {
    return Spacebars.call(view.lookup("hasIt"));
  }, function() {
    return "Update";
  }, function() {
    return "Upload";
  })), "\n        "), "\n    ");
}));

Template.__checkName("fileUploadDlgTemplate");
Template["fileUploadDlgTemplate"] = new Template("Template.fileUploadDlgTemplate", (function() {
  var view = this;
  return [ HTML.DIV({
    class: "refund-div"
  }, HTML.H2(Blaze.View("lookup:dlgTitle", function() {
    return Spacebars.mustache(view.lookup("dlgTitle"));
  }))), "\n    ", HTML.DIV({
    class: "profile-text"
  }, "\n\n        ", HTML.DIV({
    class: "step1"
  }, "\n            ", HTML.DIV({
    class: "hidden-xs"
  }, HTML.Raw('\n                <div class="blue-btn btns showCamera" style="display: inline;">Take a picture from Camera</div>\n                '), HTML.LABEL({
    style: "display: inline;"
  }, "\n                    ", HTML.DIV({
    style: "margin-top: 10px;",
    class: function() {
      return [ "btns ", Blaze.If(function() {
        return Spacebars.call(view.lookup("hasIt"));
      }, function() {
        return " transparent-btn ";
      }, function() {
        return " blue-btn ";
      }), " " ];
    }
  }, Blaze.If(function() {
    return Spacebars.call(view.lookup("hasIt"));
  }, function() {
    return "Update";
  }, function() {
    return "Upload";
  }), " from photos / files"), "\n                ", HTML.INPUT({
    type: "file",
    cate: function() {
      return Spacebars.mustache(view.lookup("title"));
    },
    class: "uploadBtn",
    accept: function() {
      return Spacebars.mustache(view.lookup("validFileExtensions"));
    }
  }), "\n                "), "\n            "), "\n\n            ", HTML.DIV({
    class: "visible-xs"
  }, HTML.Raw('\n                <div class="blue-btn btns showCamera">Take a picture from Camera</div>\n                '), HTML.LABEL({
    class: "mar-top-5"
  }, "\n                    ", HTML.DIV({
    style: "margin-top: 10px;",
    class: function() {
      return [ "btns ", Blaze.If(function() {
        return Spacebars.call(view.lookup("hasIt"));
      }, function() {
        return " transparent-btn ";
      }, function() {
        return " blue-btn ";
      }), " " ];
    }
  }, Blaze.If(function() {
    return Spacebars.call(view.lookup("hasIt"));
  }, function() {
    return "Update";
  }, function() {
    return "Upload";
  }), " from photos / files"), "\n                ", HTML.INPUT({
    type: "file",
    cate: function() {
      return Spacebars.mustache(view.lookup("title"));
    },
    class: "uploadBtn",
    accept: function() {
      return Spacebars.mustache(view.lookup("validFileExtensions"));
    }
  }), "\n                "), "\n            "), "\n\n            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("uploading"));
  }, function() {
    return HTML.Raw('\n                <div class="radio-bg register uploadingMessageArea">\n                    <p class="color-text ">Uploading...</p>\n                </div>\n            ');
  }, function() {
    return [ "\n                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("existingFile"));
    }, function() {
      return [ "\n                ", HTML.DIV({
        class: "radio-bg register uploadingMessageArea"
      }, "\n                    ", HTML.P({
        class: "color-text "
      }, "Existing file ", Blaze.View("lookup:existingFile.name", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("existingFile"), "name"));
      }), " ", HTML.A({
        class: "",
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("existingFile"), "url"));
        },
        target: "_blank"
      }, "View")), "\n                "), "\n                " ];
    }), "\n            " ];
  }), "\n        "), HTML.Raw('\n        <div class="step2">\n            <p>Adjust your image below and click upload at the bottom.</p>\n            <div id="uploadImagePreviewArea">\n                <img style="display: none;" class="img-responsive" id="cropImage">\n            </div>\n            <div class="cropBtns">\n\n                <div class="btn-group">\n                    <button type="button" class="transparent-btn btn zoomInBtn" data-method="zoom" data-option="0.1" title="Zoom In">\n            <span class="docs-tooltip" data-toggle="tooltip" data-animation="false" title="" data-original-title="Zoom In">\n              <span class="glyphicon glyphicon-zoom-in"></span>\n            </span>\n                    </button>\n                    <button type="button" class="transparent-btn btn zoomOutBtn" data-method="zoom" data-option="-0.1" title="Zoom Out">\n            <span class="docs-tooltip" data-toggle="tooltip" data-animation="false" title="" data-original-title="Zoom Out">\n              <span class="glyphicon glyphicon-zoom-out"></span>\n            </span>\n                    </button>\n                </div>\n\n                <div class="btn-group">\n                    <button type="button" class="transparent-btn btn rotateLeftBtn" data-method="rotate" data-option="-45" title="Rotate Left">\n            <span class="docs-tooltip" data-toggle="tooltip" data-animation="false" title="" data-original-title="Rotate Left">\n              <span class="glyphicon glyphicon-repeat"></span>\n            </span>\n                    </button>\n                    <button type="button" class="transparent-btn btn rotateRightBtn" data-method="rotate" data-option="45" title="Rotate Right">\n            <span class="docs-tooltip" data-toggle="tooltip" data-animation="false" title="" data-original-title="Rotate Right">\n              <span class="glyphicon glyphicon-repeat"></span>\n            </span>\n                    </button>\n                </div>\n\n                <div class="btn-group">\n                    <button type="button" class="transparent-btn btn resetBtn" data-method="reset" title="Reset">\n                        <span class="docs-tooltip" data-toggle="tooltip" data-animation="false" title="" data-original-title="Reset"><span class="glyphicon glyphicon-refresh"></span> Reset</span>\n                    </button>\n                </div>\n\n\n            </div>\n            <button class="btns blue-btn getCroppedImage" style="display: inline">Upload</button>\n            <button class="btns blue-btn goToStep1" style="display: inline">Back</button>\n            <button class="btns blue-btn closeDlg" style="display: inline">Cancel</button>\n        </div>\n\n        <!--{{#if isStep 3}}-->\n        <div class="step3">\n            <div id="finalImageArea">\n                <img style="display: none;" class="img-responsive" id="finalImage">\n            </div>\n            <!--{{/if}}-->\n            <button class="btns blue-btn closeDlg" style="display: inline">Close</button>\n        </div>\n    ')) ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"propertyApplications.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/propertyApplications.html                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.propertyApplications.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.propertyApplications.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.propertyApplications.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("propertyApplications");
Template["propertyApplications"] = new Template("Template.propertyApplications", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n\n    ", HTML.SECTION({
        class: "unitspage-holder"
      }, "\n        ", HTML.SECTION({
        class: "logo-below-div"
      }, "\n            ", HTML.DIV({
        class: "container"
      }, "\n                ", HTML.DIV({
        class: "logo-holder-div logoHolderTitleSection"
      }, "\n                    ", HTML.DIV({
        class: "logo-holder"
      }, "\n                        ", HTML.UL("\n                            ", HTML.LI(HTML.SPAN({
        class: "backBtn",
        style: "cursor: pointer;"
      }, HTML.IMG({
        src: function() {
          return Spacebars.mustache(view.lookup("cdnPath"), "/images/back-arrow.png");
        }
      }))), "\n                            ", HTML.LI(HTML.H3(Blaze.View("lookup:propertyData.address.address", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "address"));
      }), " ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
      }, function() {
        return [ ", ", Blaze.View("lookup:propertyData.address.area", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
        }), " " ];
      }), Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
      }, function() {
        return [ ", ", Blaze.View("lookup:propertyData.address.county", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
        }), " " ];
      }), " "), "\n                                ", HTML.H4("PROPERTY KEY : ", Blaze.View("lookup:propertyData.auction.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "auction", "lettingAuctionCode"));
      }), "\n                                    ", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), Spacebars.kw({
            route: "letting",
            key: Spacebars.dot(view.lookup("propertyData"), "auction", "lettingAuctionCode")
          }));
        },
        class: "viewListing",
        style: "font-size:11px;"
      }, "VIEW")), HTML.Raw('\n<span class="auction-number pad-left-15"><a href="javascript:void(0);" class="showCopyDlg" style="font-size:11px;"><i class="glyphicon glyphicon-thumbs-up" aria-hidden="true" style="font-size: 11px;"></i> SHARE</a></span>\n                                ')), "\n                            "), "\n                        "), "\n                    "), "\n                    ", HTML.DIV({
        class: "menu"
      }, "\n                        ", HTML.UL(HTML.Raw('\n                            <!--<li class="left-border">-->\n                                <!--<h4 >APPLICATIONS RECEIVED</h4>-->\n                                <!--<h3 class="pad-btm-0 text-center">{{propertyData.applicationsReceivedCount}}</h3>-->\n                            <!--</li>-->\n                            <!--<li class="left-border">-->\n                                <!--<h4 >ACTIVE APPLICATIONS</h4>-->\n                                <!--<h3 class="pad-btm-0 text-center">{{propertyData.applicationsActiveCount}}</h3>-->\n                            <!--</li>-->\n                            '), HTML.LI({
        class: "left-border"
      }, HTML.Raw("\n                                <h4>ACTIVE APPLICATIONS</h4>\n                                "), HTML.H3({
        class: "pad-btm-0 text-center"
      }, Blaze.View("lookup:dataFull.totalResultsCount", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("dataFull"), "totalResultsCount"));
      })), "\n                            "), "\n                            ", HTML.LI({
        class: "left-border"
      }, HTML.Raw("\n                                <h4>AVG. OFFER</h4>\n                                "), HTML.H3({
        class: "pad-btm-0 text-center"
      }, HTML.Raw("&euro;"), Blaze.If(function() {
        return Spacebars.call(view.lookup("avgOffer"));
      }, function() {
        return Blaze.View("lookup:avgOffer", function() {
          return Spacebars.mustache(view.lookup("avgOffer"));
        });
      }, function() {
        return "0";
      })), "\n                            "), HTML.Raw('\n                            <li class="text-center">\n                                <button class="blue-btn btns showEditPropertyForm" type="button" style="margin-bottom: 5px;">EDIT PROPERTY DETAILS</button>\n                                <button class="transparent-btn btns deactivatePropertyBtn" type="button">Deactivate</button>\n                            </li>\n\n                        ')), "\n                    "), "\n                "), "\n            "), "\n        "), "\n        ", Blaze.If(function() {
        return Spacebars.call(view.lookup("showFilters"));
      }, function() {
        return [ "\n        ", HTML.SECTION({
          class: "logo-below-div filterMenu"
        }, "\n            ", HTML.DIV({
          class: "container"
        }, "\n                ", HTML.DIV({
          class: "logo-holder-div"
        }, HTML.Raw("\n                    <h3>FILTERS</h3>\n                    "), HTML.UL({
          class: "new-filter"
        }, HTML.Raw('\n                        <li style="display: none;"><div class="pad-bot-15">\n                            <h4 class="color-grey text-left"><label> Name</label></h4>\n                            <div class="styled-input ">\n                                <input type="text" name="address.address" id="address.address" required="">\n                                <label id="address.address-error" class="error" for="address.address">This field is required.</label>\n                                <br>\n                                <label>Name and Street *</label>\n                                <span></span>\n                            </div>\n                        </div>\n                        </li>\n                        <li style="display: none;"><div class="pad-bot-15">\n                            <h4 class="color-grey text-left"><label> Name</label></h4>\n                            <input id="myselect" class="form-control filterUnitType">\n                        </div>\n                        </li>\n                        <li style="top: -7px;position: relative;">\n                            <div class="input-field">\n                                <h4 class="color-grey text-uppercase text-left pad-btm-30">Offer range</h4>\n                                <div class="range-holder">\n                                    <div class="range-value-holder clearfix" style="padding-top: 4px;">\n                                        <div class="left value pull-left">\n                                            <p class="filterS1l"></p>\n                                        </div>\n                                        <div class="right value pull-right">\n                                            <p class="filterS1h"></p>\n                                        </div>\n                                    </div>\n                                    <div id="offerRangeInput"></div>\n                                    <div class="input-select-new1">\n                                        <select id="input-select1"></select><span class="cross-new2"><img src="/images/clear-cross-btn.png" class="close-icon"></span>\n                                    </div>\n                                    <div class="input-new1">\n                                        <input type="number" min="67.45" max="97.45" step="1" id="input-number1"><span class="cross-new3"><img src="/images/clear-cross-btn.png" class="close-icon"></span>\n                                    </div>\n                                </div>\n                            </div>\n                        </li>\n                        '), HTML.LI({
          style: "margin-left: 20px;"
        }, "\n                            ", HTML.DIV({
          class: "pad-left-15"
        }, "\n                                ", HTML.DIV({
          class: "button-group cf-1 referenceFilter"
        }, HTML.Raw('\n                                    <button type="button" class="transparent-btn btns dropdown-toggle jns-dropdown-btn" data-toggle="dropdown">References <span class="caret"></span></button>\n                                    '), HTML.UL({
          class: "dropdown-menu styled-input-checkbox jns-dropdown-area",
          style: ""
        }, HTML.Raw('\n                                        <li>\n                                            <div class="checkbox disabled">\n                                                <label>\n                                                    <input type="checkbox" name="refInput" value="all">\n                                                    All</label>\n                                            </div>\n                                        </li><li>\n                                            <div class="checkbox disabled">\n                                                <label>\n                                                    <input type="checkbox" name="refInput" value="clearall">\n                                                    Clear all</label>\n                                            </div>\n                                        </li>\n                                        '), Blaze.Each(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("userFilters"), "check"));
        }, function() {
          return [ "\n                                            ", HTML.LI("\n                                                ", HTML.DIV({
            class: function() {
              return [ "checkbox ", Blaze.Unless(function() {
                return Spacebars.call(view.lookup("enabled"));
              }, function() {
                return "disabled";
              }) ];
            }
          }, "\n                                                    ", HTML.LABEL("\n                                                        ", HTML.INPUT(HTML.Attrs({
            type: "checkbox",
            name: "refInput",
            value: function() {
              return Spacebars.mustache(view.lookup("val"));
            }
          }, function() {
            return Spacebars.attrMustache(view.lookup("enabled"));
          })), "\n                                                        ", Blaze.View("lookup:label", function() {
            return Spacebars.mustache(view.lookup("label"));
          })), "\n                                                "), "\n                                            "), "\n                                        " ];
        }), "\n                                    "), "\n                                "), "\n                            "), "\n                        "), "\n                    "), "\n\n                "), "\n            "), "\n        "), "\n            ", Blaze.View("lookup:initFilters", function() {
          return Spacebars.mustache(view.lookup("initFilters"));
        }), "\n        " ];
      }), "\n\n\n    "), "\n    ", Blaze.Unless(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "auctionId"));
      }, function() {
        return HTML.Raw('\n        <div class="container text-center mar-top-20 pad-btm-30"><h2>This property is not activated. Go back and activate it first. </h2></div>\n    ');
      }, function() {
        return [ "\n\n        ", Blaze.Unless(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("dataFull"), "totalResultsCount"));
        }, function() {
          return HTML.Raw('\n                <div class="container text-center mar-top-20 pad-btm-30"><h2>No applications yet</h2>\n                    <p style="margin:10px 0;">Find references, social profiles and full details of people who apply for your property here.</p>\n                    <p>You may <a href="javascript:void(0);" class="showCopyDlg" style="font-size:11px;"><i class="glyphicon glyphicon-thumbs-up" aria-hidden="true" style="font-size: 11px;"></i>  SHARE</a> your property link in <a target="_blank" href="https://www.facebook.com/groups/Rentdublin/">Facebook group</a> to get more applications.</p>\n                </div>\n        ');
        }), "\n\n\n        ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("dataChosen"), "totalChosenCount"));
        }, function() {
          return [ HTML.Raw('\n            <div class="container text-center mar-top-20 pad-btm-30"><h2>Chosen Tenants</h2></div>\n            '), Blaze.Each(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataChosen"), "resultsChosen"));
          }, function() {
            return [ "\n                ", Spacebars.include(view.lookupTemplate("bidList")), "\n            " ];
          }), "\n        " ];
        }), "\n\n        ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("dataFull"), "totalResultsCount"));
        }, function() {
          return [ "\n            ", Blaze.If(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "paginationNeeded"));
          }, function() {
            return [ "\n            ", HTML.SECTION({
              class: "paginationArea mar-top-20"
            }, "\n                ", HTML.DIV({
              class: "container"
            }, "\n                    ", HTML.DIV({
              class: "row"
            }, "\n                        ", HTML.DIV({
              class: "col-md-12"
            }, "\n                            ", Blaze._TemplateWith(function() {
              return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "pagination"));
            }, function() {
              return Spacebars.include(view.lookupTemplate("pagination"));
            }), "\n                        "), "\n                    "), "\n                "), "\n            "), "\n            " ];
          }), "\n\n            ", Blaze.Unless(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataChosen"), "totalChosenCount"));
          }, function() {
            return HTML.Raw('\n                    <div class="container text-center mar-top-20 pad-btm-30"><h2>Choose Your Tenant</h2></div>\n            ');
          }, function() {
            return [ "\n                ", Blaze.If(function() {
              return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "totalNonChosenCount"));
            }, function() {
              return HTML.Raw('\n                        <div class="container text-center mar-top-20 pad-btm-30"><h2>Pick another? </h2></div>\n                ');
            }, function() {
              return HTML.Raw('\n                    <div class="container text-center mar-top-20 pad-btm-30"><h2>No more applications left. </h2></div>\n                ');
            }), "\n            " ];
          }), "\n            ", Blaze.Each(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "resultsNonChosen"));
          }, function() {
            return [ "\n                ", Spacebars.include(view.lookupTemplate("bidList")), "\n            " ];
          }), "\n\n            ", Blaze.If(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "paginationNeeded"));
          }, function() {
            return [ "\n            ", HTML.SECTION({
              class: "paginationArea"
            }, "\n                ", HTML.DIV({
              class: "container"
            }, "\n                    ", HTML.DIV({
              class: "row"
            }, "\n                        ", HTML.DIV({
              class: "col-md-12"
            }, "\n                            ", Blaze._TemplateWith(function() {
              return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "pagination"));
            }, function() {
              return Spacebars.include(view.lookupTemplate("pagination"));
            }), "\n                        "), "\n                    "), "\n                "), "\n            "), "\n            " ];
          }), "\n        " ];
        }), "\n\n        ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("dataEmailEnquiries"), "totalEnquiryCount"));
        }, function() {
          return [ HTML.Raw('\n            <div class="container text-center mar-top-20 mar-btm-20">\n                <hr style="border-top:1px solid #0b69a8">\n                <h2 class="mar-top-30">Email Enquiries</h2>\n            </div>\n            '), Blaze.If(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataEmailEnquiries"), "paginationNeede"));
          }, function() {
            return [ "\n            ", HTML.SECTION({
              class: "paginationArea mar-top-20"
            }, "\n                ", HTML.DIV({
              class: "container"
            }, "\n                    ", HTML.DIV({
              class: "row"
            }, "\n                        ", HTML.DIV({
              class: "col-md-12"
            }, "\n                            ", Blaze._TemplateWith(function() {
              return Spacebars.call(Spacebars.dot(view.lookup("dataEmailEnquiries"), "pagination"));
            }, function() {
              return Spacebars.include(view.lookupTemplate("pagination"));
            }), "\n                        "), "\n                    "), "\n                "), "\n            "), "\n            " ];
          }), "\n\n            ", Blaze.Each(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataEmailEnquiries"), "resultsEnquiries"));
          }, function() {
            return [ "\n                ", Spacebars.include(view.lookupTemplate("emailEnquiryList")), "\n            " ];
          }), "\n\n            ", Blaze.If(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataEmailEnquiries"), "paginationNeede"));
          }, function() {
            return [ "\n            ", HTML.SECTION({
              class: "paginationArea"
            }, "\n                ", HTML.DIV({
              class: "container"
            }, "\n                    ", HTML.DIV({
              class: "row"
            }, "\n                        ", HTML.DIV({
              class: "col-md-12"
            }, "\n                            ", Blaze._TemplateWith(function() {
              return Spacebars.call(Spacebars.dot(view.lookup("dataEmailEnquiries"), "pagination"));
            }, function() {
              return Spacebars.include(view.lookupTemplate("pagination"));
            }), "\n                        "), "\n                    "), "\n                "), "\n            "), "\n            " ];
          }), "\n        " ];
        }), "\n\n\n    " ];
      }), "\n\n\n    ", HTML.DIV({
        id: "conf-dactivate-pop",
        class: "confPopup",
        style: "display:none;"
      }, HTML.Raw('\n\n        <div class="refund-div"><h2>Confirm Deactivate?</h2></div>\n        '), HTML.DIV({
        class: "profile-text"
      }, HTML.Raw("\n            <h3>Are sure you want to deactivate ?</h3>\n            "), Blaze.Unless(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "chosenApplicationCount"));
      }, function() {
        return [ "\n            ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
        }, function() {
          return [ "\n                ", HTML.P("This property has ", Blaze.View("lookup:propertyData.applicationsActiveCount", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
          }), " active applications. You will not be able to choose any application if deactivated. "), "\n            " ];
        }, function() {
          return HTML.Raw("\n                <p></p>\n            ");
        }), "\n            " ];
      }, function() {
        return HTML.Raw("\n                <p></p>\n            ");
      }), "\n\n            ", HTML.UL("\n                ", HTML.LI(HTML.BUTTON({
        class: "transparent-btn btns deactivateConfirmBtn",
        type: "button"
      }, Blaze.If(function() {
        return Spacebars.call(view.lookup("deactivateInProgress"));
      }, function() {
        return "Deactivating...";
      }, function() {
        return "Deactivate";
      }))), HTML.Raw('\n                <li><button class="blue-btn btns closePopupBtn" type="button">Cancel</button></li>\n            ')), "\n        "), "\n    "), HTML.Raw('\n\n    <div class="verification-div1" id="propertyLinkDlg" style="display:none;">\n        <div class="refund-div"><h2>Share Property</h2></div>\n        <div class="profile-text text-left">\n            <p class="no-capitalize">Please use this email to use in daft.ie, rent.ie etc ads.</p>\n\n            <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                <div class="form-group col-sm-10" style="padding: 0;">\n                    <input type="text" class="form-control" placeholder="" name="agentPropertyEmailField" id="agentPropertyEmailField" readonly="" style="width: 100%;padding: 0;">\n                </div>\n                <button type="submit" class="btn btn-primary col-sm-2 copyEmailBtn">Copy</button>\n            </form>\n\n            <p class="no-capitalize mar-top-15">Please use this link to share in facebook, twitter etc. </p>\n\n            <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                <div class="form-group col-sm-10" style="padding: 0;">\n                    <input type="text" class="form-control" placeholder="" name="propertyLinkField" id="propertyLinkField" readonly="" style="width: 100%;padding: 0;">\n                </div>\n                <button type="submit" class="btn btn-primary col-sm-2 copyLinkBtn">Copy</button>\n            </form>\n\n            <form class="signin-form">\n\n                <div class="signup-btn">\n                    <button class="transparent-btn btns cancelBtn" type="button">CLOSE</button>\n                </div>\n\n            </form>\n\n        </div>\n\n    </div>\n    '), HTML.DIV({
        id: "inviteForViewingDlg",
        style: "display:none;",
        class: "verification-div1"
      }, "\n        ", Spacebars.include(view.lookupTemplate("inviteForViewing")), "\n    "), "\n\n" ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

Template.__checkName("inviteForViewing");
Template["inviteForViewing"] = new Template("Template.inviteForViewing", (function() {
  var view = this;
  return [ HTML.Raw('<div class="refund-div"><h2>Invite for viewing</h2></div>\n    '), HTML.DIV({
    class: "profile-text"
  }, "\n        ", HTML.H5({
    class: "no-capitalize"
  }, "Invite ", Blaze.View("lookup:data.user.profile.name", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "user", "profile", "name"));
  }), " for viewing. Please choose viewing date and time"), "\n\n        ", HTML.FORM({
    class: "signin-form"
  }, "\n            ", HTML.DIV({
    class: "form-border",
    style: " padding: 20px 0;"
  }, HTML.Raw('\n\n                <div class="styled-input underline">\n                    <input class="inviteDate" type="datetime" placeholder="" value="" name="inviteDate" id="inviteDate" required="">\n                </div>\n\n                '), HTML.DIV({
    class: "styled-input underline"
  }, "\n                        ", HTML.TEXTAREA({
    class: "form-control inviteMessage",
    id: "inviteMessage",
    rows: "2",
    placeholder: "You may enter a personal message to landlord if you wish.",
    maxlength: "500",
    readonly: "",
    value: function() {
      return [ "Hi, You are invited to the viewing on ", Spacebars.mustache(view.lookup("inviteDateFormated")), " at letting ", Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "address")), " ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
      }, function() {
        return [ ", ", Blaze.View("lookup:propertyData.address.area", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
        }), " " ];
      }), Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
      }, function() {
        return [ ", ", Blaze.View("lookup:propertyData.address.county", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
        }), " " ];
      }) ];
    }
  }), "\n                "), HTML.Raw('\n\n                <!--<div class="input-group date">-->\n                    <!--<span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>-->\n                    <!--<input class="set-due-date form-control moveindate" type="text" id="moveindate"/>-->\n                <!--</div>-->\n\n            ')), "\n        "), HTML.Raw('\n        <p class="color-text" style="margin-top: 20px;">Please note that this will send an email with your contact details.</p>\n\n        '), HTML.UL("\n            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("inviteInProgress"));
  }, function() {
    return HTML.Raw('\n                <li><button class="transparent-btn  btns " disabled="true" type="button">Wait for it... </button></li>\n            ');
  }, function() {
    return HTML.Raw('\n                <li><button class="blue-btn  btns confirmInviteBtn" type="button">Invite </button></li>\n            ');
  }), "\n            ", HTML.LI(HTML.BUTTON({
    class: "transparent-btn btns closePopupBtn",
    disabled: function() {
      return Spacebars.mustache(view.lookup("inviteInProgress"));
    },
    type: "button"
  }, "Cancel")), "\n        "), "\n    ") ];
}));

Template.__checkName("bidList");
Template["bidList"] = new Template("Template.bidList", (function() {
  var view = this;
  return HTML.SECTION({
    class: function() {
      return [ "main-holder ", Spacebars.mustache(view.lookup("classBidList")) ];
    },
    id: function() {
      return [ "unit_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, HTML.Raw('\n\n    <!--<section class="border-top act-div"></section>-->\n        '), HTML.DIV({
    class: "container"
  }, "\n            ", HTML.DIV({
    class: "act-box"
  }, "\n                ", HTML.DIV({
    class: "background-white"
  }, "\n                    ", HTML.DIV({
    class: "logo-holder-div"
  }, "\n                        ", HTML.DIV({
    class: "logo-holder"
  }, "\n                            ", HTML.UL("\n                                ", HTML.LI("\n                                    ", HTML.H3({
    class: "pad-btm-0"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "picture"));
  }, function() {
    return HTML.IMG({
      class: "circular-icon",
      src: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "picture"));
      },
      alt: "avatar"
    });
  }), "\n                                        ", Blaze.View("lookup:user.profile.name", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "name"));
  }), HTML.Raw('\n                                        <span style="font-size:11px;color: #9d9d9d;">OFFER </span> :\n                                        '), HTML.SPAN({
    style: "color:#000;font-size:11px"
  }, " ", Blaze.View("lookup:yourBid", function() {
    return Spacebars.mustache(view.lookup("yourBid"));
  }), " "), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "facebook"));
  }, function() {
    return [ "\n                                        ", HTML.A({
      title: "Connected",
      href: function() {
        return [ "https://www.facebook.com/", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "facebook", "id")) ];
      },
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/facebook-icon.png");
      },
      alt: "Fb"
    }), HTML.Raw('\n                                            <!--<span style="color:#000;font-size:11px" class="socicon socicon-facebook"></span>-->\n                                        ')), "\n                                        " ];
  }), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "twitter"));
  }, function() {
    return [ "\n                                        ", HTML.A({
      title: "Connected",
      href: function() {
        return [ "https://www.twitter.com/", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "twitter", "screenName")) ];
      },
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/twitter-icon.png");
      },
      alt: "Tw"
    }), HTML.Raw('\n                                            <!--<span style="color:#000;font-size:11px" class="socicon socicon-twitter"></span>-->\n                                        ')), "\n                                        " ];
  }), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "linkedin"));
  }, function() {
    return [ "\n                                        ", HTML.A({
      title: "Connected",
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "linkedin", "publicProfileUrl"));
      },
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/linkedin-icon.png");
      },
      alt: "Li"
    }), "\n                                        "), "\n                                        " ];
  }), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "google"));
  }, function() {
    return [ "\n                                        ", HTML.SPAN({
      title: "Verified email",
      class: "google-icon-box",
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/google-icon.png");
      },
      alt: "G+"
    }), "\n                                        "), "\n                                        " ];
  }), "\n                                        ", HTML.A({
    style: "font-size:11px;color: #9d9d9d;",
    title: "Invite for viewing",
    class: "inviteForViewingBtn",
    href: "javascript:void(0);",
    target: "_blank"
  }, HTML.Raw('\n                                            <span style="color:#000;font-size:11px" class="glyphicon glyphicon-envelope"></span>\n                                            '), Blaze.Unless(function() {
    return Spacebars.call(view.lookup("invitedDate"));
  }, function() {
    return "INVITE FOR VIEWING";
  }, function() {
    return [ "Invited on ", Blaze.View("lookup:dateFormat", function() {
      return Spacebars.mustache(view.lookup("dateFormat"), view.lookup("invitedDate"));
    }) ];
  }), "\n                                        "), "\n                                    "), "\n\n\n                                "), "\n                            "), "\n                        "), "\n                        ", HTML.DIV({
    class: "menu"
  }, "\n                            ", HTML.UL("\n                                ", HTML.LI({
    class: "left-border"
  }, "\n                                    ", Blaze.If(function() {
    return Spacebars.call(view.lookup("chosen"));
  }, function() {
    return [ "\n                                        ", Blaze.Unless(function() {
      return Spacebars.call(view.lookup("unChoosingInProgress"));
    }, function() {
      return HTML.Raw('\n                                            <button class="transparent-btn unChooseTenant" type="button">Unchoose</button>\n                                        ');
    }, function() {
      return HTML.Raw('\n                                            <button class="transparent-btn" type="button">Saving...</button>\n                                        ');
    }), "\n                                    " ];
  }, function() {
    return [ "\n                                        ", Blaze.Unless(function() {
      return Spacebars.call(view.lookup("choosingInProgress"));
    }, function() {
      return HTML.Raw('\n                                            <button class="transparent-btn chooseTenant" type="button">Choose Tenant</button>\n                                        ');
    }, function() {
      return HTML.Raw('\n                                            <button class="transparent-btn" type="button">Saving...</button>\n                                        ');
    }), "\n                                    " ];
  }), "\n\n\n                                "), "\n                            "), "\n                        "), "\n\n\n                    "), "\n                "), HTML.Raw("\n\n                <!--act-box-->\n                "), Blaze.If(function() {
    return Spacebars.call(view.lookup("auctionId"));
  }, function() {
    return [ "\n                    ", HTML.DIV({
      class: "apt-info apt-info1 background-white clearfix"
    }, "\n                        ", HTML.UL({
      class: "superbuilt-div"
    }, "\n", HTML.LI(HTML.Raw("\n<h5>Employer name</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "employerName"));
    }, function() {
      return [ " ", Blaze.View("lookup:user.profile.references.employerName", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "employerName"));
      }), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw('\n<h5 title="Affordable if rent offer is within 40&#37; of his salary.">Salary</h5>\n'), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "employerTakeHome"));
    }, function() {
      return [ "\n        ", Blaze.If(function() {
        return Spacebars.dataMustache(view.lookup("canAfford"), Spacebars.dot(view.lookup("user"), "profile", "references", "employerTakeHome"));
      }, function() {
        return HTML.Raw('\n            <span title="Affordable if rent offer is within 40&#37; of his salary take home.">Affordable</span>\n        ');
      }, function() {
        return HTML.Raw('\n            <span title="Not affordable if rent offer is more than 40&#37; of his monthly salary take home."> Cannot afford</span> ');
      }), "\n    " ];
    }, function() {
      return "\n        N/A\n    ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Work reference</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasWorkRef"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "workRef", "url"));
        },
        target: "_blank"
      }, "View"), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Passport</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasPassport"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "passport", "url"));
        },
        target: "_blank"
      }, "View"), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Landlord reference</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasLandlordRef"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "landlordRef", "url"));
        },
        target: "_blank"
      }, "View"), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>PPS</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasPPS"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "PPS", "url"));
        },
        target: "_blank"
      }, "View"), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Financial reference</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasFinancialRef"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "financialRef", "url"));
        },
        target: "_blank"
      }, "View"), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n                            ", HTML.LI(HTML.Raw("\n<h5>Govt. ID </h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n    ", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasGovtID"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "govtID", "url"));
        },
        target: "_blank"
      }, "View"), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Resume</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasResume"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "resume", "url"));
        },
        target: "_blank"
      }, "View"), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Mobile</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return [ "tel:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile")) ];
        },
        target: "_blank"
      }, Blaze.View("lookup:user.profile.mobile", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
      })), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Email</h5>\n"), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, "\n", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "email"));
    }, function() {
      return [ " ", HTML.A({
        href: function() {
          return [ "mailto:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email")) ];
        },
        target: "_blank"
      }, Blaze.View("lookup:user.profile.email", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email"));
      })), " " ];
    }, function() {
      return " N/A ";
    }), "\n"), "\n"), "\n\n                        "), "\n                    "), "\n                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("bidMessage"));
    }, function() {
      return [ "\n                ", HTML.DIV({
        class: "apt-info background-white clearfix bidMessageArea"
      }, "\n                    ", HTML.BLOCKQUOTE({
        class: ""
      }, "\n                    ", Blaze.View("lookup:bidMessage", function() {
        return Spacebars.mustache(view.lookup("bidMessage"));
      }), "\n                    "), "\n                "), "\n                " ];
    }), "\n\n                " ];
  }), HTML.Raw("\n                <!--act-box-->\n            ")), "\n        "), "\n\n\n\n\n    ");
}));

Template.__checkName("emailEnquiryList");
Template["emailEnquiryList"] = new Template("Template.emailEnquiryList", (function() {
  var view = this;
  return HTML.SECTION({
    class: function() {
      return [ "main-holder ", Spacebars.mustache(view.lookup("classBidList")) ];
    },
    id: function() {
      return [ "unit_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, HTML.Raw('\n\n    <!--<section class="border-top act-div"></section>-->\n        '), HTML.DIV({
    class: "container"
  }, "\n            ", HTML.DIV({
    class: "act-box"
  }, "\n                ", HTML.DIV({
    class: "background-white"
  }, "\n                    ", HTML.DIV({
    class: "logo-holder-div"
  }, "\n                        ", HTML.DIV({
    class: "logo-holder"
  }, "\n                            ", HTML.UL("\n                                ", HTML.LI("\n                                    ", HTML.H3({
    class: "pad-btm-0"
  }, "\n                                        ", Blaze.View("lookup:fullname", function() {
    return Spacebars.mustache(view.lookup("fullname"));
  }), HTML.Raw('\n                                        &nbsp;\n                                        <span style="font-size:11px;color: #9d9d9d;">EMAIL: </span>\n                                        '), HTML.A({
    style: "font-size:12px",
    href: function() {
      return [ "mailto:", Spacebars.mustache(view.lookup("email")) ];
    }
  }, " ", Blaze.View("lookup:email", function() {
    return Spacebars.mustache(view.lookup("email"));
  }), " "), HTML.Raw('\n                                        &nbsp;\n                                        <span style="font-size:11px;color: #9d9d9d;">PHONE: </span>\n                                        '), Blaze.If(function() {
    return Spacebars.call(view.lookup("mobile"));
  }, function() {
    return [ "\n                                            ", HTML.A({
      style: "font-size:12px",
      href: function() {
        return [ "tel:", Spacebars.mustache(view.lookup("mobile")) ];
      }
    }, " ", Blaze.View("lookup:mobile", function() {
      return Spacebars.mustache(view.lookup("mobile"));
    }), " "), "\n                                        " ];
  }, function() {
    return HTML.Raw('\n                                            <span style="font-size:11px;">N/A</span>\n                                        ');
  }), "\n                                    "), "\n\n\n                                "), "\n                            "), "\n                        "), "\n                        ", HTML.DIV({
    class: "menu"
  }, "\n                            ", HTML.UL("\n                                ", HTML.LI({
    class: "left-border"
  }, "\n                                    ", HTML.A({
    class: "transparent-btn btns",
    target: "_blank",
    href: function() {
      return [ "mailto:", Spacebars.mustache(view.lookup("email")) ];
    }
  }, "Email Tenant"), "\n                                "), "\n                            "), "\n                        "), "\n\n\n                    "), "\n                "), "\n                ", Blaze.If(function() {
    return Spacebars.call(view.lookup("message"));
  }, function() {
    return [ "\n                ", HTML.DIV({
      class: "apt-info background-white clearfix bidMessageArea"
    }, "\n                    ", HTML.BLOCKQUOTE({
      class: ""
    }, "\n                    ", Blaze.View("lookup:message", function() {
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("message")));
    }), "\n                    "), "\n                "), "\n                " ];
  }), HTML.Raw("\n\n\n                <!--act-box-->\n            ")), "\n        "), "\n\n\n\n\n    ");
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"propertyManage.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/propertyManage.html                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.propertyManage.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.propertyManage.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.propertyManage.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("propertyManage");
Template["propertyManage"] = new Template("Template.propertyManage", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n\n", Blaze.Unless(function() {
        return Spacebars.call(view.lookup("data"));
      }, function() {
        return [ "\n    ", HTML.SECTION({
          class: "mar-top-20 "
        }, "\n        ", HTML.DIV({
          class: "container text-center mar-top-20 pad-btm-30"
        }, "\n            ", HTML.DIV({
          class: "filter-holder"
        }, "\n                ", HTML.DIV({
          class: "head-border-bottom"
        }, "\n                    ", Blaze.If(function() {
          return Spacebars.call(view.lookup("hasPropFound"));
        }, function() {
          return [ HTML.Raw("\n                        <h2>Click the below button to start managing this property.</h2><br><br>\n                        "), Blaze.If(function() {
            return Spacebars.call(view.lookup("enablingPMS"));
          }, function() {
            return [ "\n                            ", HTML.getTag("buttons")({
              class: "transparent-btn btns "
            }, "Loading..."), "\n                        " ];
          }, function() {
            return HTML.Raw('\n                            <button class="blue-btn btns enablePMS" type="button">Start</button>\n                        ');
          }), "\n                    " ];
        }, function() {
          return HTML.Raw('\n                        <h2>This property is not found. Please check if its archived and try again.</h2><br><br>\n                        <button class="blue-btn btns backBtn" type="button">Try again</button>\n                    ');
        }), "\n                "), "\n            "), "\n        "), "\n    "), "\n" ];
      }, function() {
        return [ "\n    ", HTML.SECTION({
          class: "unitspage-holder"
        }, "\n        ", HTML.SECTION({
          class: "logo-below-div"
        }, "\n            ", HTML.DIV({
          class: "container"
        }, "\n                ", HTML.DIV({
          class: "logo-holder-div"
        }, "\n                    ", HTML.DIV({
          class: "logo-holder"
        }, "\n                        ", HTML.UL("\n                            ", HTML.LI(HTML.SPAN({
          class: "backBtn",
          style: "cursor: pointer;"
        }, HTML.IMG({
          src: function() {
            return Spacebars.mustache(view.lookup("cdnPath"), "/images/back-arrow.png");
          }
        }))), "\n                            ", HTML.LI({
          class: "longTitle"
        }, HTML.H3(Blaze.View("lookup:propertyData.address.address", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "address"));
        }), " ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
        }, function() {
          return [ ", ", Blaze.View("lookup:propertyData.address.area", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
          }), " " ];
        }), Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
        }, function() {
          return [ ", ", Blaze.View("lookup:propertyData.address.county", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
          }), " " ];
        }), "\n\n                                ", HTML.SPAN({
          class: "pad-left-15"
        }, HTML.A({
          href: function() {
            return Spacebars.mustache(view.lookup("pathFor"), Spacebars.kw({
              route: "account/editproperty",
              id: Spacebars.dot(view.lookup("propertyData"), "_id")
            }));
          },
          class: "viewListing",
          style: "font-size:11px;"
        }, HTML.Raw('Edit <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>')))), "\n                                ", HTML.H4("TENANTS : ", Blaze.View("lookup:arrLength", function() {
          return Spacebars.mustache(view.lookup("arrLength"), Spacebars.dot(view.lookup("data"), "tenants"));
        }), HTML.Raw('\n\n                                    <!--<span class="auction-number pad-left-15"><a href="{{pathFor route=\'letting\' key=propertyData.auction.lettingAuctionCode}}" class="viewListing" style="font-size:11px;" >VIEW</a></span>-->\n<!--<span class="auction-number pad-left-15"><i class="fa fa-share-alt" aria-hidden="true" style="font-size: 11px;"></i> <a href="javascript:void(0);" class="showCopyDlg" style="font-size:11px;" >SHARE</a></span>-->\n                                ')), "\n                            "), "\n                        "), "\n                    "), "\n                    ", HTML.DIV({
          class: "menu"
        }, "\n                        ", HTML.UL("\n                            ", HTML.LI({
          class: "left-border"
        }, HTML.Raw("\n                                <h4>Current Rent</h4>\n                                "), HTML.H3({
          class: "pad-btm-0 text-center"
        }, Blaze.View("lookup:data.rent.price", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "rent", "price"));
        })), "\n                            "), HTML.Raw('\n                            <!--<li class="left-border">-->\n                                <!--<h4 style="text-align: left;">Next rent date &nbsp;&nbsp;<span class="glyphicon glyphicon-pencil" aria-hidden="true" title="Change rent date"></span></h4>-->\n                                <!--<h3 class="pad-btm-0 text-center">{{dateFormat data.rent.nextCollectionDate}}</h3>-->\n                            <!--</li>-->\n                            <!--<li class="left-border">-->\n                                <!--<h4 >Contract</h4>-->\n                                <!--<h3 class="pad-btm-0 text-center"><span class="auction-number"><a href="{{pathFor route=\'letting\' key=propertyData.auction.lettingAuctionCode}}" class="viewListing" style="font-size:11px;color:#18bc9c;" >VIEW </a></span></h3>-->\n                                <!--&lt;!&ndash;<div class="pad-btm-0 text-center">&ndash;&gt;-->\n                                    <!--&lt;!&ndash;<label>&ndash;&gt;-->\n                                        <!--&lt;!&ndash;<span class="btns blue-btn">upload</span>&ndash;&gt;-->\n                                        <!--&lt;!&ndash;<input type="file" id="file" cate="Work Reference" class="uploadBtn" style="margin: 0;padding: 0;height: 1px;">&ndash;&gt;-->\n                                    <!--&lt;!&ndash;</label>&ndash;&gt;-->\n                                <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                            <!--</li>-->\n\n                            <!--<li class="text-center">-->\n                                <!--&lt;!&ndash;<button class="blue-btn btns showEditPropertyForm" type="button" style="margin-bottom: 5px;">EDIT PROPERTY DETAILS</button>&ndash;&gt;-->\n                                <!--<button class="transparent-btn btns deactivatePropertyBtn" type="button">Deactivate</button>-->\n                            <!--</li>-->\n\n                        ')), "\n                    "), "\n                "), "\n            "), "\n        "), "\n\n\n\n\n    "), "\n\n\n\n    ", Blaze._TemplateWith(function() {
          return Spacebars.call(view.lookup("propertyData"));
        }, function() {
          return Spacebars.include(view.lookupTemplate("PM_propertyList"));
        }), "\n\n\n    ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("dataChosen"), "totalChosenCount"));
        }, function() {
          return [ HTML.Raw('\n        <div class="container text-center mar-top-20 pad-btm-30" id="viewTenantsArea"><h2>Chosen Tenants</h2></div>\n        '), Blaze.Each(function() {
            return Spacebars.call(Spacebars.dot(view.lookup("dataChosen"), "resultsChosen"));
          }, function() {
            return [ "\n            ", Spacebars.include(view.lookupTemplate("PM_bidList")), "\n        " ];
          }), "\n    " ];
        }), "\n\n    ", HTML.SECTION({
          class: "main-holder mar-btm-30",
          id: "activity_history_area"
        }, "\n\n        ", Spacebars.include(view.lookupTemplate("activity_history")), "\n\n    "), "\n\n\n    ", HTML.SECTION({
          class: "mar-top-20",
          style: "display:none;"
        }, "\n        ", HTML.SECTION({
          class: "border-top act-div"
        }, "\n            ", HTML.DIV({
          class: "container"
        }, "\n                ", HTML.DIV({
          class: "row"
        }, "\n                    ", Blaze._TemplateWith(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "pagination"));
        }, function() {
          return Spacebars.include(view.lookupTemplate("pagination"));
        }), "\n                "), "\n            "), "\n        "), "\n    "), "\n\n    ", HTML.DIV({
          id: "conf-dactivate-pop",
          class: "confPopup",
          style: "display:none;"
        }, HTML.Raw('\n\n        <div class="refund-div"><h2>Confirm Deactivate?</h2></div>\n        '), HTML.DIV({
          class: "profile-text"
        }, HTML.Raw("\n            <h3>Are sure you want to deactivate ?</h3>\n            "), Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
        }, function() {
          return [ HTML.P("This property has ", Blaze.View("lookup:propertyData.applicationsActiveCount", function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "applicationsActiveCount"));
          }), " active applications. You will not be able to choose any application if deactivated. "), "\n            " ];
        }, function() {
          return HTML.Raw("\n                <p></p>\n            ");
        }), "\n            \n            ", HTML.UL("\n                ", HTML.LI(HTML.BUTTON({
          class: "transparent-btn btns deactivateConfirmBtn",
          type: "button"
        }, Blaze.If(function() {
          return Spacebars.call(view.lookup("deactivateInProgress"));
        }, function() {
          return "Deactivating...";
        }, function() {
          return "Deactivate";
        }))), HTML.Raw('\n                <li><button class="blue-btn btns closePopupBtn" type="button">Cancel</button></li>\n            ')), "\n        "), "\n    "), HTML.Raw('\n\n    <div class="verification-div1" id="propertyLinkDlg" style="display:none;">\n        <div class="refund-div"><h2>Share Property</h2></div>\n        <div class="profile-text text-left">\n            <p class="no-capitalize">Please use this email to use in daft.ie, rent.ie etc ads.</p>\n\n            <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                <div class="form-group col-sm-10" style="padding: 0;">\n                    <input type="text" class="form-control" placeholder="" name="agentPropertyEmailField" id="agentPropertyEmailField" readonly="" style="width: 100%;padding: 0;">\n                </div>\n                <button type="submit" class="btn btn-primary col-sm-2 copyEmailBtn">Copy</button>\n            </form>\n\n            <p class="no-capitalize mar-top-15">Please use this link to share in facebook, twitter etc. </p>\n\n            <form class="form-inline" style="overflow: hidden;" onsubmit="return false;">\n                <div class="form-group col-sm-10" style="padding: 0;">\n                    <input type="text" class="form-control" placeholder="" name="propertyLinkField" id="propertyLinkField" readonly="" style="width: 100%;padding: 0;">\n                </div>\n                <button type="submit" class="btn btn-primary col-sm-2 copyLinkBtn">Copy</button>\n            </form>\n\n            <form class="signin-form">\n\n                <div class="signup-btn">\n                    <button class="transparent-btn btns cancelBtn" type="button">CLOSE</button>\n                </div>\n\n            </form>\n\n        </div>\n\n    </div>\n    '), HTML.DIV({
          id: "addTenantDlg",
          style: "display:none;",
          class: "verification-div1"
        }, "\n        ", Spacebars.include(view.lookupTemplate("addTenantDlg")), "\n    "), "\n    " ];
      }), "\n\n" ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

Template.__checkName("activity_history");
Template["activity_history"] = new Template("Template.activity_history", (function() {
  var view = this;
  return HTML.DIV({
    class: "container"
  }, "\n        ", HTML.DIV({
    class: "act-box"
  }, HTML.Raw('\n            <div class="background-white">\n                <div class="logo-holder-div">\n                    <div class="logo-holder" style="padding: 0 20px;">\n                        <ul>\n                            <li>\n                                <h3 class="pad-btm-0">\n                                    Activity history\n                                </h3>\n                            </li>\n                        </ul>\n                    </div>\n                    <div class="menu">\n                        <ul>\n                            <li class="left-border" style="display: none;"></li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            '), HTML.DIV({
    class: "background-white profile-text",
    style: "padding: 0px 30px;"
  }, "\n                ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("data"), "totalResultsCount"));
  }, function() {
    return [ "\n                ", HTML.DIV({
      class: "row"
    }, "\n                    ", HTML.DIV({
      class: "col-md-12"
    }, HTML.Raw('\n                        <h6 class="no-capitalize" style="padding-top: 20px;display: none;">Activity history</h6>\n                        '), HTML.UL({
      class: "information-box "
    }, "\n                            ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("data"), "results"));
    }, function() {
      return [ "\n                                ", Blaze._TemplateWith(function() {
        return {
          template: Spacebars.call(view.lookup("type"))
        };
      }, function() {
        return Spacebars.include(function() {
          return Spacebars.call(Template.__dynamic);
        });
      }), "\n                            " ];
    }), "\n                        "), "\n                    "), "\n                "), "\n\n\n                ", HTML.DIV({
      class: "row mar-top-30 pad-btm-30",
      style: "text-align: center;"
    }, "\n                    ", HTML.DIV({
      class: "div-holder clearfix"
    }, "\n                        ", Blaze.If(function() {
      return Spacebars.call(view.lookup("loadingMoreText"));
    }, function() {
      return "\n                            Loading...\n                            ";
    }, function() {
      return HTML.Raw('\n                        <a href="javascript:void(0);" class="load_more">Load More</a>\n                        ');
    }), "\n                    "), "\n                "), "\n                    " ];
  }, function() {
    return HTML.Raw('\n                <div class="row"><div class="col-md-12 mar-btm-30">No history yet</div></div>\n                    ');
  }), HTML.Raw('\n\n                <p style="font-size:12px;display: none;">**The total price or total does not include the stamp duty and\n                    registration charges. Stamp duty and registration charges will be added to the total price/ total at the time of registration.</p>\n            ')), "\n\n        "), "\n    ");
}));

Template.__checkName("prop_activation");
Template["prop_activation"] = new Template("Template.prop_activation", (function() {
  var view = this;
  return HTML.LI({
    class: "background-halfwhite"
  }, "\n        ", HTML.DIV({
    class: "div-holder clearfix"
  }, "\n            ", HTML.P({
    class: "color-grey pull-left line-right",
    style: "padding-right: 20px;"
  }, Blaze.View("lookup:dateTimeFormat", function() {
    return Spacebars.mustache(view.lookup("dateTimeFormat"), view.lookup("createdAt"));
  })), "\n            ", HTML.P({
    class: "color-grey pull-left",
    style: "padding-left:10px"
  }, "Property ", Blaze.If(function() {
    return Spacebars.call(view.lookup("activated"));
  }, function() {
    return "activated";
  }, function() {
    return "deactivated";
  })), "\n            ", HTML.A({
    class: " pull-right",
    href: function() {
      return [ Spacebars.mustache(view.lookup("pathFor"), "account/propertyApplications", Spacebars.kw({
        id: view.lookup("propertyId")
      })), "?auctionId=", Spacebars.mustache(view.lookup("auctionId")) ];
    }
  }, "Link"), "\n        "), "\n    ");
}));

Template.__checkName("applicationReceived");
Template["applicationReceived"] = new Template("Template.applicationReceived", (function() {
  var view = this;
  return HTML.LI({
    class: "background-halfwhite"
  }, "\n        ", HTML.DIV({
    class: "div-holder clearfix"
  }, "\n            ", HTML.P({
    class: "color-grey pull-left line-right",
    style: "padding-right: 20px;"
  }, Blaze.View("lookup:dateTimeFormat", function() {
    return Spacebars.mustache(view.lookup("dateTimeFormat"), view.lookup("createdAt"));
  })), "\n            ", HTML.P({
    class: "color-grey pull-left",
    style: "padding-left:10px"
  }, "Application received", Blaze.If(function() {
    return Spacebars.call(view.lookup("name"));
  }, function() {
    return [ " from ", Blaze.View("lookup:name", function() {
      return Spacebars.mustache(view.lookup("name"));
    }) ];
  })), "\n            ", HTML.A({
    class: " pull-right",
    href: function() {
      return [ "mailto:", Spacebars.mustache(view.lookup("email")) ];
    }
  }, "Mail applicant."), "\n        "), "\n    ");
}));

Template.__checkName("PM_bidList");
Template["PM_bidList"] = new Template("Template.PM_bidList", (function() {
  var view = this;
  return HTML.SECTION({
    class: function() {
      return [ "main-holder ", Spacebars.mustache(view.lookup("classBidList")) ];
    },
    id: function() {
      return [ "unit_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, HTML.Raw('\n\n    <!--<section class="border-top act-div"></section>-->\n        '), HTML.DIV({
    class: "container"
  }, "\n            ", HTML.DIV({
    class: "act-box"
  }, "\n                ", HTML.DIV({
    class: "background-white"
  }, "\n                    ", HTML.DIV({
    class: "logo-holder-div"
  }, "\n                        ", HTML.DIV({
    class: "logo-holder"
  }, "\n                            ", HTML.UL("\n                                ", HTML.LI("\n                                    ", HTML.H3({
    class: "pad-btm-0"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "picture"));
  }, function() {
    return HTML.IMG({
      class: "circular-icon",
      src: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "picture"));
      },
      alt: "avatar"
    });
  }), "\n                                        ", Blaze.View("lookup:user.profile.name", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "name"));
  }), HTML.Raw('\n                                        <span style="font-size:11px;color: #9d9d9d;">OFFER </span> :\n                                        '), HTML.SPAN({
    style: "color:#000;font-size:11px"
  }, " ", Blaze.View("lookup:yourBid", function() {
    return Spacebars.mustache(view.lookup("yourBid"));
  }), " "), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "facebook"));
  }, function() {
    return [ "\n                                        ", HTML.A({
      title: "Connected",
      href: function() {
        return [ "https://www.facebook.com/", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "facebook", "id")) ];
      },
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/facebook-icon.png");
      },
      alt: "Fb"
    }), HTML.Raw('\n                                            <!--<span style="color:#000;font-size:11px" class="socicon socicon-facebook"></span>-->\n                                        ')), "\n                                        " ];
  }), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "twitter"));
  }, function() {
    return [ "\n                                        ", HTML.A({
      title: "Connected",
      href: function() {
        return [ "https://www.twitter.com/", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "twitter", "screenName")) ];
      },
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/twitter-icon.png");
      },
      alt: "Tw"
    }), HTML.Raw('\n                                            <!--<span style="color:#000;font-size:11px" class="socicon socicon-twitter"></span>-->\n                                        ')), "\n                                        " ];
  }), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "linkedin"));
  }, function() {
    return [ "\n                                        ", HTML.A({
      title: "Connected",
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "linkedin", "publicProfileUrl"));
      },
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/linkedin-icon.png");
      },
      alt: "Li"
    }), "\n                                        "), "\n                                        " ];
  }), "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "google"));
  }, function() {
    return [ "\n                                        ", HTML.SPAN({
      title: "Verified email",
      class: "google-icon-box",
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/google-icon.png");
      },
      alt: "G+"
    }), "\n                                        "), "\n                                        " ];
  }), "\n\n                                    "), "\n\n\n                                "), "\n                            "), "\n                        "), HTML.Raw('\n                        <div class="menu">\n                            <ul>\n                                <li class="left-border">\n                                    <a href="mailto:" class="transparent-btn chooseTenant" type="button"><span style="color:#000;font-size:11px" class="glyphicon glyphicon-envelope"></span> Email Tenant</a>\n                                </li>\n                            </ul>\n                        </div>\n\n\n                    ')), "\n                "), HTML.Raw("\n\n                <!--act-box-->\n                "), Blaze.If(function() {
    return Spacebars.call(view.lookup("auctionId"));
  }, function() {
    return [ "\n                    ", HTML.DIV({
      class: "apt-info apt-info1 background-white clearfix"
    }, "\n                        ", HTML.UL({
      class: "superbuilt-div"
    }, "\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("references"));
    }, function() {
      return [ "\n", HTML.LI(HTML.Raw("\n<h5>Employer name</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "employerName"));
      }, function() {
        return [ " ", Blaze.View("lookup:references.employerName", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "employerName"));
        }), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw('\n<h5 title="Affordable if rent offer is within 40&#37; of his salary.">Salary</h5>\n'), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "employerTakeHome"));
      }, function() {
        return [ "\n        ", Blaze.If(function() {
          return Spacebars.dataMustache(view.lookup("canAfford"), Spacebars.dot(view.lookup("references"), "employerTakeHome"));
        }, function() {
          return HTML.Raw('\n            <span title="Affordable if rent offer is within 40&#37; of his salary take home.">Affordable</span>\n        ');
        }, function() {
          return HTML.Raw('\n            <span title="Not affordable if rent offer is more than 40&#37; of his monthly salary take home."> Cannot afford</span> ');
        }), "\n    " ];
      }, function() {
        return "\n        N/A\n    ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Work reference</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "hasWorkRef"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "workRef", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Passport</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "hasPassport"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "passport", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Landlord reference</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "hasLandlordRef"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "landlordRef", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>PPS</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "hasPPS"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "PPS", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Financial reference</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "hasFinancialRef"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "financialRef", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n                            ", HTML.LI(HTML.Raw("\n<h5>Govt. ID </h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n    ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "hasGovtID"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "govtID", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Resume</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("references"), "hasResume"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("references"), "resume", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Mobile</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return [ "tel:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile")) ];
          },
          target: "_blank"
        }, Blaze.View("lookup:user.profile.mobile", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
        })), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n", HTML.LI(HTML.Raw("\n<h5>Email</h5>\n"), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "email"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return [ "mailto:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email")) ];
          },
          target: "_blank"
        }, Blaze.View("lookup:user.profile.email", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email"));
        })), " " ];
      }, function() {
        return " N/A ";
      }), "\n"), "\n"), "\n" ];
    }, function() {
      return [ "\n    ", HTML.LI(HTML.Raw("\n        <h5>Employer name</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "employerName"));
      }, function() {
        return [ " ", Blaze.View("lookup:user.profile.references.employerName", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "employerName"));
        }), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw('\n        <h5 title="Affordable if rent offer is within 40&#37; of his salary.">Salary</h5>\n        '), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "employerTakeHome"));
      }, function() {
        return [ "\n                ", Blaze.If(function() {
          return Spacebars.dataMustache(view.lookup("canAfford"), Spacebars.dot(view.lookup("user"), "profile", "references", "employerTakeHome"));
        }, function() {
          return HTML.Raw('\n                    <span title="Affordable if rent offer is within 40&#37; of his salary take home.">Affordable</span>\n                ');
        }, function() {
          return HTML.Raw('\n                    <span title="Not affordable if rent offer is more than 40&#37; of his monthly salary take home."> Cannot afford</span> ');
        }), "\n            " ];
      }, function() {
        return "\n                N/A\n            ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Work reference</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasWorkRef"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "workRef", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Passport</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasPassport"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "passport", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Landlord reference</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasLandlordRef"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "landlordRef", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>PPS</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasPPS"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "PPS", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Financial reference</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasFinancialRef"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "financialRef", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Govt. ID </h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasGovtID"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "govtID", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Resume</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasResume"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "resume", "url"));
          },
          target: "_blank"
        }, "View"), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Mobile</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return [ "tel:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile")) ];
          },
          target: "_blank"
        }, Blaze.View("lookup:user.profile.mobile", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
        })), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n    ", HTML.LI(HTML.Raw("\n        <h5>Email</h5>\n        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, "\n            ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "email"));
      }, function() {
        return [ " ", HTML.A({
          href: function() {
            return [ "mailto:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email")) ];
          },
          target: "_blank"
        }, Blaze.View("lookup:user.profile.email", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email"));
        })), " " ];
      }, function() {
        return " N/A ";
      }), "\n        "), "\n    "), "\n" ];
    }), "\n                        "), "\n                    "), "\n                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("bidMessage"));
    }, function() {
      return [ "\n                ", HTML.DIV({
        class: "apt-info background-white clearfix bidMessageArea"
      }, "\n                    ", HTML.BLOCKQUOTE({
        class: ""
      }, "\n                    ", Blaze.View("lookup:bidMessage", function() {
        return Spacebars.mustache(view.lookup("bidMessage"));
      }), "\n                    "), "\n                "), "\n                " ];
    }), "\n\n                " ];
  }), HTML.Raw("\n                <!--act-box-->\n            ")), "\n        "), "\n\n\n\n\n    ");
}));

Template.__checkName("PM_propertyList");
Template["PM_propertyList"] = new Template("Template.PM_propertyList", (function() {
  var view = this;
  return HTML.SECTION({
    class: "main-holder border-top",
    id: function() {
      return [ "property_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, "\n        ", Blaze.If(function() {
    return Spacebars.call(view.lookup("expanded"));
  }, function() {
    return [ HTML.Raw("\n            <!--hide-accord-->\n            "), HTML.SECTION({
      class: function() {
        return Spacebars.mustache(view.lookup("showMyBidsClass"));
      }
    }, "\n                ", HTML.DIV({
      class: "container"
    }, "\n                    ", HTML.DIV({
      class: "act-box"
    }, "\n                        ", HTML.DIV({
      class: "background-white",
      style: "display: none;"
    }, "\n                            ", HTML.DIV({
      class: "logo-holder-div"
    }, "\n                                ", HTML.DIV({
      class: "logo-holder"
    }, "\n                                    ", HTML.UL("\n                                        ", HTML.LI("\n                                            ", HTML.H3({
      class: "pad-btm-0"
    }, Blaze.View("lookup:titleCase", function() {
      return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "address"));
    }), Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("address"), "area"));
    }, function() {
      return [ ", ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "area"));
      }), " " ];
    }), Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("address"), "county"));
    }, function() {
      return [ ", ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("address"), "county"));
      }), " " ];
    }), " "), "\n                                            ", Blaze.If(function() {
      return Spacebars.call(view.lookup("auctionId"));
    }, function() {
      return [ "\n                                                ", HTML.SPAN({
        class: "auction-number"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">AUCTION CODE </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ":  ", Blaze.View("lookup:auction.lettingAuctionCode", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "lettingAuctionCode"));
      }))), "\n                                                ", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">VIEWS </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ": ", Blaze.View("lookup:auction.views", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "views"));
      }))), "\n                                                ", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.Raw('<span style="font-size:11px;color: #9d9d9d;">APPLICATIONS </span>'), HTML.SPAN({
        style: "color:#000;font-size:11px"
      }, ": ", Blaze.View("lookup:auction.bids", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "bids"));
      }))), "\n                                                ", HTML.SPAN({
        class: "auction-number pad-left-15"
      }, HTML.A({
        target: "_blank",
        href: function() {
          return Spacebars.mustache(view.lookup("pathFor"), Spacebars.kw({
            route: "letting",
            key: Spacebars.dot(view.lookup("auction"), "lettingAuctionCode")
          }));
        },
        class: "viewListing",
        style: "font-size:11px;"
      }, "VIEW ADVERT")), HTML.Raw('\n                                                <span class="auction-number pad-left-15"><a href="javascript:void(0);" class="showCopyDlg" style="font-size:11px;"><i class="glyphicon glyphicon-thumbs-up" aria-hidden="true" style="font-size: 11px;"></i> SHARE</a></span>\n                                                <!--<span class="auction-number pad-left-15"><a href="javascript:void(0);" class="viewApplications">(view)</a></span>-->\n                                            ') ];
    }), "\n                                        "), "\n                                    "), "\n                                "), "\n\n                            "), "\n                        "), "\n                        ", HTML.DIV({
      class: "apt-info apt-info1 background-white clearfix",
      style: "border-bottom: 1px solid #f3f3f3;"
    }, HTML.Raw('\n                            <ul class="bid-button-div right-line pull-left" style="border-right: 1px solid #d5d5d5;width: 100px;">\n                                <li>\n                                    <h2 style="line-height: 46px;">Contract\n                                        <!--<span class="auction-number pad-left-15"><a href="javascript:void(0);" class="viewListing" style="font-size:11px;" >Edit <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></a></span>-->\n                                    </h2>\n                                </li>\n                            </ul>\n\n                            '), HTML.UL({
      class: "superbuilt-div"
    }, HTML.Raw("\n                                <li>\n                                    <h5>Tenure</h5>\n                                    <h6>  1 year</h6>\n                                </li>\n                                "), HTML.LI(HTML.Raw("\n                                    <h5>Expires on</h5>\n                                    "), HTML.H6("  ", Blaze.View("lookup:auction.lease", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "lease"));
    })), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Rent Type</h5>\n                                    "), HTML.H6(Blaze.View("lookup:titleCase", function() {
      return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("auction"), "rentType"));
    })), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Started on</h5>\n                                    "), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, Blaze.View("lookup:dateFormat", function() {
      return Spacebars.mustache(view.lookup("dateFormat"), Spacebars.dot(view.lookup("auction"), "readyFrom"));
    }), " "), "\n                                "), "\n                            "), HTML.Raw('\n                            <!--<ul class="bid-button-div left-line pull-right">-->\n                                <!--<li>-->\n                                    <!--<button class="green-btn btns viewApplications">Upload</button>-->\n                                <!--</li>-->\n                            <!--</ul>-->\n\n\n                        ')), "\n                        ", HTML.DIV({
      class: "apt-info apt-info1 background-white clearfix",
      style: "border-bottom: 1px solid #f3f3f3;"
    }, "\n                            ", HTML.UL({
      class: "bid-button-div right-line pull-left",
      style: "border-right: 1px solid #d5d5d5;width: 100px;"
    }, "\n                                ", HTML.LI("\n                                    ", HTML.H2({
      style: function() {
        return Blaze.Unless(function() {
          return Spacebars.call(view.lookup("chosenTenantCount"));
        }, function() {
          return "line-height: 46px;";
        });
      }
    }, "Tenants\n                                        ", Blaze.If(function() {
      return Spacebars.call(view.lookup("chosenTenantCount"));
    }, function() {
      return HTML.Raw('\n                                        <span class="auction-number pad-left-15"><a href="javascript:void(0);" class="viewTenants" style="font-size:11px;">View </a></span>\n                                        ');
    }), "\n                                    "), "\n                                "), "\n                            "), "\n\n                            ", HTML.UL({
      class: "superbuilt-div"
    }, "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Count</h5>\n                                    "), HTML.H6({
      style: "text-align: center;",
      class: "text-center"
    }, "   ", Blaze.View("lookup:chosenTenantCount", function() {
      return Spacebars.mustache(view.lookup("chosenTenantCount"));
    })), "\n                                "), HTML.Raw('\n                                <!--<li>-->\n                                    <!--<h5>Next rent date</h5>-->\n                                    <!--<h6 class="cursor-ptr color-blue showSubaPopup" id="super-bulit-up-area2">{{dateFormat auction.readyFrom}} </h6>-->\n                                <!--</li>-->\n                                '), HTML.LI(HTML.Raw("\n                                    <h5>Previous activations</h5>\n                                    "), HTML.H6(HTML.A({
      href: "javascript:void(0);",
      class: "prev_activations"
    }, "History", Blaze.If(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("PropertyManage"), "prevActivationsCount"));
    }, function() {
      return [ " (", Blaze.View("lookup:PropertyManage.prevActivationsCount", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("PropertyManage"), "prevActivationsCount"));
      }), ")" ];
    })), " "), "\n                                "), HTML.Raw("\n                                <!--<li>-->\n                                    <!--<h5>Reminders</h5>-->\n                                    <!--<h6>Yes </h6>-->\n                                <!--</li>-->\n                            ")), HTML.Raw('\n                            <ul class="bid-button-div left-line pull-right">\n                                <li>\n                                    <a href="" target="_blank" class="transparent-btn btns">Email</a>\n                                </li>\n                                <li>\n                                    <button class="green-btn btns viewApplications">View All Applications</button>\n                                </li>\n                            </ul>\n\n\n                        ')), "\n                        ", Blaze.If(function() {
      return false;
    }, function() {
      return [ "\n                            ", HTML.DIV({
        class: "apt-info apt-info1 background-white clearfix"
      }, "\n                                ", HTML.UL({
        class: "superbuilt-div"
      }, "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Rent</h5>\n                                        "), HTML.H6(HTML.Raw("&euro; "), Blaze.View("lookup:auction.price", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "price"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Lease</h5>\n                                        "), HTML.H6("  ", Blaze.View("lookup:auction.lease", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("auction"), "lease"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Rent Type</h5>\n                                        "), HTML.H6(" ", Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("auction"), "rentType"));
      })), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Ready From</h5>\n                                        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, Blaze.View("lookup:dateFormat", function() {
        return Spacebars.mustache(view.lookup("dateFormat"), Spacebars.dot(view.lookup("auction"), "readyFrom"));
      }), " "), "\n                                    "), "\n                                    ", HTML.LI(HTML.Raw("\n                                        <h5>Activated On</h5>\n                                        "), HTML.H6({
        class: "cursor-ptr color-blue showSubaPopup",
        id: "super-bulit-up-area2"
      }, Blaze.View("lookup:dateFormat", function() {
        return Spacebars.mustache(view.lookup("dateFormat"), Spacebars.dot(view.lookup("auction"), "createdAt"));
      }), " "), "\n                                    "), "\n                                "), "\n                                ", HTML.UL({
        class: "bid-button-div left-line pull-right"
      }, "\n                                    ", HTML.LI("\n                                        ", HTML.A({
        href: function() {
          return Spacebars.mustache(view.lookup("urlFor"), Spacebars.kw({
            route: "lettingprintview",
            data: view.lookup("lettingprintviewData")
          }));
        },
        target: "_blank",
        class: "transparent-btn btns printView"
      }, "Print Tokens"), "\n                                    "), HTML.Raw('\n                                    <li>\n                                        <button class="green-btn btns viewApplications">View Applications</button>\n                                    </li>\n                                ')), "\n\n\n                            "), "\n                        " ];
    }), "\n                        ", HTML.DIV({
      class: "apt-info background-white"
    }, "\n                            ", HTML.DIV({
      class: "box-bdr"
    }, "\n                                ", HTML.DIV({
      class: " box-inner"
    }, "\n                                    ", HTML.DIV({
      class: "clearfix accord-open-border background-halfwhite"
    }, "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Type</h5>\n                                            "), HTML.H6({
      class: "cursor-ptr color-blue showSubaPopup",
      id: "super-bulit-up-area2"
    }, Blaze.View("lookup:type", function() {
      return Spacebars.mustache(view.lookup("type"));
    })), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Beds</h5>\n                                            "), HTML.H6("  ", Blaze.View("lookup:bedroomsCount", function() {
      return Spacebars.mustache(view.lookup("bedroomsCount"));
    }), " "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Baths</h5>\n                                            "), HTML.H6("  ", Blaze.View("lookup:baths", function() {
      return Spacebars.mustache(view.lookup("baths"));
    }), " "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Furnished</h5>\n                                            "), HTML.H6("  ", Blaze.If(function() {
      return Spacebars.call(view.lookup("furnished"));
    }, function() {
      return "Yes";
    }, function() {
      return "No";
    })), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Added On</h5>\n                                            "), HTML.H6(" ", Blaze.View("lookup:dateFormat", function() {
      return Spacebars.mustache(view.lookup("dateFormat"), view.lookup("createdAt"));
    }), " "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-6 col-sm-6"
    }, HTML.Raw("\n                                            <h5>Edited On</h5>\n                                            "), HTML.H6(" ", Blaze.View("lookup:dateFormat", function() {
      return Spacebars.mustache(view.lookup("dateFormat"), view.lookup("updatedAt"));
    }), " "), "\n                                        "), "\n                                    "), "\n                                    ", HTML.DIV({
      class: "clearfix accord-open-border background-halfwhite"
    }, "\n                                        ", HTML.DIV({
      class: "col-md-2 col-xs-2 col-sm-2"
    }, HTML.Raw("\n                                            <h5>Images</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("gallery"));
    }, function() {
      return [ "\n                                                    ", Blaze.View("lookup:gallery.length", function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("gallery"), "length"));
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    0\n                                                ";
    }), "\n                                            "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-3 col-xs-6 col-sm-3"
    }, HTML.Raw("\n                                            <h5>Bedrooms</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("bedrooms"));
    }, function() {
      return [ "\n                                                    ", Blaze.Each(function() {
        return Spacebars.dataMustache(view.lookup("objectToPairs"), view.lookup("bedrooms"));
      }, function() {
        return [ Blaze.If(function() {
          return Spacebars.call(view.lookup("key"));
        }, function() {
          return ", ";
        }), Blaze.View("lookup:value.bedType", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("value"), "bedType"));
        }), " ", Blaze.If(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("value"), "ensuite"));
        }, function() {
          return "(Ensuite)";
        }) ];
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    N/A\n                                                ";
    }), "\n                                            "), "\n                                        "), "\n                                        ", HTML.DIV({
      class: "col-md-3 col-xs-6 col-sm-3 "
    }, HTML.Raw("\n                                            <h5>Amenities</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("amenities"));
    }, function() {
      return [ "\n                                                    ", Blaze.View("lookup:addCommaToEach", function() {
        return Spacebars.mustache(view.lookup("addCommaToEach"), view.lookup("amenities"));
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    N/A\n                                                ";
    }), "\n                                            "), "\n                                        "), HTML.Raw('\n                                        <!--<div class="col-md-3 col-xs-6 col-sm-3">-->\n                                        <!--<h5></h5>-->\n                                        <!--<h6>-->\n                                        <!--<a href="http://www.google.com/maps/place/{{address.geoCodeLat}},{{address.geoCodeLong}}" target="_blank">-->\n                                        <!--<span style="margin-right:8px;vertical-align:middle;" class="glyphicon glyphicon-map-marker" ></span><span style="vertical-align:middle;" class="color-blue">Location</span>-->\n                                        <!--</a>-->\n                                        <!--</h6>-->\n                                        <!--</div>-->\n                                        '), HTML.DIV({
      class: "col-md-3 col-xs-6 col-sm-3"
    }, HTML.Raw("\n                                            <h5>BER</h5>\n                                            "), HTML.H6("\n                                                ", Blaze.If(function() {
      return Spacebars.call(view.lookup("BER"));
    }, function() {
      return [ "\n                                                    ", Blaze.View("lookup:addCommaToEach", function() {
        return Spacebars.mustache(view.lookup("addCommaToEach"), view.lookup("BER"));
      }), "\n                                                " ];
    }, function() {
      return "\n                                                    N/A\n                                                ";
    }), "\n                                            "), "\n                                        "), "\n                                    "), "\n                                    ", Blaze.If(function() {
      return Spacebars.call(view.lookup("contacts"));
    }, function() {
      return [ "\n                                        ", HTML.DIV({
        class: "clearfix accord-open-border background-halfwhite"
      }, "\n                                            ", Blaze.Each(function() {
        return Spacebars.call(view.lookup("contacts"));
      }, function() {
        return [ "\n                                                ", HTML.DIV({
          class: "col-md-3 col-xs-6 col-sm-3 "
        }, HTML.Raw("\n                                                    <h5>Contact details of the property owner</h5>\n                                                    "), HTML.H6("\n                                                        ", Blaze.View("lookup:name", function() {
          return Spacebars.mustache(view.lookup("name"));
        }), "\n                                                        ", Blaze.If(function() {
          return Spacebars.call(view.lookup("phone"));
        }, function() {
          return [ " (", Blaze.View("lookup:phone", function() {
            return Spacebars.mustache(view.lookup("phone"));
          }), HTML.Raw(")<br>") ];
        }), "\n                                                        ", Blaze.If(function() {
          return Spacebars.call(view.lookup("email"));
        }, function() {
          return Blaze.View("lookup:email", function() {
            return Spacebars.mustache(view.lookup("email"));
          });
        }), "\n                                                    "), "\n                                                "), "\n                                            " ];
      }), "\n\n                                        "), "\n                                    " ];
    }), "\n                                    ", Blaze.If(function() {
      return Spacebars.call(view.lookup("auctionId"));
    }, function() {
      return [ "\n                                        ", HTML.DIV({
        class: "clearfix accord-open-border background-halfwhite"
      }, "\n                                            ", Blaze.Each(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("auction"), "contacts"));
      }, function() {
        return [ "\n                                                ", HTML.DIV({
          class: "col-md-3 col-xs-6 col-sm-3 "
        }, HTML.Raw("\n                                                    <h5>Contact persons for this advert</h5>\n                                                    "), HTML.H6("\n                                                        ", Blaze.View("lookup:name", function() {
          return Spacebars.mustache(view.lookup("name"));
        }), "\n                                                        ", Blaze.If(function() {
          return Spacebars.call(view.lookup("phone"));
        }, function() {
          return [ " (", Blaze.View("lookup:phone", function() {
            return Spacebars.mustache(view.lookup("phone"));
          }), HTML.Raw(")<br>") ];
        }), "\n                                                        ", Blaze.If(function() {
          return Spacebars.call(view.lookup("email"));
        }, function() {
          return Blaze.View("lookup:email", function() {
            return Spacebars.mustache(view.lookup("email"));
          });
        }), "\n                                                    "), "\n                                                "), "\n                                            " ];
      }), "\n\n                                        "), "\n                                    " ];
    }), "\n                                "), "\n                                ", HTML.DIV({
      class: "clearfix accord-open-border accord-top-border background-halfwhite"
    }, "\n                                    ", HTML.P({
      class: "accor-padd aboutPara"
    }, Blaze.View("lookup:nlToBr", function() {
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("nlToBr"), view.lookup("about")));
    })), "\n                                "), "\n\n                            "), HTML.Raw('\n                            <!--<div class="see-more-btn1 see_more_btn">-->\n                                <!--<p>See less<span style="margin-left:8px;"><img src="/images/accord-top-arrow.png"></span></p>-->\n                                <!--<p class="showEditPropertyForm">Edit <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></p>-->\n                            <!--</div>-->\n                        ')), HTML.Raw("<!--act-box-->\n                    ")), "\n                "), "\n            "), "\n\n        " ];
  }), "\n    ");
}));

Template.__checkName("tempMP1");
Template["tempMP1"] = new Template("Template.tempMP1", (function() {
  var view = this;
  return HTML.SECTION({
    class: function() {
      return [ "main-holder ", Spacebars.mustache(view.lookup("classBidList")) ];
    },
    id: function() {
      return [ "unit_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, HTML.Raw('\n\n        <!--<section class="border-top act-div"></section>-->\n        '), HTML.DIV({
    class: "container"
  }, "\n            ", HTML.DIV({
    class: "act-box"
  }, HTML.Raw('\n                <div class="background-white">\n                    <div class="logo-holder-div">\n                        <div class="logo-holder" style="padding: 0 20px;">\n                            <ul>\n                                <li>\n                                    <h3 class="pad-btm-0">\n                                        Activity history\n                                    </h3>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class="menu">\n                            <ul>\n                                <li class="left-border" style="display: none;">\n                                    <a href="mailto:" class="transparent-btn chooseTenant" type="button"><span style="color:#000; font-size:11px" class="glyphicon glyphicon-envelope"></span> Email Tenant</a>\n                                </li>\n                            </ul>\n                        </div>\n\n\n                    </div>\n                </div>\n                <div class="background-white profile-text" style="\n    padding: 0px 30px;\n">\n                    <div class="row">\n                        <div class="col-md-12">\n                            <h6 class="no-capitalize" style="padding-top: 20px;display: none;">Activity history</h6>\n                            <ul class="information-box new-height">\n\n                            </ul>\n                        </div>\n\n                    </div>\n\n                    <div class="" style="\n    margin-top: 10px;\n    text-align: center;\n">\n                        <div class="div-holder clearfix">\n\n                            <a href="javascript:void(0)">Load More</a>\n\n\n                        </div>\n                    </div>\n\n                    <p style="font-size:12px;display: none;">**The total price or total does not include the stamp duty and\n                        registration charges. Stamp duty and registration charges will be added to the total price/ total at the time of registration.</p>\n                </div>\n\n                <!--act-box-->\n\n                '), HTML.DIV({
    style: "",
    class: "apt-info apt-info1 background-white clearfix"
  }, "\n                    ", HTML.DIV({
    class: "superbuilt-div"
  }, "\n                        ", HTML.TABLE({
    class: "background-halfwhite table"
  }, "\n                            ", HTML.TR(HTML.Raw("\n                                <td>one</td>\n                                <td>one 2</td>\n                                <td>one 3</td>\n                            ")), HTML.TR(HTML.Raw("\n                            <td>two</td>\n                            <td>two 2</td>\n                            <td>two 3</td>\n                        ")), "\n                        "), "\n                    "), "\n                "), "\n\n                ", HTML.DIV({
    class: "apt-info background-white clearfix bidMessageArea",
    style: "display: none;"
  }, "\n                    ", HTML.BLOCKQUOTE({
    class: ""
  }, "\n                        ", Blaze.View("lookup:bidMessage", function() {
    return Spacebars.mustache(view.lookup("bidMessage"));
  }), "\n                    "), "\n                "), HTML.Raw("\n\n\n\n                <!--act-box-->\n            ")), "\n        "), "\n\n\n\n\n    ");
}));

Template.__checkName("addTenantDlg");
Template["addTenantDlg"] = new Template("Template.addTenantDlg", (function() {
  var view = this;
  return [ HTML.Raw('<div class="refund-div"><h2>Invite for viewing</h2></div>\n    '), HTML.DIV({
    class: "profile-text"
  }, "\n        ", HTML.H5({
    class: "no-capitalize"
  }, "Invite ", Blaze.View("lookup:data.user.profile.name", function() {
    return Spacebars.mustache(Spacebars.dot(view.lookup("data"), "user", "profile", "name"));
  }), " for viewing. Please choose viewing date and time"), "\n\n        ", HTML.FORM({
    class: "signin-form"
  }, "\n            ", HTML.DIV({
    class: "form-border",
    style: " padding: 20px 0;"
  }, HTML.Raw('\n\n                <div class="styled-input underline">\n                    <input class="inviteDate" type="datetime" placeholder="" value="" name="inviteDate" id="inviteDate" required="">\n                </div>\n\n                '), HTML.DIV({
    class: "styled-input underline"
  }, "\n                    ", HTML.TEXTAREA({
    class: "form-control inviteMessage",
    id: "inviteMessage",
    rows: "2",
    placeholder: "You may enter a personal message to landlord if you wish.",
    maxlength: "500",
    readonly: "",
    value: function() {
      return [ "Hi, You are invited to the viewing on ", Spacebars.mustache(view.lookup("inviteDateFormated")), " at letting ", Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "address")), " ", Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
      }, function() {
        return [ ", ", Blaze.View("lookup:propertyData.address.area", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "area"));
        }), " " ];
      }), Blaze.If(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
      }, function() {
        return [ ", ", Blaze.View("lookup:propertyData.address.county", function() {
          return Spacebars.mustache(Spacebars.dot(view.lookup("propertyData"), "address", "county"));
        }), " " ];
      }) ];
    }
  }), "\n                "), HTML.Raw('\n\n                <!--<div class="input-group date">-->\n                <!--<span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>-->\n                <!--<input class="set-due-date form-control moveindate" type="text" id="moveindate"/>-->\n                <!--</div>-->\n\n            ')), "\n        "), HTML.Raw('\n        <p class="color-text" style="margin-top: 20px;">Please note that this will send an email with your contact details.</p>\n\n        '), HTML.UL("\n            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("inviteInProgress"));
  }, function() {
    return HTML.Raw('\n                <li><button class="transparent-btn  btns " disabled="true" type="button">Wait for it... </button></li>\n            ');
  }, function() {
    return HTML.Raw('\n                <li><button class="blue-btn  btns confirmInviteBtn" type="button">Invite </button></li>\n            ');
  }), "\n            ", HTML.LI(HTML.BUTTON({
    class: "transparent-btn btns closePopupBtn",
    disabled: function() {
      return Spacebars.mustache(view.lookup("isApplicationInProgress"));
    },
    type: "button"
  }, "Cancel")), "\n        "), "\n    ") ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tenant.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/tenant.html                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.tenant.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.tenant.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.tenant.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("tenant");
Template["tenant"] = new Template("Template.tenant", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n\n    ", Blaze.If(function() {
        return Spacebars.call(view.lookup("isViewingHisProfile"));
      }, function() {
        return [ "\n        ", Spacebars.include(view.lookupTemplate("userProfile")), "\n    " ];
      }, function() {
        return [ "\n        ", Blaze.If(function() {
          return Spacebars.call(view.lookup("isPublicProfile"));
        }, function() {
          return [ "\n            ", Blaze.Each(function() {
            return Spacebars.call(view.lookup("user"));
          }, function() {
            return [ "\n                ", Blaze._TemplateWith(function() {
              return {
                user: Spacebars.call(view.lookup("."))
              };
            }, function() {
              return Spacebars.include(view.lookupTemplate("tenantDetail"));
            }), "\n            " ];
          }), "\n        " ];
        }, function() {
          return [ "\n            ", HTML.SECTION({
            class: "main-holder "
          }, "\n                ", HTML.DIV({
            class: "container text-center mar-top-20 pad-btm-30"
          }, "\n                    ", HTML.DIV({
            class: "filter-holder"
          }, "\n                        ", HTML.DIV({
            class: "head-border-bottom"
          }, "\n                            ", Blaze.If(function() {
            return Spacebars.call(view.lookup("userFound"));
          }, function() {
            return [ "\n                                ", HTML.STRONG(Blaze.View("lookup:titleCase", function() {
              return Spacebars.mustache(view.lookup("titleCase"), view.lookup("userFirstName"));
            }), " profile is private. Request tenant to make their profile public from their profile settings."), HTML.Raw('<br><br>\n                                <!--<a class="blue-btn btns " type="button">Find other tenants.</a>-->\n                            ') ];
          }, function() {
            return HTML.Raw('\n                                <strong>Tenant not found. Please check your tenant username and try again.</strong><br><br>\n                                <!--<a class="blue-btn btns " type="button">Find other tenants.</a>-->\n                            ');
          }), "\n                        "), "\n                    "), "\n                "), "\n            "), "\n        " ];
        }), "\n    " ];
      }), "\n\n" ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

Template.__checkName("tenantDetail");
Template["tenantDetail"] = new Template("Template.tenantDetail", (function() {
  var view = this;
  return HTML.SECTION({
    class: "main-holder border-top mar-top-30 mar-btm-30",
    id: function() {
      return [ "unit_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, HTML.Raw('\n\n            <!--<section class="border-top act-div"></section>-->\n            '), HTML.DIV({
    class: "container"
  }, "\n                ", HTML.DIV({
    class: "act-box"
  }, "\n                    ", HTML.DIV({
    class: "background-white"
  }, "\n                        ", HTML.DIV({
    class: "logo-holder-div"
  }, "\n                            ", HTML.DIV({
    class: "logo-holder"
  }, "\n                                ", HTML.UL("\n                                    ", HTML.LI("\n                                        ", HTML.H3({
    class: "pad-btm-0"
  }, "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "picture"));
  }, function() {
    return HTML.IMG({
      style: "margin-bottom: 10px;",
      class: "circular-icon",
      src: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "picture"));
      },
      alt: "avatar"
    });
  }), "\n                                            ", Blaze.View("lookup:titleCase", function() {
    return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("user"), "profile", "name"));
  }), HTML.Raw("&#39;s References\n\n                                            "), Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "facebook"));
  }, function() {
    return [ "\n                                                ", HTML.A({
      title: "Connected",
      href: function() {
        return [ "https://www.facebook.com/", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "facebook", "id")) ];
      },
      target: "_blank"
    }, "\n                                                    ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/facebook-icon.png");
      },
      alt: "Fb"
    }), HTML.Raw('\n                                                    <!--<span style="color:#000;font-size:11px" class="socicon socicon-facebook"></span>-->\n                                                ')), "\n                                            " ];
  }), "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "twitter"));
  }, function() {
    return [ "\n                                                ", HTML.A({
      title: "Connected",
      href: function() {
        return [ "https://www.twitter.com/", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "twitter", "screenName")) ];
      },
      target: "_blank"
    }, "\n                                                    ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/twitter-icon.png");
      },
      alt: "Tw"
    }), HTML.Raw('\n                                                    <!--<span style="color:#000;font-size:11px" class="socicon socicon-twitter"></span>-->\n                                                ')), "\n                                            " ];
  }), "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "linkedin"));
  }, function() {
    return [ "\n                                                ", HTML.A({
      title: "Connected",
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "services", "linkedin", "publicProfileUrl"));
      },
      target: "_blank"
    }, "\n                                                    ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/linkedin-icon.png");
      },
      alt: "Li"
    }), "\n                                                "), "\n                                            " ];
  }), "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "google"));
  }, function() {
    return [ "\n                                                ", HTML.SPAN({
      title: "Verified email",
      class: "google-icon-box",
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/google-icon.png");
      },
      alt: "G+"
    }), "\n                                        "), "\n                                            " ];
  }), "\n\n                                        "), "\n\n\n                                    "), "\n                                "), "\n                            "), HTML.Raw('\n                            <!--<div class="menu">-->\n                                <!--<ul>-->\n                                    <!--<li class="left-border">-->\n                                        <!--<button class="transparent-btn unChooseTenant" type="button">Unchoose</button>-->\n                                    <!--</li>-->\n                                <!--</ul>-->\n                            <!--</div>-->\n                        ')), "\n                    "), HTML.Raw("\n\n                    <!--act-box-->\n\n                        "), HTML.DIV({
    class: "apt-info apt-info1 background-white clearfix"
  }, "\n                            ", HTML.UL({
    class: "superbuilt-div"
  }, "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Employer name</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "employerName"));
  }, function() {
    return [ " ", Blaze.View("lookup:user.profile.references.employerName", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "employerName"));
    }), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw('\n                                    <h5 title="Affordable if rent offer is within 40&#37; of his salary.">Salary</h5>\n                                    '), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "employerTakeHome"));
  }, function() {
    return "\n                                            Hidden\n                                        ";
  }, function() {
    return "\n                                            N/A\n                                        ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Work reference</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasWorkRef"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "workRef", "url"));
      },
      target: "_blank"
    }, "View"), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Passport</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasPassport"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "passport", "url"));
      },
      target: "_blank"
    }, "View"), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Landlord reference</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasLandlordRef"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "landlordRef", "url"));
      },
      target: "_blank"
    }, "View"), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>PPS</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasPPS"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "PPS", "url"));
      },
      target: "_blank"
    }, "View"), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Financial reference</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasFinancialRef"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "financialRef", "url"));
      },
      target: "_blank"
    }, "View"), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Govt. ID </h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasGovtID"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "govtID", "url"));
      },
      target: "_blank"
    }, "View"), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Resume</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "references", "hasResume"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "references", "resume", "url"));
      },
      target: "_blank"
    }, "View"), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Mobile</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return [ "tel:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile")) ];
      },
      target: "_blank"
    }, Blaze.View("lookup:user.profile.mobile", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "mobile"));
    })), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n                                ", HTML.LI(HTML.Raw("\n                                    <h5>Email</h5>\n                                    "), HTML.H6({
    class: "cursor-ptr color-blue showSubaPopup",
    id: "super-bulit-up-area2"
  }, "\n                                        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "email"));
  }, function() {
    return [ " ", HTML.A({
      href: function() {
        return [ "mailto:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email")) ];
      },
      target: "_blank"
    }, Blaze.View("lookup:user.profile.email", function() {
      return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email"));
    })), " " ];
  }, function() {
    return " N/A ";
  }), "\n                                    "), "\n                                "), "\n\n                            "), "\n                        "), HTML.Raw("\n\n                    <!--act-box-->\n                ")), "\n            "), "\n\n\n\n\n        ");
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tenants.html":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/tenants.html                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./template.tenants.js", { "*": "*+" });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.tenants.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/template.tenants.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //

Template.__checkName("tenants");
Template["tenants"] = new Template("Template.tenants", (function() {
  var view = this;
  return Blaze.If(function() {
    return Spacebars.call(view.lookup("isSubsLoaded"));
  }, function() {
    return [ "\n\n", Blaze.If(function() {
      return Spacebars.call(view.lookup("userLoggedIn"));
    }, function() {
      return [ "\n\n    ", Blaze.Unless(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("dataFull"), "totalResultsCount"));
      }, function() {
        return HTML.Raw('\n        <div class="container text-center mar-top-20 pad-btm-30"><strong>No public tenants profiles. </strong></div>\n    ');
      }, function() {
        return [ HTML.Raw('\n        <section class="mar-top-30 "></section>\n        '), Blaze.Each(function() {
          return Spacebars.call(Spacebars.dot(view.lookup("dataFull"), "results"));
        }, function() {
          return [ "\n            ", Blaze._TemplateWith(function() {
            return {
              user: Spacebars.call(view.lookup("."))
            };
          }, function() {
            return Spacebars.include(view.lookupTemplate("tenantList"));
          }), "\n        " ];
        }), "\n    " ];
      }), "\n\n    ", HTML.SECTION({
        class: "mar-top-20"
      }, "\n        ", HTML.SECTION({
        class: "border-top act-div"
      }, "\n            ", HTML.DIV({
        class: "container"
      }, "\n                ", HTML.DIV({
        class: "row"
      }, "\n                    ", Blaze._TemplateWith(function() {
        return Spacebars.call(Spacebars.dot(view.lookup("dataNonChosen"), "pagination"));
      }, function() {
        return Spacebars.include(view.lookupTemplate("pagination"));
      }), "\n                "), "\n            "), "\n        "), "\n    "), "\n\n" ];
    }, function() {
      return [ "\n    ", HTML.SECTION({
        class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, "\n        ", Spacebars.include(view.lookupTemplate("loginPageHorizontal")), "\n    "), "\n" ];
    }), "\n" ];
  }, function() {
    return [ "\n    ", HTML.SECTION({
      class: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
    }, "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    "), "\n" ];
  });
}));

Template.__checkName("tenantList");
Template["tenantList"] = new Template("Template.tenantList", (function() {
  var view = this;
  return [ HTML.SECTION({
    class: "main-holder border-top mar-btm-10",
    id: function() {
      return [ "unit_", Spacebars.mustache(view.lookup("_id")) ];
    }
  }, HTML.Raw('\n\n            <!--<section class="border-top act-div"></section>-->\n            '), HTML.DIV({
    class: "container"
  }, "\n                ", HTML.DIV({
    class: "act-box"
  }, "\n                    ", HTML.DIV({
    class: "background-white"
  }, "\n                        ", HTML.DIV({
    class: "logo-holder-div"
  }, "\n                            ", HTML.DIV({
    class: "logo-holder"
  }, "\n                                ", HTML.UL("\n                                    ", HTML.LI("\n                                        ", HTML.H3({
    class: "pad-btm-0"
  }, "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "profile", "picture"));
  }, function() {
    return HTML.IMG({
      class: "circular-icon",
      src: function() {
        return Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "picture"));
      },
      alt: "avatar"
    });
  }), "\n                                            ", Blaze.View("lookup:titleCase", function() {
    return Spacebars.mustache(view.lookup("titleCase"), view.lookup("userFirstName"));
  }), HTML.Raw("&#39;s References\n\n                                            "), Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "facebook"));
  }, function() {
    return [ "\n                                                ", HTML.A({
      title: function() {
        return [ Spacebars.mustache(view.lookup("titleCase"), view.lookup("userFirstName")), HTML.CharRef({
          html: "&#39;",
          str: "'"
        }), "s profile is connected with facebook" ];
      },
      target: "_blank"
    }, "\n                                                    ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/facebook-icon.png");
      },
      alt: "Fb"
    }), HTML.Raw('\n                                                    <!--<span style="color:#000;font-size:11px" class="socicon socicon-facebook"></span>-->\n                                                ')), "\n                                            " ];
  }), "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "twitter"));
  }, function() {
    return [ "\n                                                ", HTML.A({
      title: function() {
        return [ Spacebars.mustache(view.lookup("titleCase"), view.lookup("userFirstName")), HTML.CharRef({
          html: "&#39;",
          str: "'"
        }), "s profile is connected with Twitter" ];
      },
      target: "_blank"
    }, "\n                                                    ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/twitter-icon.png");
      },
      alt: "Tw"
    }), HTML.Raw('\n                                                    <!--<span style="color:#000;font-size:11px" class="socicon socicon-twitter"></span>-->\n                                                ')), "\n                                            " ];
  }), "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "linkedin"));
  }, function() {
    return [ "\n                                                ", HTML.A({
      title: function() {
        return [ Spacebars.mustache(view.lookup("titleCase"), view.lookup("userFirstName")), HTML.CharRef({
          html: "&#39;",
          str: "'"
        }), "s profile is connected with linkedIn." ];
      },
      target: "_blank"
    }, "\n                                                    ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/linkedin-icon.png");
      },
      alt: "Li"
    }), "\n                                                "), "\n                                            " ];
  }), "\n                                            ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("user"), "services", "google"));
  }, function() {
    return [ "\n                                                ", HTML.SPAN({
      title: function() {
        return [ Spacebars.mustache(view.lookup("titleCase"), view.lookup("userFirstName")), HTML.CharRef({
          html: "&#39;",
          str: "'"
        }), "s has a verified google email" ];
      },
      class: "google-icon-box",
      target: "_blank"
    }, "\n                                            ", HTML.IMG({
      src: function() {
        return Spacebars.mustache(view.lookup("cdnPath"), "/images/google-icon.png");
      },
      alt: "G+"
    }), "\n                                        "), "\n                                            " ];
  }), "\n\n                                        "), "\n\n\n                                    "), "\n                                "), "\n                            "), "\n                            ", HTML.DIV({
    class: "menu"
  }, "\n                                ", HTML.UL("\n                                    ", HTML.LI({
    class: "left-border"
  }, "\n                                        ", HTML.A({
    class: "btns transparent-btn",
    href: function() {
      return [ "mailto:", Spacebars.mustache(Spacebars.dot(view.lookup("user"), "profile", "email")) ];
    }
  }, "Email"), "\n                                    "), HTML.Raw('\n                                    <li class="">\n                                        <a class="btns green-btn inviteToApply">Invite to Apply</a>\n                                    </li>\n                                ')), "\n                            "), "\n                        "), "\n                    "), HTML.Raw("\n\n                    <!--act-box-->\n\n                        "), HTML.DIV({
    class: "apt-info apt-info1 background-white clearfix"
  }, "\n                            ", HTML.P(Blaze.View("lookup:titleCase", function() {
    return Spacebars.mustache(view.lookup("titleCase"), view.lookup("userFirstName"));
  }), HTML.Raw("&#39;s references are hidden. Invite them to apply for your property to view their references.")), "\n                        "), HTML.Raw('\n\n                    <!--{{#if user.profile.message}}-->\n                    <!--<div class="apt-info background-white clearfix bidMessageArea">-->\n                    <!--<blockquote class="">-->\n                    <!--{{user.profile.message}}-->\n                    <!--</blockquote>-->\n                    <!--</div>-->\n                        <!--{{/if}}-->\n                    <!--act-box-->\n                ')), "\n            "), "\n\n\n\n\n        "), "\n    ", Blaze.If(function() {
    return Spacebars.call(view.lookup("currentUser"));
  }, function() {
    return [ "\n        ", HTML.DIV({
      id: "inviteToApplyDlg",
      style: "display:none;",
      class: "verification-div1"
    }, "\n            ", Spacebars.include(view.lookupTemplate("inviteToApply")), "\n        "), "\n    " ];
  }) ];
}));

Template.__checkName("inviteToApply");
Template["inviteToApply"] = new Template("Template.inviteToApply", (function() {
  var view = this;
  return [ HTML.Raw('<div class="refund-div"><h2>Invite to Apply</h2></div>\n    '), HTML.DIV({
    class: "profile-text"
  }, "\n        ", HTML.P({
    class: "no-capitalize"
  }, "Invite ", Blaze.View("lookup:userFirstName", function() {
    return Spacebars.mustache(view.lookup("userFirstName"));
  }), " to apply for your advertisement. Please choose your advertisement."), "\n        ", Blaze.If(function() {
    return Spacebars.call(Spacebars.dot(view.lookup("myAdvertisements"), "totalResultsCount"));
  }, function() {
    return [ "\n        ", HTML.FORM({
      class: "signin-form"
    }, "\n            ", HTML.DIV({
      class: "form-border",
      style: " padding: 20px 0;"
    }, "\n\n                ", HTML.DIV({
      class: "styled-input underline"
    }, "\n\n                    ", HTML.SELECT({
      multiple: "",
      placeholder: "",
      class: "selectedAdvertisements",
      name: "selectedAdvertisements",
      required: "",
      style: "margin-bottom: 30px;"
    }, "\n                        ", Blaze.Each(function() {
      return Spacebars.call(Spacebars.dot(view.lookup("myAdvertisements"), "results"));
    }, function() {
      return [ "\n                            ", HTML.OPTION({
        value: function() {
          return Spacebars.mustache(view.lookup("_id"));
        }
      }, Blaze.View("lookup:titleCase", function() {
        return Spacebars.mustache(view.lookup("titleCase"), Spacebars.dot(view.lookup("property"), "address", "address"));
      })), "\n                        " ];
    }), "\n                    "), "\n\n                "), HTML.Raw('\n\n                <!--<div class="input-group date">-->\n                <!--<span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>-->\n                <!--<input class="set-due-date form-control moveindate" type="text" id="moveindate"/>-->\n                <!--</div>-->\n\n            ')), "\n        "), HTML.Raw('\n        <p class="color-text" style="margin-top: 20px;">Please note that this will send an email to the tenant.</p>\n        ') ];
  }, function() {
    return HTML.Raw('\n        <p class="color-text mar-top-20" style="text-align: center;margin-top:20px;">You have no active advertisements.</p>\n        <p style="text-align: center;" class=" mar-btm-20">\n            <button href="advertiseMyProperty" style="max-width: 250px;margin: 0 auto;padding: 7px 15px;" class="transparent-btn btns advertiseMyProperty" type="button">Advertise My Property</button>\n        </p>\n        ');
  }), "\n\n        ", HTML.UL("\n            ", Blaze.If(function() {
    return Spacebars.call(view.lookup("inviteInProgress"));
  }, function() {
    return HTML.Raw('\n                <li><button class="transparent-btn  btns " disabled="true" type="button">Wait for it... </button></li>\n            ');
  }, function() {
    return HTML.Raw('\n                <li><button class="blue-btn  btns confirmInviteBtn" type="button">Invite </button></li>\n            ');
  }), "\n            ", HTML.LI(HTML.BUTTON({
    class: "transparent-btn btns closePopupBtn",
    disabled: function() {
      return Spacebars.mustache(view.lookup("inviteInProgress"));
    },
    type: "button"
  }, "Cancel")), "\n        "), "\n    ") ];
}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"editProperty.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/editProperty.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./imageView.html");
module.link("./editProperty.html");
module.link("./shared.js");
var filestack;
module.link("filestack-js", {
  "default": function (v) {
    filestack = v;
  }
}, 0);
var apikey = 'AIPACLEs7ShGwwPh6fMTxz';
var fsClient = filestack.init(apikey, {
  policy: 'eyJleHBpcnkiOjE4NjE5MjAwMDAsImNhbGwiOlsicGljayIsInJlYWQiLCJzdGF0Iiwid3JpdGUiLCJ3cml0ZVVybCIsInN0b3JlIiwiY29udmVydCIsInJlbW92ZSIsImV4aWYiXX0=',
  signature: '465e8652c5cef95f44e5858e09d430abea855d98deaeb7425558f2c80d0f4f57'
}); // import SimpleSchema from "simpl-schema";
// SimpleSchema.extendOptions(['autoform']);

Template.editProperty.onCreated(function () {
  // this.showEditProperty = new ReactiveVar( false );
  // console.log(this.data.propertyData)
  // debugger;
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    instance.subscribe('Config');
    var id = FlowRouter.getParam('id');
    instance.subscribe('editProperty', id);
    instance.subscribe('Areas'); //Let it wait in edit prop page

    instance.subscribe('userData');

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  });
  this.deactivateInProgress = new ReactiveVar(false);
  this.archiveInProgress = new ReactiveVar(false); // Session.set('editPropertyImagesNewOnes',[]);
  // var gallery = this.data.propertyData.gallery;
  // if(!gallery)gallery=[]
  // Session.set('editPropertyImages',gallery);
});
Template.editProperty.helpers({
  // showEditProperty: function () {
  //     return Template.instance().showEditProperty.get();
  // },
  // propertyData : function () {
  //     var ret = getpropertyData();
  //     // console.log("propertyData");
  //     // console.log(ret);
  //     Session.set('propertyData',ret);
  //     return ret;
  // },
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  },
  propertyData: function () {
    // debugger;
    var id = FlowRouter.current().params.id;
    var ret = Collections.Properties.find(id, {
      transform: function (data) {
        var globalConfig = Collections.Config.findOne();
        if (data.auctionId) data.auction = Collections.Auctions.findOne(data.auctionId);
        return data;
      },
      limit: 1
    }).fetch();
    ret = ret[0];
    clearMeta();

    try {
      var title = 'Editing ' + ret.address.address + ', ' + ret.address.area;
      if (ret.address.county) title += ', ' + ret.address.county;
      DocHead.setTitle('' + titleCase(title) + ' | SpotMyCrib Admin');
      DocHead.addMeta({
        name: "description",
        content: "Edit property " + ret.type + ", upload its images, details and much more."
      });
    } catch (err) {
      DocHead.setTitle(' Property not found | SpotMyCrib Admin');
      DocHead.addMeta({
        name: "description",
        content: ""
      });
    }

    Session.set("propertyData", ret);
    return ret; // return {propertyData: ret};
  },
  propertyFound: function () {
    var c = Collections.Properties.find().count();
    if (c) return true;
    return false;
  },
  inIgnoreList: function (str) {
    ignoreList = ['gallery', 'isArchived'];
    if (ignoreList.indexOf(str) !== -1) return true;
    return false;
  },
  deactivateInProgress: function () {
    deactivateInProgress = Template.instance().deactivateInProgress;
    return Template.instance().deactivateInProgress.get();
  },
  archiveInProgress: function () {
    archiveInProgress = Template.instance().archiveInProgress;
    return Template.instance().archiveInProgress.get();
  } // getGallery:function () {
  //     // debugger;
  //     var propertyData = Session.get('propertyData');
  //     return propertyData.gallery;
  // }

});
Template.editProperty.onRendered(function () {
  try {
    jQuery("html,body").animate({
      scrollTop: 0
    }, 250);
  } catch (e) {
    document.body.scrollTop = document.documentElement.scrollTop = 0;
  }
});
Template.editProperty.events({
  "click .deactivatePropertyBtn": function (event, template) {
    event.preventDefault();
    var propertyData = Session.get('propertyData');

    if (!propertyData) {
      console.log("Empty project data");
      return false;
    }

    var user = Meteor.user();

    if (!user) {
      console.log("Invalid user");
      return;
    }

    if (propertyData.createdByAgent != user._id) {
      console.log("Invalid user");
      return;
    }

    $.fancybox({
      'padding': 0,
      'href': '#conf-dactivate-pop',
      afterShow: function (template) {
        attachEvents();
      },
      afterClose: function (template) {
        console.log(template);
      }
    });
  },
  "click .archivePropertyBtn": function (event, template) {
    event.preventDefault();
    var propertyData = Session.get('propertyData');

    if (!propertyData) {
      console.log("Empty project data");
      return false;
    }

    var user = Meteor.user();

    if (!user) {
      console.log("Invalid user");
      return;
    }

    if (propertyData.createdByAgent != user._id) {
      console.log("Invalid user");
      return;
    }

    $.fancybox({
      'padding': 0,
      'href': '#conf-archive-pop',
      afterShow: function (template) {
        attachEvents();
      },
      afterClose: function (template) {
        console.log(template);
      }
    });
  },
  // 'change .selectPropertyImages': function(event, template) {
  //     var files = event.target.files;
  //     S3.upload({
  //         files:files,
  //         path:"propertyImagesLarge"
  //     },function(e,r){
  //         if(e){
  //             throw new Meteor.Error('Upload failed ', e);
  //             var tmp =  Session.get("showErrorDlg");if(!tmp)tmp=[];
  //             tmp.push("Upload failed: please check your internet connection, contact us if needed.");
  //             Session.set("showErrorDlg",tmp)
  //             return;
  //         }
  //         var editPropertyImages = Session.get('editPropertyImages');
  //         var editPropertyImagesNewOnes = Session.get('editPropertyImagesNewOnes');
  //         var tmp = {
  //             name: r.file.original_name,
  //             relative_url: r.relative_url,
  //             url: r.secure_url
  //         };
  //         editPropertyImages.push(tmp);
  //         editPropertyImagesNewOnes.push(tmp);
  //         Session.set('editPropertyImages',editPropertyImages);
  //         Session.set('editPropertyImagesNewOnes',editPropertyImagesNewOnes);
  //         var propertyData = Session.get("propertyData");
  //         updateGalleriesInServer(editPropertyImages,propertyData._id, function (err, res) {
  //             if (err) {
  //                 console.log(err);
  //                 var tmp =  Session.get("showErrorDlg");if(!tmp)tmp=[];
  //                 tmp.push("Upload failed: please check your internet connection, contact us if needed.");
  //                 Session.set("showErrorDlg",tmp)
  //                 return;
  //             } else {
  //                 var editPropertyImages = Session.get('editPropertyImages');
  //                 console.log("Current Count: "+editPropertyImages.length )
  //             }
  //         });
  //         console.log(r);
  //     });
  // },
  "click .backBtn": function (event, template) {
    goBack();
  },
  'change input[name=price]': function (event, template) {
    if (event.target.value) {
      var tmp = event.target.value.split('.');
      tmp = tmp[0]; //No decimals

      tmp = tmp.trim().match(/\d+/g);
      if (!Array.isArray(tmp)) event.target.value = '';
      event.target.value = tmp.join('');
    }
  },
  "click .showCopyDlg": function (event, template) {
    var propertyData = Session.get('propertyData');
    var user = Meteor.user();
    var sluggedName = slugifyEmailAddress(user.profile.name);
    if (!sluggedName) sluggedName = 'rent';
    var email = sluggedName + '-let-' + propertyData.auction.lettingAuctionCode.toLowerCase() + "@spotmycrib.ie";
    $('#agentPropertyEmailField').val(email);
    var url = FlowRouter.url('letting', {
      key: propertyData.auction.lettingAuctionCode
    });
    $('#propertyLinkField').val(url);
    $.fancybox({
      'padding': 0,
      'href': '#propertyLinkDlg',
      afterShow: function (template) {
        $('#agentPropertyEmailField').select();
        $('#propertyLinkDlg .copyEmailBtn').unbind().bind('click', function () {
          $('#agentPropertyEmailField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'editPropertyPage', 'copyShareEmail', 'copyShareEmail Btn Clicked');
        });
        $('#propertyLinkDlg .copyLinkBtn').unbind().bind('click', function () {
          $('#propertyLinkField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'editPropertyPage', 'copyShareLink', 'copyShareLink Btn Clicked');
        });
        $('#propertyLinkDlg .cancelBtn').unbind().bind('click', function () {
          $.fancybox.close();
        });
      }
    });
  }
});
Template.editPropertyForm.onCreated(function () {
  if (!Session.get('editPropertyImages')) {
    // Lets do this. Anyways we have delete button.
    Session.set('editPropertyImages', []);
    S3.collection.remove({});
  }

  this.numBedRoomCount = new ReactiveVar(0);
  this.editPropertyFormSaving = new ReactiveVar(false);
  this.countySelected = new ReactiveVar(false);
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    if (instance.countySelected.get()) {
      instance.isSubsLoaded.set(false);
      instance.subscribe('Areas', '', '', instance.countySelected.get(), '', '');
    }

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  });
  Session.set('editPropertyImagesNewOnes', []);
  var gallery = [];

  try {
    gallery = this.data.propertyData.gallery;
  } catch (e) {
    gallery = [];
  }

  Session.set('editPropertyImages', gallery);
});
Template.editPropertyForm.helpers({
  'data': function () {
    var user = Meteor.user();
    if (!user) return {
      results: []
    };
    var id = FlowRouter.current().params.id;
    var doc = Collections.Properties.findOne(id, {
      transform: function (data) {
        if (data.auctionId) data.auction = Collections.Auctions.findOne(data.auctionId);
        return data;
      },
      limit: 1
    });
    if (doc) if (doc.bedrooms) Template.instance().numBedRoomCount.set(doc.bedrooms.length);
    if (doc) if (doc.gallery) Session.set('editPropertyImages', doc.gallery); //This will re-run everytime u update an images and data gets fetched again.

    return doc;
  },
  trimVal: function (str) {
    return str.trim();
  },
  isEqualSelect: function (a, b) {
    if (a == b) return 'selected';
    return '';
  },
  isEqualCheck: function (a, b) {
    if (a == b) return 'checked';
    return '';
  },
  furnishedOptions: function (isFurnished) {
    return [{
      label: "yes",
      value: "true",
      selected: isFurnished ? 'selected' : ''
    }, {
      label: "No",
      value: "false",
      selected: !isFurnished ? 'selected' : ''
    }];
  },
  countries: function () {
    return [{
      label: "Ireland",
      value: "Ireland",
      selected: "selected"
    }]; //Both capital
  },
  counties: function () {
    var staticCounties = ["Carlow", "Cavan", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Kilkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow"];
    var ret = [];

    for (var i = 0; i < staticCounties.length; i++) {
      if (!staticCounties[i]) continue;
      ret.push({
        label: titleCase(staticCounties[i]),
        value: staticCounties[i]
      });
    }

    return ret; // return [{label: "Dublin", value: "dublin"}];//Both capital
    // var distinctEntries = _.uniq(Collections.Areas.find({}, {
    //     sort: {County: 1}, fields: {County: true}
    // }).fetch().map(function(x) {
    //     return x.County;
    // }), true);
    // var ret = []
    // for(var i=0;i< distinctEntries.length;i++){
    //     if(!distinctEntries[i])continue;
    //     ret.push({label: titleCase(distinctEntries[i]), value: distinctEntries[i] })
    // }
    // return ret;
  },
  areas: function () {
    var countySelected = Template.instance().countySelected.get();

    if (!countySelected) {
      var c = Collections.Properties.find().count();
      if (c > 1) return []; // This is the fix for - bug of not loading existing areas - page is designed to work with 1 prop, but when user comes to this page from myprop page, it has many results, leading to invalid countySelected

      var doc = Collections.Properties.findOne();
      if (!doc) return [];
      Template.instance().countySelected.set(doc.address.county);
      countySelected = doc.address.county;
    }

    var distinctEntries = _.uniq(Collections.Areas.find({
      County: countySelected
    }, {
      sort: {
        Area: 1
      },
      fields: {
        Area: true
      }
    }).fetch().map(function (x) {
      return x.Area;
    }), true);

    var ret = [];

    for (var i = 0; i < distinctEntries.length; i++) {
      if (!distinctEntries[i]) continue;
      ret.push({
        label: titleCase(distinctEntries[i]),
        value: distinctEntries[i]
      });
    }

    return ret; //Previous logic
    // var Config = Collections.Config.find().fetch();Config = Config[0];
    // var ret = []
    // for(var i=0;i< Config.countyInfo.length;i++){
    //     ret.push({label: titleCase(Config.countyInfo[i].area), value: Config.countyInfo[i].area})
    // }
  },
  propertyTypes: function () {
    var Config = Collections.Config.find().fetch();
    Config = Config[0];
    var ret = [];

    for (var i = 0; i < Config.propertyType.length; i++) {
      ret.push({
        label: titleCase(Config.propertyType[i].name),
        value: Config.propertyType[i].value
      });
    }

    return ret;
  },
  numBedRoomCount: function () {
    var c = Template.instance().numBedRoomCount.get();
    if (c < 100) return Template.instance().numBedRoomCount.get();else return 0;
  },
  editPropertyFormSaving: function () {
    return Template.instance().editPropertyFormSaving.get();
  },
  ensuiteLoop: function (count) {
    var countArr = [];

    for (var i = 0; i < count; i++) {
      countArr.push({
        i: i + 1
      });
    }

    return countArr;
  },
  ensuiteLoopCheckbox: function (index) {
    var doc = Collections.Properties.findOne();
    if (doc) if (doc.bedrooms[index]) {
      if (doc.bedrooms[index].ensuite) return 'checked';
    }
    return '';
  },
  ensuiteLoopBedType: function (index, b) {
    var doc = Collections.Properties.findOne();
    if (doc) if (doc.bedrooms[index]) {
      if (doc.bedrooms[index].bedType == b) return 'selected';
    }
    return '';
  },
  leaseUntil: function () {
    var allowedVals = ['1 month', '2 months', '3 months', '4 months', '5  months', '6 months', '7 months', '8 months', '9 months', '10 months', '11 months', '1 year', 'More than a year'];
    return allowedVals;
  },
  ensuiteLoopBedTypeOptions: function (index) {
    var doc = Collections.Properties.findOne();
    var isSingle = false,
        isDouble = false,
        isTwin = false;
    if (doc) if (doc.bedrooms) if (doc.bedrooms[index]) {
      switch (doc.bedrooms[index].bedType) {
        case 'single':
          isSingle = true;
          break;

        case 'double':
          isDouble = true;
          break;

        case 'twin':
          isTwin = true;
          break;
      }
    }
    var arr = [{
      label: "Single",
      value: "single",
      sel: isSingle ? 'selected' : ''
    }, {
      label: "Double",
      value: "double",
      sel: isDouble ? 'selected' : ''
    }, {
      label: "Twin",
      value: "twin",
      sel: isTwin ? 'selected' : ''
    }];
    return arr;
  },
  hasAmenityCheckbox: function (v) {
    var doc = Collections.Properties.findOne();
    if (doc) if (doc.amenities) if (doc.amenities.length) if (doc.amenities.indexOf(v) != -1) return 'checked';
    return '';
  },
  propertyContact: function (i) {
    var doc = Collections.Properties.findOne();
    if (doc) if (doc.contacts) if (doc.contacts.length) return doc.contacts[0];
    return {
      name: '',
      phone: '',
      email: ''
    };
  },
  advertisementContact: function (i) {
    var id = FlowRouter.current().params.id;
    var doc = Collections.Properties.findOne(id, {
      transform: function (data) {
        if (data.auctionId) data.auction = Collections.Auctions.findOne(data.auctionId);
        return data;
      },
      limit: 1
    });
    if (doc) if (doc.auction) if (doc.auction.contacts) if (doc.auction.contacts.length) return doc.auction.contacts[0];
    return {
      name: '',
      phone: '',
      email: ''
    };
  }
});
Template.editPropertyForm.events({
  "click .backBtn": function (event, template) {
    goBack();
  },
  'submit form': function (event) {
    event.preventDefault();
  },
  "click .editPropertyFormSaveActivateBtn": function (event, template) {
    $('#editPropertyFormCF').submit();
  },
  "click .editPropertyFormCancelBtn": function (event, template) {
    goBack();
  },
  'change .selectPropertyImages': function (event, template) {
    return;
    var files = event.target.files;
    console.log('Upload called'); // console.log(files);

    S3.upload({
      files: files,
      path: "DEVpropertyImagesLarge"
    }, function (e, r) {
      if (e) {
        throw new Meteor.Error('Upload failed ', e);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Upload failed: please check your internet connection, contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      var editPropertyImages = Session.get('editPropertyImages');
      var editPropertyImagesNewOnes = Session.get('editPropertyImagesNewOnes');
      var tmp = {
        name: r.file.original_name,
        relative_url: r.relative_url,
        url: r.secure_url
      };
      editPropertyImages.push(tmp);
      editPropertyImagesNewOnes.push(tmp);
      Session.set('editPropertyImages', editPropertyImages);
      Session.set('editPropertyImagesNewOnes', editPropertyImagesNewOnes);
      var propertyData = Session.get("propertyData");
      updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
        if (err) {
          console.log(err);
          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          tmp.push("Upload failed: please check your internet connection, contact us if needed.");
          Session.set("showErrorDlg", tmp);
          return;
        } else {
          var editPropertyImages = Session.get('editPropertyImages');
          console.log("Current Count: " + editPropertyImages.length);
        }
      });
      console.log(r);
    });
  },
  'change .countySelected': function (event, template) {
    template.countySelected.set(event.target.value);
  },
  "click .openFileUploader": function (event, template) {
    event.preventDefault();
    openPicker(); // filename
    //     :
    //     "webcam-1/12/2018, 6:53:25 PM.png"
    // handle
    //     :
    //     "G8lStVqHTiGnwxof6d5y"
    // mimetype
    //     :
    //     "image/png"
    // originalFile
    //     :
    // {name: "webcam-1/12/2018, 6:53:25 PM.png", type: "image/png", size: 630585}
    // originalPath
    //     :
    //     "webcam-1/12/2018, 6:53:25 PM.png"
    // size
    //     :
    //     629612
    // source
    //     :
    //     "local_file_system"
    // status
    //     :
    //     "Stored"
    // uploadId
    //     :
    //     "ba2fe36e9fd182ec0cb88236d676cefad"
    // url
    //     :
    //     "https://cdn.filestackcontent.com

    return;
  },
  'keyup .autoGrowTA': function (event, template) {
    var element = event.target;
    element.style.height = "5px";
    if (element.scrollHeight < 310) element.style.height = element.scrollHeight + "px";else element.style.height = "310px";
  },
  'change #numBedRoomCount': function (event, template) {
    var numBedRoomCount = parseInt($(event.target).val());
    if (isNaN(numBedRoomCount)) return;
    Template.instance().numBedRoomCount.set(numBedRoomCount);
    t1 = template;
    setTimeout(function () {
      t1.$('#editPropertyFormCF').validate();
    }, 500);
  }
});
Template.editPropertyForm.onRendered(function () {
  this.$('#readyFrom').datetimepicker();
  var element = this.$('.autoGrowTA')[0];
  if (element.scrollHeight < 310) element.style.height = element.scrollHeight + "px";else element.style.height = "310px"; // this.$('#editPropertyFormCF').validate();

  editPropertyFormSaving = this.editPropertyFormSaving;
  var validator = this.$('#editPropertyFormCF').validate({
    submitHandler: function (event) {
      editPropertyFormSaving.set(true);
      console.log("You just submitted the 'editPropertyForm' form.");
      var doc = Collections.Properties.findOne();

      if (doc) {
        Meteor.call('editProperty', doc._id, $('#editPropertyFormCF').serializeArray(), function (error, result) {
          editPropertyFormSaving.set(false);

          if (error) {
            console.log(error); //    validator.showErrors({
            //         email: error.reason
            //     });

            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            var msg = 'An error occurred.';
            if (error.reason) msg += ' ' + error.reason + '.';else if (error.message) msg += ' ' + error.message + '.';
            tmp.push(msg);
            Session.set("showErrorDlg", tmp);
            return;
          }

          var propertyData = Session.get("propertyData");
          var editPropertyImages = Session.get('editPropertyImages');

          if (!editPropertyImages) {
            Session.set('editPropertyImages', []);
            S3.collection.remove({});
            goBack();
          } else {
            updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
              if (err) {
                console.log(err);
              } else {
                Session.set('editPropertyImages', []);
                S3.collection.remove({});
              }

              goBack();
            });
          }

          Session.set('hideAddPropertyForm', true);
        });
      }
    }
  });

  if (Session.get('OpenImageUploader')) {
    scrollTo('.openFileUploader', 0, 500);
    openPicker();
    Session.set('OpenImageUploader', false);
  }
});
Template.imageEditView.helpers({
  images: function () {
    // var propertyData = Session.get('propertyData');
    // var existingGallery = propertyData.gallery;
    // var editPropertyImages = Session.get('editPropertyImages');
    // if(!editPropertyImages)editPropertyImages=[]
    // if(!existingGallery )existingGallery =[]
    // var newCombined = editPropertyImages.concat(existingGallery);
    return Session.get('editPropertyImages');
  }
});
Template.imgEditTag.events({
  "click .editImgBtn": function (event, template) {
    console.log(this);
    debugger;
    var editPropertyImages = Session.get('editPropertyImages');
    var editPropertyImagesNewOnes = Session.get('editPropertyImagesNewOnes');
    var isOriginalImageFromOwnS3 = false;
    var newArr = [];
    if (!editPropertyImages) return;
    if (!editPropertyImages.length) return;

    if (this.handle) {
      index = getIndexByHandle(editPropertyImages, this.handle);
    } else {
      isOriginalImageFromOwnS3 = true;
      index = getIndexByRelativeURL(editPropertyImages, this.relative_url);
    }

    newArr.push(editPropertyImages[index].url); //put it at first
    // editPropertyImages.splice(index, 1);
    //
    // for(var i=0;i<editPropertyImages.length;i++){
    //     newArr.push(editPropertyImages[i].url)
    // }

    var pickOptions = {
      transformations: {
        crop: {
          force: true,
          aspectRatio: 1.333
        },
        rotate: true
      },
      accept: 'image/*',
      imageMax: [800, 600]
    };
    fsClient.cropFiles(newArr, pickOptions).then(function (response) {
      debugger;
      var editPropertyImages = Session.get('editPropertyImages');
      var editPropertyImagesNewOnes = Session.get('editPropertyImagesNewOnes'); //if its conversion from old amazon to new filestack, then it will create a new file, so delete the old file seperatly and insert a new file seperatly.

      if (!response.filesUploaded.length) {
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Edit failed: please try again, contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      if (isOriginalImageFromOwnS3) {
        S3.delete(editPropertyImages[index].relative_url, function (error, result) {
          if (error) {
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            tmp.push("Edit failed: please check your internet connection, contact us if needed.");
            Session.set("showErrorDlg", tmp);
            return;
          }

          var editPropertyImages = Session.get('editPropertyImages');
          editPropertyImages.splice(index, 1);
          Session.set('editPropertyImages', editPropertyImages);
          var propertyData = Session.get("propertyData");
          updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
            if (err) {
              console.log(err);
              var tmp = Session.get("showErrorDlg");
              if (!tmp) tmp = [];
              tmp.push("Edit failed: please check your internet connection, contact us if needed.");
              Session.set("showErrorDlg", tmp);
              return;
            } else {
              var editPropertyImages = Session.get('editPropertyImages');
              console.log("Current Count: " + editPropertyImages.length);
            }
          });
        });
      } else {
        fsClient.remove(editPropertyImages[index].handle).then(function (result) {
          debugger;
          console.log('In fs remove result');
          var editPropertyImages = Session.get('editPropertyImages');
          editPropertyImages.splice(index, 1);
          Session.set('editPropertyImages', editPropertyImages);
          var propertyData = Session.get("propertyData");
          updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
            if (err) {
              console.log(err);
              var tmp = Session.get("showErrorDlg");
              if (!tmp) tmp = [];
              tmp.push("Edit failed: please check your internet connection, contact us if needed.");
              Session.set("showErrorDlg", tmp);
              return;
            } else {
              var editPropertyImages = Session.get('editPropertyImages');
              console.log("Current Count: " + editPropertyImages.length);
            }
          });
        });
      }

      var tmp = {};

      for (var i = 0; i < response.filesUploaded.length; i++) {
        tmp = {
          name: response.filesUploaded[i].filename,
          url: response.filesUploaded[i].url,
          handle: response.filesUploaded[i].handle,
          mimetype: response.filesUploaded[i].mimetype,
          originalFile: response.filesUploaded[i].originalFile,
          originalPath: response.filesUploaded[i].originalPath,
          size: response.filesUploaded[i].size,
          source: response.filesUploaded[i].source,
          status: response.filesUploaded[i].status,
          uploadId: response.filesUploaded[i].uploadId
        }; // editPropertyImages.push(tmp);

        editPropertyImages.splice(index + 1, 0, tmp); //insert at the index place where its deleted.

        editPropertyImagesNewOnes.push(tmp);
      } //Logic to insert new file.


      Session.set('editPropertyImages', editPropertyImages);
      var propertyData = Session.get("propertyData");
      updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
        if (err) {
          console.log(err);
          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          tmp.push("Edit failed: please check your internet connection, contact us if needed.");
          Session.set("showErrorDlg", tmp);
          return;
        } else {
          var editPropertyImages = Session.get('editPropertyImages');
          console.log("Current Count: " + editPropertyImages.length);
        }
      });
    });
  },
  "click .deleteImgBtn": function (event, template) {
    console.log(this);
    debugger;
    var editPropertyImages = Session.get('editPropertyImages'); // editPropertyImages.splice(index, 1);
    // Session.set('editPropertyImages',editPropertyImages);

    if (this.handle) {
      index = getIndexByHandle(editPropertyImages, this.handle);
      fsClient.remove(this.handle).then(function (result) {
        debugger;
        console.log('In fs remove result');
        var editPropertyImages = Session.get('editPropertyImages');
        editPropertyImages.splice(index, 1);
        Session.set('editPropertyImages', editPropertyImages);
        var propertyData = Session.get("propertyData");
        updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
          if (err) {
            console.log(err);
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            tmp.push("Deletion failed: please check your internet connection, contact us if needed.");
            Session.set("showErrorDlg", tmp);
            return;
          } else {
            var editPropertyImages = Session.get('editPropertyImages');
            console.log("Current Count: " + editPropertyImages.length);
          }
        });
      });
    } else {
      index = getIndexByRelativeURL(editPropertyImages, this.relative_url);
      S3.delete(this.relative_url, function (error, result) {
        if (error) {
          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          tmp.push("Deletion failed: please check your internet connection, contact us if needed.");
          Session.set("showErrorDlg", tmp);
          return;
        }

        var editPropertyImages = Session.get('editPropertyImages');
        editPropertyImages.splice(index, 1);
        Session.set('editPropertyImages', editPropertyImages);
        var propertyData = Session.get("propertyData");
        updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
          if (err) {
            console.log(err);
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            tmp.push("Deletion failed: please check your internet connection, contact us if needed.");
            Session.set("showErrorDlg", tmp);
            return;
          } else {
            var editPropertyImages = Session.get('editPropertyImages');
            console.log("Current Count: " + editPropertyImages.length);
          }
        });
      });
    }
  }
});

function openPicker() {
  fsClient.pick({
    fromSources: ["local_file_system", "webcam", "facebook", "url", "googledrive", "dropbox", "flickr", "instagram", "gmail", "picasa", "onedrive", "clouddrive"],
    maxFiles: 10,
    transformations: {
      crop: {
        force: true,
        aspectRatio: 1.333
      },
      rotate: true
    },
    imageMax: [800, 600],
    accept: ["image/*"] //,".pdf",".doc",".docx",".docm"

  }).then(function (response) {
    // declare this function to handle response
    debugger;
    var editPropertyImages = Session.get('editPropertyImages');
    var editPropertyImagesNewOnes = Session.get('editPropertyImagesNewOnes');
    var tmp = {};
    if (response.filesUploaded) for (var i = 0; i < response.filesUploaded.length; i++) {
      tmp = {
        name: response.filesUploaded[i].filename,
        url: response.filesUploaded[i].url,
        handle: response.filesUploaded[i].handle,
        mimetype: response.filesUploaded[i].mimetype,
        originalFile: response.filesUploaded[i].originalFile,
        originalPath: response.filesUploaded[i].originalPath,
        size: response.filesUploaded[i].size,
        source: response.filesUploaded[i].source,
        status: response.filesUploaded[i].status,
        uploadId: response.filesUploaded[i].uploadId
      };
      editPropertyImages.push(tmp);
      editPropertyImagesNewOnes.push(tmp);
    }
    Session.set('editPropertyImages', editPropertyImages);
    Session.set('editPropertyImagesNewOnes', editPropertyImagesNewOnes);
    var propertyData = Session.get("propertyData");
    updateGalleriesInServer(editPropertyImages, propertyData._id, function (err, res) {
      if (err) {
        console.log(err);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Upload failed: please check your internet connection, contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      } else {
        var editPropertyImages = Session.get('editPropertyImages');
        console.log("Current Count: " + editPropertyImages.length);

        if (Session.get('fromAdvertiseWithUsPage')) {
          fbq('track', 'CompleteRegistration');
          ga('send', 'event', 'AdvertiseWithUsPage', 'ImageUploaded', 'Property Images Uploaded.');
          Session.set('fromAdvertiseWithUsPage', false);
        }
      }
    });
    console.log(response);
  });
}

function goBack() {
  var prevRoute = Session.get('prevRoute');

  if (prevRoute) {
    FlowRouter.go(prevRoute.name, prevRoute.args);
    Session.set('prevRoute', false);

    if (prevRoute.scrollTo) {
      scrollTo(prevRoute.scrollTo, 0, 500);
    }
  } else {
    FlowRouter.go("/account/myproperies/", {
      pageno: 1
    });
  }
}

function getpropertyData() {
  var id = FlowRouter.current().params.id;
  var ret = Collections.Properties.find(id, {
    transform: function (data) {
      data.auction = Collections.Auctions.findOne(data.auctionId);
      data.applicationsReceivedCount = Collections.Bids.find({
        auctionId: data.auctionId
      }).count();
      data.applicationsActiveCount = Collections.Bids.find({
        auctionId: data.auctionId,
        isArchived: false
      }).count();
      return data;
    },
    limit: 1
  }).fetch(); // console.log("getProjectData");

  return ret[0];
}

function getIndexByHandle(myArray, fileId) {
  for (var i = 0; i < myArray.length; i++) {
    if (myArray[i].handle === fileId) {
      return i;
    }
  }
}

function getIndexByRelativeURL(myArray, fileId) {
  for (var i = 0; i < myArray.length; i++) {
    if (myArray[i].relative_url === fileId) {
      return i;
    }
  }
}

function attachEvents() {
  $(".deactivateConfirmBtn").unbind().bind("click", function () {
    deactivateConfEvent();
  });
  $(".archiveConfirmBtn").unbind().bind("click", function () {
    archiveConfEvent();
  });
  $(".closePopupBtn").unbind().bind("click", function () {
    closePopupEvent();
  });
}

function deactivateConfEvent() {
  var data = Session.get("propertyData");
  var auctionId = data.auctionId;
  deactivateInProgress.set(true);
  Meteor.call('deactivateAuction', auctionId, function (error, result) {
    deactivateInProgress.set(false);

    if (error) {
      console.log(error);
      var tmp = Session.get("showErrorDlg");
      if (!tmp) tmp = [];
      tmp.push("Failed deactivating. Please try again, try checking your internet connectivity. Contact us if needed.");
      Session.set("showErrorDlg", tmp);
      return;
    }

    console.log("Success");
    var prevRoute = Session.get('prevRoute');
    closePopupEvent();
    goBack();
  });
}

function archiveConfEvent() {
  var data = Session.get("propertyData");
  var propertyId = data._id;
  archiveInProgress.set(true);
  Meteor.call('archiveProperty', propertyId, function (error, result) {
    archiveInProgress.set(false);

    if (error) {
      console.log(error);
      var tmp = Session.get("showErrorDlg");
      if (!tmp) tmp = [];
      tmp.push("Failed archiving. Please try again, try checking your internet connectivity. Contact us if needed.");
      Session.set("showErrorDlg", tmp);
      return;
    }

    console.log("Success");
    var prevRoute = Session.get('prevRoute');
    closePopupEvent();
    goBack();
  });
}

function closePopupEvent() {
  console.log('closePopupEvent');
  if ($) if ($.fancybox) $.fancybox.close();
}

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function slugifyEmailAddress(text) {
  if (!text) return '';
  var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ/_,:;';
  var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
  var p = new RegExp(a.split('').join('|'), 'g');
  return text.toString().toLowerCase().replace(/\s+/g, '.') // Replace spaces with "."
  .replace(p, function (c) {
    return b.charAt(a.indexOf(c));
  }) // Replace special chars
  .replace(/&/g, '-and-') // Replace & with ''
  // .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
  .replace(/\-\-+/g, '-') // Replace multiple - with single ''
  .replace(/^-+/, '') // Trim - from start of text
  .replace(/-+$/, ''); // Trim - from end of text
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lettingprintview.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/lettingprintview.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./lettingprintview.html");
Template.lettingprintview.onCreated(function () {
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    var key = FlowRouter.getParam('key');
    instance.subscribe("viewLetting", key);
    instance.subscribe('Config'); // instance.subscribe('Properties');
    // instance.subscribe('Auctions');

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  });
});
Template.lettingprintview.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  },
  data: function () {
    // debugger;
    var id = FlowRouter.getParam('key');
    var Projects = Collections.Auctions;
    var selector = {
      "lettingAuctionCode": id
    };
    var ret = Projects.find(selector, {
      transform: function (data) {
        var globalConfig = Collections.Config.findOne();
        data.PD = Collections.Properties.findOne(data.propertyId);
        data.PD.bedroomsCount = 0;
        data.PD.ensuiteCount = 0;
        data.PD.doubleBedCount = 0;

        if (data.PD.bedrooms) {
          data.PD.bedroomsCount = data.PD.bedrooms.length;

          for (var i = 0; i < data.PD.bedrooms.length; i++) {
            if (data.PD.bedrooms[i]["ensuite"]) {
              data.PD.ensuiteCount++;
            }

            if (data.PD.bedrooms[i]["bedType"] == 'double') {
              data.PD.doubleBedCount++;
            }
          }
        }

        if (data.PD.contacts) {
          data.primaryContact = data.PD.contacts[0];
        } else data.primaryContact = {};

        tmp = [];

        if (data.PD.amenities) {
          for (var i = 0; i < data.PD.amenities.length; i++) {
            var src = globalConfig.amenitiesLogos[data.PD.amenities[i]];
            if (!src) src = globalConfig.amenitiesLogos["default"];
            tmp.push({
              name: data.PD.amenities[i],
              src: src
            });
          }
        }

        data.PD.amenitiesWithImgs = tmp;
        return data;
      },
      limit: 1
    }).fetch();
    ret = ret[0];
    clearMeta();

    try {
      var title = 'Print key for ' + ret.PD.address.address + ', ' + ret.PD.address.area;
      if (ret.PD.address.county) title += ', ' + ret.PD.address.county;
      DocHead.setTitle('' + titleCase(title) + ' | SpotMyCrib');
      DocHead.addMeta({
        name: "description",
        content: "Print key for " + ret.PD.type + "."
      });
    } catch (err) {
      DocHead.setTitle(' Property not found | SpotMyCrib Admin');
      DocHead.addMeta({
        name: "description",
        content: ""
      });
    }

    return ret;
  }
});
Template.lettingprintview.onRendered(function () {
  // console.log(this)
  setTimeout(function () {
    window.print();
  }, 1000);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"myProperties.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/myProperties.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./pagination.html");
module.link("./imageView.html");
module.link("./myProperties.html");
module.link("./shared.js");
var SimpleSchema;
module.link("simpl-schema", {
  "default": function (v) {
    SimpleSchema = v;
  }
}, 0);
// SimpleSchema.extendOptions(['autoform']);
advertiseFormSaving = '';
fsClient = '';
saveAndAdvertise = false;
var globalFILTERS = {};

function getFiltersFromRoute() {
  var FILTERS = {};

  if (FlowRouter.current().queryParams.home_type) {
    var val = FlowRouter.current().queryParams.home_type;
    FILTERS['homeType'] = val;
  }

  if (FlowRouter.current().queryParams.facing) {
    var val = FlowRouter.current().queryParams.facing;
    FILTERS['facing'] = val;
  }

  if (FlowRouter.current().queryParams.floor_low || FlowRouter.current().queryParams.floor_high) {
    var val_l = FlowRouter.current().queryParams.floor_low;
    var val_h = FlowRouter.current().queryParams.floor_high;

    if (isNaN(val_l) && isNaN(val_h)) {//Both are not valid numbers
    } else if (!isNaN(val_l) && isNaN(val_h)) {
      //Low is valid and no upper
      FILTERS['floor'] = [val_l, 0];
    } else if (isNaN(val_l) && !isNaN(val_h)) {
      //Upper is valid and no lower
      FILTERS['floor'] = [0, val_h];
    } else {
      //Both are valid
      FILTERS['floor'] = [val_l, val_h];
    }
  }

  if (FlowRouter.current().queryParams.price_low || FlowRouter.current().queryParams.price_high) {
    var val_l = FlowRouter.current().queryParams.price_low;
    var val_h = FlowRouter.current().queryParams.price_high;

    if (isNaN(val_l) && isNaN(val_h)) {//Both are not valid numbers
    } else if (!isNaN(val_l) && isNaN(val_h)) {
      //Low is valid and no upper
      FILTERS['priceRange'] = [val_l, 0];
    } else if (isNaN(val_l) && !isNaN(val_h)) {
      //Upper is valid and no lower
      FILTERS['priceRange'] = [0, val_h];
    } else {
      //Both are valid
      FILTERS['priceRange'] = [val_l, val_h];
    }
  } //if(FILTERS.length==0){return false;}


  return FILTERS; //{"Home Type":["2 BHK"],"Floor":["2 to 15"],"Price Range":["67.45 to 97.45 "]}
}

function setFilters(FILTERS) {
  Session.set('globalFILTERS', FILTERS);
  var defaultFilters = Session.get('projectData');
  defaultFilters = defaultFilters.filter;
  console.log("In setFilters");
  console.log(FILTERS);
  console.log(defaultFilters);
  FlowRouter.query.clear();
  var baseURL = FlowRouter.current().originalUrl.split('?')[0];
  var route = baseURL; // debugger;

  if (FILTERS['homeType']) {
    if (FILTERS['homeType'].length != defaultFilters.homeType.length) for (var i = 0; i < FILTERS['homeType'].length; i++) {
      // if(defaultFilters.homeType.indexOf(  FILTERS['homeType'][i]  ) == -1)
      route = updateQueryStringParameter(route, 'home_type[]', FILTERS['homeType'][i]);
    }
  }

  if (FILTERS['facing']) {
    if (FILTERS['facing'].length != defaultFilters.facing.length) for (var i = 0; i < FILTERS['facing'].length; i++) {
      // if(defaultFilters.facing.indexOf(  FILTERS['facing'][i]  ) == -1)
      route = updateQueryStringParameter(route, 'facing[]', FILTERS['facing'][i]);
    }
  }

  if (FILTERS['floor']) {
    var l1 = FILTERS['floor'][0]; //if(l1 !=0 && l1 != defaultFilters.floor[0])

    route = updateQueryStringParameter(route, 'floor_low', l1);
    var l2 = FILTERS['floor'][1]; //if(l2 != defaultFilters.floor[1])

    route = updateQueryStringParameter(route, 'floor_high', l2); //route = updateQueryStringParameter(route, 'floor_low', FILTERS['floor'][0]);
    //route = updateQueryStringParameter(route, 'floor_high', FILTERS['floor'][1]);
  }

  if (FILTERS['priceRange']) {
    var l1 = FILTERS['priceRange'][0]; //Don't uncomment below lines as they would cause another bug. It would be a flow bug, on page refresh, it shud know upper limit to compute, and its called during template create.
    //if(l1 !=0 && l1 != defaultFilters.priceRange[0])

    route = updateQueryStringParameter(route, 'price_low', l1);
    var l2 = FILTERS['priceRange'][1]; //if(l2 != defaultFilters.priceRange[1])

    route = updateQueryStringParameter(route, 'price_high', l2); //route = updateQueryStringParameter(route, 'price_low', FILTERS['priceRange'][0]);
    //route = updateQueryStringParameter(route, 'price_high', FILTERS['priceRange'][1]);
  }

  if (FILTERS['floor']) {
    $('.filterS1l').html(FILTERS['floor'][0]);
    $('.filterS1h').html(FILTERS['floor'][1]);
  }

  if (FILTERS['priceRange']) {
    $('.filterS2l').html(numDifferentiation(FILTERS['priceRange'][0]));
    $('.filterS2h').html(numDifferentiation(FILTERS['priceRange'][1]));
  }

  console.log("New Route" + route);
  FlowRouter.go(route);
  updateUISlider(FILTERS);
}

function getDefaultFilters() {
  return {};
}

function getCurUsersBid(auctionId) {
  var bid = Collections.Bids.find({
    auctionId: auctionId,
    userId: Meteor.userId()
  }, {
    limit: 1
  }).fetch();
  return bid[0];
}

function updateUISlider(FILTERS) {
  //console.log('Updating slider values')
  var slider = document.getElementById('range-input');
  var slider1 = document.getElementById('range-input1');
  if (!slider) return;
  if (!slider.noUiSlider) return;
  slider.noUiSlider.set(FILTERS.floor);
  slider1.noUiSlider.set(FILTERS.priceRange);
  var defaultFilters = Session.get('projectData');
  defaultFilters = defaultFilters.filter;
  if (FILTERS.homeType) if (FILTERS.homeType.length && FILTERS.homeType.length != defaultFilters.homeType.length) $('.filterUnitType').val(FILTERS.homeType[0]);else $('.filterUnitType').val('any');
  if (FILTERS.facing) if (FILTERS.facing.length && FILTERS.facing.length != defaultFilters.facing.length) $('.filterUnitFacing').val(FILTERS.facing[0]);else $('.filterUnitFacing').val('any');
}

function resetUISlider(FILTERS) {
  // console.log('reset slider values')
  var slider = document.getElementById('range-input');
  var slider1 = document.getElementById('range-input1');
  slider.noUiSlider.set(FILTERS.floor);
  slider1.noUiSlider.set(FILTERS.priceRange);
  $('.filterUnitType, .filterUnitFacing').val('any');
}

function startUISlider(data) {
  var slider = document.getElementById('range-input');
  var slider1 = document.getElementById('range-input1'); //data = {
  //  "s1":{
  //    "start": [0, 25],
  //    "range": [0, 25]
  //  }, "s2":{
  //    "start": [64, 94],
  //    "range": [64, 94]
  //  }
  //}

  noUiSlider.create(slider, {
    start: data.s1.start,
    connect: true,
    step: 1,
    range: {
      'min': data.s1.range[0],
      'max': data.s1.range[1]
    },
    format: wNumb({
      decimals: 0
    })
  });
  noUiSlider.create(slider1, {
    start: data.s2.start,
    connect: true,
    step: 1000000,
    range: {
      'min': data.s2.range[0],
      'max': data.s2.range[1]
    },
    format: wNumb({
      decimals: 0
    })
  });
  slider.noUiSlider.on('update', function () {
    applyFilterValues();
  });
  slider1.noUiSlider.on('update', function () {
    applyFilterValues();
  });
  slider.noUiSlider.on('change', function () {
    applyFilters();
  });
  slider1.noUiSlider.on('change', function () {
    applyFilters();
  });
}

function getPaginationData(totalResultsCount, currentPageNo, urlBase, resultsPerPage) {
  var pages = [],
      prevPage = {},
      nextPage = {};
  var pgMin = currentPageNo - 4,
      pgMax = currentPageNo + 5,
      maxPages = Math.ceil(totalResultsCount / resultsPerPage);
  if (pgMin < 1) pgMin = 1;
  if (pgMax < 1) pgMax = 1;
  if (maxPages < 1) maxPages = 1;
  if (pgMin > maxPages) currentPageNo = maxPages;
  var tmp = {};
  var href = '';
  var cRoute = FlowRouter.current(); // params: {pageno: undefined}
  // path: "/account/myproperies"
  // pathname: "/account/myproperies"
  // queryParams: {}
  // queryString: null
  // route: Route {options: {…}, name:

  for (var i = pgMin; i <= maxPages; i++) {
    cRoute.params['pageno'] = i;
    href = FlowRouter.url(cRoute.route.name, cRoute.params, cRoute.queryParams);
    tmp = {
      "href": href,
      "text": i
    };

    if (i == currentPageNo) {
      tmp['href'] = 'javascript:void(0);';
      tmp['current'] = true;
    }

    pages.push(tmp);
  }

  var prevPageNo = currentPageNo - 1,
      nextPageNo = currentPageNo + 1;

  if (prevPageNo < 1) {
    prevPage['href'] = 'javascript:void(0)';
    prevPage['text'] = 'Previous';
    prevPage['disabled'] = 'disabled';
  } else {
    cRoute.params['pageno'] = prevPageNo;
    prevPage['href'] = FlowRouter.url(cRoute.route.name, cRoute.params, cRoute.queryParams);
    prevPage['text'] = 'Previous';
  }

  if (nextPageNo > maxPages) nextPageNo = maxPages;

  if (nextPageNo == currentPageNo) {
    nextPage['href'] = 'javascript:void(0)';
    nextPage['text'] = 'Next';
    nextPage['disabled'] = 'disabled';
  } else {
    cRoute.params['pageno'] = nextPageNo;
    prevPage['href'] = FlowRouter.url(cRoute.route.name, cRoute.params, cRoute.queryParams);
    nextPage['text'] = 'Next';
  }

  return {
    "prevPage": prevPage,
    "pages": pages,
    "nextPage": nextPage
  };
}

Template.registerHelper("objectToPairs", function (object) {
  return _.map(object, function (value, key) {
    return {
      key: key,
      value: value
    };
  });
});
Template.registerHelper("hostname", function () {
  return Meteor.absoluteUrl();
});

function numDifferentiation(val) {
  if (val >= 1000000000) val = (val / 1000000000).toFixed(2) + ' Billion';else if (val >= 1000000) val = (val / 1000000).toFixed(2) + ' Million';
  return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function numFormat(x) {
  //var x=12345652457.557;
  //console.log(x)
  if (!x) return x;
  x = x.toString();
  var afterPoint = '';
  if (x.indexOf('.') > 0) afterPoint = x.substring(x.indexOf('.'), x.length);
  afterPoint = afterPoint.substr(0, 3);
  x = Math.floor(x);
  x = x.toString();
  var lastThree = x.substring(x.length - 3);
  var otherNumbers = x.substring(0, x.length - 3);
  if (otherNumbers != '') lastThree = ',' + lastThree;
  var res = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
  return res;
}

Template.myProperties.events({
  "click .clearFilters": function (event, template) {
    //FlowRouter.query.clear();
    console.log('in .clearFilters meteor event');
    var defaultFilters = Session.get('projectData');
    defaultFilters = defaultFilters.filter;
    $('.filterUnitFacing, .filterUnitType').val('any');
    resetUISlider(defaultFilters);
    setFilters(defaultFilters);
    $.fancybox.close();
    applyClearFiltersEvent();
  },
  "click .addPropertyBtn": function (event, template) {
    var user = Accounts.user();

    if (!user.profile.mobile) {
      var mobile = false,
          failed = false;

      while (1) {
        //This is an un limited loop of mobile number.
        if (failed) mobile = prompt("'" + mobile + "' is not a valid number. Please enter a valid mobile to proceed. ");else mobile = prompt("You don't have a mobile number attached to your profile. Please enter mobile to proceed. ");
        if (mobile == null || /^\d{10}$/.test(mobile)) break;else {
          failed = true;
        }
      }

      if (/^\d{10}$/.test(mobile)) {
        Meteor.call('updateMobile', mobile, function (error, result) {
          if (error) {
            console.log(error.error);
            var tmp = Session.get("showErrorDlg");
            var msg = 'Mobile number update failed. Please try again. Contact us if needed.';
            tmp.push(msg);
            Session.set("showErrorDlg", tmp);
            return;
          }
        });
      }
    }

    if (template.showAddProperty.get()) template.showAddProperty.set(false);else template.showAddProperty.set(true);
  },
  "change .new-filter select": function (event, template) {
    console.log("Filters changed");
    applyFilters();
  }
});
Template.myProperties.onCreated(function () {
  this.showAddProperty = new ReactiveVar(false);
  this.totalResultsCount = new ReactiveVar(0);
  var globalFILTERS = getFiltersFromRoute();
  Session.set('globalFILTERS', globalFILTERS); // Session.set('enableDelayedFunctions',false);

  Blaze._allowJavascriptUrls();

  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    // FlowRouter.watchPathChange()
    var pageno = FlowRouter.getParam('pageno');
    var resperpage = 20;
    var onlyActive = false; //Show only active properties

    try {
      resperpage = FlowRouter.getQueryParam('resperpage');
      onlyActive = FlowRouter.getQueryParam('onlyActive');
    } catch (e) {}

    instance.subscribe('Config');
    instance.subscribe('total-MyProperties', {
      onlyActive: onlyActive
    });
    instance.subscribe("MyProperties", {
      viewName: 'MyProperties.view',
      pageno: pageno,
      resperpage: resperpage,
      onlyActive: onlyActive
    }); // instance.subscribe('Areas');

    instance.subscribe('userData');

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
      totalResultsCount = Counts.get("total-MyProperties");
      if (!totalResultsCount) instance.showAddProperty.set(true); //if no properties, then show it
    }
  }); // Session.set('assistanceRequested',false)
  // Meteor.call('getDateFromServer',[],function(error, success){
  //     Session.set('getDateFromServer',success)
  // })
  // Session.set('globalConfig', Collections.Config.findOne());
  // var ret = getProjectData();
  // Session.set('projectData',ret);
});
Template.myProperties.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  },
  data: function () {
    if (!Template.instance().subscriptionsReady()) return false;
    var user = Meteor.user();
    if (!user) return {
      results: [],
      totalResultsCount: 0,
      pagination: getPaginationData(0, 1, '', 10)
    };
    var selector = {
      createdByAgent: user._id,
      isArchived: false
    }; //let limit = 10;
    // debugger;

    var FILTERS = Session.get('globalFILTERS');
    var defaultFilters = getDefaultFilters(); // var arr = [];
    // if(  FILTERS['homeType'] ){
    //     if(FILTERS['homeType'].length) {
    //         if(FILTERS['homeType'].length != defaultFilters.homeType.length)
    //             selector['homeType'] = FILTERS['homeType'][0]
    //         /*
    //          // var arr = [];
    //          for (var i = 0; i < FILTERS['homeType'].length; i++) {
    //          arr.push({"homeType": FILTERS['homeType'][i]})
    //          console.log("homeType"+ FILTERS['homeType'][i])
    //          }*/
    //         // selector['$or'] = arr;//BUG: this or will over write or of facing; or of homeType will collide with this and
    //         // while logic won't work
    //
    //     }
    // }
    // if(  FILTERS['facing'] ){
    //     if(FILTERS['facing'].length) {
    //         if(FILTERS['facing'].length != defaultFilters.facing.length)
    //             selector['facing'] = FILTERS['facing'][0]
    //         /*
    //          var arr = [];
    //          for (var i = 0; i < FILTERS['facing'].length; i++) {
    //          arr.push({"facing": FILTERS['facing'][i]})
    //          }
    //          // selector['$or'] = arr;//BUG: this or will over write or of homeType; or of homeType will collide with this and
    //          // while logic won't work
    //          */
    //     }
    // }
    // if(arr.length){
    //     selector['$or'] = arr;
    // }
    // if( FILTERS['floor'] ){
    //     var val_l = FILTERS['floor'][0];
    //     var val_h = FILTERS['floor'][1];
    //
    //     if(isNaN(val_l) && isNaN(val_h)){//Both are not valid numbers
    //
    //     }else if(!isNaN(val_l) && isNaN(val_h)){//Low is valid and no upper
    //         selector['floorLevel'] =  { $gte: parseInt(val_l) }
    //     }else if(isNaN(val_l) && !isNaN(val_h)){//Upper is valid and no lower
    //         selector['floorLevel'] =  { $lte: parseInt(val_h) }
    //     }else{//Both are valid
    //         selector['floorLevel'] =  { $gte: parseInt(val_l), $lte: parseInt(val_h) }
    //     }
    // }
    // if( FILTERS['priceRange'] ){
    //     var val_l = FILTERS['priceRange'][0];
    //     var val_h = FILTERS['priceRange'][1];
    //
    //     if(isNaN(val_l) && isNaN(val_h)){//Both are not valid numbers
    //
    //     }else if(!isNaN(val_l) && isNaN(val_h)){//Low is valid and no upper
    //         selector['priceBreakUp.totalAllInclusive'] =  { $gte: parseInt(val_l) }
    //     }else if(isNaN(val_l) && !isNaN(val_h)){//Upper is valid and no lower
    //         selector['priceBreakUp.totalAllInclusive'] =  { $lt: parseInt(val_h) }
    //     }else{//Both are valid
    //         selector['priceBreakUp.totalAllInclusive'] =  { $gte: parseInt(val_l), $lte: parseInt(val_h) }
    //     }
    // }
    /////PAGINATION

    var resultsPerPage = 20;
    var currentPageNo = FlowRouter.current().params.pageno;

    if (!currentPageNo) {
      currentPageNo = 1;
    }

    var skip = (currentPageNo - 1) * resultsPerPage;
    var urlBase = 'account/myproperies/';
    var totalResultsCount = Counts.get("total-MyProperties");
    Template.instance().totalResultsCount.set(totalResultsCount);
    var ret = Collections.Properties.find(selector, {
      transform: function (doc) {
        doc.bedroomsCount = 0; // console.log('May be here');
        // console.log(doc)

        if (doc.bedrooms) {
          doc.bedroomsCount = doc.bedrooms.length;
        }

        if (doc.auctionId) {
          doc.auction = Collections.Auctions.findOne({
            _id: doc.auctionId
          });
        }

        return doc;
      },
      // limit: resultsPerPage,
      sort: {
        updatedAt: -1
      } // skip: skip

    });
    return {
      results: ret,
      totalResultsCount: totalResultsCount,
      pagination: getPaginationData(totalResultsCount, currentPageNo, urlBase, resultsPerPage)
    };
  },
  showDemoProp: function () {
    var currentPageNo = FlowRouter.current().params.pageno;

    if (!currentPageNo || currentPageNo == 1) {
      var count = Collections.Properties.find({
        createdByAgent: 'demoproperty',
        isArchived: false
      }, {
        limit: 1
      }).count();
      if (count > 0) return true;
    }

    return false;
  },
  demoProperty: function () {
    return Collections.Properties.find({
      createdByAgent: 'demoproperty',
      isArchived: false
    }, {
      transform: function (doc) {
        doc.bedroomsCount = 0;

        if (doc.bedrooms) {
          doc.bedroomsCount = doc.bedrooms.length;
        }

        if (doc.auctionId) {
          doc.auction = Collections.Auctions.findOne({
            _id: doc.auctionId
          });
        }

        return doc;
      },
      limit: 1
    });
  },
  showAddProperty: function () {
    if (Session.get('hideAddPropertyForm')) {
      Template.instance().showAddProperty.set(false);
      Session.set('hideAddPropertyForm', false);
      scrollTo('.addPropertyBtn', 50, 500);
    } else {
      if (!fsClient) {
        var filestack;
        module.link("filestack-js", {
          "default": function (v) {
            filestack = v;
          }
        }, 1);
        var apikey = 'AIPACLEs7ShGwwPh6fMTxz';
        fsClient = filestack.init(apikey, {
          policy: 'eyJleHBpcnkiOjE4NjE5MjAwMDAsImNhbGwiOlsicGljayIsInJlYWQiLCJzdGF0Iiwid3JpdGUiLCJ3cml0ZVVybCIsInN0b3JlIiwiY29udmVydCIsInJlbW92ZSIsImV4aWYiXX0=',
          signature: '465e8652c5cef95f44e5858e09d430abea855d98deaeb7425558f2c80d0f4f57'
        });
      }
    }

    return Template.instance().showAddProperty.get();
  },
  showFilters: function () {
    return false;
  },
  projectData: function () {
    // var ret = getProjectData();
    var ret = {}; // Session.set('projectData',ret);

    return ret;
  },
  filters: function () {
    var data = {}; //{"Home Type":["2 BHK"],"Floor":["2 to 15"],"Price Range":["67.45 to 97.45 "]}

    var FILTERS = Session.get('globalFILTERS');
    var defaultFilters = Session.get('projectData');
    defaultFilters = defaultFilters.filter;

    if (FILTERS['homeType']) {
      if (FILTERS['homeType'].length) {
        if (!isArraysEqual(defaultFilters.homeType, FILTERS['homeType'])) data['Home Type'] = FILTERS['homeType'];
      }
    }

    if (FILTERS['facing']) {
      if (FILTERS['facing'].length) {
        if (!isArraysEqual(defaultFilters.facing, FILTERS['facing'])) data['Facing'] = FILTERS['facing'];
      }
    }

    if (FILTERS['floor']) {
      var hasLowerLimit = false,
          hasUpperLimit = false;
      var l1 = parseInt(FILTERS['floor'][0]);
      if (l1 != 0 && l1 != defaultFilters.floor[0]) hasLowerLimit = true;
      var l2 = parseInt(FILTERS['floor'][1]);
      if (l2 != defaultFilters.floor[1]) hasUpperLimit = true;

      if (hasLowerLimit && !hasUpperLimit) {
        //Only LowerLimit
        data['Floor'] = ['More than ' + l1];
      } else if (!hasLowerLimit && hasUpperLimit) {
        //Only UpperLimit
        data['Floor'] = ['Below ' + l2];
      } else if (hasLowerLimit && hasUpperLimit) {
        //Both are there
        data['Floor'] = ['Between ' + l1 + " and " + l2];
      } else {} //Both are not there. So don't show filter.

    }

    if (FILTERS['priceRange']) {
      var hasLowerLimit = false,
          hasUpperLimit = false;
      var l1 = parseInt(FILTERS['priceRange'][0]);
      if (l1 != 0 && l1 != defaultFilters.priceRange[0]) hasLowerLimit = true;
      var l2 = parseInt(FILTERS['priceRange'][1]);
      if (l2 != defaultFilters.priceRange[1]) hasUpperLimit = true;

      if (hasLowerLimit && !hasUpperLimit) {
        //Only LowerLimit
        data['Price Range'] = ['More than ' + numDifferentiation(l1)];
      } else if (!hasLowerLimit && hasUpperLimit) {
        //Only UpperLimit
        data['Price Range'] = ['Below ' + numDifferentiation(l2)];
      } else if (hasLowerLimit && hasUpperLimit) {
        //Both are there
        data['Price Range'] = ['Between ' + numDifferentiation(l1) + " to " + numDifferentiation(l2)];
      } else {} //Both are not there. So don't show filter.

    } //if( FILTERS['priceRange'] ){
    //  data['Price Range'] =  [ numDifferentiation(FILTERS['priceRange'][0]) +" to "+ numDifferentiation(FILTERS['priceRange'][1]) ]
    //}


    applyClearFiltersEvent();
    return {
      data: data,
      count: Object.keys(data).length
    };
  },
  // time: function(){
  //
  //     var projectData = Session.get('projectData');
  //     var timestamp = TimeSync.serverTime(null, 30000);
  //     if(!projectData.auction.endDate || !timestamp)return;
  //
  //
  //     var dend = Date.parse(projectData.auction.endDate);
  //     var timeDiff = dend - timestamp ;
  //     if(timeDiff<0)return false;
  //
  //     var day = Math.floor(timeDiff / (1000 * 3600 * 24))
  //     var hour = Math.floor(timeDiff / (1000 * 3600 ))
  //     var min = Math.floor(timeDiff / (1000 * 60 ) )
  //     hour = hour - (day * 24);
  //     min = min - (day * 24* 60) - (hour * 60);
  //     return {"day":day,"hour":hour,"min":min}
  // },
  isAuctionClosed: function () {
    // var timestamp = TimeSync.serverTime(null, 30000);
    var timestamp = new Date();
    var projectData = Session.get('projectData');
    var dend = Date.parse(projectData.auction.endDate);
    var timeDiff = dend - timestamp;

    if (timeDiff < 0) {
      return true;
    }

    return false;
  },
  numDifferentiation: function (data) {
    return numDifferentiation(data);
  },
  agentStats: function () {
    var user = Meteor.user();

    if (user) {
      if (!user.profile.activeAuctions) user.profile.activeAuctions = 0;
      if (!user.profile.totalAuctions) user.profile.totalAuctions = 0;
      if (!user.profile.totalBidsReceived) user.profile.totalBidsReceived = 0;
      if (!user.profile.bidsReceivedActiveAuctions) user.profile.bidsReceivedActiveAuctions = 0;
      if (!user.profile.bidProfitActive) user.profile.bidProfitActive = 0;
      if (!user.profile.totalBidProfit) user.profile.totalBidProfit = 0;
      return {
        activeAuctions: user.profile.activeAuctions,
        totalAuctions: user.profile.totalAuctions,
        totalBidsReceived: user.profile.totalBidsReceived,
        bidsReceivedActiveAuctions: user.profile.bidsReceivedActiveAuctions,
        bidProfit: user.profile.bidProfitActive,
        totalBidProfit: user.profile.totalBidProfit * 12
      };
    }

    return {
      activeAuctions: 0,
      totalAuctions: 0,
      totalBidsReceived: 0,
      bidsReceivedActiveAuctions: 0,
      bidProfit: 0,
      totalBidProfit: 0
    };
  }
});
Template.propertyList.onCreated(function () {
  this.expanded = new ReactiveVar(false);
  this.showAddAuctionForm = new ReactiveVar(false);
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.isSubsLoadedAttempted = new ReactiveVar(false); //Meteor.default_connection._subscriptions //To get the list of scbscriptions

  instance.autorun(function () {
    try {
      if (instance.data.auctionId && !instance.data.auction) {
        instance.isSubsLoadedAttempted.set(true);
        instance.subscribe('Advertisement', instance.data.auctionId);
      } else if (instance.data.auction) {
        instance.isSubsLoaded.set(true);
        instance.isSubsLoadedAttempted.set(true);
      }

      if (instance.subscriptionsReady()) {
        instance.isSubsLoaded.set(true);
      }
    } catch (e) {
      instance.isSubsLoaded.set(true);
    }
  });
});
Template.propertyList.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  expanded: function () {
    return Template.instance().expanded.get();
  },
  showAddAuctionForm: function () {
    return Template.instance().showAddAuctionForm.get();
  },
  numDifferentiation: function (data) {
    return numDifferentiation(data);
  },
  auction: function () {
    if (this.auction) return this.auction;

    if (this.auctionId) {
      var ret = Collections.Auctions.find({
        _id: this.auctionId
      }).fetch();
      var attempt = Template.instance().isSubsLoadedAttempted.get();

      if (this.auctionId && !ret.length && !attempt) {
        Template.instance().subscribe('Advertisement', this.auctionId);
        Template.instance().isSubsLoadedAttempted.set(true);
      }

      if (ret) return ret[0];
    }

    return false;
  },
  lettingprintviewData: function () {
    if (!this.auction) return "";
    return this.auction.lettingAuctionCode; // if(!this.auction)return {key:""}
    // return {key:this.auction.lettingAuctionCode}
  },
  showEditPropertyForm: function () {
    return FlowRouter.url('account/editproperty', {
      id: this._id
    });
  }
});
Template.propertyList.events({
  "click .see_more_btn": function (event, template) {
    if (template.expanded.get()) template.expanded.set(false);else template.expanded.set(true);
  },
  "click .ActivateBtn": function (event, template) {
    if (!template.showAddAuctionForm.get()) template.showAddAuctionForm.set(true);
  },
  "click .showEditPropertyForm": function (event, template) {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        pageno: FlowRouter.current().params.pageno,
        scrollTo: 0
      }
    };
    Session.set('prevRoute', prevRoute); // FlowRouter.go('account/editproperty',{id:this._id})
  },
  "click .managePropertyLink": function (event, template) {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        pageno: FlowRouter.current().params.pageno,
        scrollTo: 0
      }
    };
    Session.set('prevRoute', prevRoute);
    FlowRouter.go('account/propertyManage', {
      id: this._id
    });
  },
  "click .hideAddAuctionForm": function (event, template) {
    if (template.showAddAuctionForm.get()) template.showAddAuctionForm.set(false);
    propId = this._id;
    scrollTo('#property_' + propId, 0, 700);
  },
  "click .viewApplications": function (event, template) {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        pageno: FlowRouter.current().params.pageno
      }
    };
    Session.set('prevRoute', prevRoute);
    FlowRouter.go("account/propertyApplications", {
      id: this._id
    });
  },
  "click .showCopyDlg": function (event, template) {
    var user = Meteor.user();
    var sluggedName = slugifyEmailAddress(user.profile.name);
    if (!sluggedName) sluggedName = 'rent';
    var email = sluggedName + '-let-' + this.auction.lettingAuctionCode.toLowerCase() + "@spotmycrib.ie";
    $('#agentPropertyEmailField').val(email);
    var url = FlowRouter.url('letting', {
      key: this.auction.lettingAuctionCode
    });
    $('#propertyLinkField').val(url);
    $.fancybox({
      'padding': 0,
      'href': '#propertyLinkDlg',
      afterShow: function (template) {
        $('#agentPropertyEmailField').select();
        $('#propertyLinkDlg .copyEmailBtn').unbind().bind('click', function () {
          $('#agentPropertyEmailField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'myPropertiesPage', 'copyShareEmail', 'copyShareEmail Btn Clicked');
        });
        $('#propertyLinkDlg .copyLinkBtn').unbind().bind('click', function () {
          $('#propertyLinkField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'myPropertiesPage', 'copyShareLink', 'copyShareLink Btn Clicked');
        });
        $('#propertyLinkDlg .cancelBtn').unbind().bind('click', function () {
          $.fancybox.close();
        });
      }
    });
  }
});
Template.addPropertyForm.onCreated(function () {
  if (!Session.get('addPropertyImages')) {
    // Lets do this. Anyways we have delete button.
    Session.set('addPropertyImages', []);
    S3.collection.remove({});
    var user = Meteor.user();

    try {
      if (user.profile.session.addproperty.gallery) {
        Session.set('addPropertyImages', user.profile.session.addproperty.gallery);
      }
    } catch (e) {}
  }

  this.numBedRoomCount = new ReactiveVar(0);
  this.addPropertyFormSaving = new ReactiveVar(false);
  this.countySelected = new ReactiveVar(false);
  saveAndAdvertise = false;
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    if (instance.countySelected.get()) {
      instance.isSubsLoaded.set(false);
      instance.subscribe('Areas', '', '', instance.countySelected.get(), '', '');
    }

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  });
});
Template.addPropertyForm.helpers({
  isSA: function () {
    var user = Meteor.user();
    if (user.isSA) return true;
    return false;
  },
  countries: function () {
    return [{
      label: "Ireland",
      value: "Ireland",
      selected: "selected"
    }]; //Both capital
  },
  counties: function () {
    var staticCounties = ["Carlow", "Cavan", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Kilkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow"];
    var ret = [];

    for (var i = 0; i < staticCounties.length; i++) {
      if (!staticCounties[i]) continue;
      ret.push({
        label: titleCase(staticCounties[i]),
        value: staticCounties[i]
      });
    }

    return ret; // return [{label: "Dublin", value: "dublin"}];//Both capital
    // var distinctEntries = _.uniq(Collections.Areas.find({}, {
    //     sort: {County: 1}, fields: {County: true}
    // }).fetch().map(function(x) {
    //     return x.County;
    // }), true);
    // var ret = []
    // for(var i=0;i< distinctEntries.length;i++){
    //     if(!distinctEntries[i])continue;
    //     ret.push({label: titleCase(distinctEntries[i]), value: distinctEntries[i] })
    // }
    // return ret;
  },
  areas: function () {
    var countySelected = Template.instance().countySelected.get();

    if (!countySelected) {
      var doc = Collections.Properties.findOne();
      if (!doc) return [];
      Template.instance().countySelected.set(doc.address.county);
      countySelected = doc.address.county;
    }

    var distinctEntries = _.uniq(Collections.Areas.find({
      County: countySelected
    }, {
      sort: {
        Area: 1
      },
      fields: {
        Area: true
      }
    }).fetch().map(function (x) {
      return x.Area;
    }), true);

    var ret = [];

    for (var i = 0; i < distinctEntries.length; i++) {
      if (!distinctEntries[i]) continue;
      ret.push({
        label: titleCase(distinctEntries[i]),
        value: distinctEntries[i]
      });
    }

    return ret;
  },
  propertyTypes: function () {
    var Config = Collections.Config.find().fetch();
    Config = Config[0];
    var ret = [];

    for (var i = 0; i < Config.propertyType.length; i++) {
      ret.push({
        label: titleCase(Config.propertyType[i].name),
        value: Config.propertyType[i].value
      });
    }

    return ret;
  },
  numBedRoomCount: function () {
    var c = Template.instance().numBedRoomCount.get();
    if (c < 100) return Template.instance().numBedRoomCount.get();else return 0;
  },
  addPropertyFormSaving: function () {
    return Template.instance().addPropertyFormSaving.get();
  },
  ensuiteLoop: function (count) {
    var countArr = [];

    for (var i = 0; i < count; i++) {
      countArr.push({
        i: i + 1
      });
    }

    return countArr;
  }
});
Template.addPropertyForm.events({
  "click .openFileUploader": function (event, template) {
    event.preventDefault();
    openPicker(); // filename
    //     :
    //     "webcam-1/12/2018, 6:53:25 PM.png"
    // handle
    //     :
    //     "G8lStVqHTiGnwxof6d5y"
    // mimetype
    //     :
    //     "image/png"
    // originalFile
    //     :
    // {name: "webcam-1/12/2018, 6:53:25 PM.png", type: "image/png", size: 630585}
    // originalPath
    //     :
    //     "webcam-1/12/2018, 6:53:25 PM.png"
    // size
    //     :
    //     629612
    // source
    //     :
    //     "local_file_system"
    // status
    //     :
    //     "Stored"
    // uploadId
    //     :
    //     "ba2fe36e9fd182ec0cb88236d676cefad"
    // url
    //     :
    //     "https://cdn.filestackcontent.com

    return;
  },
  'change .selectPropertyImages': function (event, template) {
    var files = event.target.files;
    S3.upload({
      files: files,
      path: "propertyImagesLarge"
    }, function (e, r) {
      if (e) throw new Meteor.Error('Upload failed ', e);
      var addPropertyImages = Session.get('addPropertyImages');
      addPropertyImages.push(r);
      Session.set('addPropertyImages', addPropertyImages);
      console.log(r);
    }); // for (var i = 0, ln = files.length; i < ln; i++) {
    //     propertyImagesCollection.insert(files[i], function (err, fileObj) {
    //         // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP
    //         console.log(fileObj);
    //         var cursor = propertyImagesCollection.find(fileObj._id);
    //
    //         var liveQuery = cursor.observe({
    //             changed: function(newImage, oldImage) {
    //
    //                 console.log("Inside live query ");
    //                 console.log(newImage);
    //                 if (newImage.isUploaded()) {
    //                     liveQuery.stop();
    //
    //                     // Call your onUploaded callback here...
    //                 }
    //             }
    //         });
    //     });
    // }
  },
  'change .countySelected': function (event, template) {
    template.countySelected.set(event.target.value);
  },
  'change .url': function (event, template) {
    var url = event.target.value;
    if (!url) return false; //Empty url

    Meteor.call('importPost', url, function (error, doc) {
      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        var msg = 'An error occurred.';
        if (error.reason) msg += ' ' + error.reason + '.';else if (error.message) msg += ' ' + error.message + '.';
        tmp.push(msg);
        Session.set("showErrorDlg", tmp);
        return;
      }

      $("input[name='address.address']").val(doc.address.address);
      $("input[name='price']").val(doc.rent);
      $("select[name='address.county']").val(doc.address.county).trigger('change');
      setTimeout(function () {
        $("select[name='address.area']").val(doc.address.area);
      }, 2000);
      setTimeout(function () {
        $("select[name='address.area']").val(doc.address.area);
      }, 4000);
      $("select[name='type']").val(doc.type.toLowerCase());
      $("select[name='furnished']").val(doc.furnished.toString());
      $("input[name='baths']").val(doc.baths);
      $("input[name='numBedRoomCount']").val(doc.numBedRoomCount).trigger('change');
      $("textarea[name='about']").val(doc.about).trigger('keyup');
      $("input[name='contacts.0.name']").val(doc.contacts[0].name);
      var number = "";

      try {
        number = doc.contacts[0].phone;
      } catch (e) {}

      if (number) {
        try {
          number = atob(number);
          number = number.replace(/\s+/g, '');
        } catch (e) {}

        $("input[name='contacts.0.phone']").val(number);
      }

      if (doc.amenities) {
        for (var i = 0; i < doc.amenities.length; i++) {
          $("input[value='" + doc.amenities[i] + "']").prop('checked', true);
        }
      }

      var tmp = {};

      if (doc.gallery) {
        var addPropertyImages = Session.get('addPropertyImages');
        if (!addPropertyImages) addPropertyImages = [];
        var galleryLen = doc.gallery.length,
            galleryStoredLen = 0; // var galleryLen = 1,galleryStoredLen=0;

        for (var i = 0; i < doc.gallery.length; i++) {
          // if(i>0)break;
          fsClient.storeURL(doc.gallery[i], {
            filename: 'Image ' + i + 1
          }).then(function (response) {
            console.log(JSON.stringify(response)); // {"url":"https://cdn.filestackcontent.com/QH10tMaGTrSgFweORrip","size":111949,"type":"image/jpeg","filename":"Image 01","handle":"QH10tMaGTrSgFweORrip"}

            tmp = {
              name: response.filename,
              url: response.url,
              handle: response.handle,
              mimetype: response.mimetype,
              // originalFile: doc.gallery[i],
              // originalPath: doc.gallery[i],
              size: response.size // source: response.source,
              // status: response.status,
              // uploadId: response.uploadId

            };
            console.log(tmp);
            addPropertyImages.push(tmp);
            galleryStoredLen++;

            if (galleryStoredLen == galleryLen) {
              //Now its fully imported
              Session.set('addPropertyImages', addPropertyImages);
              updateGalleriesInProfile(addPropertyImages, function (err, res) {
                //No need to show error. Because its just a backup.
                var addPropertyImages = Session.get('addPropertyImages');
                console.log("Current Count: " + addPropertyImages.length);
              });
            }
          });
        }
      }
    });
  },
  'keyup .autoGrowTA': function (event, template) {
    var element = event.target;
    element.style.height = "5px";
    if (element.scrollHeight < 310) element.style.height = element.scrollHeight + "px";else element.style.height = "310px";
  },
  'change #numBedRoomCount': function (event, template) {
    var numBedRoomCount = parseInt($(event.target).val());
    if (isNaN(numBedRoomCount)) return;
    Template.instance().numBedRoomCount.set(numBedRoomCount);
    t1 = template;
    setTimeout(function () {
      t1.$('#addPropertyFormCF').validate();
    }, 500);
  },
  'submit form': function (event) {
    event.preventDefault();
  },
  "click .addPropertyFormSaveAdvertiseBtn": function (event, template) {
    saveAndAdvertise = true;
    $('#addPropertyFormCF').submit();
  },
  "click .addPropertyFormCancelBtn": function (event, template) {
    Session.set('hideAddPropertyForm', true);
  },
  'change input[name=price]': function (event, template) {
    if (event.target.value) {
      var tmp = event.target.value.split('.');
      tmp = tmp[0]; //No decimals

      tmp = tmp.trim().match(/\d+/g);
      if (!Array.isArray(tmp)) event.target.value = '';
      event.target.value = tmp.join('');
    }
  }
});
Template.addPropertyForm.onRendered(function () {
  // this.$('#addPropertyFormCF').validate();
  addPropertyFormSaving = this.addPropertyFormSaving;
  var validator = this.$('#addPropertyFormCF').validate({
    submitHandler: function (event) {
      addPropertyFormSaving.set(true);
      console.log("You just submitted the 'addPropertyForm' form.");
      Meteor.call('addProperty', $('#addPropertyFormCF').serializeArray(), function (error, propertyId) {
        addPropertyFormSaving.set(false);

        if (error) {
          console.log(error); //    validator.showErrors({
          //         email: error.reason
          //     });

          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          var msg = 'An error occurred.';
          if (error.reason) msg += ' ' + error.reason + '.';else if (error.message) msg += ' ' + error.message + '.';
          tmp.push(msg);
          Session.set("showErrorDlg", tmp);
          return;
        }

        if (saveAndAdvertise) {
          Meteor.call('addAdvertisement', $('#addPropertyFormCF').serializeArray(), propertyId, function (error, auctionId) {
            if (error) {
              console.log(error); //    validator.showErrors({
              //         email: error.reason
              //     });

              var tmp = Session.get("showErrorDlg");
              if (!tmp) tmp = [];
              var msg = 'An error occurred.';
              if (error.reason) msg += ' ' + error.reason + '.';else if (error.message) msg += ' ' + error.message + '.';
              tmp.push(msg);
              Session.set("showErrorDlg", tmp);
              return;
            }

            console.log('addAdvertisement created successfully');
            console.log(auctionId);
            saveAndAdvertise = false;
          });
        }

        var addPropertyImages = Session.get('addPropertyImages');
        updateGalleriesInServer(addPropertyImages, propertyId, function (err, res) {
          Meteor.call('updateGalleriesInUserProfile', [], function () {
            console.log('Reset the profile backup');
          }); //Reset the profile backup

          if (err) {
            console.log(err);
          } else {
            Session.set('addPropertyImages', []);
            S3.collection.remove({});
          }
        });
        Session.set('hideAddPropertyForm', true);
      });
    }
  });
});
Template.advertiseForm.onCreated(function () {
  this.advertiseFormSaving = new ReactiveVar(false);
});
Template.advertiseForm.helpers({
  advertiseFormSaving: function () {
    return Template.instance().advertiseFormSaving.get();
  }
});
Template.advertiseForm.events({
  'submit form': function (event) {
    event.preventDefault();
  },
  'change input[name=price]': function (event, template) {
    if (event.target.value) {
      var tmp = event.target.value.split('.');
      tmp = tmp[0]; //No decimals

      tmp = tmp.trim().match(/\d+/g);
      if (!Array.isArray(tmp)) event.target.value = '';
      event.target.value = tmp.join('');
    }
  },
  "click .advertiseFormCancelBtn": function (event, template) {
    parentIns = template.view.parentView.parentView.parentView.templateInstance();
    parentIns.showAddAuctionForm.set(false);
  }
});
Template.advertiseForm.onRendered(function () {
  this.$('#readyFrom').datetimepicker();
  advertiseFormSaving = this.advertiseFormSaving;
  parentIns = this.view.parentView.parentView.parentView.templateInstance();
  var validator = this.$('#advertiseFormCF').validate({
    submitHandler: function (event) {
      advertiseFormSaving.set(true); // console.log("You just submitted the 'advertise' form.");

      Meteor.call('addAdvertisement', $('#advertiseFormCF').serializeArray(), function (error, result) {
        advertiseFormSaving.set(false);

        if (error) {
          console.log(error); //    validator.showErrors({
          //         email: error.reason
          //     });

          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          var msg = 'An error occurred.';
          if (error.reason) msg += ' ' + error.reason + '.';else if (error.message) msg += ' ' + error.message + '.';
          tmp.push(msg);
          Session.set("showErrorDlg", tmp);
          return;
        } // console.log('addAdvertisement completed successfully')


        console.log(result);
        auctionId = result;
        parentIns.showAddAuctionForm.set(false);
        scrollTo('.property_auction_' + auctionId, -100, 700);
      });
    }
  });
});
Template.imageView.helpers({
  images: function () {
    // return S3.collection.find();
    return Session.get('addPropertyImages');
  }
});
Template.imgTag.events({
  "click .editImgBtn": function (event, template) {
    var addPropertyImages = Session.get('addPropertyImages');
    var newArr = [];
    if (!addPropertyImages) return;
    if (!addPropertyImages.length) return;
    index = getIndexByHandle(addPropertyImages, this.handle);
    newArr.push(addPropertyImages[index].url); //put it at first

    var pickOptions = {
      transformations: {
        crop: {
          force: true,
          aspectRatio: 1.333
        },
        rotate: true
      },
      accept: 'image/*',
      imageMax: [800, 600],
      "uploadInBackground": false //Disabled because, bg upload causes 2 uploads towards filestack limits

    };
    fsClient.cropFiles(newArr, pickOptions).then(function (response) {
      var addPropertyImages = Session.get('addPropertyImages'); //if its conversion from old amazon to new filestack, then it will create a new file, so delete the old file seperatly and insert a new file seperatly.

      if (!response.filesUploaded.length) {
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Edit failed: please try again, contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      fsClient.remove(addPropertyImages[index].handle).then(function (result) {
        if (!result.ok) {
          console.log(result); //Not required to show error to user as this is just edit. If the image appears, he will click delete again
        }

        console.log('In fs remove result');
        var addPropertyImages = Session.get('addPropertyImages');
        addPropertyImages.splice(index, 1);
        Session.set('addPropertyImages', addPropertyImages);
        updateGalleriesInProfile(addPropertyImages, function (err, res) {
          //No need to show error. Because its just a backup.
          var addPropertyImages = Session.get('addPropertyImages');
          console.log("Current Count: " + addPropertyImages.length);
        });
      });
      var tmp = {};

      for (var i = 0; i < response.filesUploaded.length; i++) {
        tmp = {
          name: response.filesUploaded[i].filename,
          url: response.filesUploaded[i].url,
          handle: response.filesUploaded[i].handle,
          mimetype: response.filesUploaded[i].mimetype,
          originalFile: response.filesUploaded[i].originalFile,
          originalPath: response.filesUploaded[i].originalPath,
          size: response.filesUploaded[i].size,
          source: response.filesUploaded[i].source,
          status: response.filesUploaded[i].status,
          uploadId: response.filesUploaded[i].uploadId
        }; // addPropertyImages.push(tmp);

        addPropertyImages.splice(index + 1, 0, tmp); //insert at the index place where its deleted.
      } //Logic to insert new file.


      Session.set('addPropertyImages', addPropertyImages);
      updateGalleriesInProfile(addPropertyImages, function (err, res) {
        //No need to show error. Because its just a backup.
        var addPropertyImages = Session.get('addPropertyImages');
        console.log("Current Count: " + addPropertyImages.length);
      });
    });
  },
  "click .deleteImgBtn": function (event, template) {
    var addPropertyImages = Session.get('addPropertyImages');
    index = getIndexByHandle(addPropertyImages, this.handle);
    fsClient.remove(this.handle).then(function (result) {
      debugger;

      if (!result.ok) {
        console.log(result);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Deletion failed: please check your internet connection, contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      var addPropertyImages = Session.get('addPropertyImages');
      addPropertyImages.splice(index, 1);
      Session.set('addPropertyImages', addPropertyImages);
      updateGalleriesInProfile(addPropertyImages, function (err, res) {
        //No need to show error. Because its just a backup.
        var addPropertyImages = Session.get('addPropertyImages');
        console.log("Current Count: " + addPropertyImages.length);
      });
    });
  },
  "click .deleteImgBtnOld": function (event, template) {
    console.log(this);
    var addPropertyImages = Session.get('addPropertyImages');
    index = getIndex(addPropertyImages, this._id); // debugger;

    S3.delete(this.relative_url, function (error, result) {
      var addPropertyImages = Session.get('addPropertyImages');
      S3.collection.remove(addPropertyImages[index]._id);
      addPropertyImages.splice(index, 1);
      Session.set('addPropertyImages', addPropertyImages);
    });
  }
});

function getIndex(myArray, fileId) {
  for (var i = 0; i < myArray.length; i++) {
    if (myArray[i]._id === fileId) {
      return i;
    }
  }
}

Template.myProperties.onRendered(function () {
  try {
    jQuery("html,body").animate({
      scrollTop: 0
    }, 250);
  } catch (e) {
    document.body.scrollTop = document.documentElement.scrollTop = 0;
  }

  var prevRoute = Session.get('prevRoute');

  if (prevRoute) {
    try {
      if (prevRoute) if (prevRoute.instructions) if (prevRoute.instructions.openPostNewProp) {
        Template.instance().showAddProperty.set(true);
        setTimeout(function () {
          jQuery("html,body").animate({
            scrollTop: 0
          }, 250);
        }, 500);
      }
    } catch (e) {
      console.log(e);
    }
  }
});

function updateQueryStringParameter(uri, key, value) {
  var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
  var separator = uri.indexOf('?') !== -1 ? "&" : "?";

  if (uri.match(re)) {
    return uri.replace(re, '$1' + key + "=" + value + '$2');
  } else {
    return uri + separator + key + "=" + value;
  }
}

clearFiltersEvent = function () {
  $('.clearFilterBtn').unbind().click(function () {
    var val = $(this).closest('span').attr('val');
    var key = $(this).closest('h5').attr('key');
    var FILTERS = Session.get('globalFILTERS');
    var filterDefaults = Session.get('projectData');
    filterDefaults = filterDefaults.filter; // console.log(FILTERS);

    if (key == "Home Type") {
      var array = FILTERS["homeType"];
      var index = array.indexOf(val);

      if (index > -1) {
        array.splice(index, 1);
        FILTERS["homeType"] = array;
      }
    } else if (key == "Facing") {
      var array = FILTERS["facing"];
      var index = array.indexOf(val);

      if (index > -1) {
        array.splice(index, 1);
        FILTERS["facing"] = array;
      }
    } else if (key == "Price Range") {
      //if(FILTERS["priceRange"][0]==val ){
      //  FILTERS["priceRange"][0] = filterDefaults.priceRange[0]
      //}else{
      //  FILTERS["priceRange"][1] = filterDefaults.priceRange[1]
      //}
      FILTERS["priceRange"][0] = filterDefaults.priceRange[0];
      FILTERS["priceRange"][1] = filterDefaults.priceRange[1];
    } else if (key == "Floor") {
      if (FILTERS["floor"][0] == val) {
        FILTERS["floor"][0] = filterDefaults.floor[0];
      } else {
        FILTERS["floor"][1] = filterDefaults.floor[1];
      }
    } //Session.set('globalFILTERS', FILTERS);


    setFilters(FILTERS);
  });
};

applyClearFiltersEvent = function () {
  setTimeout(clearFiltersEvent, 1000);
  setTimeout(clearFiltersEvent, 3000);
};

function applyFilters() {
  console.log('event applyFilters jquery');
  var floorLevelDOM = document.getElementById('range-input');
  var priceRangeDOM = document.getElementById('range-input1');
  var tmp = $('.filterUnitType').val();
  if (tmp == 'any') tmp = [];else tmp = [tmp];
  globalFILTERS.homeType = tmp;
  var tmp = $('.filterUnitFacing').val();
  if (tmp == 'any') tmp = [];else tmp = [tmp];
  globalFILTERS.facing = tmp;
  globalFILTERS.floor = floorLevelDOM.noUiSlider.get();
  globalFILTERS.priceRange = priceRangeDOM.noUiSlider.get(); // console.log(globalFILTERS);

  setFilters(globalFILTERS);
  $.fancybox.close();
  applyClearFiltersEvent();
}

function applyFilterValues() {
  // console.log('event applyFiltersValues jquery')
  var floorLevelDOM = document.getElementById('range-input');
  var priceRangeDOM = document.getElementById('range-input1');
  var floor = floorLevelDOM.noUiSlider.get();
  var priceRange = priceRangeDOM.noUiSlider.get();
  $('.filterS1l').html(floor[0]);
  $('.filterS1h').html(floor[1]);
  $('.filterS2l').html(numDifferentiation(priceRange[0]));
  $('.filterS2h').html(numDifferentiation(priceRange[1]));
}

function delayedCall(functionName) {
  setTimeout(functionName, 3000);
}

function isArraysEqual(array1, array2) {
  var is_same = array1.length == array2.length && array1.every(function (element, index) {
    return element === array2[index];
  });
  return is_same;
}

callDelayedFunctions = function () {
  setTimeout(delayedFunctions, 2000);
};

function delayedFunctions() {
  Session.set('enableDelayedFunctions', true);
  $('.fullyConfirmBlgOKBtn').unbind().click(function () {
    console.log('fullyConfirmBlgOKBtn called');
    Session.set('showConfirmFancyBox', false);
    FlowRouter.query.clear();
    $.fancybox.close();
    $('.fancybox-overlay').hide();
    setTimeout(function () {
      var unitid = Session.get('adjustAutoExpandToUnitID');

      if (unitid) {
        scrollTo('.has-error', 0, 500);
        setTimeout(function () {
          $('html,body').animate({
            scrollTop: $('#unit_' + unitid).offset().top
          }, 1000);
        }, 1000);
        Session.set('adjustAutoExpandToUnitID', '');
      }
    }, 2000);
  });
}

function mybidsJqueryEvents() {
  $('.payNowBtn').unbind().click(function () {
    console.log("jquery event payNowBtn");
    var redirectURL = FlowRouter.current().originalUrl;

    if (redirectURL.indexOf('http:') == -1) {
      var redirectURL = Meteor.absoluteUrl() + FlowRouter.current().originalUrl.substring(1);
    }

    var bidId = $(this).attr('bidid');
    Meteor.call("getUnitConfirmationPaymentURL", [redirectURL, bidId], function (error, result) {
      if (error) {
        return;
      }

      window.location.href = result;
    });
  });
  $('.withdrawConfirmBtn').unbind().click(function () {
    console.log("jquery event withdrawBtn");
    var bidId = $(this).attr('bidid');
    Meteor.call("withdrawBid", [bidId], function (error, result) {
      if (error) {
        return;
      }

      $.fancybox.close();
    });
  });
  $('.cancelBtn').unbind().click(function () {
    console.log('event cancelBtn jquery');
    $.fancybox.close();
  });
}

function getPriceBreakUp(unit, ratePerSqFt) {
  var pricing = unit.priceBreakUp;
  var electricityMultiplier = pricing.statutoryGovtCharges.electricityMultiplier;
  var constructionRateForVAT = pricing.statutoryGovtCharges.constructionRateForVAT;
  if (!electricityMultiplier) electricityMultiplier = 140;
  if (!constructionRateForVAT) constructionRateForVAT = 2100;
  if (!pricing.landCost) pricing.landCost = 2091;
  unit.superBuiltUpArea = parseFloat(unit.superBuiltUpArea);
  ratePerSqFt = parseFloat(ratePerSqFt);
  pricing.landCost = parseFloat(pricing.landCost);
  electricityMultiplier = parseFloat(electricityMultiplier);
  constructionRateForVAT = parseFloat(constructionRateForVAT);
  pricing.basicUnitCost.floorRaiseCharge = parseFloat(pricing.basicUnitCost.floorRaiseCharge);
  pricing.basicUnitCost.plcCharge = parseFloat(pricing.basicUnitCost.plcCharge);
  pricing.basicUnitCost.floorRaiseCharge = parseFloat(pricing.basicUnitCost.floorRaiseCharge);
  pricing.basicUnitCost.plcCharge = parseFloat(pricing.basicUnitCost.plcCharge);
  pricing.basicUnitCost.totalBasicRatepsft = parseFloat(pricing.basicUnitCost.totalBasicRatepsft);
  pricing.basicUnitCost.total = parseFloat(pricing.basicUnitCost.total);
  pricing.agreementValue.infrastructureValue = parseFloat(pricing.agreementValue.infrastructureValue);
  pricing.agreementValue.clubHouseCharges = parseFloat(pricing.agreementValue.clubHouseCharges);
  pricing.agreementValue.total = parseFloat(pricing.agreementValue.total);
  pricing.otherCharges.advanceMaintainence = parseFloat(pricing.otherCharges.advanceMaintainence);
  pricing.otherCharges.generatorBackup = parseFloat(pricing.otherCharges.generatorBackup);
  pricing.otherCharges.builderCharges = parseFloat(pricing.otherCharges.builderCharges);
  pricing.otherCharges.total = parseFloat(pricing.otherCharges.total);
  pricing.statutoryGovtCharges.serviceTax = parseFloat(pricing.statutoryGovtCharges.serviceTax);
  pricing.statutoryGovtCharges.vat = parseFloat(pricing.statutoryGovtCharges.vat);
  pricing.statutoryGovtCharges.labourCess = parseFloat(pricing.statutoryGovtCharges.labourCess);
  pricing.statutoryGovtCharges.electricityCharges = parseFloat(pricing.statutoryGovtCharges.electricityCharges);
  pricing.statutoryGovtCharges.stampDuty = parseFloat(pricing.statutoryGovtCharges.stampDuty);
  pricing.statutoryGovtCharges.stampPaperCharges = parseFloat(pricing.statutoryGovtCharges.stampPaperCharges);
  pricing.statutoryGovtCharges.legalCharges = parseFloat(pricing.statutoryGovtCharges.legalCharges);
  pricing.statutoryGovtCharges.otherStatutoryCharges = parseFloat(pricing.statutoryGovtCharges.otherStatutoryCharges);
  pricing.statutoryGovtCharges.total = parseFloat(pricing.statutoryGovtCharges.total);
  pricing.totalAllInclusive = parseFloat(pricing.totalAllInclusive);
  pricing.basicUnitCost.totalBasicRatepsft = ratePerSqFt + pricing.basicUnitCost.floorRaiseCharge + pricing.basicUnitCost.plcCharge;
  pricing.basicUnitCost.total = unit.superBuiltUpArea * pricing.basicUnitCost.totalBasicRatepsft;
  pricing.agreementValue.total = pricing.basicUnitCost.total + pricing.agreementValue.infrastructureValue + pricing.agreementValue.clubHouseCharges; //pricing.statutoryGovtCharges.electricityCharges = unit.superBuiltUpArea * electricityMultiplier;
  //pricing.statutoryGovtCharges.vat = ( (constructionRateForVAT+pricing.basicUnitCost.floorRaiseCharge +
  //  pricing.basicUnitCost.plcCharge)     +    (pricing.agreementValue.infrastructureValue + pricing.statutoryGovtCharges.electricityCharges + pricing.agreementValue.clubHouseCharges)/unit.superBuiltUpArea)*unit.superBuiltUpArea * 0.145 ;
  //debugger;
  // pricing.statutoryGovtCharges.labourCess = (pricing.basicUnitCost.total - (unit.superBuiltUpArea * pricing.landCost))*0.01
  // var D30 = unit.floorLevel
  // var E30 = D30<=5 ? 0 : D30>5 && D30<=15 ? (D30-5)*0.005 : 0.05
  // //pricing.statutoryGovtCharges.stampDuty =  ((ratePerSqFt*2130)+(ratePerSqFt*2130*(E30+0.0525)+250000))*0.0665
  // //pricing.statutoryGovtCharges.stampPaperCharges =  pricing.agreementValue.total*0.001+300
  // pricing.statutoryGovtCharges.total = pricing.statutoryGovtCharges.vat +
  //   pricing.statutoryGovtCharges.labourCess +
  //   pricing.statutoryGovtCharges.electricityCharges +
  //   pricing.statutoryGovtCharges.stampDuty +
  //   pricing.statutoryGovtCharges.stampPaperCharges +
  //   pricing.statutoryGovtCharges.legalCharges +
  //   pricing.statutoryGovtCharges.otherStatutoryCharges

  pricing.totalAllInclusive = pricing.agreementValue.total + pricing.otherCharges.total + pricing.statutoryGovtCharges.total;
  return pricing;
}

function ordinal_suffix_of(i) {
  var j = i % 10,
      k = i % 100;

  if (j == 1 && k != 11) {
    return i + "st";
  }

  if (j == 2 && k != 12) {
    return i + "nd";
  }

  if (j == 3 && k != 13) {
    return i + "rd";
  }

  return i + "th";
}

function openPicker() {
  fsClient.pick({
    fromSources: ["local_file_system", "webcam", "facebook", "url", "googledrive", "dropbox", "flickr", "instagram", "gmail", "picasa", "onedrive", "clouddrive"],
    maxFiles: 10,
    transformations: {
      crop: {
        force: false,
        aspectRatio: 1.333
      },
      rotate: true
    },
    imageMax: [800, 600],
    accept: ["image/*"],
    "uploadInBackground": false //Disabled because, bg upload causes 2 uploads towards filestack limits

  }).then(function (response) {
    // declare this function to handle response
    var addPropertyImages = Session.get('addPropertyImages');
    var tmp = {};
    if (response.filesUploaded) for (var i = 0; i < response.filesUploaded.length; i++) {
      tmp = {
        name: response.filesUploaded[i].filename,
        url: response.filesUploaded[i].url,
        handle: response.filesUploaded[i].handle,
        mimetype: response.filesUploaded[i].mimetype,
        originalFile: response.filesUploaded[i].originalFile,
        originalPath: response.filesUploaded[i].originalPath,
        size: response.filesUploaded[i].size,
        source: response.filesUploaded[i].source,
        status: response.filesUploaded[i].status,
        uploadId: response.filesUploaded[i].uploadId
      };
      addPropertyImages.push(tmp);
    }
    Session.set('addPropertyImages', addPropertyImages);
    updateGalleriesInProfile(addPropertyImages, function (err, res) {
      //No need to show error. Because its just a backup.
      var addPropertyImages = Session.get('addPropertyImages');
      console.log("Current Count: " + addPropertyImages.length);
    });
    console.log(response);
  });
}

function getIndexByHandle(myArray, fileId) {
  for (var i = 0; i < myArray.length; i++) {
    if (myArray[i].handle === fileId) {
      return i;
    }
  }
}

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function slugifyEmailAddress(text) {
  if (!text) return '';
  var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ/_,:;';
  var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
  var p = new RegExp(a.split('').join('|'), 'g');
  return text.toString().toLowerCase().replace(/\s+/g, '.') // Replace spaces with "."
  .replace(p, function (c) {
    return b.charAt(a.indexOf(c));
  }) // Replace special chars
  .replace(/&/g, '-and-') // Replace & with ''
  // .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
  .replace(/\-\-+/g, '-') // Replace multiple - with single ''
  .replace(/^-+/, '') // Trim - from start of text
  .replace(/-+$/, ''); // Trim - from end of text
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"profile.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/profile.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./profile.html");
// import "./accounts/helpers.js";
// import "./accounts/validation.js";
var _validFileExtensions = [".jpg", ".jpeg", ".png", ".pdf", ".txt", ".doc", ".docx", ".ODT"];

function filevalidation(arrInputs) {
  for (var i = 0; i < arrInputs.length; i++) {
    var oInput = arrInputs[i];
    var sFileName = oInput.name;

    if (sFileName.length > 0) {
      var blnValid = false;

      for (var j = 0; j < _validFileExtensions.length; j++) {
        var sCurExtension = _validFileExtensions[j];

        if (sFileName.substr(sFileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase()) {
          blnValid = true;
          break;
        }
      }

      if (!blnValid) {
        // alert("Sorry, " + sFileName + " is invalid, allowed extensions are: " + _validFileExtensions.join(", "));
        return false;
      }
    }
  }

  return true;
}

Template.profile.onCreated(function () {
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    instance.subscribe('userData');

    if (instance.subscriptionsReady()) {
      var data = Accounts.user();

      try {
        if (data.profile.isPublic && data.profile.username) {
          console.log(''); // FlowRouter.redirect('tenant',{username:data.profile.username})
        }
      } catch (e) {
        console.log(e);
      }

      instance.isSubsLoaded.set(true);
    }
  });
});
Template.profile.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  }
});
Template.userProfile.onCreated(function () {
  this.privacyTermsMore = new ReactiveVar(false);
  this.hasPasswordSet = new ReactiveVar(false);
  this.hasPasswordSetReqCompleted = new ReactiveVar(false);
});
Template.userProfile.helpers({
  "data": function () {
    var data = Accounts.user(); // console.log(data);

    var city = ''; // profile.files.has
    // if(data)
    // if(data.profile)
    // if(data.profile.addressBook)
    // if(data.profile.addressBook.length){
    //   city = data.profile.addressBook[0].city
    // }

    clearMeta();

    try {
      DocHead.setTitle(titleCase(data.profile.name) + '\'s profile | SpotMyCrib');
      DocHead.addMeta({
        name: "description",
        content: "Upload and manage your references."
      });
    } catch (err) {
      DocHead.setTitle(' User not found | SpotMyCrib');
      DocHead.addMeta({
        name: "description",
        content: ""
      });
    }

    return {
      "userData": data,
      "userCity": city,
      "userEmail": data.profile.email,
      "userEmailVerified": data.profile.emailVerified
    };
  },
  backBtnNeeded: function () {
    var prevRoute = Session.get('prevRoute');

    try {
      if (FlowRouter.current().route.name != prevRoute.name) return true;
    } catch (e) {}

    return false;
  },
  prevRoute: function () {
    return Session.get('prevRoute');
  },
  isPublicProfileSelectYes: function () {
    var user = Meteor.user();

    try {
      if (user.profile.isPublic) {
        return 'selected';
      }
    } catch (e) {}

    return '';
  },
  isPublicProfileSelectNo: function () {
    var user = Meteor.user();

    try {
      if (!user.profile.isPublic) {
        return 'selected';
      }
    } catch (e) {}

    return '';
  },
  progress: function () {
    var user = Meteor.user();
    var score = 0;
    var css = 'progress-bar-danger';
    var issues = [];

    if (user.profile.mobile) {
      score += 15;
    } else {
      issues.push('Mobile number is required. Landlord needs to contact you.');
    }

    if (!user.services) user.services = {};

    if (user.services.facebook) {
      score += 15;
    } else {
      issues.push('Connect with your Facebook profile. Its shows your social presence.');
    } // if(user.services.google){score += 10;}else{issues.push('Connect with your google profile. Its shows your social presence.')}//No weightage


    if (user.services.twitter) {
      score += 10;
    } else {
      issues.push('Connect with your Twitter profile. Its shows your social presence.');
    }

    if (user.services.linkedin) {
      score += 15;
    } else {
      issues.push('Connect with your LinkedIn profile. Its shows your professional presence.');
    }

    if (user.profile.references.hasPassport) {
      score += 10;
    } else {
      issues.push('Passport is required. Its your legal identity card.');
    }

    if (user.profile.references.employerName) {
      score += 3;
    } else {
      issues.push('Name of your employer is recommended. It can highlight your profile to landlord.');
    }

    if (user.profile.references.employerTakeHome) {
      score += 2;
    } else {
      issues.push('Monthly take home salary is recommended. It can act as your finantial reference.');
    }

    if (user.profile.references.hasWorkRef) {
      score += 10;
    } else {
      issues.push('Work reference is required. It shows your professional side.');
    }

    if (user.profile.references.hasLandlordRef) {
      score += 10;
    } else {
      issues.push('Landlord reference is required. ');
    }

    if (user.profile.references.hasPPS) {
      score += 3;
    } else {
      issues.push('PPS is recommended. Its your legal identity card.');
    } // if(user.profile.references.hasFinancialRef){score += 0;}else{issues.push('Financial reference if work reference is not given.')}


    if (user.profile.references.hasGovtID) {
      score += 4;
    } else {
      issues.push('Govt ID is recommended. Driving license or GNIB as your identity card.');
    }

    if (user.profile.references.hasResume) {
      score += 3;
    } else {
      issues.push('Resume is recommended. It shows your professional side.');
    }

    if (score > 100) score = 100;
    if (score > 50) css = 'progress-bar-warning';
    if (score > 70) css = 'progress-bar-info';
    if (score > 90) css = 'progress-bar-success';
    return {
      css: css,
      percent: score + "%",
      issues: issues
    };
  },
  privacyTermsMore: function () {
    return Template.instance().privacyTermsMore.get();
  },
  showFileTemplate: function () {
    return Session.get('showFileTemplate');
  },
  showHideFileDlg: function () {
    console.log("Event showHideFileDlg");
    var ses = Session.get('showFileDlg');

    if (ses) {
      if (ses.show) {
        $.fancybox({
          'padding': 0,
          'href': '#fileupload-dlg',
          width: '80%',
          afterShow: function () {
            Session.set('showFileTemplate', true);
          },
          afterClose: function () {
            var ses = {
              show: false,
              cate: ""
            };
            Session.set('showFileDlg', ses); // Has the overall info and basic required info.

            Session.set('showFileTemplate', false);
          }
        });
        return true;
      } else if (ses.show == false) {
        try {
          $.fancybox.close();
        } catch (e) {}
      }
    }

    return false;
  },
  hasPasswordSet: function () {
    var localHasPasswordSet = Session.get('localHasPasswordSet');
    if (localHasPasswordSet) return localHasPasswordSet;
    return Template.instance().hasPasswordSet.get();
  },
  hasPasswordSetReqCompleted: function () {
    return Template.instance().hasPasswordSetReqCompleted.get();
  }
});
Template.userProfile.events({
  "change .togglePublicProfileSetting": function (event, template) {
    Meteor.call('togglePublicProfileSetting', function (err, res) {
      if (err) {
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        var msg = 'Public profile setting change failed. Check your internet connection. ';
        if (err.error) msg += err.error + '. ';
        msg += "Please try again. Contact us if needed.";
        tmp.push(msg);
        Session.set("showErrorDlg", tmp);
      } else {
        setTimeout(function () {
          var data = Accounts.user();

          try {
            if (data.profile.isPublic && data.profile.username) {
              FlowRouter.go('tenant', {
                username: data.profile.username
              });
            } else {
              FlowRouter.go('account/profile');
            }
          } catch (e) {
            console.log(e);
          }
        }, 1000);
      }
    });
  },
  "click .profileLinkCopyBtn": function (event, template) {
    console.log("Event profileLinkCopyBtn");
    $('#profileLinkField').select();

    try {
      var successful = document.execCommand('copy');
      var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

      var tmp = Session.get("showErrorDlg");
      if (!tmp) tmp = [];
      var msg = 'Your profile is copied to your clipboard. ';
      tmp.push(msg);
      Session.set("showErrorDlg", tmp);
    } catch (err) {
      console.log('Oops, unable to copy');
    }
  },
  "click .requestRedgRefund": function (event, template) {
    console.log("Event requestRedgRefund");
    $.fancybox({
      'padding': 0,
      'href': '#requestRedgRefund-popup'
    });
  },
  "click .requestConfRefund": function (event, template) {
    console.log("Event requestConfRefund");
    $.fancybox({
      'padding': 0,
      'href': '#requestConfRefund-popup'
    });
  },
  "click .changePwdBtn": function (event, template) {
    console.log("Event changePwdBtn");
    $('#changepass-dlg .changePwdAlertMsgs .color-text').html('');
    $('#changepass-dlg .help-block p').html('');
    $("#changepass-dlg button[type=submit]").attr("disabled", false);
    $.fancybox({
      'padding': 0,
      'href': '#changepass-dlg',
      'afterClose': function () {
        console.log("Event: Fancybox closed"); //reset fields

        $('.oldpwd').val("");
        $('.newpwd').val("");
      }
    });
  },
  "click .setPwdBtn": function (event, template) {
    console.log("Event setPwdBtn");
    $('#setpass-dlg .changePwdAlertMsgs .color-text').html('');
    $('#setpass-dlg .help-block p').html('');
    $("#setpass-dlg button[type=submit]").attr("disabled", false);
    $.fancybox({
      'padding': 0,
      'href': '#setpass-dlg',
      'afterClose': function () {
        console.log("Event: Fancybox closed"); //reset fields

        $('.newpwd').val("");
        $('.newpwdconfirm').val("");
      }
    });
  },
  "click .changeMobileBtn": function (event, template) {
    console.log("Event changeMobileBtn");
    $.fancybox({
      'padding': 0,
      'href': '#changeMobile-div'
    });
  },
  "click .changeCityBtn": function (event, template) {
    console.log("Event changeCityBtn");
    $.fancybox({
      'padding': 0,
      'href': '#changeCity-div'
    });
  },
  "click .changeEmployerNameConfirmation": function (event, template) {
    console.log("Event changeEmployerNameConfirmation");
    var ele = $(event.target);
    hideSaveBtn(ele);
    Meteor.call('updateEmployerName', $('.changeEmployerNameValue').val(), function (error, result) {
      if (error) {
        console.log(error.error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        if (!error.error) error.error = 'An error occurred';
        tmp.push(error.error);
        Session.set("showErrorDlg", tmp);
        showSaveBtn(ele);
        return;
      }

      if (result.status == 'Success') {}
    });
  },
  "click .changeEmployerTakeHomeConfirmation": function (event, template) {
    console.log("Event changeEmployerTakeHomeConfirmation");
    debugger;
    var ele = $(event.target);
    hideSaveBtn(ele);
    var num = parseInt($('.changeEmployerTakeHomeValue').val());
    Meteor.call('updateEmployerTakeHome', num, function (error, result) {
      if (error) {
        console.log(error.error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        if (!error.error) error.error = 'An error occurred';
        tmp.push(error.error);
        Session.set("showErrorDlg", tmp);
        showSaveBtn(ele);
        return;
      }

      if (result.status == 'Success') {}
    });
  },
  "click .privacyTermsMore_btn": function (event, template) {
    if (template.privacyTermsMore.get()) template.privacyTermsMore.set(false);else template.privacyTermsMore.set(true);
  },
  //////// TODO: Events below are not working.
  "click .requestRedgRefundConf": function (event, template) {
    console.log("Event requestRedgRefundConf");
    var ret = Meteor.call('registrationAmountRefund', [], function (ret) {
      if (ret.status == 'AlreadyRequested') {}

      $.fancybox.close();
    });
  },
  "click .requestConfRefundConf": function (event, template) {
    console.log("Event requestConfRefundConf");
    var ret = Meteor.call('confirmationAmountRefund', [], function (ret) {
      if (ret.status == 'AlreadyRequested') {}

      $.fancybox.close();
    });
  },
  "click .noBtn": function (event, template) {
    console.log("Event noBtn");
    $.fancybox.close();
  },
  "click .backBtn": function (event, template) {
    var prevRoute = Session.get('prevRoute'); // Session.set('prevRoute',{
    //   name:"letting",
    //     args:{key:"DUN1"}
    // });

    if (prevRoute) {
      FlowRouter.go(prevRoute.name, prevRoute.args);
      var prevRoute = {
        name: FlowRouter.current().route.name,
        args: {}
      };
      Session.set('prevRoute', prevRoute);
    } else {
      FlowRouter.go("home");
    }
  },
  "click .linkWithGoogleBtn": function (event, template) {
    Meteor.linkWithGoogle({}, function (err) {
      if (err) {
        console.log(err);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        var msg = 'Link with Google failed. ';
        if (err.error) msg += err.error + '. ';
        msg += "Please try again. Contact us if needed.";
        tmp.push(msg);
        Session.set("showErrorDlg", tmp);
        throw new Meteor.Error("Google login failed");
      } else {}
    });
  },
  "click .linkWithTwitterBtn": function (event, template) {
    Meteor.linkWithTwitter({}, function (err) {
      if (err) {
        console.log(err);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        var msg = 'Link with Twitter failed. ';
        if (err.error) msg += err.error + '. ';
        msg += "Please try again. Contact us if needed.";
        tmp.push(msg);
        Session.set("showErrorDlg", tmp);
        throw new Meteor.Error("Twitter login failed");
      } else {}
    });
  },
  "click .linkWithFacebookBtn": function (event, template) {
    Meteor.linkWithFacebook({}, function (err) {
      if (err) {
        console.log(err);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        var msg = 'Link with Facebook failed. ';
        if (err.error) msg += err.error + '. ';
        msg += "Please try again. Contact us if needed.";
        tmp.push(msg);
        Session.set("showErrorDlg", tmp);
        throw new Meteor.Error("Facebook login failed");
      } else {}
    });
  },
  "click .linkWithLinkedInBtn": function (event, template) {
    Meteor.connectWithLinkedIn({}, function (err) {
      if (err) {
        console.log(arguments);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        var msg = 'Link with LinkedIn failed. ';
        if (err.error) msg += err.error + '. ';
        msg += "Please try again. Contact us if needed.";
        tmp.push(msg);
        Session.set("showErrorDlg", tmp);
        throw new Meteor.Error("LinkedIn login failed");
      } else {}
    });
  }
});
Template.userProfile.onRendered(function () {
  var templateInstance = Template.instance();
  Meteor.call('hasPasswordSet', function (err, result) {
    if (!err) {
      templateInstance.hasPasswordSet.set(result);
      templateInstance.hasPasswordSetReqCompleted.set(true);
    }
  }); //////// TODO: Remove below JQuery events after making meteor events working.

  $('.noBtn, .cancel, .close').click(function () {
    console.log("Event noBtn jquery");
    $.fancybox.close();
  });
  $('.requestRedgRefundConf').click(function () {
    console.log("Event requestRedgRefundConf jquery");
    var ret = Meteor.call('registrationAmountRefund', [], function (error, result) {
      if (error) {
        console.log(error.error);
        return;
      }

      if (result.status == 'AlreadyRequested') {}

      $.fancybox.close();
    });
  });
  $('.requestConfRefundConf').click(function () {
    console.log("Event requestConfRefundConf jquery");
    var ele = this;
    hideSaveBtn(ele);
    var ret = Meteor.call('confirmationAmountRefund', [], function (error, result) {
      if (error) {
        console.log(error.error);
        showSaveBtn(ele);
        return;
      }
    });
  });
  $('.changeMobileConfirmation').click(function () {
    console.log("Event changeMobileConfirmation jquery");
    var ele = this;
    hideSaveBtn(ele);
    var mobile = $('.changeMobileValue').val();
    validatedMobile = LoginFormValidation.mobile(mobile);

    if (validatedMobile !== true) {
      $('.mobileValidationErrors').show().html(validatedMobile.reason);
      showSaveBtn(ele);
      return;
    }

    Meteor.call('updateMobile', mobile, function (error, result) {
      if (error) {
        console.log(error.error);
        showSaveBtn(ele);
        return;
      }

      $('.mobileValidationErrors').hide(); // Session.set('showMobileVerification',true)
    });
  });
  $('.changeEmployerNameConfirmation').click(function () {// console.log("Event changeEmployerNameConfirmation jquery");
    // var ele = this;
    // hideSaveBtn(ele)
    // Meteor.call('updateEmployerName',[$('.changeEmployerNameValue').val()],function(error, result){
    //
    //   if(error){
    //     console.log(error.error);
    //     showSaveBtn(ele)
    //     return;
    //   }
    //   if(result.status=='Success'){
    //
    //   }
    // });
  });
  $('.mobileValidationErrors').hide();
  $('.eyebtn').click(function () {
    if ($(".show-pwd").hasClass("shown")) {
      $(".show-pwd").attr("type", "password");
      $(".show-pwd").removeClass("shown");
    } else {
      $(".show-pwd").attr("type", "text");
      $(".show-pwd").addClass("shown");
    }
  });
  $(document).ready(function () {
    //$('.change-click').click(function(){
    //
    //  });
    $('.cancel-clk').click(function () {
      hideSaveBtn(this);
      $('.mobileValidationErrors').hide();
    });
    $('.change-click').click(function () {
      showSaveBtn(this);
    }); //$('.request-clk').click(function(){
    //  $('.hideen-div').fadeOut();
    //});

    $('.sendEmailVerification').click(function () {
      console.log('event sendEmailVerification');
      $('.sendEmailVerification').text('Verification mail sent');
      setTimeout(function () {
        $('.sendEmailVerification').text('Send verification link');
      }, 10000);
    });
  });
});
Template.fileUploadDlgTemplate.onCreated(function () {
  this.sesCate = new ReactiveVar(false);
  this.p1 = new ReactiveVar(false);
  this.p2 = new ReactiveVar(false);
  var ses = Session.get('showFileDlg');

  if (ses) {
    this.sesCate.set(ses.cate);

    if (ses.cate) {
      var p1 = '';
      var p2 = '';

      switch (ses.cate) {
        case "Resume":
          p1 = "hasResume";
          p2 = "resume";
          break;

        case "Work Reference":
          p1 = "hasWorkRef";
          p2 = "workRef";
          break;

        case "Landlord Reference":
          p1 = "hasLandlordRef";
          p2 = "landlordRef";
          break;

        case "Financial Reference":
          p1 = "hasFinancialRef";
          p2 = "financialRef";
          break;

        case "Government ID":
          p1 = "hasGovtID";
          p2 = "govtID";
          break;

        case "Passport":
          p1 = "hasPassport";
          p2 = "passport";
          break;

        case "PPS":
          p1 = "hasPPS";
          p2 = "PPS";
          break;
      } // p1 = "profile.references."+p1
      // p2 = "profile.references." + p2


      this.p1.set(p1);
      this.p2.set(p2);
    }
  }

  this.step = new ReactiveVar(1);
  this.sFileName = new ReactiveVar(false);
  this.uploading = new ReactiveVar(false);
  this.fileObj = new ReactiveVar({});
  this.fileObjPrevious = new ReactiveVar(false);
});
Template.fileUploadDlgTemplate.helpers({
  dlgTitle: function () {
    var title = '';
    var p1 = Template.instance().p1.get();
    var p2 = Template.instance().p2.get();
    var uploading = Template.instance().uploading.get();
    var user = Meteor.user();
    if (user.profile.references[p1]) var existingFile = true;

    if (existingFile) {
      title = 'Update ';
      if (!Template.instance().fileObjPrevious.get()) // only if its not yet set . Else other function will set it.
        Template.instance().fileObjPrevious.set(user.profile.references[p2]);
      console.log('fileObjPrevious');
      console.log(Template.instance().fileObjPrevious.get());
    } else if (uploading) title = 'Uploading ';else title = 'Upload ';

    var sesCate = Template.instance().sesCate.get();
    if (sesCate) title += sesCate;else title += 'References';
    return title;
  },
  existingFile: function () {
    var p2 = Template.instance().p2.get();
    var user = Meteor.user();
    if (user.profile.references[p2]) return user.profile.references[p2];
    return false;
  },
  isStep: function (step) {
    if (step == Template.instance().step.get()) return true;else return false;
  },
  isNotStep: function (step) {
    if (step != Template.instance().step.get()) return true;else return false;
  },
  uploading: function () {
    return Template.instance().uploading.get();
  },
  validFileExtensions: function () {
    return _validFileExtensions;
  }
});
Template.fileUploadDlgTemplate.events({
  'click .showCamera': function (event, template) {
    event.preventDefault();
    template.$('#cropImage').cropper("destroy");
    template.$('#cropImage').attr("src", '').hide();
    template.$('#finalImage').attr("src", '').hide();
    $('.step2, #uploadImagePreviewArea').show();
    $('.step3').hide();
    var cameraOptions = {
      width: 800,
      height: 600
    };
    MeteorCamera.getPicture(cameraOptions, function (error, data) {
      if (!error) {
        template.$('#cropImage').attr('src', data);
        template.step.set(2);
        $('.step2').show();
        $('.step3').hide();
        template.sFileName.set('cameraPhoto.jpg'); //Now start the crop

        if (data) {
          $('.step1').hide();
          template.$("#cropImage").cropper({
            aspectRatio: 4 / 3
          });
        }
      }
    });
  },
  'click .getCroppedImage': function (event, template) {
    template.step.set(3);
    $('.step2').hide();
    $('.step3').show(); //Ratio 4:3 => 700 * 525

    var finalImgData = template.$('#cropImage').cropper("getCroppedCanvas", {
      width: 700,
      height: 525
    }).toDataURL();
    template.$('#finalImage').attr('src', finalImgData).show();
    var head = 'data:image/png;base64,';
    var imgFileSize = Math.round((finalImgData.length - head.length) * 3 / 4);
    var sizeKB = imgFileSize / 1000;
    var sizeMB = imgFileSize / 1000000;
    console.log("imgFileSize", imgFileSize, "size", sizeMB, "MB", "-----", sizeKB, "KB");
    var mimeType = 'image/jpeg';
    var imgQuality = 1;
    if (sizeKB > 200) var imgQuality = 0.9;
    if (sizeKB > 300) var imgQuality = 0.8;
    if (sizeKB > 400) var imgQuality = 0.7;
    var cate = template.sesCate.get();
    var sFileName = template.sFileName.get();
    if (!sFileName) sFileName = 'cameraPhoto.jpg'; // const inst = Template.instance();

    var finalImgData = template.$('#cropImage').cropper("getCroppedCanvas", {
      width: 700,
      height: 525
    }).toBlob(function (blob) {
      template.uploading.set(true);
      template.fileObj.set({}); //Reset old status as this might be 2nd upload.

      var ret = S3.upload({
        file: new File([blob], sFileName),
        path: "profileFiles"
      }, function (e, r) {
        if (e) {
          $('.step1').show();
          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          tmp.push("Upload failed. Please check your internet connectivity and try again. Contact us if needed.");

          try {
            if (e.error) tmp.push(e.error);
          } catch (cat) {}

          Session.set("showErrorDlg", tmp);
          throw new Meteor.Error('Upload failed ', e);
          template.uploading.set(false);
          return;
        }

        console.log(r);
        template.fileObj.set(r);
        var tmp = {
          name: r.file.original_name,
          relative_url: r.relative_url,
          url: r.secure_url
        };
        console.log(tmp);
        var fileObjPrevious = template.fileObjPrevious.get(); //move here due to bug

        Meteor.call('updateReferenceFile', [cate, tmp], function (err, res) {
          template.uploading.set(false); //Make it false even if it failed. Users should know that its not uploading anymore.

          $('.step2').hide();
          $('.step1').show();
          $('.step3').show(); //Because its an image from cropped area

          if (err) {
            console.log(err);
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            tmp.push("Upload failed. Please check your internet connectivity and try again. Contact us if needed.");

            try {
              if (err.error) tmp.push(err.error);
            } catch (cat) {}

            Session.set("showErrorDlg", tmp); //If updating in DB failed. Then delete in Amazon as well.

            var fileObj = template.fileObj.get();
            S3.delete(fileObj.relative_url, function (error, result) {});
          } else {
            //If upload is success, then delete the old file and re-set it.
            // debugger;
            // var fileObjPrevious = template.fileObjPrevious.get()//Don' get it here, as parallely another code is changing this val->lead to bug
            if (fileObjPrevious) {
              //only if it exists.
              S3.delete(fileObjPrevious.relative_url, function (error, result) {});
              template.fileObjPrevious.set(template.fileObj.get());
            }
          }
        });
      });
    }, mimeType, imgQuality);
  },
  'click .zoomInBtn': function (event, template) {
    template.$('#cropImage').cropper("zoom", 0.1);
  },
  'click .zoomOutBtn': function (event, template) {
    template.$('#cropImage').cropper("zoom", -0.1);
  },
  'click .rotateLeftBtn': function (event, template) {
    template.$('#cropImage').cropper("rotate", -90);
  },
  'click .rotateRightBtn': function (event, template) {
    template.$('#cropImage').cropper("rotate", 90);
  },
  'click .resetBtn': function (event, template) {
    template.$('#cropImage').cropper("reset");
  },
  'click .goToStep1': function (event, template) {
    $('.step1').show();
    template.$('#cropImage').cropper("destroy");
    template.$('#cropImage').attr("src", '').hide();
    template.$('#finalImage').attr("src", '').hide();
    $('.step2').hide();
    $('.step3').hide();
  },
  'click .closeDlg': function (event, template) {
    var ses = {
      show: false,
      cate: ""
    };
    Session.set('showFileDlg', ses); // Has the overall info and basic required info.

    Session.set('showFileTemplate', false);
  },
  'change .uploadBtn': function (event, template) {
    var files = event.target.files;
    if (!files) return;
    if (files.length == 0) return;
    Template.instance().step.set(2);
    $('.step2, #uploadImagePreviewArea').show();
    template.$('#cropImage').cropper("destroy");
    template.$('#cropImage').attr("src", '').hide();
    template.$('#finalImage').attr("src", '').hide();
    $('.step3').hide();

    if (!filevalidation(files)) {
      var tmp = Session.get("showErrorDlg");
      if (!tmp) tmp = [];
      var msg = 'Upload rejected. Please upload only document or image files. Allowed extensions are ' + _validFileExtensions.join(', ') + '.';
      tmp.push(msg);
      Session.set("showErrorDlg", tmp);
      throw new Meteor.Error("Upload rejected. ");
      return;
    }

    var cate = template.sesCate.get();
    Template.instance().uploading.set(true); // const inst = Template.instance();

    template.fileObj.set({}); //Reset old status as this might be 2nd upload.

    if (files.length == 1) {
      var target = event.target;
      var sFileName = files[0].name;
      template.sFileName.set(sFileName); // $("#uploadImagePreviewArea").html("");

      var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.jpg|.jpeg|.gif|.png|.bmp)$/;

      if (regex.test($(target).val().toLowerCase())) {
        if (isIE() && isIE() <= 9) {
          $("#uploadImagePreviewArea").show();
          $("#uploadImagePreviewArea")[0].filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src = $(target).val();
        } else {
          if (typeof FileReader != "undefined") {
            template.uploading.set(false);
            $("#uploadImagePreviewArea, #cropImage").show(); // $("#uploadImagePreviewArea").append('<img class="img-responsive" id="cropImage"/>');

            var reader = new FileReader();

            reader.onload = function (e) {
              $("#cropImage").attr("src", e.target.result); //File name is set few lines above this
              //Now start the crop

              var imgData = $("#cropImage").attr('src');

              if (imgData) {
                $('.step1').hide();
                template.$("#cropImage").cropper({
                  aspectRatio: 4 / 3
                });
              }
            };

            reader.readAsDataURL($(target)[0].files[0]);
            return; //If previewer is available then let the cropper handle the upload.
          } else {
            console.log("This browser does not support FileReader.");
          }
        }
      } else {
        console.log("File upload: Not an image file to show preview.");
      }
    } // console.log('Not an image, so proceeding with traditional upload')


    var ret = S3.upload({
      files: files,
      path: "profileFiles"
    }, function (e, r) {
      if (e) {
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Upload failed. Please check your internet connectivity and try again. Contact us if needed.");

        try {
          if (e.error) tmp.push(e.error);
        } catch (cat) {}

        Session.set("showErrorDlg", tmp);
        throw new Meteor.Error('Upload failed ', e);
        template.uploading.set(false);
        return;
      }

      console.log(r);
      template.fileObj.set(r);
      var tmp = {
        name: r.file.original_name,
        relative_url: r.relative_url,
        url: r.secure_url
      };
      console.log(tmp);
      var fileObjPrevious = template.fileObjPrevious.get(); //move here due to bug

      Meteor.call('updateReferenceFile', [cate, tmp], function (err, res) {
        template.uploading.set(false); //Make it false even if it failed. Users should know that its not uploading anymore.

        $('.step2').hide();
        $('.step3').hide(); //Because its not an image.

        if (err) {
          console.log(err);
          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          tmp.push("Upload failed. Please check your internet connectivity and try again. Contact us if needed.");

          try {
            if (err.error) tmp.push(err.error);
          } catch (cat) {}

          Session.set("showErrorDlg", tmp); //If updating in DB failed. Then delete in Amazon as well.

          var fileObj = template.fileObj.get();
          S3.delete(fileObj.relative_url, function (error, result) {});
        } else {
          //If upload is success, then delete the old file and re-set it.
          // debugger;
          // var fileObjPrevious = template.fileObjPrevious.get()//Don' get it here, as parallely another code is changing this val->lead to bug
          if (fileObjPrevious) {
            //only if it exists.
            S3.delete(fileObjPrevious.relative_url, function (error, result) {});
            template.fileObjPrevious.set(template.fileObj.get());
          }
        }
      });
    }); // for (var i = 0, ln = files.length; i < ln; i++) {
    //     propertyImagesCollection.insert(files[i], function (err, fileObj) {
    //         // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP
    //         console.log(fileObj);
    //         var cursor = propertyImagesCollection.find(fileObj._id);
    //
    //         var liveQuery = cursor.observe({
    //             changed: function(newImage, oldImage) {
    //
    //                 console.log("Inside live query ");
    //                 console.log(newImage);
    //                 if (newImage.isUploaded()) {
    //                     liveQuery.stop();
    //
    //                     // Call your onUploaded callback here...
    //                 }
    //             }
    //         });
    //     });
    // }
  }
});
Template.fileUploadDlgTemplate.onRendered(function () {
  $("#uploadImagePreviewArea, #cropImage, #finalImage").hide();
  $('#cropImage, #finalImage').attr('src', '');
});
Template.fileUploadArea.onCreated(function () {
  this.uploading = new ReactiveVar(false); // this.fileObj = new ReactiveVar( {} );
});
Template.fileUploadArea.helpers({
  uploading: function (isMyBidsPage) {
    return Template.instance().uploading.get();
  },
  validFileExtensions: function () {
    return _validFileExtensions;
  }
});
Template.fileUploadArea.events({
  'click .showUploadDlg': function (event, template) {
    var ses = {
      show: true,
      cate: this.title
    };
    Session.set('showFileDlg', ses);
    return false;
  } // 'change .uploadBtn': function(event, template) {
  //     var files = event.target.files;
  //
  //     if(!filevalidation(files)){
  //         var tmp =  Session.get("showErrorDlg");if(!tmp)tmp=[];
  //         var msg = 'Upload rejected. Please upload only document or image files. Allowed extensions are '+_validFileExtensions.join(', ')+'.';
  //         tmp.push(msg);
  //         Session.set("showErrorDlg",tmp)
  //
  //         throw new Meteor.Error("Upload rejected. ");
  //         return;
  //     }
  //
  //     const cate = event.target.getAttribute('cate');
  //     Template.instance().uploading.set(true);
  //     const inst = Template.instance();
  //     inst.fileObj.set({});//Reset old status as this might be 2nd upload.
  //     var ret = S3.upload({
  //         files:files,
  //         path:"profileFiles"
  //     },function(e,r){
  //         if(e){
  //             var tmp =  Session.get("showErrorDlg");if(!tmp)tmp=[];
  //             tmp.push("Upload failed. Please check your internet connectivity and try again. Contact us if needed.");
  //             try{if(e.error)tmp.push(e.error);}catch (cat){}
  //             Session.set("showErrorDlg",tmp)
  //             throw new Meteor.Error('Upload failed ', e);return;
  //         }
  //         console.log(r);
  //
  //         inst.fileObj.set(r);
  //
  //         var tmp = {
  //             name: r.file.original_name,
  //             relative_url: r.relative_url,
  //             url: r.secure_url
  //         }
  //
  //         console.log(tmp);
  //         Meteor.call('updateReferenceFile', [cate, tmp], (err, res) => {
  //             inst.uploading.set(false);//Make it false even if it failed. Users should know that its not uploading anymore.
  //             if (err) {
  //                 console.log(err);
  //
  //                 var tmp =  Session.get("showErrorDlg");if(!tmp)tmp=[];
  //                 tmp.push("Upload failed. Please check your internet connectivity and try again. Contact us if needed.");
  //                 try{if(err.error)tmp.push(err.error);}catch (cat){}
  //                 Session.set("showErrorDlg",tmp)
  //
  //                 //If updating in DB failed. Then delete in Amazon as well.
  //                 var fileObj = inst.fileObj.get();
  //                 S3.delete(fileObj.relative_url,function(error, result){})
  //             } else {
  //
  //             }
  //
  //         });
  //
  //
  //     });
  //     // for (var i = 0, ln = files.length; i < ln; i++) {
  //     //     propertyImagesCollection.insert(files[i], function (err, fileObj) {
  //     //         // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP
  //     //         console.log(fileObj);
  //     //         var cursor = propertyImagesCollection.find(fileObj._id);
  //     //
  //     //         var liveQuery = cursor.observe({
  //     //             changed: function(newImage, oldImage) {
  //     //
  //     //                 console.log("Inside live query ");
  //     //                 console.log(newImage);
  //     //                 if (newImage.isUploaded()) {
  //     //                     liveQuery.stop();
  //     //
  //     //                     // Call your onUploaded callback here...
  //     //                 }
  //     //             }
  //     //         });
  //     //     });
  //     // }
  // },

});

function showSaveBtn(ele) {
  $(ele).parents('div.inp-hold').find('.overlay-text').fadeOut();
  $(ele).fadeOut();
  $(ele).parent('div.inp-hold').find('.save-btn').addClass('show-save');
  $(ele).parent('div.inp-hold').find('div.cancel-div').css('display', 'block');
  $(ele).parent('div.inp-hold').find('input').focus();
}

function hideSaveBtn(ele) {
  $(ele).parents('div.inp-hold').find('.save-btn').removeClass('show-save');
  $(ele).parents('div.inp-hold').find('div.cancel-div').css('display', 'none');
  $(ele).parents('div.inp-hold').find('.change-click').fadeIn();
  $(ele).parents('div.inp-hold').find('.overlay-text').fadeIn();
}

Template.loginFormSetPassword.onCreated(function () {
  var template = Template.instance();
  template.formMessages = new ReactiveVar({});
  template.isLoading = new ReactiveVar(false);
});
Template.loginFormSetPassword.helpers(LoginFormSharedHelpers);
Template.loginFormSetPassword.events({
  /**
   * Submit form for password update
   * @param  {Event} event - jQuery Event
   * @param  {Template} template - Blaze Template
   * @return {void}
   */
  "submit form": function (event, template) {
    event.preventDefault();
    event.stopPropagation();
    template.$("button[type=submit]").attr("disabled", true);
    var password1Input = template.$(".login-input--password1");
    var password2Input = template.$(".login-input--password2");
    var password1 = password1Input.val().trim();
    var password2 = password2Input.val().trim();
    var templateInstance = Template.instance();
    var errors = [];

    if (password1 != password2) {
      errors.push({
        error: "INVALID_PASSWORD",
        reason: "Passwords doesn't match"
      }); // errors.password2 = [
      //     {
      //         error: "INVALID_PASSWORD",
      //         reason: "Passwords doesn't match"
      //     }
      // ]
      // templateInstance.$("button[type=submit]").attr("disabled",false);//We need it here because line 560 errors.password2 = validatedPassword2; will over write this message if we don't return here. Also array merge isn't an option as our UI is not ready to show multiple messages. It can only take 1 error at a time.
      // templateInstance.formMessages.set({
      //     errors: errors
      // });
      // return;
    } // We only check if it exists, just in case we"ve change the password strength and want the
    // user to have an opportunity to update to a stronger password
    // let validatedPassword1 = LoginFormValidation.password(password1);//Not needed as we are doing equal check


    var validatedPassword2 = LoginFormValidation.password(password2, {
      validationLevel: "length"
    });
    templateInstance.formMessages.set({});
    templateInstance.isLoading.set(true); // if (validatedPassword1 !== true) {
    //     errors.push(validatedPassword1);
    // }

    if (validatedPassword2 !== true) {
      errors.push(validatedPassword2);
    }

    if (errors.length) {
      templateInstance.$("button[type=submit]").attr("disabled", false);
      templateInstance.formMessages.set({
        errors: errors
      }); // prevent signup

      templateInstance.isLoading.set(false);
      return;
    }

    Meteor.call('setUserPwd', [Meteor.userId(), password2], function (error, result) {
      // templateInstance.isLoading.set(false);
      if (error) {
        templateInstance.$("button[type=submit]").attr("disabled", false); // Show some error message

        templateInstance.formMessages.set({
          errors: [error]
        });
      } else {
        Session.set('localHasPasswordSet', true);
        templateInstance.$(".login-input--password1, .login-input--password2").val('');
        $('#setpass-dlg .changePwdAlertMsgs p, #setpass-dlg .help-block p').html(''); // // Close dropdown or navigate to page

        templateInstance.formMessages.set({
          info: [{
            reason: 'Password successfully set'
          }]
        });
        if ($) if ($.fancybox) {
          $.fancybox.close();
          templateInstance.formMessages.set({});
        }
      }
    });
  }
});
Template.loginFormChangePassword.onCreated(function () {
  var template = Template.instance();
  template.formMessages = new ReactiveVar({});
  template.isLoading = new ReactiveVar(false);
});
Template.loginFormChangePassword.helpers(LoginFormSharedHelpers);
Template.loginFormChangePassword.events({
  /**
   * Submit form for password update
   * @param  {Event} event - jQuery Event
   * @param  {Template} template - Blaze Template
   * @return {void}
   */
  "submit form": function (event, template) {
    event.preventDefault();
    event.stopPropagation();
    template.$("button[type=submit]").attr("disabled", true);
    var oldPasswordInput = template.$(".login-input--oldPassword");
    var passwordInput = template.$(".login-input--password");
    var oldPassword = oldPasswordInput.val().trim();
    var password = passwordInput.val().trim(); // We only check if it exists, just incase we"ve change the password strength and want the
    // user to have an oppurtinity to update to a stronger password

    var validatedOldPassword = LoginFormValidation.password(oldPassword, {
      validationLevel: "exists"
    });
    var validatedPassword = LoginFormValidation.password(password, {
      validationLevel: "length"
    });
    var templateInstance = Template.instance();
    templateInstance.isLoading.set(true);
    var errors = [];
    templateInstance.formMessages.set({});
    templateInstance.isLoading.set(true);

    if (oldPassword == password) {
      errors.push({
        error: "INVALID_PASSWORD",
        reason: "New password cannot be same as old password."
      }); // errors.password2 = [
      //     {
      //         error: "INVALID_PASSWORD",
      //         reason: "Passwords doesn't match"
      //     }
      // ]
      // templateInstance.$("button[type=submit]").attr("disabled",false);//We need it here because line 560 errors.password2 = validatedPassword2; will over write this message if we don't return here. Also array merge isn't an option as our UI is not ready to show multiple messages. It can only take 1 error at a time.
      // templateInstance.formMessages.set({
      //     errors: errors
      // });
      // return;
    }

    if (validatedOldPassword !== true) {
      errors.push(validatedOldPassword);
    }

    if (validatedPassword !== true) {
      errors.push(validatedPassword);
    }

    if (errors.length) {
      templateInstance.$("button[type=submit]").attr("disabled", false);
      templateInstance.formMessages.set({
        errors: errors
      }); // prevent signup

      templateInstance.isLoading.set(false);
      return;
    }

    Accounts.changePassword(oldPassword, password, function (error) {
      //console.log('Here in callback');
      //templateInstance.$("button[type=submit]").attr("disabled",false);
      templateInstance.isLoading.set(false);

      if (error) {
        templateInstance.$("button[type=submit]").attr("disabled", false); // Show some error message

        templateInstance.formMessages.set({
          errors: [error]
        });
      } else {
        templateInstance.$(".login-input--oldPassword, .login-input--password").val('');
        $('#changepass-dlg .changePwdAlertMsgs p, #changepass-dlg .help-block p').html(''); //$('.login-input--password, .login-input--oldPassword').val('');
        // // Close dropdown or navigate to page

        templateInstance.formMessages.set({
          info: [{
            reason: 'Password successfully changed'
          }]
        });
        if ($) if ($.fancybox) {
          $.fancybox.close();
          templateInstance.formMessages.set({});
        }
      }
    });
  }
});

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function isIE() {
  var myNav = navigator.userAgent.toLowerCase();
  return myNav.indexOf('msie') != -1 ? parseInt(myNav.split('msie')[1]) : false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"propertyApplications.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/propertyApplications.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./pagination.html");
module.link("./propertyApplications.html");
var SimpleSchema;
module.link("simpl-schema", {
  "default": function (v) {
    SimpleSchema = v;
  }
}, 0);

// SimpleSchema.extendOptions(['autoform']);
// window.deactivateInProgress = '';
function setFilters() {
  var userFilters = Session.get('userFilters');

  try {
    if (userFilters.check) {
      for (var k = 0; k < userFilters.check.length; k++) {
        if (userFilters.check[k].val == 'all') continue;
        if (userFilters.check[k].val == 'clearall') continue;

        if (userFilters.check[k].enabled) {
          $(".dropdown-menu input[value='" + userFilters.check[k].val + "']").prop('checked', true);
        }

        dropdownCheckbox();
      }
    }

    if (userFilters.s1) {
      var offerRangeVal = document.getElementById('offerRangeInput');
      offerRangeVal.noUiSlider.set(userFilters.s1.range);
    }
  } catch (e) {}

  dropdownCheckbox();
}

function applyFilters() {
  // console.log('event applyFilters jquery')
  var slider = document.getElementById('offerRangeInput');
  var offerRangeVal = slider.noUiSlider.get();
  var userFilters = Session.get('userFilters');
  userFilters.s1.range = offerRangeVal;
  Session.set('userFilters', userFilters);
}

function applyFilterValues() {
  // console.log('event applyFiltersValues jquery')
  var slider = document.getElementById('offerRangeInput');
  var offerRangeVal = slider.noUiSlider.get();
  $('.filterS1l').html(numDifferentiation(offerRangeVal[0]));
  $('.filterS1h').html(numDifferentiation(offerRangeVal[1])); // var userFilters = Session.get('userFilters');
  // userFilters.s1.range = offerRangeVal;
  // Session.set('userFilters',userFilters);
  // $('.filterS2l').html(numDifferentiation(priceRange[0] ))
  // $('.filterS2h').html(numDifferentiation(priceRange[1] ))
}

function numDifferentiation(val) {
  if (isNaN(val)) return 0;
  val = parseInt(val);
  if (val >= 1000000000) val = (val / 1000000000).toFixed(0) + ' Billion';else if (val >= 1000000) val = (val / 1000000).toFixed(0) + ' Million';else if (val >= 1000) val = val.toFixed(0);else val = val.toFixed(0);
  return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function startUISlider(data) {
  var slider = document.getElementById('offerRangeInput');
  noUiSlider.create(slider, {
    start: data.s1.start,
    connect: true,
    step: 1,
    range: {
      'min': data.s1.range[0],
      'max': data.s1.range[1]
    },
    format: wNumb({
      decimals: 0
    })
  });
  slider.noUiSlider.on('update', function () {
    applyFilterValues();
  });
  slider.noUiSlider.on('change', function () {
    applyFilters();
  });
  setTimeout(function () {
    setFilters();
  }, 400);
}

function startFilters() {
  try {
    var gDefaultFilters = Session.get('gDefaultFilters');
    var propertyData = Session.get('propertyData');

    if (propertyData.auctionId) {
      var auction = Collections.Auctions.findOne(propertyData.auctionId);
      var min = auction.price * 0.7;
      var max = auction.price * 1.5;
      gDefaultFilters.s1 = {
        "start": [min, max],
        "range": [min, max]
      };
      startUISlider({
        "s1": gDefaultFilters.s1
      });
      $('.filterS1l').html(numDifferentiation(min));
      $('.filterS1h').html(numDifferentiation(max));
    }

    var userFilters = Session.get('userFilters');
    var fetchPrevFilters = true;
    var userFiltersAuctionId = Session.get('userFiltersAuctionId');
    if (!userFiltersAuctionId) fetchPrevFilters = false;
    if (userFiltersAuctionId != propertyData.auctionId) fetchPrevFilters = false;
    if (!userFilters) fetchPrevFilters = false;
    if (fetchPrevFilters) Session.set('userFilters', userFilters);else Session.set('userFilters', gDefaultFilters);
    Session.set('userFiltersAuctionId', propertyData.auctionId);
    dropdownCheckbox();
    setTimeout(function () {
      dropdownCheckbox();
    }, 100);
    setTimeout(function () {
      dropdownCheckbox();
    }, 1000);
  } catch (e) {
    // console.log('Catch of startFilters')
    console.log(e);
  }
}

function getPaginationData2D(totalResultsCount, resultsPerPage, dimensionNumber) {
  // Page numbers are 2 dimensional, making it store page numbers of 2 pagination elements on the page.
  //dimensionNumber tells you on which dimension is this method working on ; should start with 0, 1, 2 like an array numbers.
  var currentPageNo = FlowRouter.current().params.pageno;
  var originalPgSplit = null,
      validOriginalPgSplit = false;

  if (currentPageNo) {
    originalPgSplit = currentPageNo.toString().split('-');

    if (originalPgSplit.length == 2) {
      if (!isNaN(originalPgSplit[dimensionNumber])) {
        currentPageNo = parseInt(originalPgSplit[dimensionNumber]);
        validOriginalPgSplit = true;
      }
    }
  }

  if (!validOriginalPgSplit) {
    //invalid originalPgSplit; reset it
    originalPgSplit = [1, 1];
  }

  if (!currentPageNo) {
    currentPageNo = 1;
  }

  var pages = [],
      prevPage = {},
      nextPage = {};
  var pgMin = currentPageNo - 4,
      pgMax = currentPageNo + 5,
      maxPages = Math.ceil(totalResultsCount / resultsPerPage);
  if (pgMin < 1) pgMin = 1;
  if (pgMax < 1) pgMax = 1;
  if (maxPages < 1) maxPages = 1;
  if (pgMin > maxPages) currentPageNo = maxPages;
  var tmp = {};
  var href = '';
  var cRoute = FlowRouter.current();

  for (var i = pgMin; i <= maxPages; i++) {
    cRoute.params['pageno'] = dimensionNumber == 0 ? i + '-' + originalPgSplit[1] : originalPgSplit[0] + '-' + i;
    href = FlowRouter.url(cRoute.route.name, cRoute.params, cRoute.queryParams);
    tmp = {
      "href": href,
      "text": i
    };

    if (i == currentPageNo) {
      tmp['href'] = 'javascript:void(0);';
      tmp['current'] = true;
    }

    pages.push(tmp);
  }

  var prevPageNo = currentPageNo - 1,
      nextPageNo = currentPageNo + 1;

  if (prevPageNo < 1) {
    prevPage['href'] = 'javascript:void(0)';
    prevPage['text'] = 'Previous';
    prevPage['disabled'] = 'disabled';
  } else {
    cRoute.params['pageno'] = dimensionNumber == 0 ? prevPageNo + '-' + originalPgSplit[1] : originalPgSplit[0] + '-' + prevPageNo;
    prevPage['href'] = FlowRouter.url(cRoute.route.name, cRoute.params, cRoute.queryParams);
    prevPage['text'] = 'Previous';
  }

  if (nextPageNo > maxPages) nextPageNo = maxPages;

  if (nextPageNo == currentPageNo) {
    nextPage['href'] = 'javascript:void(0)';
    nextPage['text'] = 'Next';
    nextPage['disabled'] = 'disabled';
  } else {
    cRoute.params['pageno'] = dimensionNumber == 0 ? nextPageNo + '-' + originalPgSplit[1] : originalPgSplit[0] + '-' + nextPageNo;
    nextPage['href'] = FlowRouter.url(cRoute.route.name, cRoute.params, cRoute.queryParams);
    nextPage['text'] = 'Next';
  }

  return {
    "prevPage": prevPage,
    "pages": pages,
    "nextPage": nextPage
  };
}

function numFormat(x) {
  //var x=12345652457.557;
  //console.log(x)
  if (!x) return x;
  x = x.toString();
  var afterPoint = '';
  if (x.indexOf('.') > 0) afterPoint = x.substring(x.indexOf('.'), x.length);
  afterPoint = afterPoint.substr(0, 3);
  x = Math.floor(x);
  x = x.toString();
  var lastThree = x.substring(x.length - 3);
  var otherNumbers = x.substring(0, x.length - 3);
  if (otherNumbers != '') lastThree = ',' + lastThree;
  var res = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
  return res;
}

Template.propertyApplications.onCreated(function () {
  this.deactivateInProgress = new ReactiveVar(false);
  Session.set('propertyData', false);
  var gDefaultFilters = {};
  gDefaultFilters.check = [{
    val: 'empName',
    label: 'Employer name'
  }, {
    val: 'salary',
    label: 'Salary'
  }, {
    val: 'workRef',
    label: 'Work Reference'
  }, {
    val: 'passport',
    label: 'Passport'
  }, {
    val: 'pps',
    label: 'PPS'
  }, {
    val: 'landlordRef',
    label: 'Landlord Reference'
  }, {
    val: 'financialRef',
    label: 'Financial Reference'
  }, {
    val: 'govtID',
    label: 'Govt. ID'
  }, {
    val: 'resume',
    label: 'Resume'
  }];
  gDefaultFilters.s1 = {
    "start": [0, 1000],
    "range": [0, 1000]
  };
  Session.set('gDefaultFilters', gDefaultFilters);
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    var pageno = FlowRouter.getParam('pageno');
    var PAresperpage = 20;
    var EEresperpage = 100;
    instance.subscribe('Config');
    var id = FlowRouter.getParam('id');

    if (id) {
      instance.subscribe("PropertyApplications", {
        viewName: 'PropertyApplications.view',
        pageno: pageno,
        PAresperpage: PAresperpage,
        EEresperpage: EEresperpage,
        id: id
      });
      instance.subscribe("total-PropertyApplications", {
        viewName: 'PropertyApplications.view',
        pageno: pageno,
        PAresperpage: PAresperpage,
        EEresperpage: EEresperpage,
        id: id
      });
      instance.subscribe("total-EmailEnquiries", {
        viewName: 'PropertyApplications.view',
        pageno: pageno,
        PAresperpage: PAresperpage,
        EEresperpage: EEresperpage,
        id: id
      });
    }

    instance.subscribe('userData');

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  }); // var userFilters = Session.get('userFilters');
  // if(!userFilters)Session.set('gDefaultFilters',gDefaultFilters);
});
Template.propertyApplications.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  },
  avgOffer: function () {
    var tmp = Collections.PA_AvgOffer.find().fetch();

    if (tmp.length) {
      var offer = tmp[0]['avgOffer'];
      if (offer < 1) return 0;
      return parseInt(offer);
    } else return false;
  },
  dataFull: function () {
    var propertyData = Session.get('propertyData');

    try {
      var selector = {
        auctionId: propertyData.auctionId,
        isArchived: false
      }; // var totalResultsCount = Collections.Bids.find(selector).count();

      var totalResultsCount = Counts.get("total-PropertyApplications");
      clearMeta();

      try {
        var title = '';
        if (totalResultsCount > 1) title = totalResultsCount + ' applications';else if (totalResultsCount > 1) title = totalResultsCount + ' applications';else title = 'Applications';
        title += ' for ' + propertyData.address.address + ', ' + propertyData.address.area;
        if (propertyData.address.county) title += ', ' + propertyData.address.county;
        DocHead.setTitle(titleCase(title) + ' | SpotMyCrib Admin');
        DocHead.addMeta({
          name: "description",
          content: "View applications for property " + propertyData.type + ", choose a winning tenant, see their social profiles and much more."
        });
      } catch (err) {
        DocHead.setTitle(' Property not found | SpotMyCrib Admin');
        DocHead.addMeta({
          name: "description",
          content: ""
        });
      }

      return {
        totalResultsCount: totalResultsCount
      };
    } catch (err) {}
  },
  dataChosen: function () {
    var propertyData = Session.get('propertyData');

    if (!propertyData) {
      console.log("Empty project data");
      return false;
    }

    try {
      var selector = {
        auctionId: propertyData.auctionId,
        isArchived: false,
        chosen: true
      };
      globlaAuctionId1 = propertyData.auctionId;
      globalAuctionData1 = propertyData.auction;
      var totalChosenCount = Collections.Bids.find(selector).count(); /// don't use the blow code, it doesn't have pagination.
      // var totalChosenCount = Counts.get("total-PropertyApplications");

      var retChosen = Collections.Bids.find(selector, {
        transform: function (doc) {
          doc.auction = Collections.Auctions.findOne({
            _id: doc.auctionId
          }); // if (doc.auctionId != globlaAuctionId1 || !globalAuctionData1._id) {
          //     doc.auction = Collections.Auctions.findOne({
          //         _id: doc.auctionId
          //     });
          // } else {
          //     doc.auction = globalAuctionData1;
          // }
          // doc.user = Meteor.users.findOne({
          //     _id: doc.userId
          // });

          return doc;
        },
        limit: 100,
        //Hardcoded logic for now, may be put a max limit of 100 chosen
        sort: {
          updatedAt: -1
        }
      });
      return {
        resultsChosen: retChosen,
        totalChosenCount: totalChosenCount
      };
    } catch (err) {}
  },
  dataEmailEnquiries: function () {
    var propertyData = Session.get('propertyData');

    if (!propertyData) {
      console.log("Empty project data");
      return false;
    }

    try {
      var selector = {
        propertyId: propertyData._id,
        isArchived: false
      }; /////PAGINATION

      var resultsPerPage = 100;
      var currentPageNo = FlowRouter.current().params.pageno;

      if (currentPageNo) {
        var tmp = currentPageNo.toString().split('-');

        if (tmp.length == 2) {
          if (!isNaN(tmp[1])) currentPageNo = parseInt(tmp[1]);
        }
      }

      if (!currentPageNo) {
        currentPageNo = 1;
      }

      var skip = (currentPageNo - 1) * resultsPerPage; // var totalEnquiryCount = Collections.EmailEnquiries.find(selector).count();

      var totalEnquiryCount = Counts.get("total-EmailEnquiries");
      var retChosen = Collections.EmailEnquiries.find(selector, {
        limit: resultsPerPage,
        sort: {
          updatedAt: -1
        } // skip: skip//not needed as the server would do this.

      });
      var paginationNeeded = totalEnquiryCount / resultsPerPage > 1.0 ? true : false;
      return {
        resultsEnquiries: retChosen,
        totalEnquiryCount: totalEnquiryCount,
        pagination: paginationNeeded ? getPaginationData2D(totalEnquiryCount, resultsPerPage, 1) : false,
        paginationNeede: paginationNeeded
      };
    } catch (err) {}
  },
  dataNonChosen: function () {
    var propertyData = Session.get('propertyData');
    var userFilters = Session.get('userFilters');

    if (!propertyData) {
      console.log("Empty project data");
      return false;
    }

    var selector = {
      auctionId: propertyData.auctionId,
      isArchived: false,
      chosen: false
    };

    if (userFilters) {
      if (userFilters.s1.range) selector.yourBid = {
        $gt: parseInt(userFilters.s1.range[0]),
        $lt: parseInt(userFilters.s1.range[1])
      };
    }

    globlaAuctionId1 = propertyData.auctionId;
    globalAuctionData1 = propertyData.auction; /////PAGINATION

    var resultsPerPage = 20;
    var currentPageNo = FlowRouter.current().params.pageno;

    if (currentPageNo) {
      var tmp = currentPageNo.toString().split('-');

      if (tmp.length == 2) {
        if (!isNaN(tmp[0])) currentPageNo = parseInt(tmp[0]);
      }
    }

    if (!currentPageNo) {
      currentPageNo = 1;
    }

    var skip = (currentPageNo - 1) * resultsPerPage;
    var urlBase = 'account/propertyapplications/' + FlowRouter.current().params.id + '/'; // var totalNonChosenCount = Collections.Bids.find(selector).count();

    var totalNonChosenCount = Counts.get("total-PropertyApplications");
    var resultsNonChosen = Collections.Bids.find(selector, {
      transform: function (doc) {
        doc.userStatic = Meteor.users.findOne({
          _id: doc.userId
        });
        doc.auction = Collections.Auctions.findOne({
          _id: doc.auctionId
        }); // if (doc.auctionId != globlaAuctionId1 || !globalAuctionData1._id) {
        //     doc.auction = Collections.Auctions.findOne({
        //         _id: doc.auctionId
        //     });
        // } else {
        //     doc.auction = globalAuctionData1;
        // }

        return doc;
      },
      limit: resultsPerPage,
      sort: {
        updatedAt: -1
      } // skip: skip//not needed as the server would do this.

    }).fetch();
    if (userFilters) if (userFilters.check) {
      var isItNeeded = true;
      var countActiveFilters = 0;

      for (var k = 0; k < userFilters.check.length; k++) {
        if (userFilters.check[k].val == 'all') continue;
        if (userFilters.check[k].val == 'clearall') continue;
        if (userFilters.check[k].enabled) countActiveFilters++;
      }

      if (!countActiveFilters) isItNeeded = false; //if none sel do nothing.

      if (isItNeeded) {
        var newArr = [];
        var selSatisfiedCount = 0;

        for (var i = 0; i < resultsNonChosen.length; i++) {
          selSatisfiedCount = 0;
          var ele = resultsNonChosen[i];
          var ref = ele.userStatic.profile.references;
          if (!ref) break;

          for (var j = 0; j < userFilters.check.length; j++) {
            if (!userFilters.check[j].enabled) continue; //if not enabled , then don' consider it

            if (userFilters.check[j].val == 'all') continue;
            if (userFilters.check[j].val == 'clearall') continue;

            if (userFilters.check[j].val == 'empName' && ref.employerName) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'salary' && ref.employerTakeHome) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'workRef' && ref.hasWorkRef) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'passport' && ref.hasPassport) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'pps' && ref.hasPPS) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'landlordRef' && ref.hasLandlordRef) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'financialRef' && ref.hasFinancialRef) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'govtID' && ref.hasGovtID) {
              selSatisfiedCount++;
              continue;
            }

            if (userFilters.check[j].val == 'resume' && ref.hasResume) {
              selSatisfiedCount++;
              continue;
            } // if(userFilters.check[j].val == 'empName' && !user.profile.references.employerName){skip=true;break;}
            // if(userFilters.check[j].val == 'salary' && !user.profile.references.employerTakeHome){skip=true;break;}
            // if(userFilters.check[j].val == 'workRef' && !user.profile.references.hasWorkRef){skip=true;break;}
            // if(userFilters.check[j].val == 'passport' && !user.profile.references.hasPassport){skip=true;break;}
            // if(userFilters.check[j].val == 'pps' && !user.profile.references.hasPPS){skip=true;break;}
            // if(userFilters.check[j].val == 'landlordRef' && !user.profile.references.hasLandlordRef){skip=true;break;}
            // if(userFilters.check[j].val == 'financialRef' && !user.profile.references.hasFinancialRef){skip=true;break;}
            // if(userFilters.check[j].val == 'govtID' && !user.profile.references.hasGovtID){skip=true;break;}
            // if(userFilters.check[j].val == 'resume' && !user.profile.references.hasResume){skip=true;break;}

          }

          if (selSatisfiedCount == countActiveFilters) newArr.push(ele); // if (!skip)
        }

        resultsNonChosen = newArr;
      }
    }
    var paginationNeeded = totalNonChosenCount / resultsPerPage > 1.0 ? true : false;
    return {
      resultsNonChosen: resultsNonChosen,
      totalNonChosenCount: totalNonChosenCount,
      pagination: paginationNeeded ? getPaginationData2D(totalNonChosenCount, resultsPerPage, 0) : false,
      paginationNeeded: paginationNeeded
    };
  },
  showFilters: function () {
    // return true;
    var propertyData = Session.get('propertyData');

    try {
      var selector = {
        auctionId: propertyData.auctionId,
        isArchived: false
      }; // var totalResultsCount = Collections.Bids.find(selector).count();

      var totalResultsCount = Counts.get("total-PropertyApplications");
      if (totalResultsCount > 5) return true;
    } catch (e) {}

    return false;
  },
  initFilters: function () {
    setTimeout(startFilters, 500);
  },
  propertyData: function () {
    var ret = getpropertyData(); //Now check if he has auctionId passed in query & prop has no auction ID. if yes, update your session

    try {
      if (FlowRouter.current().params.query.auctionId && !ret.auctionId) ret.auctionId = FlowRouter.current().params.query.auctionId;
    } catch (e) {}

    if (!ret.auctionId) {
      var prevRoute = Session.get('prevRoute');

      if (prevRoute) {
        FlowRouter.go(prevRoute.name, prevRoute.args);
        Session.set('prevRoute', false);
      } else {
        FlowRouter.go("/account/myproperies/", {
          pageno: 1
        });
      }
    }

    Session.set('propertyData', ret);
    return ret;
  },
  // time: function(){
  //
  //     var propertyData = Session.get('propertyData');
  //     var timestamp = TimeSync.serverTime(null, 30000);
  //     if(!propertyData.auction.endDate || !timestamp)return;
  //
  //
  //     var dend = Date.parse(propertyData.auction.endDate);
  //     var timeDiff = dend - timestamp ;
  //     if(timeDiff<0)return false;
  //
  //     var day = Math.floor(timeDiff / (1000 * 3600 * 24))
  //     var hour = Math.floor(timeDiff / (1000 * 3600 ))
  //     var min = Math.floor(timeDiff / (1000 * 60 ) )
  //     hour = hour - (day * 24);
  //     min = min - (day * 24* 60) - (hour * 60);
  //     return {"day":day,"hour":hour,"min":min}
  // },
  isAuctionClosed: function () {
    // var timestamp = TimeSync.serverTime(null, 30000);
    var timestamp = new Date();
    var propertyData = Session.get('propertyData');
    var dend = Date.parse(propertyData.auction.endDate);
    var timeDiff = dend - timestamp;

    if (timeDiff < 0) {
      return true;
    }

    return false;
  },
  assistanceAlreadyRequested: function () {
    //Just to make this reactive
    var user = Meteor.user();
    if (user) if (user.profile) if (user.profile.assistanceRequested) {
      return user.profile.assistanceRequested || Session.get('assistanceRequested');
    }
    return Session.get('assistanceRequested');
  },
  deactivateInProgress: function () {
    deactivateInProgress = Template.instance().deactivateInProgress;
    return Template.instance().deactivateInProgress.get();
  },
  userFilters: function () {
    return Session.get('userFilters');
  }
});
Template.propertyApplications.onRendered(function () {
  try {
    jQuery("html,body").animate({
      scrollTop: 0
    }, 250);
  } catch (e) {
    document.body.scrollTop = document.documentElement.scrollTop = 0;
  }
});
Template.propertyApplications.events({
  "click .showEditPropertyForm": function (event, template) {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        id: FlowRouter.current().params.id,
        pageno: FlowRouter.current().params.pageno
      },
      scrollTo: 'body'
    };
    Session.set('prevRoute', prevRoute);
    var propertyData = Session.get('propertyData');
    FlowRouter.go('account/editproperty', {
      id: propertyData._id
    });
  },
  "click .deactivatePropertyBtn": function (event, template) {
    event.preventDefault();
    var propertyData = Session.get('propertyData');

    if (!propertyData) {
      console.log("Empty project data");
      return false;
    }

    var user = Meteor.user();

    if (!user) {
      console.log("Invalid user");
      return;
    }

    if (propertyData.createdByAgent != user._id) {
      console.log("Invalid user");
      return;
    }

    $.fancybox({
      'padding': 0,
      'href': '#conf-dactivate-pop',
      afterShow: function (template) {
        attachEvents();
      },
      afterClose: function (template) {
        console.log(template);
      }
    });
  },
  "click .backBtn": function (event, template) {
    var prevRoute = Session.get('prevRoute');

    if (prevRoute) {
      FlowRouter.go(prevRoute.name, prevRoute.args);
      Session.set('prevRoute', false);
    } else {
      FlowRouter.go("/account/myproperies/", {
        pageno: 1
      });
    }
  },
  "click .showCopyDlg": function (event, template) {
    var propertyData = Session.get('propertyData');
    var user = Meteor.user();
    var sluggedName = slugifyEmailAddress(user.profile.name);
    if (!sluggedName) sluggedName = 'rent';
    var email = sluggedName + '-let-' + propertyData.auction.lettingAuctionCode.toLowerCase() + "@spotmycrib.ie";
    $('#agentPropertyEmailField').val(email);
    var url = FlowRouter.url('letting', {
      key: propertyData.auction.lettingAuctionCode
    });
    $('#propertyLinkField').val(url);
    $.fancybox({
      'padding': 0,
      'href': '#propertyLinkDlg',
      afterShow: function (template) {
        $('#agentPropertyEmailField').select();
        $('#propertyLinkDlg .copyEmailBtn').unbind().bind('click', function () {
          $('#agentPropertyEmailField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'propertyApplicationsPage', 'copyShareEmail', 'copyShareEmail Btn Clicked');
        });
        $('#propertyLinkDlg .copyLinkBtn').unbind().bind('click', function () {
          $('#propertyLinkField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'propertyApplicationsPage', 'copyShareLink', 'copyShareLink Btn Clicked');
        });
        $('#propertyLinkDlg .cancelBtn').unbind().bind('click', function () {
          $.fancybox.close();
        });
      }
    });
  },
  "click .jns-dropdown-btn": function (event, template) {
    $('.jns-dropdown-area').toggle();
  }
});
Template.bidList.onCreated(function () {
  this.choosingInProgress = new ReactiveVar(false);
  this.unChoosingInProgress = new ReactiveVar(false);
});
Template.bidList.helpers({
  user: function () {
    // debugger;
    var ret = Meteor.users.find({
      _id: this.userId
    }).fetch();
    return ret[0];
  },
  canAfford: function (salary) {
    //This works based on the bid (not rent)
    if (!this.yourBid) {
      return false;
    }

    if (salary * 0.4 >= this.yourBid) {
      return true;
    }

    return false;
  },
  choosingInProgress: function () {
    return Template.instance().choosingInProgress.get();
  },
  numDifferentiation: function (data) {
    return numDifferentiation(data);
  },
  classBidList: function () {
    if (this.chosen) return 'active';
    var propertyData = Session.get('propertyData');

    try {
      var a = Collections.Auctions.find({
        _id: propertyData.auction._id
      }).fetch();
      propertyData.auction = a[0];
      if (propertyData.auction.chosenBids.length) return 'archive';
    } catch (e) {}

    return 'border-top';
  }
});
Template.bidList.events({
  "click .chooseTenant": function (event, template) {
    template.choosingInProgress.set(true);
    choosingInProgress = template.choosingInProgress;
    var r = confirm("Are you sure? This will send a confirmation mail to the applicant.");

    if (!r) {
      template.choosingInProgress.set(false);
      return;
    }

    Meteor.call('chooseWinning', [this.auctionId, this._id], function (error, result) {
      choosingInProgress.set(false);

      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push(error.error);
        Session.set("showErrorDlg", tmp);
        return;
      }

      console.log("Success");
    });
  },
  "click .unChooseTenant": function (event, template) {
    template.unChoosingInProgress.set(true);
    unChoosingInProgress = template.unChoosingInProgress;
    var r = confirm("Are you sure? This will send a pending mail to the applicant.");

    if (!r) {
      template.unChoosingInProgress.set(false);
      return;
    }

    Meteor.call('unChooseWinning', [this.auctionId, this._id], function (error, result) {
      unChoosingInProgress.set(false);

      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push(error.error);
        Session.set("showErrorDlg", tmp);
        return;
      }

      console.log("Success");
    });
  },
  "click .inviteForViewingBtn": function (event, template) {
    var propertyData = Session.get('propertyData');
    var ret = Meteor.users.find({
      _id: this.userId
    }).fetch();
    var inviteForViewing = Session.get('inviteForViewingData');
    var today = new Date();
    var tomorrow = new Date();
    tomorrow.setDate(today.getDate() + 1);
    tomorrow.setMinutes(0);
    tomorrow.setSeconds(0);
    var h = tomorrow.getHours();
    if (h < 9) h = 9;else if (h > 20) h = 20;
    tomorrow.setHours(h);
    var inviteDate = tomorrow;

    try {
      if (inviteForViewing.inviteDate) inviteDate = inviteForViewing.inviteDate;
    } catch (e) {}

    Session.set('inviteForViewingData', {
      user: ret[0],
      bid: this,
      inviteDate: inviteDate
    });
    $.fancybox({
      'padding': 0,
      'href': '#inviteForViewingDlg',
      afterShow: function () {
        var inviteForViewing = Session.get('inviteForViewingData');
        var d = inviteForViewing.inviteDate;
        var am = ' AM';
        var df = d.getMonth() + 1 + '/' + d.getDate() + '/' + d.getFullYear() + ' ' + d.getHours() + ':' + d.getMinutes();
        if (d.getHours() > 12) am = ' PM';
        df = df + am;
        $('#inviteDate').val(df);
      }
    });
  }
});
Template.emailEnquiryList.onCreated(function () {
  this.choosingInProgress = new ReactiveVar(false);
  this.unChoosingInProgress = new ReactiveVar(false);
});
Template.emailEnquiryList.helpers({
  user: function () {
    // debugger;
    var ret = Meteor.users.find({
      _id: this.userId
    }).fetch();
    return ret[0];
  },
  canAfford: function (salary) {
    //This works based on the bid (not rent)
    if (!this.yourBid) {
      return false;
    }

    if (salary * 0.4 >= this.yourBid) {
      return true;
    }

    return false;
  },
  choosingInProgress: function () {
    return Template.instance().choosingInProgress.get();
  },
  numDifferentiation: function (data) {
    return numDifferentiation(data);
  },
  classBidList: function () {
    if (this.chosen) return 'active';
    var propertyData = Session.get('propertyData');

    try {
      var a = Collections.Auctions.find({
        _id: propertyData.auction._id
      }).fetch();
      propertyData.auction = a[0];
      if (propertyData.auction.chosenBids.length) return 'archive';
    } catch (e) {}

    return 'border-top';
  }
});
Template.emailEnquiryList.events({
  "click .inviteForViewingBtn": function (event, template) {
    var propertyData = Session.get('propertyData');
    var ret = Meteor.users.find({
      _id: this.userId
    }).fetch();
    var inviteForViewing = Session.get('inviteForViewingData');
    var today = new Date();
    var tomorrow = new Date();
    tomorrow.setDate(today.getDate() + 1);
    tomorrow.setMinutes(0);
    tomorrow.setSeconds(0);
    var h = tomorrow.getHours();
    if (h < 9) h = 9;else if (h > 20) h = 20;
    tomorrow.setHours(h);
    var inviteDate = tomorrow;

    try {
      if (inviteForViewing.inviteDate) inviteDate = inviteForViewing.inviteDate;
    } catch (e) {}

    Session.set('inviteForViewingData', {
      user: ret[0],
      bid: this,
      inviteDate: inviteDate
    });
    $.fancybox({
      'padding': 0,
      'href': '#inviteForViewingDlg',
      afterShow: function () {
        var inviteForViewing = Session.get('inviteForViewingData');
        var d = inviteForViewing.inviteDate;
        var am = ' AM';
        var df = d.getMonth() + 1 + '/' + d.getDate() + '/' + d.getFullYear() + ' ' + d.getHours() + ':' + d.getMinutes();
        if (d.getHours() > 12) am = ' PM';
        df = df + am;
        $('#inviteDate').val(df);
      }
    });
  }
});
inviteInProgress = '';
Template.inviteForViewing.onCreated(function () {
  this.inviteInProgress = new ReactiveVar(false);
  inviteInProgress = this.inviteInProgress;
});
Template.inviteForViewing.helpers({
  data: function () {
    return Session.get('inviteForViewingData');
  },
  inviteInProgress: function () {
    inviteInProgress = Template.instance().inviteInProgress;
    return Template.instance().inviteInProgress.get();
  },
  inviteDateFormated: function () {
    var inviteForViewing = Session.get('inviteForViewingData');
    var options = {
      weekday: "long",
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    };

    try {
      var d = inviteForViewing.inviteDate;
      return d.toLocaleTimeString("en-us", options);
    } catch (e) {}

    return;
  },
  propertyData: function () {
    return Session.get('propertyData');
  }
});
Template.inviteForViewing.events({
  'change .inviteDate': function (event, template) {
    var d = new Date($('.inviteDate').val());
    var inviteForViewing = Session.get('inviteForViewingData');

    try {
      inviteForViewing.inviteDate = d;
      Session.set('inviteForViewingData', inviteForViewing);
    } catch (e) {}
  },
  'click .confirmInviteBtn': function () {
    var inviteDate = $('.inviteDate').val();
    var inviteMessage = $('.inviteMessage').val();
    console.log(inviteDate);
    var inviteForViewing = Session.get('inviteForViewingData');
    inviteInProgress.set(true);
    Meteor.call('sendInviteForViewingEmail', [inviteForViewing.bid._id, inviteDate], function (error, result) {
      inviteInProgress.set(false);

      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Failed applying. Please try again, try checking your internet connectivity. Contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      if (result.status == 'Success') {
        console.log("Success");
        closePopupEvent();
      }
    });
  },
  'click .closePopupBtn': function () {
    closePopupEvent();
  }
});
Template.inviteForViewing.onRendered(function () {
  //Needs to be optimised, this is not the right place to put this code, might cause JS errors if Jquery isn' loaded yet.
  try {
    this.$('#inviteDate').datetimepicker();
    this.$('#moveindate').datetimepicker();
  } catch (err) {
    console.log('dp failed');
  }
});

function attachEvents() {
  $(".deactivateConfirmBtn").unbind().bind("click", function () {
    deactivateConfEvent();
  });
  $(".closePopupBtn").unbind().bind("click", function () {
    closePopupEvent();
  });
}

function deactivateConfEvent() {
  var data = Session.get("propertyData");
  var auctionId = data.auctionId;
  deactivateInProgress.set(true);
  Meteor.call('deactivateAuction', auctionId, function (error, result) {
    deactivateInProgress.set(false);

    if (error) {
      console.log(error);
      var tmp = Session.get("showErrorDlg");
      if (!tmp) tmp = [];
      tmp.push("Failed deactivating. Please try again, try checking your internet connectivity. Contact us if needed.");
      Session.set("showErrorDlg", tmp);
      return;
    }

    console.log("Success");
    closePopupEvent();
    var prevRoute = Session.get('prevRoute');

    if (prevRoute) {
      FlowRouter.go(prevRoute.name, prevRoute.args);
      Session.set('prevRoute', false);
    } else {
      FlowRouter.go("/account/myproperies/", {
        pageno: 1
      });
    }
  });
}

function closePopupEvent() {
  console.log('closePopupEvent');
  if ($) if ($.fancybox) $.fancybox.close();
}

function getpropertyData() {
  var id = FlowRouter.current().params.id;
  var ret = Collections.Properties.find(id, {
    transform: function (data) {
      data.auction = Collections.Auctions.findOne(data.auctionId); // data.applicationsReceivedCount = Collections.Bids.find({auctionId:data.auctionId}).count();

      data.applicationsReceivedCount = Counts.get("total-PropertyApplications");
      data.applicationsActiveCount = Counts.get("total-PropertyApplications"); //Removing the diff between active and total received for now. date jan 9, 2019
      // data.applicationsActiveCount = Collections.Bids.find({auctionId:data.auctionId,isArchived:false}).count();

      data.chosenApplicationCount = Collections.Bids.find({
        auctionId: data.auctionId,
        isArchived: false,
        chosen: true
      }).count();
      return data;
    },
    limit: 1
  }).fetch();
  Meteor.subscribe('avgOffer', ret[0].auctionId);
  return ret[0];
}

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function dropdownCheckbox() {
  $('.dropdown-menu .checkbox').unbind().on('click', function (event) {
    var $target = $(event.currentTarget),
        val = $target.find('input').attr('value'),
        $inp = $target.find('input'),
        idx;
    var userFilters = Session.get('userFilters');

    if (val == 'all') {
      setTimeout(function () {
        $('.dropdown-menu input').not("[value='clearall']").prop('checked', true);
        dropdownCheckbox();
      }, 10);

      if (userFilters) {
        for (var i = 0; i < userFilters.check.length; i++) {
          userFilters.check[i].enabled = "enabled";
        }

        Session.set('userFilters', userFilters);
      }

      $(event.target).blur();
      return false;
    }

    if (val == 'clearall') {
      setTimeout(function () {
        $('.dropdown-menu input').prop('checked', false);
        dropdownCheckbox();
      }, 10);

      if (userFilters) {
        for (var i = 0; i < userFilters.check.length; i++) {
          userFilters.check[i].enabled = "";
        }

        Session.set('userFilters', userFilters);
      }

      $(event.target).blur();
      return false;
    }

    if ($($inp).prop('checked')) {
      $($inp).prop('checked', false);

      if (userFilters.check) {
        for (var i = 0; i < userFilters.check.length; i++) {
          if (userFilters.check[i].val == val) userFilters.check[i].enabled = "";
        }
      }
    } else {
      $($inp).prop('checked', true);

      if (userFilters.check) {
        for (var i = 0; i < userFilters.check.length; i++) {
          if (userFilters.check[i].val == val) userFilters.check[i].enabled = "enabled";
        }
      }
    } // if ( ( idx = options.indexOf( val ) ) > -1 ) {
    //     options.splice( idx, 1 );
    //     setTimeout( function() { $inp.prop( 'checked', false ) }, 0);
    //     if(userFilters.check){
    //         for(var i=0;i<userFilters.check.length;i++){
    //             if(userFilters.check[i].val == val)userFilters.check[i].enabled="";
    //         }
    //     }
    // } else {
    //     options.push( val );
    //     setTimeout( function() { $inp.prop( 'checked', true ) }, 0);
    //     if(userFilters.check){
    //         for(var i=0;i<userFilters.check.length;i++){
    //             if(userFilters.check[i].val == val)userFilters.check[i].enabled="enabled";
    //         }
    //     }
    // }


    if (userFilters) {
      Session.set('userFilters', userFilters);
    }

    $(event.target).blur();
    dropdownCheckbox(); // console.log( options );

    return false;
  });
}

function slugifyEmailAddress(text) {
  if (!text) return '';
  var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ/_,:;';
  var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
  var p = new RegExp(a.split('').join('|'), 'g');
  return text.toString().toLowerCase().replace(/\s+/g, '.') // Replace spaces with "."
  .replace(p, function (c) {
    return b.charAt(a.indexOf(c));
  }) // Replace special chars
  .replace(/&/g, '-and-') // Replace & with ''
  // .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
  .replace(/\-\-+/g, '-') // Replace multiple - with single ''
  .replace(/^-+/, '') // Trim - from start of text
  .replace(/-+$/, ''); // Trim - from end of text
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"propertyManage.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/propertyManage.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./pagination.html");
module.link("./propertyManage.html");
var globalFILTERS = {};

function getPaginationData(totalResultsCount, currentPageNo, urlBase, resultsPerPage) {
  var pages = [],
      prevPage = {},
      nextPage = {};
  var pgMin = currentPageNo - 4,
      pgMax = currentPageNo + 5,
      maxPages = Math.ceil(totalResultsCount / resultsPerPage);
  if (pgMin < 1) pgMin = 1;
  if (pgMax < 1) pgMax = 1;
  if (maxPages < 1) maxPages = 1;
  if (pgMin > maxPages) currentPageNo = maxPages;
  var tmp = {};

  for (var i = pgMin; i <= maxPages; i++) {
    var href = urlBase + i + "/";
    tmp = {
      "href": href,
      "text": i
    };

    if (i == currentPageNo) {
      tmp['href'] = 'javascript:void(0);';
      tmp['current'] = true;
    }

    pages.push(tmp);
  } // if(pgMin==maxPages){//Above loop won't work if only 1 page result
  //     pages.push({
  //         "href": 'javascript:void(0);',
  //         "text": 1
  //     })
  // }


  var prevPageNo = currentPageNo - 1,
      nextPageNo = currentPageNo + 1;

  if (prevPageNo < 1) {
    prevPage['href'] = 'javascript:void(0)';
    prevPage['text'] = 'Previous';
    prevPage['disabled'] = 'disabled';
  } else {
    prevPage['href'] = urlBase + prevPageNo + "/";
    prevPage['text'] = 'Previous';
  }

  if (nextPageNo > maxPages) nextPageNo = maxPages;

  if (nextPageNo == currentPageNo) {
    nextPage['href'] = 'javascript:void(0)';
    nextPage['text'] = 'Next';
    nextPage['disabled'] = 'disabled';
  } else {
    nextPage['href'] = urlBase + nextPageNo + "/";
    nextPage['text'] = 'Next';
  }

  return {
    "prevPage": prevPage,
    "pages": pages,
    "nextPage": nextPage
  };
}

Template.registerHelper("objectToPairs", function (object) {
  return _.map(object, function (value, key) {
    return {
      key: key,
      value: value
    };
  });
});
Template.registerHelper("hostname", function () {
  return Meteor.absoluteUrl();
});

function numDifferentiation(val) {
  if (val >= 1000000000) val = (val / 1000000000).toFixed(2) + ' Billion';else if (val >= 1000000) val = (val / 1000000).toFixed(2) + ' Million';
  return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function numFormat(x) {
  //var x=12345652457.557;
  //console.log(x)
  if (!x) return x;
  x = x.toString();
  var afterPoint = '';
  if (x.indexOf('.') > 0) afterPoint = x.substring(x.indexOf('.'), x.length);
  afterPoint = afterPoint.substr(0, 3);
  x = Math.floor(x);
  x = x.toString();
  var lastThree = x.substring(x.length - 3);
  var otherNumbers = x.substring(0, x.length - 3);
  if (otherNumbers != '') lastThree = ',' + lastThree;
  var res = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
  return res;
}

Template.propertyManage.onCreated(function () {
  Session.set('propertyData', false);
  Session.set('PropertyManage', false);
  this.pdExpanded = new ReactiveVar(true);
  this.enablingPMS = new ReactiveVar(false);
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    instance.subscribe('Auctions');
    instance.subscribe('Bids');
    instance.subscribe('allUserData');
    instance.subscribe('userData');
    var id = FlowRouter.getParam('id');
    instance.subscribe("Property", {
      viewName: 'property.view',
      id: id
    });
    instance.subscribe("PropertyManage", {
      viewName: 'propertyManage.view',
      id: id
    });
    instance.subscribe("ActivityHistory", {
      limit: 50,
      id: id
    });

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  });
});
Template.propertyManage.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  },
  data: function () {
    var id = FlowRouter.current().params.id;
    if (!id) return []; // debugger;

    var ret = Collections.PropertyManage.find({
      propertyId: id
    });
    var docs = ret.fetch();
    if (docs.length) Session.set('PropertyManage', docs[0]); // if(ret.count()==0){
    //     clearMeta();
    //     DocHead.setTitle(' Property not found | SpotMyCrib Admin');
    //     DocHead.addMeta({name: "description", content: ""});
    // }
    // Session.set("propertyManageData",ret);

    return docs[0];
  },
  propertyData: function () {
    var PropertyManage = Session.get('PropertyManage');

    if (PropertyManage.propertyId) {
      var ret = Collections.Properties.find({
        _id: PropertyManage.propertyId
      }, {
        limit: 1
      });
      var docs = ret.fetch();
      var propertyData = docs[0];
      if (docs.length) Session.set('propertyData', propertyData);
      clearMeta();

      try {
        var title = propertyData.address.address + ', ' + propertyData.address.area;
        if (propertyData.address.county) title += ', ' + propertyData.address.county;
        title += ' Manage Property';
        DocHead.setTitle(titleCase(title) + ' | SpotMyCrib Admin');
        DocHead.addMeta({
          name: "description",
          content: "Manage property " + propertyData.type + ", view and manage lease, see activity history and much more."
        });
      } catch (err) {
        DocHead.setTitle('Manage Property | SpotMyCrib Admin');
        DocHead.addMeta({
          name: "description",
          content: ""
        });
      }

      return docs[0];
    } else {
      clearMeta();
      DocHead.setTitle('Manage Property | SpotMyCrib Admin');
      DocHead.addMeta({
        name: "description",
        content: ""
      });
      return [];
    }
  },
  hasPropFound: function () {
    var id = FlowRouter.current().params.id;
    var ret = Collections.Properties.find(id, {
      limit: 1
    }).fetch();
    return ret.length;
  },
  pdExpanded: function () {
    return Template.instance().pdExpanded.get();
  },
  enablingPMS: function () {
    return Template.instance().enablingPMS.get();
  },
  // dataFull : function () {
  //
  //     var propertyData = Session.get('propertyData');
  //
  //     try {
  //         var selector = {
  //             auctionId: propertyData.auctionId,
  //             isArchived: false
  //         }
  //
  //         var totalResultsCount = Collections.Bids.find(selector).count();
  //
  //         clearMeta();
  //         try{
  //             var title = propertyData.address.address + ', ' + propertyData.address.area;
  //             if (propertyData.address.county) title += ', ' + propertyData.address.county;
  //             title += ' Manage Property';
  //
  //             DocHead.setTitle(titleCase(title) + ' | SpotMyCrib Admin');
  //             DocHead.addMeta({
  //                 name: "description",
  //                 content: "View applications for property " + propertyData.type + ", choose a winning tenant, see their social profiles and much more."
  //             });
  //         }catch(err){
  //             DocHead.setTitle('Manage Property | SpotMyCrib Admin');
  //             DocHead.addMeta({name: "description", content: ""});
  //         }
  //         return {
  //             totalResultsCount: totalResultsCount
  //         };
  //     }catch (err){}
  // },
  dataChosen: function () {
    var PropertyManage = Session.get('PropertyManage');

    if (PropertyManage.tenants.length) {
      var tenIds = [];

      for (var i = 0; i < PropertyManage.tenants.length; i++) {
        if (PropertyManage.tenants[i].id) tenIds.push(PropertyManage.tenants[i].id);
      }

      var selector = {
        _id: {
          $in: tenIds
        },
        // isArchived: false,//this field isn't needed
        chosen: true
      };
      var totalChosenCount = Collections.Bids.find(selector).count();
      var retChosen = Collections.Bids.find(selector, {
        sort: {
          updatedAt: -1
        }
      });
      return {
        resultsChosen: retChosen,
        totalChosenCount: totalChosenCount
      };
    } else return [];
  },
  // dataNonChosen : function () {
  //
  //     var propertyData = Session.get('propertyData');
  //     if(!propertyData){
  //         console.log("Empty project data");
  //         return false;}
  //
  //     var selector = {
  //         auctionId: propertyData.auctionId,
  //         isArchived: false,
  //         chosen:false
  //     }
  //
  //     globlaAuctionId1 = propertyData.auctionId;
  //     globalAuctionData1 = propertyData.auction;
  //     /////PAGINATION
  //     var resultsPerPage = 100;
  //     var currentPageNo = FlowRouter.current().params.pageno;
  //     if(!currentPageNo){currentPageNo = 1}
  //     var skip = (currentPageNo -1) * resultsPerPage;
  //     var urlBase = 'account/propertyapplications/'+FlowRouter.current().params.id+'/';
  //
  //
  //
  //     var totalNonChosenCount = Collections.Bids.find(selector).count();
  //     var resultsNonChosen = Collections.Bids.find(selector, {
  //         transform: function (doc) {
  //
  //             if (doc.auctionId != globlaAuctionId1 || !globalAuctionData1._id) {
  //                 doc.auction = Collections.Auctions.findOne({
  //                     _id: doc.auctionId
  //                 });
  //             } else {
  //                 doc.auction = globalAuctionData1;
  //             }
  //
  //             return doc;
  //         },
  //         limit: resultsPerPage,
  //         sort: { updatedAt : -1 },
  //         skip: skip
  //     });
  //
  //     return {
  //         resultsNonChosen: resultsNonChosen,
  //         totalNonChosenCount: totalNonChosenCount,
  //         pagination: getPaginationData(totalNonChosenCount,currentPageNo,urlBase,resultsPerPage)
  //     };
  //
  // },
  showFilters: function () {
    return false;
  },
  // propertyData : function () {
  //     var ret = getpropertyData();
  //     if(!ret.auctionId){
  //         var prevRoute = Session.get('prevRoute');
  //         if(prevRoute){
  //             FlowRouter.go(prevRoute.name,prevRoute.args)
  //             Session.set('prevRoute',false);
  //         }else{
  //             FlowRouter.go("/account/myproperies/",{pageno:1});
  //         }
  //     }
  //
  //     Session.set('propertyData',ret);
  //
  //     return ret;
  // },
  filters: function () {
    var data = {}; //{"Home Type":["2 BHK"],"Floor":["2 to 15"],"Price Range":["67.45 to 97.45 "]}

    var FILTERS = Session.get('globalFILTERS');
    var defaultFilters = Session.get('propertyData');
    defaultFilters = defaultFilters.filter;

    if (FILTERS['homeType']) {
      if (FILTERS['homeType'].length) {
        if (!isArraysEqual(defaultFilters.homeType, FILTERS['homeType'])) data['Home Type'] = FILTERS['homeType'];
      }
    }

    if (FILTERS['facing']) {
      if (FILTERS['facing'].length) {
        if (!isArraysEqual(defaultFilters.facing, FILTERS['facing'])) data['Facing'] = FILTERS['facing'];
      }
    }

    if (FILTERS['floor']) {
      var hasLowerLimit = false,
          hasUpperLimit = false;
      var l1 = parseInt(FILTERS['floor'][0]);
      if (l1 != 0 && l1 != defaultFilters.floor[0]) hasLowerLimit = true;
      var l2 = parseInt(FILTERS['floor'][1]);
      if (l2 != defaultFilters.floor[1]) hasUpperLimit = true;

      if (hasLowerLimit && !hasUpperLimit) {
        //Only LowerLimit
        data['Floor'] = ['More than ' + l1];
      } else if (!hasLowerLimit && hasUpperLimit) {
        //Only UpperLimit
        data['Floor'] = ['Below ' + l2];
      } else if (hasLowerLimit && hasUpperLimit) {
        //Both are there
        data['Floor'] = ['Between ' + l1 + " and " + l2];
      } else {} //Both are not there. So don't show filter.

    }

    if (FILTERS['priceRange']) {
      var hasLowerLimit = false,
          hasUpperLimit = false;
      var l1 = parseInt(FILTERS['priceRange'][0]);
      if (l1 != 0 && l1 != defaultFilters.priceRange[0]) hasLowerLimit = true;
      var l2 = parseInt(FILTERS['priceRange'][1]);
      if (l2 != defaultFilters.priceRange[1]) hasUpperLimit = true;

      if (hasLowerLimit && !hasUpperLimit) {
        //Only LowerLimit
        data['Price Range'] = ['More than ' + numDifferentiation(l1)];
      } else if (!hasLowerLimit && hasUpperLimit) {
        //Only UpperLimit
        data['Price Range'] = ['Below ' + numDifferentiation(l2)];
      } else if (hasLowerLimit && hasUpperLimit) {
        //Both are there
        data['Price Range'] = ['Between ' + numDifferentiation(l1) + " to " + numDifferentiation(l2)];
      } else {} //Both are not there. So don't show filter.

    } //if( FILTERS['priceRange'] ){
    //  data['Price Range'] =  [ numDifferentiation(FILTERS['priceRange'][0]) +" to "+ numDifferentiation(FILTERS['priceRange'][1]) ]
    //}


    applyClearFiltersEvent();
    return {
      data: data,
      count: Object.keys(data).length
    };
  },
  // time: function(){
  //
  //     var propertyData = Session.get('propertyData');
  //     var timestamp = TimeSync.serverTime(null, 30000);
  //     if(!propertyData.auction.endDate || !timestamp)return;
  //
  //
  //     var dend = Date.parse(propertyData.auction.endDate);
  //     var timeDiff = dend - timestamp ;
  //     if(timeDiff<0)return false;
  //
  //     var day = Math.floor(timeDiff / (1000 * 3600 * 24))
  //     var hour = Math.floor(timeDiff / (1000 * 3600 ))
  //     var min = Math.floor(timeDiff / (1000 * 60 ) )
  //     hour = hour - (day * 24);
  //     min = min - (day * 24* 60) - (hour * 60);
  //     return {"day":day,"hour":hour,"min":min}
  // },
  isAuctionClosed: function () {
    // var timestamp = TimeSync.serverTime(null, 30000);
    var timestamp = new Date();
    var propertyData = Session.get('propertyData');
    var dend = Date.parse(propertyData.auction.endDate);
    var timeDiff = dend - timestamp;

    if (timeDiff < 0) {
      return true;
    }

    return false;
  },
  numDifferentiation: function (data) {
    return numDifferentiation(data);
  },
  assistanceAlreadyRequested: function () {
    //Just to make this reactive
    var user = Meteor.user();
    if (user) if (user.profile) if (user.profile.assistanceRequested) {
      return user.profile.assistanceRequested || Session.get('assistanceRequested');
    }
    return Session.get('assistanceRequested');
  }
});
Template.propertyManage.onRendered(function () {});
Template.propertyManage.events({
  "click .clearFilters": function (event, template) {
    //FlowRouter.query.clear();
    console.log('in .clearFilters meteor event');
    var defaultFilters = Session.get('propertyData');
    defaultFilters = defaultFilters.filter;
    $('.filterUnitFacing, .filterUnitType').val('any');
    resetUISlider(defaultFilters);
    setFilters(defaultFilters);
    $.fancybox.close();
    applyClearFiltersEvent();
  },
  "click .showEditPropertyForm": function (event, template) {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        id: FlowRouter.current().params.id,
        pageno: FlowRouter.current().params.pageno
      },
      scrollTo: 'body'
    };
    Session.set('prevRoute', prevRoute);
    var propertyData = Session.get('propertyData');
    FlowRouter.go('account/editproperty', {
      id: propertyData._id
    });
  },
  "click .backBtn": function (event, template) {
    var prevRoute = Session.get('prevRoute');

    if (prevRoute) {
      FlowRouter.go(prevRoute.name, prevRoute.args);
      Session.set('prevRoute', false);
    } else {
      // FlowRouter.go("/account/myproperies/",{pageno:1});
      history.back(); //PPl can come to this page from many other pages.
    }
  },
  "click .pdExpandedBtn": function (event, template) {
    if (template.pdExpanded.get()) template.pdExpanded.set(false);else template.pdExpanded.set(true);
  },
  "click .enablePMS": function (event, template) {
    // console.log('enablePMS clicked');
    enablingPMS = template.enablingPMS;
    enablingPMS.set(true);
    Meteor.call('addManageProperty', FlowRouter.current().params.id, function (error, result) {
      enablingPMS.set(false);

      if (error) {
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Failed enabling this property. Please try again, try checking your internet connectivity. Contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      if (result.status == 'Success') {
        console.log("Success");
      }
    });
  }
});
Template.PM_bidList.onCreated(function () {
  this.choosingInProgress = new ReactiveVar(false);
  this.unChoosingInProgress = new ReactiveVar(false);
});
Template.PM_bidList.helpers({
  user: function () {
    // debugger;
    var ret = Meteor.users.find({
      _id: this.userId
    }).fetch();
    return ret[0];
  },
  canAfford: function (salary) {
    //This works based on the bid (not rent)
    if (!this.yourBid) {
      return false;
    }

    if (salary * 0.4 >= this.yourBid) {
      return true;
    }

    return false;
  },
  choosingInProgress: function () {
    return Template.instance().choosingInProgress.get();
  },
  numDifferentiation: function (data) {
    return numDifferentiation(data);
  },
  classBidList: function () {
    if (this.chosen) return 'active';
    var propertyData = Session.get('propertyData');

    try {
      var a = Collections.Auctions.find({
        _id: propertyData.auction._id
      }).fetch();
      propertyData.auction = a[0];
      if (propertyData.auction.chosenBids.length) return 'archive';
    } catch (e) {}

    return 'border-top';
  }
});
Template.PM_bidList.events({
  "click .chooseTenant": function (event, template) {
    template.choosingInProgress.set(true);
    choosingInProgress = template.choosingInProgress;
    var r = confirm("Are you sure? This will send a confirmation mail to the applicant.");

    if (!r) {
      template.choosingInProgress.set(false);
      return;
    }

    Meteor.call('chooseWinning', [this.auctionId, this._id], function (error, result) {
      choosingInProgress.set(false);

      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push(error.error);
        Session.set("showErrorDlg", tmp);
        return;
      }

      console.log("Success");
    });
  },
  "click .unChooseTenant": function (event, template) {
    template.unChoosingInProgress.set(true);
    unChoosingInProgress = template.unChoosingInProgress;
    var r = confirm("Are you sure? This will send a pending mail to the applicant.");

    if (!r) {
      template.unChoosingInProgress.set(false);
      return;
    }

    Meteor.call('unChooseWinning', [this.auctionId, this._id], function (error, result) {
      unChoosingInProgress.set(false);

      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push(error.error);
        Session.set("showErrorDlg", tmp);
        return;
      }

      console.log("Success");
    });
  },
  "click .inviteForViewingBtn": function (event, template) {
    var propertyData = Session.get('propertyData');
    var ret = Meteor.users.find({
      _id: this.userId
    }).fetch();
    var inviteForViewing = Session.get('inviteForViewingData');
    var today = new Date();
    var tomorrow = new Date();
    tomorrow.setDate(today.getDate() + 1);
    tomorrow.setMinutes(0);
    tomorrow.setSeconds(0);
    var h = tomorrow.getHours();
    if (h < 9) h = 9;else if (h > 20) h = 20;
    tomorrow.setHours(h);
    var inviteDate = tomorrow;

    try {
      if (inviteForViewing.inviteDate) inviteDate = inviteForViewing.inviteDate;
    } catch (e) {}

    Session.set('inviteForViewingData', {
      user: ret[0],
      bid: this,
      inviteDate: inviteDate
    });
    $.fancybox({
      'padding': 0,
      'href': '#inviteForViewingDlg',
      afterShow: function () {
        var inviteForViewing = Session.get('inviteForViewingData');
        var d = inviteForViewing.inviteDate;
        var am = ' AM';
        var df = d.getMonth() + 1 + '/' + d.getDate() + '/' + d.getFullYear() + ' ' + d.getHours() + ':' + d.getMinutes();
        if (d.getHours() > 12) am = ' PM';
        df = df + am;
        $('#inviteDate').val(df);
      }
    });
  }
});
Template.PM_propertyList.onCreated(function () {
  this.expanded = new ReactiveVar(true);
  this.showAddAuctionForm = new ReactiveVar(false);
});
Template.PM_propertyList.helpers({
  expanded: function () {
    return Template.instance().expanded.get();
  },
  auction: function () {
    if (this._id) {
      var ret = Collections.Auctions.find({
        propertyId: this._id
      }, {
        limit: 1
      });
      var docs = ret.fetch();
      return docs[0];
    } else return [];
  },
  showAddAuctionForm: function () {
    // debugger;
    if (Session.get('hideAddAuctionForm') && Session.get('auctionId') == this.auctionId) {
      Template.instance().showAddAuctionForm.set(false);
      Session.set('auctionId', "");
      Session.set('hideAddAuctionForm', false);
    }

    return Template.instance().showAddAuctionForm.get();
  },
  numDifferentiation: function (data) {
    return numDifferentiation(data);
  },
  lettingprintviewData: function () {
    if (!this.auction) return {
      key: ""
    };
    return {
      key: this.auction.lettingAuctionCode
    };
  },
  chosenTenantCount: function () {
    var PropertyManage = Session.get('PropertyManage');

    if (PropertyManage.tenants) {
      return PropertyManage.tenants.length;
    } else {
      return 0;
    }
  },
  PropertyManage: function () {
    return Session.get('PropertyManage');
  }
});
Template.PM_propertyList.events({
  "click .prev_activations": function (event, template) {
    scrollTo('#activity_history_area', 0, 300);
  },
  "click .viewTenants": function (event, template) {
    scrollTo('#viewTenantsArea', 0, 300);
  },
  "click .showEditPropertyForm": function (event, template) {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        pageno: FlowRouter.current().params.pageno
      }
    };
    Session.set('prevRoute', prevRoute);
    FlowRouter.go('account/editproperty', {
      id: this._id
    });
  },
  "click .hideAddAuctionForm": function (event, template) {
    if (template.showAddAuctionForm.get()) template.showAddAuctionForm.set(false);
    propId = this._id;
    scrollTo('#property_' + propId, 0, 700);
  },
  "click .viewApplications": function (event, template) {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        pageno: FlowRouter.current().params.pageno
      }
    };
    Session.set('prevRoute', prevRoute);
    FlowRouter.go("account/propertyApplications", {
      id: this._id
    });
  },
  "click .showCopyDlg": function (event, template) {
    var user = Meteor.user();
    var sluggedName = slugifyEmailAddress(user.profile.name);
    if (!sluggedName) sluggedName = 'rent';
    var email = sluggedName + '-let-' + this.auction.lettingAuctionCode.toLowerCase() + "@spotmycrib.ie";
    $('#agentPropertyEmailField').val(email);
    var url = FlowRouter.url('letting', {
      key: this.auction.lettingAuctionCode
    });
    $('#propertyLinkField').val(url);
    $.fancybox({
      'padding': 0,
      'href': '#propertyLinkDlg',
      afterShow: function (template) {
        $('#agentPropertyEmailField').select();
        $('#propertyLinkDlg .copyEmailBtn').unbind().bind('click', function () {
          $('#agentPropertyEmailField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'managePropertyPage', 'copyShareEmail', 'copyShareEmail Btn Clicked');
        });
        $('#propertyLinkDlg .copyLinkBtn').unbind().bind('click', function () {
          $('#propertyLinkField').select();

          try {
            var successful = document.execCommand('copy');
            var msg = successful ? 'successful' : 'unsuccessful'; // console.log('Copying text command was ' + msg);

            $.fancybox.close();
          } catch (err) {
            console.log('Oops, unable to copy');
          }

          ga('send', 'event', 'managePropertyPage', 'copyShareLink', 'copyShareLink Btn Clicked');
        });
        $('#propertyLinkDlg .cancelBtn').unbind().bind('click', function () {
          $.fancybox.close();
        });
      }
    });
  }
});
inviteInProgress = '';
Template.addTenantDlg.onCreated(function () {
  console.log('invite for viewing created');
  this.inviteInProgress = new ReactiveVar(false);
  inviteInProgress = this.inviteInProgress;
});
Template.addTenantDlg.helpers({
  data: function () {
    return Session.get('inviteForViewingData');
  },
  inviteInProgress: function () {
    inviteInProgress = Template.instance().inviteInProgress;
    return Template.instance().inviteInProgress.get();
  },
  inviteDateFormated: function () {
    var inviteForViewing = Session.get('inviteForViewingData');
    var options = {
      weekday: "long",
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    };

    try {
      var d = inviteForViewing.inviteDate;
      return d.toLocaleTimeString("en-us", options);
    } catch (e) {}

    return;
  },
  propertyData: function () {
    return Session.get('propertyData');
  }
});
Template.addTenantDlg.events({
  'change .inviteDate': function (event, template) {
    var d = new Date($('.inviteDate').val());
    var inviteForViewing = Session.get('inviteForViewingData');

    try {
      inviteForViewing.inviteDate = d;
      Session.set('inviteForViewingData', inviteForViewing);
    } catch (e) {}
  },
  'click .confirmInviteBtn': function () {
    var inviteDate = $('.inviteDate').val();
    var inviteMessage = $('.inviteMessage').val();
    console.log(inviteDate);
    var inviteForViewing = Session.get('inviteForViewingData');
    inviteInProgress.set(true);
    Meteor.call('sendInviteForViewingEmail', [inviteForViewing.bid._id, inviteDate], function (error, result) {
      inviteInProgress.set(false);

      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Failed applying. Please try again, try checking your internet connectivity. Contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      if (result.status == 'Success') {
        console.log("Success");
        closePopupEvent();
      }
    });
  },
  'click .closePopupBtn': function () {
    closePopupEvent();
  }
});
Template.addTenantDlg.onRendered(function () {
  console.log('inviteForViewing rendered'); //Needs to be optimised, this is not the right place to put this code, might cause JS errors if Jquery isn' loaded yet.

  try {
    this.$('#inviteDate').datetimepicker();
    this.$('#moveindate').datetimepicker();
  } catch (err) {
    console.log('dp failed');
  }
});
Template.activity_history.onCreated(function () {
  this.loadingMoreText = new ReactiveVar(true);
  var resultsPerPage = Session.get('resultsPerPage');
  if (!resultsPerPage) Session.set('resultsPerPage', 50);
});
Template.activity_history.helpers({
  data: function () {
    var user = Meteor.user();

    if (!user) {
      Template.instance().loadingMoreText.set(false);
      return {
        results: [],
        totalResultsCount: 0
      };
    }

    var id = FlowRouter.current().params.id;

    if (!id) {
      Template.instance().loadingMoreText.set(false);
      return {
        results: [],
        totalResultsCount: 0
      };
    }

    var selector = {
      propertyId: id
    }; //let limit = 10;
    // debugger;
    // var FILTERS = Session.get('prop_activation_filters')
    // var defaultFilters = getDefaultFilters();
    // var arr = [];
    // if(  FILTERS['homeType'] ){
    //     if(FILTERS['homeType'].length) {
    //         if(FILTERS['homeType'].length != defaultFilters.homeType.length)
    //             selector['homeType'] = FILTERS['homeType'][0]
    //         /*
    //          // var arr = [];
    //          for (var i = 0; i < FILTERS['homeType'].length; i++) {
    //          arr.push({"homeType": FILTERS['homeType'][i]})
    //          console.log("homeType"+ FILTERS['homeType'][i])
    //          }*/
    //         // selector['$or'] = arr;//BUG: this or will over write or of facing; or of homeType will collide with this and
    //         // while logic won't work
    //
    //     }
    // }
    // if(  FILTERS['facing'] ){
    //     if(FILTERS['facing'].length) {
    //         if(FILTERS['facing'].length != defaultFilters.facing.length)
    //             selector['facing'] = FILTERS['facing'][0]
    //         /*
    //          var arr = [];
    //          for (var i = 0; i < FILTERS['facing'].length; i++) {
    //          arr.push({"facing": FILTERS['facing'][i]})
    //          }
    //          // selector['$or'] = arr;//BUG: this or will over write or of homeType; or of homeType will collide with this and
    //          // while logic won't work
    //          */
    //     }
    // }
    // if(arr.length){
    //     selector['$or'] = arr;
    // }
    // if( FILTERS['floor'] ){
    //     var val_l = FILTERS['floor'][0];
    //     var val_h = FILTERS['floor'][1];
    //
    //     if(isNaN(val_l) && isNaN(val_h)){//Both are not valid numbers
    //
    //     }else if(!isNaN(val_l) && isNaN(val_h)){//Low is valid and no upper
    //         selector['floorLevel'] =  { $gte: parseInt(val_l) }
    //     }else if(isNaN(val_l) && !isNaN(val_h)){//Upper is valid and no lower
    //         selector['floorLevel'] =  { $lte: parseInt(val_h) }
    //     }else{//Both are valid
    //         selector['floorLevel'] =  { $gte: parseInt(val_l), $lte: parseInt(val_h) }
    //     }
    // }
    // if( FILTERS['priceRange'] ){
    //     var val_l = FILTERS['priceRange'][0];
    //     var val_h = FILTERS['priceRange'][1];
    //
    //     if(isNaN(val_l) && isNaN(val_h)){//Both are not valid numbers
    //
    //     }else if(!isNaN(val_l) && isNaN(val_h)){//Low is valid and no upper
    //         selector['priceBreakUp.totalAllInclusive'] =  { $gte: parseInt(val_l) }
    //     }else if(isNaN(val_l) && !isNaN(val_h)){//Upper is valid and no lower
    //         selector['priceBreakUp.totalAllInclusive'] =  { $lt: parseInt(val_h) }
    //     }else{//Both are valid
    //         selector['priceBreakUp.totalAllInclusive'] =  { $gte: parseInt(val_l), $lte: parseInt(val_h) }
    //     }
    // }
    /////PAGINATION
    // var resultsPerPage = 20;
    // var currentPageNo = FlowRouter.current().params.pageno;
    // if(!currentPageNo){currentPageNo = 1}
    // var skip = (currentPageNo -1) * resultsPerPage;
    // var urlBase = 'account/myproperies/';

    var totalResultsCount = Collections.ActivityHistory.find(selector).count();
    var ret = Collections.ActivityHistory.find(selector, {
      limit: Session.get('resultsPerPage'),
      sort: {
        createdAt: -1
      } // skip: skip

    });
    Template.instance().loadingMoreText.set(false);
    return {
      results: ret,
      totalResultsCount: totalResultsCount
    };
  },
  loadingMoreText: function () {
    return Template.instance().loadingMoreText.get();
  },
  decideTemplate: function (type) {}
});
Template.activity_history.events({
  'click .load_more': function (event, template) {
    Template.instance().loadingMoreText.set(true);
    var resultsPerPage = Session.get('resultsPerPage');
    resultsPerPage *= 2;
    Session.set('resultsPerPage', resultsPerPage);
    var id = FlowRouter.current().params.id;
    Meteor.subscribe("ActivityHistory", {
      limit: resultsPerPage,
      id: id
    });
  }
});
Template.activity_history.onRendered(function () {
  Template.instance().loadingMoreText.set(false);
});

function attachEvents() {
  $(".deactivateConfirmBtn").unbind().bind("click", function () {
    deactivateConfEvent();
  });
  $(".closePopupBtn").unbind().bind("click", function () {
    closePopupEvent();
  });
}

function deactivateConfEvent() {
  var data = Session.get("propertyData");
  var auctionId = data.auctionId;
  deactivateInProgress.set(true);
  Meteor.call('deactivateAuction', auctionId, function (error, result) {
    deactivateInProgress.set(false);

    if (error) {
      console.log(error);
      var tmp = Session.get("showErrorDlg");
      if (!tmp) tmp = [];
      tmp.push("Failed deactivating. Please try again, try checking your internet connectivity. Contact us if needed.");
      Session.set("showErrorDlg", tmp);
      return;
    }

    console.log("Success");
    closePopupEvent();
    var prevRoute = Session.get('prevRoute');

    if (prevRoute) {
      FlowRouter.go(prevRoute.name, prevRoute.args);
      Session.set('prevRoute', false);
    } else {
      FlowRouter.go("/account/myproperies/", {
        pageno: 1
      });
    }
  });
}

function closePopupEvent() {
  console.log('closePopupEvent');
  if ($) if ($.fancybox) $.fancybox.close();
}

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function slugifyEmailAddress(text) {
  if (!text) return '';
  var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ/_,:;';
  var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
  var p = new RegExp(a.split('').join('|'), 'g');
  return text.toString().toLowerCase().replace(/\s+/g, '.') // Replace spaces with "."
  .replace(p, function (c) {
    return b.charAt(a.indexOf(c));
  }) // Replace special chars
  .replace(/&/g, '-and-') // Replace & with ''
  // .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
  .replace(/\-\-+/g, '-') // Replace multiple - with single ''
  .replace(/^-+/, '') // Trim - from start of text
  .replace(/-+$/, ''); // Trim - from end of text
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"shared.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/shared.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * Created by njanjanam on 20/05/2017.
 */
updateGalleriesInServer = function (editPropertyImages, propertyId, callback) {
  if (!editPropertyImages || !propertyId) return;
  var tmp = [],
      arr = [];

  if (editPropertyImages.length) {
    for (var i = 0; i < editPropertyImages.length; i++) {
      if (editPropertyImages[i].name) {
        //Means file is not coming from our traditional file uploader
        tmp.push(editPropertyImages[i]);
      } else {
        //Else its insert properties form
        tmp.push({
          name: editPropertyImages[i].file.original_name,
          relative_url: editPropertyImages[i].relative_url,
          url: editPropertyImages[i].secure_url
        });
      }
    }
  }

  console.log(tmp);
  Meteor.call('updateGalleries', [propertyId, tmp], callback);
};

updateGalleriesInProfile = function (editPropertyImages, callback) {
  if (!editPropertyImages) return;
  var tmp = [],
      arr = [];

  if (editPropertyImages.length) {
    for (var i = 0; i < editPropertyImages.length; i++) {
      if (editPropertyImages[i].name) {
        //Means file is not coming from our traditional file uploader
        tmp.push(editPropertyImages[i]);
      } else {
        //Else its insert properties form
        tmp.push({
          name: editPropertyImages[i].file.original_name,
          relative_url: editPropertyImages[i].relative_url,
          url: editPropertyImages[i].secure_url
        });
      }
    }
  }

  console.log(tmp);
  Meteor.call('updateGalleriesInUserProfile', tmp, callback);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tenant.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/tenant.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./profile.js");
module.link("./tenant.html");
Template.tenant.onCreated(function () {
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    instance.subscribe('userData'); //works only if viewing your profile

    instance.subscribe('userDataUsername', FlowRouter.getParam('username')); //works if viewing your profile and others

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  });
});
Template.tenant.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  },
  isViewingHisProfile: function () {
    var currentUser = Accounts.user();
    var username = FlowRouter.getParam('username');

    try {
      if (currentUser.profile.username == username) return true;
    } catch (e) {}

    return false;
  },
  isPublicProfile: function () {
    var username = FlowRouter.getParam('username');
    var u1 = Meteor.users.findOne({
      "profile.username": username
    }, {
      limit: 1
    });

    try {
      if (u1.profile.isPublic) {
        clearMeta();
        DocHead.setTitle(titleCase(u1.profile.name) + '\'s profile | Teanat Profile SpotMyCrib');
        DocHead.addMeta({
          name: "description",
          content: "View and download " + titleCase(u1.profile.name) + "'s references."
        });
        return true;
      }
    } catch (e) {}

    return false;
  },
  userFound: function () {
    var username = FlowRouter.getParam('username');
    var u1 = Meteor.users.findOne({
      "profile.username": username
    }, {
      limit: 1
    });
    if (u1) return true;
    clearMeta();
    DocHead.setTitle(' User not found | SpotMyCrib');
    DocHead.addMeta({
      name: "description",
      content: ""
    });
    return false;
  },
  userFirstName: function () {
    var username = FlowRouter.getParam('username');
    var u1 = Meteor.users.find({
      "profile.username": username
    }, {
      limit: 1
    }).fetch();

    try {
      clearMeta();
      DocHead.setTitle(titleCase(u1.profile.name) + '\'s profile | Teanat Profile SpotMyCrib');
      DocHead.addMeta({
        name: "description",
        content: ""
      });
      var tmp = u1.profile.name.split(' ');
      return tmp[0];
    } catch (e) {}

    return 'Tenant';
  },
  user: function () {
    var username = FlowRouter.getParam('username');
    return Meteor.users.find({
      "profile.username": username
    }, {
      limit: 1
    });
  }
});

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tenants.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/templates/tenants.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./pagination.html");
module.link("./tenants.html");
Template.tenants.onCreated(function () {
  var instance = this;
  instance.isSubsLoaded = new ReactiveVar(false);
  instance.autorun(function () {
    instance.subscribe('userData');
    var pageno = FlowRouter.getParam('pageno');
    if (!pageno) pageno = 1;
    instance.subscribe("tenants", pageno);

    if (instance.subscriptionsReady()) {
      instance.isSubsLoaded.set(true);
    }
  });
});
Template.tenants.helpers({
  isSubsLoaded: function () {
    return Template.instance().subscriptionsReady();
  },
  userLoggedIn: function () {
    if (Meteor.user()) return true;
    return false;
  },
  dataFull: function () {
    var pageno = FlowRouter.getParam('pageno');
    if (!pageno) pageno = 1;
    var totalResultsCount = Meteor.users.find().count(); /////PAGINATION

    var resultsPerPage = 10;
    var currentPageNo = FlowRouter.getParam('pageno');

    if (!currentPageNo) {
      currentPageNo = 1;
    }

    var urlBase = 'tenants/';
    return {
      totalResultsCount: totalResultsCount,
      results: Meteor.users.find(),
      pagination: getPaginationData(totalResultsCount, currentPageNo, urlBase, resultsPerPage)
    };
  }
});
Template.tenantList.helpers({
  userFirstName: function () {
    try {
      var tmp = this.user.profile.name.split(' ');
      return tmp[0];
    } catch (e) {}
  }
});
Template.tenantList.events({
  'click .inviteToApply': function (event, template) {
    ga('send', 'event', 'tenantsPage', 'inviteToApplyBtnClicked', 'Invite To Apply Btn Clicked');
    var user = Meteor.user();

    if (!user) {
      //Login is needed.
      Session.set('showForgotForm', false);
      Session.set('showSignupForm', false);
      Session.set('showLoginSignupFancyBoxDialog', true);
      Session.set('showLoginDialog', true);
      return;
    }

    Session.set('inviteToApplyData', {
      user: this.user
    });
    $.fancybox({
      'padding': 0,
      'href': '#inviteToApplyDlg' // afterShow:function () {}

    });
  }
});
inviteInProgress = '';
Template.inviteToApply.onCreated(function () {
  this.inviteInProgress = new ReactiveVar(false);
  inviteInProgress = this.inviteInProgress;
  Meteor.subscribe('inviteToApply.MyActiveAdvertisements');
});
Template.inviteToApply.helpers({
  data: function () {
    return Session.get('inviteToApplyData');
  },
  myAdvertisements: function () {
    var select = {
      "isArchived": false,
      "createdByAgent": Meteor.userId()
    };
    var totalResultsCount = Collections.Auctions.find(select).count();
    return {
      totalResultsCount: totalResultsCount,
      results: Collections.Auctions.find(select)
    };
  },
  userFirstName: function () {
    var data = Session.get('inviteToApplyData');

    try {
      var tmp = data.user.profile.name.split(' ');
      return tmp[0];
    } catch (e) {}
  },
  inviteInProgress: function () {
    // console.log('h 1 ')
    // console.log(Template.instance().inviteInProgress.get())
    inviteInProgress = Template.instance().inviteInProgress;
    return Template.instance().inviteInProgress.get();
  }
});
Template.inviteToApply.events({
  'click .advertiseMyProperty': function () {
    closePopupEvent();
    FlowRouter.go('account/myProperties');
  },
  'click .confirmInviteBtn': function () {
    var selectedAdvertisements = [];
    $.each($(".selectedAdvertisements option:selected"), function () {
      selectedAdvertisements.push($(this).val());
    });

    if (!selectedAdvertisements.length) {
      alert('Please choose at least 1 advertisement to proceed');
      return;
    }

    var data = Session.get('inviteToApplyData');
    inviteInProgress.set(true);
    Meteor.call('sendInviteToApplyEmail', [selectedAdvertisements, data.user._id], function (error, result) {
      inviteInProgress.set(false);

      if (error) {
        console.log(error);
        var tmp = Session.get("showErrorDlg");
        if (!tmp) tmp = [];
        tmp.push("Failed applying. Please try again, try checking your internet connectivity. Contact us if needed.");
        Session.set("showErrorDlg", tmp);
        return;
      }

      if (result.status == 'Success') {
        console.log("Success");
        closePopupEvent();
      }
    });
  },
  'click .closePopupBtn': function () {
    closePopupEvent();
  }
});

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function getPaginationData(totalResultsCount, currentPageNo, urlBase, resultsPerPage) {
  var pages = [],
      prevPage = {},
      nextPage = {};
  var pgMin = currentPageNo - 4,
      pgMax = currentPageNo + 5,
      maxPages = Math.ceil(totalResultsCount / resultsPerPage);
  if (pgMin < 1) pgMin = 1;
  if (pgMax < 1) pgMax = 1;
  if (maxPages < 1) maxPages = 1;
  if (pgMin > maxPages) currentPageNo = maxPages;
  var tmp = {};

  for (var i = pgMin; i <= maxPages; i++) {
    var href = urlBase + i + "/";
    tmp = {
      "href": href,
      "text": i
    };

    if (i == currentPageNo) {
      tmp['href'] = 'javascript:void(0);';
      tmp['current'] = true;
    }

    pages.push(tmp);
  } // if(pgMin==maxPages){//Above loop won't work if only 1 page result
  //     pages.push({
  //         "href": 'javascript:void(0);',
  //         "text": 1
  //     })
  // }


  var prevPageNo = currentPageNo - 1,
      nextPageNo = currentPageNo + 1;

  if (prevPageNo < 1) {
    prevPage['href'] = 'javascript:void(0)';
    prevPage['text'] = 'Previous';
    prevPage['disabled'] = 'disabled';
  } else {
    prevPage['href'] = urlBase + prevPageNo + "/";
    prevPage['text'] = 'Previous';
  }

  if (nextPageNo > maxPages) nextPageNo = maxPages;

  if (nextPageNo == currentPageNo) {
    nextPage['href'] = 'javascript:void(0)';
    nextPage['text'] = 'Next';
    nextPage['disabled'] = 'disabled';
  } else {
    nextPage['href'] = urlBase + nextPageNo + "/";
    nextPage['text'] = 'Next';
  }

  return {
    "prevPage": prevPage,
    "pages": pages,
    "nextPage": nextPage
  };
}

function closePopupEvent() {
  console.log('closePopupEvent');
  if ($) if ($.fancybox) $.fancybox.close();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"reactui":{"layout":{"LoginFormViews.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/layout/LoginFormViews.jsx                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _assertThisInitialized;

module.link("@babel/runtime/helpers/assertThisInitialized", {
  default: function (v) {
    _assertThisInitialized = v;
  }
}, 0);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 1);
module.export({
  LoginFormSignInView: function () {
    return LoginFormSignInView;
  },
  LoginFormSignUpView: function () {
    return LoginFormSignUpView;
  },
  LoginFormSignUpViewLandlord: function () {
    return LoginFormSignUpViewLandlord;
  },
  LoginFormResetPasswordView: function () {
    return LoginFormResetPasswordView;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var withTracker;
module.link("meteor/react-meteor-data", {
  withTracker: function (v) {
    withTracker = v;
  }
}, 2);
var LoginFormMessages, SocialLoginButtonsT;
module.link("./MainLayoutHeader", {
  LoginFormMessages: function (v) {
    LoginFormMessages = v;
  },
  SocialLoginButtonsT: function (v) {
    SocialLoginButtonsT = v;
  }
}, 3);

var LoginFormSignInView = /*#__PURE__*/function (_Component) {
  _inheritsLoose(LoginFormSignInView, _Component);

  function LoginFormSignInView(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    if (!props.onPage) props.onPage = false;
    _this.state = {
      isLoading: true,
      formMessages: {
        errors: []
      }
    }; // this.forgotPwdHandler = this.forgotPwdHandler.bind(this)

    _this.signInHandler = _this.signInHandler.bind(_assertThisInitialized(_this)); // this.signUpHandler = this.signUpHandler.bind(this)

    return _this;
  }

  var _proto = LoginFormSignInView.prototype;

  _proto.componentDidMount = function () {
    function componentDidMount() {
      $('#signin-div').find('#email').focus();
      $('.new-focus').click(function () {
        $('#signin-div').find('#email').focus();
      });
      this.setState({
        isLoading: false
      });
    }

    return componentDidMount;
  }();

  _proto.signInHandler = function () {
    function signInHandler(event) {
      var _this2 = this;

      event.preventDefault();
      var usernameInput = $(".login-input-email-LoginFormSignInView");
      var passwordInput = $(".login-input-password-LoginFormSignInView");
      var username = usernameInput.val().trim();
      var password = passwordInput.val().trim();
      var validatedEmail = LoginFormValidation.email(username);
      var validatedPassword = LoginFormValidation.password(password, {
        validationLevel: "exists"
      });
      var errors = [];
      this.setState({
        formMessages: {}
      });
      this.setState({
        isLoading: true
      });

      if (validatedEmail !== true) {
        errors.push(validatedEmail);
      }

      if (validatedPassword !== true) {
        errors.push(validatedPassword);
      }

      if (errors.length) {
        this.setState({
          formMessages: {
            errors: errors
          }
        });
        this.setState({
          isLoading: false
        });
        return;
      }

      this.loginCallBack = function (error) {
        fbq('track', 'EmailUserLogin' + (error ? "Failed" : "Successful"));
        ga('send', 'event', 'General', 'userLoginSignup', 'Email Login ' + (error ? "Failed" : "Successful"));

        _this2.setState({
          isLoading: false
        });

        if (error) {
          console.log(error);

          if (error.reason == 'User has no password set' || error.reason == 'User not found') {
            _this2.isSocialAccountCallback = function (err1, result) {
              if (err1) this.setState({
                formMessages: {
                  errors: [err1]
                }
              });else this.setState({
                formMessages: {
                  info: [result]
                }
              });
            };

            _this2.isSocialAccountCallback = _this2.isSocialAccountCallback.bind(_this2);
            Meteor.call('isSocialAccount', username, _this2.isSocialAccountCallback);
          } // Show some error messages above the form fields


          _this2.setState({
            formMessages: {
              errors: [error]
            }
          });
        } else {
          var isOnPage = false;
          if (_this2.props.onPage) isOnPage = true;

          if (!isOnPage) {
            $('#signin-div , .fancybox-overlay').hide();
            Session.set('showLoginDialog', false);
            Session.set('showSignupDialog', false);
            Session.set('showLoginSignupFancyBoxDialog', false);
          }

          Session.set('loginFlowComplete', true);
          Session.set('loginFlowStart', undefined);
          delete Session.keys.loginFlowStart;
          Meteor.call("userLoggedIn");
        }
      };

      this.loginCallBack = this.loginCallBack.bind(this);
      Meteor.loginWithPassword(username, password, this.loginCallBack);
    }

    return signInHandler;
  }() // signUpHandler(){
  //     Session.set('showForgotForm',false)
  //     Session.set('showSignupForm',true)
  //     Session.set('showLoginSignupFancyBoxDialog',true)
  //     Session.set('showLoginDialog',true)
  // }
  // forgotPwdHandler(){
  //     var isOnPage = false;
  //     if(this.props.onPage)isOnPage = true;
  //     if( !isOnPage ){
  //         Session.set('showForgotForm',true)
  //         Session.set('showSignupForm',false)
  //         Session.set('showLoginSignupFancyBoxDialog',true)
  //         Session.set('showLoginDialog',true)
  //     }else{
  //         Session.set('showForgotForm',true)
  //     }
  // }
  ;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
        className: "refund-div"
      }, /*#__PURE__*/React.createElement("h2", null, "Sign In ", this.props.loginFromApplyNowBtn ? "Required" : "")), this.props.loginFromApplyNowBtn ? /*#__PURE__*/React.createElement("p", {
        className: "color-text info-msg-text"
      }, "Login is required to apply for this property. Quickly use the options below to Login or Create yourself an account.") : "", /*#__PURE__*/React.createElement("div", {
        className: "profile-text",
        style: {
          paddingTop: '20px'
        }
      }, this.props.onPage ? "" : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SocialLoginButtonsT, {
        buttonFor: "login",
        usedInDlg: true
      }), /*#__PURE__*/React.createElement("div", {
        className: "seperator",
        style: {
          margin: '0 0 30px 0px'
        }
      }, /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("h5", null, "Enter your email and password below"), /*#__PURE__*/React.createElement("form", {
        className: "signin-form"
      }, /*#__PURE__*/React.createElement("div", {
        className: "form-border"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input  " + (this.state.formMessages.errors ? this.state.formMessages.errors.email ? "has-error has-feedback" : "" : "")
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "email",
        type: "email",
        name: "email",
        required: true,
        htmlFor: "email-loginFormSignInView",
        className: "login-input-email-LoginFormSignInView"
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: "email-loginFormSignInView"
      }, "EMAIL ID"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input underline " + (this.state.formMessages.errors ? this.state.formMessages.errors.password ? "has-error has-feedback" : "" : "")
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "current-password",
        type: "password",
        name: "password",
        className: "login-input-password-LoginFormSignInView",
        required: true,
        htmlFor: "password-loginFormSignInView"
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: "password-loginFormSignInView"
      }, "PASSWORD"), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement(LoginFormMessages, {
        messages: this.state.formMessages
      }), /*#__PURE__*/React.createElement("div", {
        className: "signup-btn"
      }, this.state.isLoading ? /*#__PURE__*/React.createElement("button", {
        className: "transparent-btn btns"
      }, "Loading...") : /*#__PURE__*/React.createElement("button", {
        className: "blue-btn btns",
        type: "submit",
        "data-event-action": "submitSignInForm",
        onClick: this.signInHandler
      }, "SIGN IN"), /*#__PURE__*/React.createElement("h5", {
        "data-event-action": "forgotPassword",
        onClick: this.props.showForgotFormHandler
      }, "Forgot password?"), this.props.onPage ? "" : /*#__PURE__*/React.createElement("h6", null, "Not registered? ", /*#__PURE__*/React.createElement("span", {
        style: {
          color: '#0c68a7'
        },
        "data-event-action": "signUp",
        onClick: this.props.showSignupFormHandler
      }, "Sign Up now"))))));
    }

    return render;
  }();

  return LoginFormSignInView;
}(Component);

;

var LoginFormSignUpView = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(LoginFormSignUpView, _Component2);

  function LoginFormSignUpView(props) {
    var _this3;

    _this3 = _Component2.call(this, props) || this;
    _this3.state = {
      isLoading: true,
      formMessages: {
        errors: []
      }
    };
    _this3.forgotPwdHandler = _this3.forgotPwdHandler.bind(_assertThisInitialized(_this3)); // this.signInHandler = this.signInHandler.bind(this)

    _this3.signUpHandler = _this3.signUpHandler.bind(_assertThisInitialized(_this3));
    return _this3;
  }

  var _proto2 = LoginFormSignUpView.prototype;

  _proto2.componentDidMount = function () {
    function componentDidMount() {
      $(".SignupFormMobileField").intlTelInput({
        preferredCountries: ["ie", "gb", 'in']
      });
      $('#signin-div').find('#name').focus();
      $('.new-focus').click(function () {
        $('#signin-div').find('#name').focus();
      });
      this.setState({
        isLoading: false
      });
    }

    return componentDidMount;
  }() // signInHandler(){
  //     Session.set('showForgotForm',false)
  //     Session.set('showSignupForm',false)
  //     Session.set('showLoginSignupFancyBoxDialog',true)
  //     Session.set('showLoginDialog',true)
  // }
  ;

  _proto2.signUpHandler = function () {
    function signUpHandler(event) {
      event.preventDefault(); // var usernameInput = $(".login-input--username");

      var emailInput = $(".login-input-email-LoginFormSignUpView");
      var passwordInput = $(".login-input-password-LoginFormSignUpView");
      var fullNameInput = $(".login-input-fullName-LoginFormSignUpView");
      var mobileInput = $(".login-input-mobile-LoginFormSignUpView");
      var email = emailInput.val().trim();
      var password = passwordInput.val().trim();
      var fullName = fullNameInput.val().trim();
      var mobile = mobileInput.val().trim();
      var validatedEmail = LoginFormValidation.email(email);
      var validatedFullName = LoginFormValidation.username(fullName);
      var validatedPassword = LoginFormValidation.password(password, {
        validationLevel: "length"
      });
      var validatedMobile = LoginFormValidation.mobile(mobile);
      var errors = [];
      this.setState({
        formMessages: {}
      });
      this.setState({
        isLoading: true
      });

      if (validatedEmail !== true) {
        errors.push(validatedEmail);
      }

      if (validatedFullName !== true) {
        errors.push(validatedFullName);
      }

      if (validatedMobile !== true) {
        errors.push(validatedMobile);
      }

      if (validatedPassword !== true) {
        errors.push(validatedPassword);
      }

      if (errors.length) {
        this.setState({
          formMessages: {
            errors: errors
          }
        });
        this.setState({
          isLoading: false
        });
        return;
      }

      var newUserData = {
        // username: username,
        email: email,
        password: password,
        profile: {
          name: fullName,
          email: email,
          mobile: mobile
        }
      };

      this.createUserCallback = function (error, result) {
        fbq('track', 'EmailUserSignup' + (error ? "Failed" : "Successful"));
        ga('send', 'event', 'General', 'userLoginSignup', 'Email Signup ' + (error ? "Failed" : "Successful"));
        this.setState({
          isLoading: false
        });

        if (error) {
          // Show some error message
          this.setState({
            formMessages: {
              errors: [error]
            }
          });
        } else {
          var isOnPage = false;
          if (this.props.onPage) isOnPage = true;

          if (!isOnPage) {
            $('#signin-div , .fancybox-overlay').hide();
            Session.set('showLoginDialog', false);
            Session.set('showSignupDialog', false);
            Session.set('showLoginSignupFancyBoxDialog', false);
          }

          Session.set('loginFlowComplete', true);
          Session.set('loginFlowStart', undefined);
          delete Session.keys.loginFlowStart;
        }
      };

      this.createUserCallback = this.createUserCallback.bind(this);
      Accounts.createUser(newUserData, this.createUserCallback);
    }

    return signUpHandler;
  }();

  _proto2.forgotPwdHandler = function () {
    function forgotPwdHandler() {
      var isOnPage = false;
      if (this.props.onPage) isOnPage = true;

      if (!isOnPage) {
        Session.set('showForgotForm', true);
        Session.set('showSignupForm', false);
        Session.set('showLoginSignupFancyBoxDialog', true);
        Session.set('showLoginDialog', true);
      } else {
        Session.set('showForgotForm', true);
      }
    }

    return forgotPwdHandler;
  }();

  _proto2.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
        className: "refund-div"
      }, /*#__PURE__*/React.createElement("h2", null, "Sign Up ", this.props.loginFromApplyNowBtn ? "Required" : "")), this.props.loginFromApplyNowBtn ? /*#__PURE__*/React.createElement("p", {
        className: "color-text info-msg-text"
      }, "Login is required to apply for this property. Quickly use the options below to Login or Create yourself an account.") : "", /*#__PURE__*/React.createElement("div", {
        className: "profile-text",
        style: {
          paddingTop: '20px'
        }
      }, this.props.onPage ? "" : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SocialLoginButtonsT, {
        buttonFor: "signup",
        usedInDlg: true
      }), /*#__PURE__*/React.createElement("div", {
        className: "seperator",
        style: {
          margin: '0 0 30px 0px'
        }
      }, /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("h5", null, "Enter your details below"), /*#__PURE__*/React.createElement("form", {
        className: "signin-form"
      }, /*#__PURE__*/React.createElement("div", {
        className: "form-border"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "name",
        className: "login-input-fullName-LoginFormSignUpView",
        type: "text",
        name: "name",
        required: true,
        htmlFor: "email-loginFormSignUpView"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", {
        htmlFor: "email-loginFormSignUpView"
      }, "FULL NAME"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "email",
        className: "login-input-email-LoginFormSignUpView",
        type: "email",
        name: "email",
        required: true,
        htmlFor: "email-loginFormSignUpView"
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: "email-loginFormSignUpView"
      }, "EMAIL ID"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "new-password",
        className: "login-input-password-LoginFormSignUpView",
        type: "password",
        name: "password",
        required: true,
        htmlFor: "password-loginFormSignUpView"
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: "password-loginFormSignUpView"
      }, "PASSWORD"), /*#__PURE__*/React.createElement("span", null), this.state.formMessages.errors ? this.state.formMessages.errors.password ? /*#__PURE__*/React.createElement("span", {
        className: "help-block"
      }, this.state.formMessages.errors.password.map(function (p, i) {
        return /*#__PURE__*/React.createElement("p", {
          key: i
        }, p.reason);
      })) : "" : ""), /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "tel",
        className: "login-input-mobile-LoginFormSignUpView SignupFormMobileField",
        type: "text",
        name: "mobile",
        htmlFor: "mobile-loginFormSignUpView"
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: "mobile-loginFormSignUpView"
      }, "MOBILE"), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement(LoginFormMessages, {
        messages: this.state.formMessages
      }), /*#__PURE__*/React.createElement("div", {
        className: "signup-btn"
      }, this.state.isLoading ? /*#__PURE__*/React.createElement("button", {
        className: "transparent-btn btns"
      }, "Loading...") : /*#__PURE__*/React.createElement("button", {
        className: "blue-btn btns",
        type: "Submit",
        "data-event-category": "accounts",
        "data-event-action": "register",
        onClick: this.signUpHandler
      }, "SIGN UP"), this.props.onPage ? "" : /*#__PURE__*/React.createElement("p", null, "Already have an account? ", /*#__PURE__*/React.createElement("a", {
        href: "javascript:;"
      }, /*#__PURE__*/React.createElement("span", {
        style: {
          color: '#0c67a6'
        },
        "data-event-category": "accounts",
        "data-event-action": "signIn",
        onClick: this.props.showSignInFormHandler
      }, "Sign In")))))));
    }

    return render;
  }();

  return LoginFormSignUpView;
}(Component);

;

var LoginFormSignUpViewLandlord = /*#__PURE__*/function (_Component3) {
  _inheritsLoose(LoginFormSignUpViewLandlord, _Component3);

  function LoginFormSignUpViewLandlord(props) {
    var _this4;

    _this4 = _Component3.call(this, props) || this;
    _this4.state = {
      isLoading: true,
      formMessages: {
        errors: []
      }
    };
    _this4.forgotPwdHandler = _this4.forgotPwdHandler.bind(_assertThisInitialized(_this4));
    _this4.signInHandler = _this4.signInHandler.bind(_assertThisInitialized(_this4));
    _this4.signUpHandler = _this4.signUpHandler.bind(_assertThisInitialized(_this4));
    return _this4;
  }

  var _proto3 = LoginFormSignUpViewLandlord.prototype;

  _proto3.componentDidMount = function () {
    function componentDidMount() {
      $(".SignupFormMobileField").intlTelInput({
        preferredCountries: ["ie", "gb", 'in']
      });
      $('#signin-div').find('#name').focus();
      $('.new-focus').click(function () {
        $('#signin-div').find('#name').focus();
      });
      this.setState({
        isLoading: false
      });
    }

    return componentDidMount;
  }();

  _proto3.signInHandler = function () {
    function signInHandler() {
      Session.set('showForgotForm', false);
      Session.set('showSignupForm', false);
      Session.set('showLoginSignupFancyBoxDialog', true);
      Session.set('showLoginDialog', true);
    }

    return signInHandler;
  }();

  _proto3.signUpHandler = function () {
    function signUpHandler(event) {
      event.preventDefault(); // var usernameInput = $(".login-input--username");

      var emailInput = $(".login-input-email-LoginFormSignUpViewLandlord");
      var passwordInput = $(".login-input-password-LoginFormSignUpViewLandlord");
      var fullNameInput = $(".login-input-fullName-LoginFormSignUpViewLandlord");
      var mobileInput = $(".login-input-mobile-LoginFormSignUpViewLandlord");
      var email = emailInput.val().trim();
      var password = passwordInput.val().trim();
      var fullName = fullNameInput.val().trim();
      var mobile = mobileInput.val().trim();
      var validatedEmail = LoginFormValidation.email(email);
      var validatedFullName = LoginFormValidation.username(fullName);
      var validatedPassword = LoginFormValidation.password(password, {
        validationLevel: "length"
      });
      var validatedMobile = LoginFormValidation.mobile(mobile);
      var errors = [];
      this.setState({
        formMessages: {}
      });
      this.setState({
        isLoading: true
      });

      if (validatedEmail !== true) {
        errors.push(validatedEmail);
      }

      if (validatedFullName !== true) {
        errors.push(validatedFullName);
      }

      if (validatedMobile !== true) {
        errors.push(validatedMobile);
      }

      if (validatedPassword !== true) {
        errors.push(validatedPassword);
      }

      if (errors.length) {
        this.setState({
          formMessages: {
            errors: errors
          }
        });
        this.setState({
          isLoading: false
        });
        return;
      }

      var newUserData = {
        // username: username,
        email: email,
        password: password,
        profile: {
          name: fullName,
          email: email,
          mobile: mobile
        }
      };

      this.createUserCallback = function (error, result) {
        fbq('track', 'EmailLandlordSignup' + (error ? "Failed" : "Successful"));
        ga('send', 'event', 'General', 'userLoginSignup', 'Email Landlord Signup ' + (error ? "Failed" : "Successful"));
        this.setState({
          isLoading: false
        });

        if (error) {
          // Show some error message
          this.setState({
            formMessages: {
              errors: [error]
            }
          });
        } else {
          var isOnPage = false;
          if (this.props.onPage) isOnPage = true;

          if (!isOnPage) {
            $('#signin-div , .fancybox-overlay').hide();
            Session.set('showLoginDialog', false);
            Session.set('showSignupDialog', false);
            Session.set('showLoginSignupFancyBoxDialog', false);
          }

          Session.set('loginFlowComplete', true);
          Session.set('loginFlowStart', undefined);
          delete Session.keys.loginFlowStart;
        }
      };

      this.createUserCallback = this.createUserCallback.bind(this);
      Accounts.createUser(newUserData, this.createUserCallback);
    }

    return signUpHandler;
  }();

  _proto3.forgotPwdHandler = function () {
    function forgotPwdHandler() {
      var isOnPage = false;
      if (this.props.onPage) isOnPage = true;

      if (!isOnPage) {
        Session.set('showForgotForm', true);
        Session.set('showSignupForm', false);
        Session.set('showLoginSignupFancyBoxDialog', true);
        Session.set('showLoginDialog', true);
      } else {
        Session.set('showForgotForm', true);
      }
    }

    return forgotPwdHandler;
  }();

  _proto3.radioHandler = function () {
    function radioHandler() {}

    return radioHandler;
  }();

  _proto3.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", {
        className: "landlordSignup-div signup-div"
      }, /*#__PURE__*/React.createElement("div", {
        className: "refund-div"
      }, /*#__PURE__*/React.createElement("h2", null, "Landlord Join Now")), /*#__PURE__*/React.createElement("div", {
        className: "profile-text"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rd-details"
      }, /*#__PURE__*/React.createElement("span", null, "I am a"), /*#__PURE__*/React.createElement("label", {
        className: "account-type-label",
        htmlFor: "rd1"
      }, /*#__PURE__*/React.createElement("input", {
        className: "account-type-radio",
        name: "accountType",
        value: "LANDLORD",
        type: "radio",
        defaultChecked: true,
        onChange: this.radioHandler
      }), "Landlord"), /*#__PURE__*/React.createElement("label", {
        className: "account-type-label"
      }, /*#__PURE__*/React.createElement("input", {
        className: "account-type-radio",
        name: "accountType",
        value: "LANDLORD",
        type: "radio"
      }), "Agent"), /*#__PURE__*/React.createElement("label", {
        className: "account-type-label"
      }, /*#__PURE__*/React.createElement("input", {
        className: "account-type-radio",
        name: "accountType",
        value: "LANDLORD",
        type: "radio"
      }), "Building Manager"), /*#__PURE__*/React.createElement("label", {
        className: "account-type-label"
      }, /*#__PURE__*/React.createElement("input", {
        className: "account-type-radio",
        name: "accountType",
        value: "LANDLORD",
        type: "radio"
      }), "Tenant"))), /*#__PURE__*/React.createElement("form", {
        className: "signin-form"
      }, /*#__PURE__*/React.createElement("div", {
        className: "form-border"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row frm-group"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-sm-6"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "name",
        type: "text",
        name: "name",
        className: "login-input-fullName-LoginFormSignUpViewLandlord",
        required: true
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "FULL NAME"), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("div", {
        className: "col-sm-6"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "email",
        type: "email",
        name: "email",
        className: "login-input-email-LoginFormSignUpViewLandlord",
        required: true
      }), /*#__PURE__*/React.createElement("label", null, "EMAIL ID"), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("div", {
        className: "col-sm-6"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "new-password",
        type: "password",
        name: "password",
        className: "login-input-password-LoginFormSignUpViewLandlord",
        required: true
      }), /*#__PURE__*/React.createElement("label", null, "PASSWORD"), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("div", {
        className: "col-sm-6"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "tel",
        type: "number",
        name: "mobile",
        className: "login-input-mobile-LoginFormSignUpViewLandlord SignupFormMobileField",
        required: true
      }), /*#__PURE__*/React.createElement("label", null, "MOBILE"), /*#__PURE__*/React.createElement("span", null)))), /*#__PURE__*/React.createElement(LoginFormMessages, {
        messages: this.state.formMessages
      })), /*#__PURE__*/React.createElement("div", {
        className: "signup-btn"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, this.state.isLoading ? /*#__PURE__*/React.createElement("button", {
        className: "transparent-btn btns"
      }, "Loading...") : /*#__PURE__*/React.createElement("button", {
        className: "blue-btn btns",
        type: "submit",
        onClick: this.signUpHandler
      }, "SIGN UP")), this.props.onPage ? "" : /*#__PURE__*/React.createElement("p", {
        style: {
          paddingTop: 0
        }
      }, "Already have an account? ", /*#__PURE__*/React.createElement("a", {
        href: "javascript:;"
      }, /*#__PURE__*/React.createElement("span", {
        style: {
          color: '#0c67a6'
        },
        "data-event-category": "accounts",
        "data-event-action": "signIn",
        onClick: this.props.showSignInFormHandler
      }, "Sign In")))))));
    }

    return render;
  }();

  return LoginFormSignUpViewLandlord;
}(Component);

;

var LoginFormResetPasswordView = /*#__PURE__*/function (_Component4) {
  _inheritsLoose(LoginFormResetPasswordView, _Component4);

  function LoginFormResetPasswordView(props) {
    var _this5;

    _this5 = _Component4.call(this, props) || this;
    _this5.state = {
      isLoading: true,
      showForm: true,
      formMessages: {
        errors: []
      }
    };
    _this5.forgotPwdHandler = _this5.forgotPwdHandler.bind(_assertThisInitialized(_this5)); // this.signInHandler = this.signInHandler.bind(this)
    // this.signUpHandler = this.signUpHandler.bind(this)

    _this5.tryAgainBtnHandler = _this5.tryAgainBtnHandler.bind(_assertThisInitialized(_this5));
    return _this5;
  }

  var _proto4 = LoginFormResetPasswordView.prototype;

  _proto4.componentDidMount = function () {
    function componentDidMount() {
      $('#signin-div').find('#email').focus();
      $('.new-focus').click(function () {
        $('#signin-div').find('#email').focus();
      });
      this.setState({
        isLoading: false
      });
    }

    return componentDidMount;
  }() // signInHandler(){
  //     var isOnPage = false;
  //     if(this.props.onPage)isOnPage = true;
  //     if( !isOnPage ){
  //         Session.set('showForgotForm',false)
  //         Session.set('showSignupForm',false)
  //         Session.set('showLoginSignupFancyBoxDialog',true)
  //         Session.set('showLoginDialog',true)
  //     }else{
  //         this.props.showSignInFormHandler();
  //         // Session.set('showForgotForm',false)
  //     }
  // }
  ;

  _proto4.forgotPwdHandler = function () {
    function forgotPwdHandler(event) {
      var _this6 = this;

      event.preventDefault();
      var emailAddress = $(".login-input-email-LoginFormResetPasswordView").val().trim();
      var validatedEmail = LoginFormValidation.email(emailAddress);
      var errors = [];
      this.setState({
        formMessages: {}
      });
      this.setState({
        isLoading: true
      });

      if (validatedEmail !== true) {
        errors.push(validatedEmail);
      }

      if (errors.length) {
        this.setState({
          formMessages: {
            errors: errors
          }
        });
        this.setState({
          isLoading: false
        });
        return;
      }

      this.forgotPwdCallback = function (error) {
        fbq('track', 'ForgotPwd' + (error ? "Failed" : "Successful"));
        ga('send', 'event', 'General', 'userLoginSignup', 'Forgot Password ' + (error ? "Failed" : "Successful"));

        _this6.setState({
          isLoading: false
        }); // Show some message confirming result


        if (error) {
          console.log(error);

          _this6.setState({
            formMessages: {
              errors: [error]
            }
          });
        } else {
          _this6.setState({
            showForm: false
          });

          _this6.setState({
            formMessages: {
              info: [{
                reason: "Password reset mail sent."
              }]
            }
          });
        }
      };

      this.forgotPwdCallback = this.forgotPwdCallback.bind(this);
      Accounts.forgotPassword({
        email: emailAddress
      }, this.forgotPwdCallback);
    }

    return forgotPwdHandler;
  }();

  _proto4.tryAgainBtnHandler = function () {
    function tryAgainBtnHandler() {
      this.state.setState({
        showForm: true
      });
    }

    return tryAgainBtnHandler;
  }();

  _proto4.contactUsClickHandler = function () {
    function contactUsClickHandler() {
      if ($) if ($.fancybox) $.fancybox.close();
    }

    return contactUsClickHandler;
  }();

  _proto4.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, this.state.showForm ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
        className: "refund-div"
      }, /*#__PURE__*/React.createElement("h2", null, "Forgot password?")), /*#__PURE__*/React.createElement("div", {
        className: "profile-text"
      }, /*#__PURE__*/React.createElement("h5", {
        className: "no-capitalize"
      }, "Enter your registered Email ID"), /*#__PURE__*/React.createElement("form", {
        className: "signin-form"
      }, /*#__PURE__*/React.createElement("div", {
        className: "form-border"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input  " + (this.state.formMessages.errors ? this.state.formMessages.errors.email ? "has-error has-feedback" : "" : "")
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "email",
        type: "email",
        name: "email",
        required: true,
        htmlFor: "email-LoginFormResetPasswordView",
        className: "login-input-email-LoginFormResetPasswordView"
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: "email-LoginFormResetPasswordView"
      }, "EMAIL ID"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement(LoginFormMessages, {
        messages: this.state.formMessages
      }), /*#__PURE__*/React.createElement("div", {
        className: "signup-btn"
      }, this.state.isLoading ? /*#__PURE__*/React.createElement("button", {
        className: "transparent-btn btns"
      }, "Loading...") : /*#__PURE__*/React.createElement("button", {
        className: "blue-btn btns",
        type: "submit",
        "data-event-action": "accounts",
        onClick: this.forgotPwdHandler
      }, "Reset My Password"), /*#__PURE__*/React.createElement("h6", null, /*#__PURE__*/React.createElement("span", {
        style: {
          color: '#0c68a7'
        },
        "data-event-category": "accounts",
        "data-event-action": "signIn",
        onClick: this.props.showSignInFormHandler
      }, "Sign In"))))))) : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
        className: "refund-div"
      }, /*#__PURE__*/React.createElement("h2", null, "We just emailed you a link")), /*#__PURE__*/React.createElement("div", {
        className: "profile-text"
      }, /*#__PURE__*/React.createElement("h5", {
        className: "no-capitalize"
      }, "Please check your email and click the secure link."), /*#__PURE__*/React.createElement("div", {
        className: "signup-btn"
      }, /*#__PURE__*/React.createElement("button", {
        className: "transparent-btn btns tryAgainBtn",
        onClick: this.tryAgainBtnHandler
      }, "Try again")), /*#__PURE__*/React.createElement("p", null), /*#__PURE__*/React.createElement("p", {
        className: "color-text contactusBtn"
      }, "If you don\u2019t see our email, check your spam folder or ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('contactus'),
        onClick: this.contactUsClickHandler
      }, "Contact us")))));
    }

    return render;
  }();

  return LoginFormResetPasswordView;
}(Component);

;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MainLayoutFooter.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/layout/MainLayoutFooter.jsx                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return MainLayoutFooter;
  }
});
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 0);

var MainLayoutFooter = /*#__PURE__*/function (_Component) {
  _inheritsLoose(MainLayoutFooter, _Component);

  function MainLayoutFooter() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = MainLayoutFooter.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("section", {
        className: "footer-div"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-9 col-sm-12 col-xs-12 foot-menu"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 col-sm-3 col-xs-12 foot-logo"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home')
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/spot-my-crib-logo.png"),
        height: "32px",
        alt: ""
      }))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-9 col-sm-9 col-xs-12 pad0"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-bot-2"
      }, "TENANTS")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('b', {
          slug: 'rent-in-dublin-ireland'
        })
      }, "Rent in Dublin")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('b', {
          slug: 'rent-in-cork-ireland'
        })
      }, "Rent in Cork")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('b', {
          slug: 'rent-in-kildare-ireland'
        })
      }, "Rent in Kildare")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('b', {
          slug: 'rent-in-galway-ireland'
        })
      }, "Rent in Galway")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('b', {
          slug: 'rent-in-meath-ireland'
        })
      }, "Rent in Meath")))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-bot-2"
      }, "LANDLORDS")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('advertisewithus')
      }, "List My Property")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('estateagent')
      }, "Estate Agents/Landlords")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('howitworks')
      }, "How it Works?")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('faqs')
      }, "FAQs")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('contactus')
      }, "Contact Us")))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-bot-2"
      }, "SPOTMYCRIB")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('about')
      }, "About Us")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('bloghome')
      }, "Blog")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('careers')
      }, "Careers")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('gdpr')
      }, "Data Protection / EU GDPR")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('terms')
      }, "Legal")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('privacy')
      }, "Privacy Policy")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('cookiepolicy')
      }, "Cookie Policy")))))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 col-sm-12 col-xs-12 social-icon"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 col-sm-12 col-xs-12"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "https://www.facebook.com/SpotMyCrib/",
        target: "_blank"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/facebook-icon.png"),
        alt: ""
      }))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "https://twitter.com/SpotMyCrib",
        target: "_blank"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/twitter-icon.png"),
        alt: ""
      }))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "https://www.linkedin.com/company/11223356/",
        target: "_blank"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/linkedin-icon.png"),
        alt: ""
      }))))))))), /*#__PURE__*/React.createElement("section", {
        className: "copyright",
        style: {
          display: 'none'
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("ul", {
        className: "footer-left visible-md"
      }, /*#__PURE__*/React.createElement("li", null, "SpotMyCrib. ")), /*#__PURE__*/React.createElement("ul", {
        className: "footer-left hidden-md"
      }, /*#__PURE__*/React.createElement("li", null, "SpotMyCrib. ")))));
    }

    return render;
  }();

  return MainLayoutFooter;
}(Component);

;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MainLayoutHeader.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/layout/MainLayoutHeader.jsx                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _assertThisInitialized;

module.link("@babel/runtime/helpers/assertThisInitialized", {
  default: function (v) {
    _assertThisInitialized = v;
  }
}, 0);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 1);
module.export({
  LoginFormHorizontalT: function () {
    return LoginFormHorizontalT;
  },
  SocialLoginButtonsT: function () {
    return SocialLoginButtonsT;
  },
  LoginPage: function () {
    return LoginPage;
  },
  LoginPageHorizontal: function () {
    return LoginPageHorizontal;
  },
  LoginFormT: function () {
    return LoginFormT;
  },
  LoginFormMessages: function () {
    return LoginFormMessages;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var withTracker;
module.link("meteor/react-meteor-data", {
  withTracker: function (v) {
    withTracker = v;
  }
}, 2);
var LoginFormSignInView, LoginFormSignUpView, LoginFormSignUpViewLandlord, LoginFormResetPasswordView;
module.link("./LoginFormViews.jsx", {
  LoginFormSignInView: function (v) {
    LoginFormSignInView = v;
  },
  LoginFormSignUpView: function (v) {
    LoginFormSignUpView = v;
  },
  LoginFormSignUpViewLandlord: function (v) {
    LoginFormSignUpViewLandlord = v;
  },
  LoginFormResetPasswordView: function (v) {
    LoginFormResetPasswordView = v;
  }
}, 3);
emailAlerts = [// {
//     heading: 'OH, HEY!',
//     para: 'Get your dream place sooner without even searching for it! Sign up for our emails and we will send you the latest properties of your choice',
//     yesButtonText: "Awesome 🤘👍"
// },
{
  heading: 'Always First.',
  para: 'Be the first to hear about the latest lettings in your area. Signup for our email alerts.',
  yesButtonText: "HELL YES!"
} // ,
// {
//     heading: 'Get Notified.',
//     para: 'Get your rental soon by signing up for our email alerts. Be the first one to know when a letting is posted.',
//     yesButtonText: "Okays! Sign me up. :)"
// }
];
EMAIL_ALERT_VARIATION_count = 2; // EMAIL_ALERT_VARIATION = Math.floor(Math.random() * EMAIL_ALERT_VARIATION_count) // expected output: 0, 1, 2

EMAIL_ALERT_VARIATION = 0; //Keeping only 1 variation.

EMAILALERT = emailAlerts[EMAIL_ALERT_VARIATION];
isMobileMenuEventAttached = false;

function delayedFunctions() {
  // if(!isMobileMenuEventAttached) {
  $(document).unbind('click').bind('click', function (e) {
    if (!$('.xs-menu').hasClass('slide-right')) {
      //Its not open
      if ($(e.target).closest(".xs-menu-icon-master").length > 0) {
        if (FlowRouter.current().route.name == 'home') $('.carousel-indicators').addClass('carousel-indicatorsLowZindex');
        $('.xs-menu').addClass('slide-right');
        return true;
      } else return true;
    } else {
      //Its open
      if ($(e.target).closest(".xs-menu-close-icon .xs-close, .xs-menu a").length > 0 || $(e.target).closest(".slide-right").length < 1) {
        $('.xs-menu').removeClass('slide-right');
        if (FlowRouter.current().route.name == 'home') setTimeout(function () {
          if (FlowRouter.current().route.name == 'home') $('.carousel-indicators').removeClass('carousel-indicatorsLowZindex');
        }, 250);
        return true;
      }
    }
  }); // isMobileMenuEventAttached = true;
  // }
}

function showLoginDialog() {
  Session.set('showForgotForm', false);
  Session.set('showSignupForm', false);
  Session.set('showLoginSignupFancyBoxDialog', true);
  Session.set('showLoginDialog', true);
}

function showSignupDialog() {
  Session.set('showForgotForm', false);
  Session.set('showSignupForm', true);
  Session.set('showLoginSignupFancyBoxDialog', true);
  Session.set('showLoginDialog', true);
}

function showLoginPopup() {
  // let doesDivStillExists = $('#signin-div').html()
  // if( doesDivStillExists != "" ){//To prevent home page dialogs
  $.fancybox({
    'padding': 0,
    'href': '#signin-div',
    afterClose: function (template) {
      console.log(template); //template.showLoginDialog.set(false);

      Session.set('isLandLordMode', false);
      Session.set('showLoginDialog', false);
      Session.set('showLoginSignupFancyBoxDialog', false);
      Session.set('loginFromApplyNowBtn', false);
    }
  });
}

function emailValidation(email) {
  email = email.trim();
  var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; // Valid

  if (re.test(email)) {
    return true;
  } // Invalid


  return {
    error: "INVALID_EMAIL",
    reason: "Please enter a valid email address in format pat@gmail.com"
  };
}

function decideAndShowCreateAlertPopup() {
  // console.log("Apply decideAndShowCreateAlertPopup")
  var showAlertCreate = true;
  var saidNo = parseInt(readCookie('emailAlertNoThanks'));

  if (!saidNo) {
    var c = parseInt(readCookie('emailAlertShowedCount'));
    var on = parseInt(readCookie('emailAlertShowedOnTime'));
    var tmp = (Date.now() - on) / 60000; // time in mins
    // console.log('Time is: '+tmp);

    if (c > 1) {
      if (tmp < 2) showAlertCreate = false; //its not even 2mns since last popup show, so wait
    }

    if (c > 2) {
      if (tmp < 2) showAlertCreate = false; //its not even 2mns since last popup show, so wait
    }

    if (c > 3) {
      if (tmp < 3) showAlertCreate = false; //its not even 3mns since last popup show, so wait
    }

    if (c > 4) {
      if (tmp < 6) showAlertCreate = false; //its not even 6mns since last popup show, so wait
    }

    if (c > 5) {
      if (tmp < 12) showAlertCreate = false; //its not even 12mns since last popup show, so wait
    }
  }

  var user = Meteor.user();

  if (user) {
    if (user.profile.emailAlertsActive || user.profile.emailAlertsNoThanks) showAlertCreate = false; // he already has alerts or he said no to them.
  }

  if (parseInt(readCookie('emailAlertAlreadyHasIt')) || parseInt(readCookie('emailAlertNoThanks'))) showAlertCreate = false; // He already has alerts or He already said no
  //you don't need above fallback because this function is called only after 3-5 sec , by then user subscription must be loaded.
  // console.log("decision: "+showAlertCreate)

  if (showAlertCreate) {
    showCreateAlertPopup();
  }
}

function showCreateAlertPopup() {
  if (['rent', "b", 'letting'].includes(FlowRouter.current().route.name)) {
    var c = parseInt(readCookie('emailAlertShowedCount'));
    c = parseInt(c);
    if (isNaN(c)) c = 1;else {
      c++;
    }
    createCookie('emailAlertShowedCount', c, 5);
    createCookie('emailAlertShowedOnTime', Date.now(), 5);
    $.fancybox({
      'padding': 0,
      'href': '#create-alert-popup',
      afterShow: function () {
        $('#emailAlertUserEmailAddress').focus();
        ga('send', 'event', 'emailAlert', 'Show Email Alert', 'Route name: ' + FlowRouter.current().route.name + ' Variation: ' + EMAIL_ALERT_VARIATION);
      },
      afterClose: function () {
        Session.set('showCreateAlertPopup', false);
      }
    });
  }
}

function showAddPropertyHeaderPopup() {
  $.fancybox({
    'padding': 0,
    'href': '#addPropertyHeader-div',
    afterClose: function (template) {
      //console.log(template);
      Session.set('showAddPropertyHeaderTemplate', false);
      Session.set('showAddPropertyHeaderFancyBoxDialog', false);
    }
  });
}

function createCookie(name, value, days) {
  var expires = "";

  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toUTCString();
  }

  document.cookie = name + "=" + value + expires + "; path=/";
}

function readCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');

  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];

    while (c.charAt(0) == ' ') {
      c = c.substring(1, c.length);
    }

    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
  }

  return null;
}

function eraseCookie(name) {
  createCookie(name, "", -1);
}

function loadFonts() {
  (function () {
    var wf = document.createElement('link');
    wf.href = cdnPath('/fonts/Montserrat/stylesheet.css');
    wf.rel = 'stylesheet';
    wf.async = 'true'; //link doesnt support async

    var s = document.getElementsByTagName('link')[0];
    s.parentNode.insertBefore(wf, s);
    Session.set('fontsLoaded', true); // var wf = document.createElement('script');
    // wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
    // wf.type = 'text/javascript';
    // wf.async = 'true';
    // var s = document.getElementsByTagName('script')[0];
    // s.parentNode.insertBefore(wf, s);
  })();
}

var MainLayoutHeader = /*#__PURE__*/function (_Component) {
  _inheritsLoose(MainLayoutHeader, _Component);

  function MainLayoutHeader(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      emailAlertEmailAddress: _this.props.currentUser ? _this.props.currentUser.profile.email : ""
    };
    _this.emailAlertEmailAddressHandler = _this.emailAlertEmailAddressHandler.bind(_assertThisInitialized(_this));
    _this.NeedsCreateAlertPopup = false;

    if (['rent', "b", 'letting'].includes(FlowRouter.current().route.name)) {
      _this.NeedsCreateAlertPopup = true; // EMAIL_ALERT_VARIATION = Math.floor(Math.random() * EMAIL_ALERT_VARIATION_count) // expected output: 0, 1

      EMAIL_ALERT_VARIATION = 0;
      EMAILALERT = emailAlerts[EMAIL_ALERT_VARIATION];
    }

    return _this;
  }

  var _proto = MainLayoutHeader.prototype;

  _proto.componentWillReceiveProps = function () {
    function componentWillReceiveProps(nextProps) {
      if (nextProps.currentUser && !this.state.emailAlertEmailAddress) //update only if it has vals and emailAlertEmailAddress is empty.
        this.setState({
          emailAlertEmailAddress: nextProps.currentUser.profile.email
        });
    }

    return componentWillReceiveProps;
  }();

  _proto.componentWillMount = function () {
    function componentWillMount() {
      if (Meteor.isClient) {
        Session.set('showLoginDialog', false);
        Session.set('showForgotForm', false);
        Session.set('showLoginDialog', false);
        Session.set('showLoginSignupFancyBoxDialog', false);
        Session.set('showAddPropertyHeaderTemplate', false);
        Session.set('showAddPropertyHeaderFancyBoxDialog', false);
        if (!Session.get("showErrorDlg")) Session.set("showErrorDlg", []);
      }

      this.state = {
        newAlertCreateForm: true,
        newAlertCreatedSuccessfully: false
      };
      this.emailAlertCreateBtnHandler = this.emailAlertCreateBtnHandler.bind(this);
      this.emailAlertNoThanksBtnHandler = this.emailAlertNoThanksBtnHandler.bind(this);
    }

    return componentWillMount;
  }();

  _proto.emailAlertCreateBtnHandler = function () {
    function emailAlertCreateBtnHandler() {
      console.log('emailAlertCreateBtnHandler');
      var val = $('#emailAlertUserEmailAddress').val();
      var validatedEmail = emailValidation(val);

      if (validatedEmail !== true) {
        alert('Invalid email, please enter a valid email address.');
        $('#emailAlertUserEmailAddress').focus();
        return;
      }

      this.subscribeToEmailAlert = function (error, result) {
        if (error) {
          console.log(error);
          alert('Error: ' + error.reason);
          $('#emailAlertUserEmailAddress').focus();
          return;
        } else {
          createCookie('emailAlertAlreadyHasIt', 1, 365);
          this.setState({
            newAlertCreateForm: false,
            newAlertCreatedSuccessfully: true
          });
          setTimeout(function () {
            if ($) if ($.fancybox) $.fancybox.close();
          }, 10000);
        }
      };

      this.subscribeToEmailAlert = this.subscribeToEmailAlert.bind(this);
      Meteor.call('subscribeToEmailAlert', val, this.subscribeToEmailAlert);
      ga('send', 'event', 'emailAlert', 'Created Email Alert', 'Route name: ' + FlowRouter.current().route.name + ' Variation: ' + EMAIL_ALERT_VARIATION);
    }

    return emailAlertCreateBtnHandler;
  }();

  _proto.emailAlertNoThanksBtnHandler = function () {
    function emailAlertNoThanksBtnHandler() {
      console.log('emailAlertNoThanksBtnHandler');
      createCookie('emailAlertNoThanks', 1, 365);

      if (this.props.currentUser) {
        Meteor.call('emailAlertsNoThanks');
      }

      if ($) if ($.fancybox) $.fancybox.close();
    }

    return emailAlertNoThanksBtnHandler;
  }();

  _proto.componentDidMount = function () {
    function componentDidMount() {
      $.getScript(cdnPath('/js/bootstrap.min.js'), function () {// console.log("Bootstrap loaded")
      }); // $.getScript(cdnPath('//static.filestackapi.com/filestack-js/1.x.x/filestack.min.js'), function(){
      //     console.log("Filestack loaded")
      // });

      $.getScript(cdnPath('/plugins/fancybox/js/jquery.fancybox.min.js'), function () {
        // script should be loaded and do something with it.
        $('.fancybox').fancybox({
          scrolling: 'no',
          helpers: {
            overlay: {
              locked: true
            }
          }
        });
      });

      if (Meteor.isClient) {
        var fontsLoaded = Session.get('fontsLoaded');

        if (!fontsLoaded) {
          //Below code is taken from https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery
          var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
          if (raf) raf(function () {
            window.setTimeout(loadFonts, 0);
          });else window.addEventListener('load', loadFonts);
        }
      }

      setTimeout(delayedFunctions, 1500);

      if (['rent', "b", 'letting'].includes(FlowRouter.current().route.name)) {
        setTimeout(function () {
          decideAndShowCreateAlertPopup();
        }, 10000);
        var runOnlyOnce = false;
        $(document).off('scroll').on('scroll', function () {
          try {
            var addon = 50;
            if (FlowRouter.current().route.name == 'b') addon = 300;

            if ($(this).scrollTop() >= $('.subscribeTillPopop').position().top - addon && !runOnlyOnce) {
              runOnlyOnce = true;
              decideAndShowCreateAlertPopup();
            }
          } catch (e) {}
        });
      }
    }

    return componentDidMount;
  }();

  _proto.showLoginDialogClick = function () {
    function showLoginDialogClick(event) {
      showLoginDialog();
    }

    return showLoginDialogClick;
  }();

  _proto.showSignupDialogClick = function () {
    function showSignupDialogClick(event) {
      showSignupDialog();
    }

    return showSignupDialogClick;
  }();

  _proto.logoutBtnClick = function () {
    function logoutBtnClick(event) {
      Meteor.logout(function (err) {
        if (err) {
          throw new Meteor.Error("Logout failed");
        }
      });
    }

    return logoutBtnClick;
  }();

  _proto.profileBtnClick = function () {
    function profileBtnClick(event) {
      FlowRouter.go('account/profile');
    }

    return profileBtnClick;
  }();

  _proto.cookieConsentBtnClick = function () {
    function cookieConsentBtnClick(event) {
      createCookie('cookieConsent', 1, 365);
      $('.cookieConsentArea').remove();
    }

    return cookieConsentBtnClick;
  }();

  _proto.emailAlertEmailAddressHandler = function () {
    function emailAlertEmailAddressHandler(event) {
      this.setState({
        emailAlertEmailAddress: event.target.value
      });
    }

    return emailAlertEmailAddressHandler;
  }();

  _proto.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("div", null, this.props.showCookieConsent ? /*#__PURE__*/React.createElement("section", {
        className: "cookieConsentArea"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "cookieConsentArea-inner"
      }, /*#__PURE__*/React.createElement("div", {
        className: "left-menu text-center",
        style: {
          color: 'white'
        }
      }, /*#__PURE__*/React.createElement("p", null, "  SpotMyCrib uses cookies. By continuing to use this site you consent to the use of cookies in accordance to our  ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('cookiepolicy')
      }, " cookie policy "), ".", /*#__PURE__*/React.createElement("button", {
        className: "green-btn btns cookieConsentBtn",
        onClick: self.cookieConsentBtnClick.bind(this),
        type: "button",
        style: {
          marginLeft: 20
        }
      }, "I understand")))))) : "", /*#__PURE__*/React.createElement("section", {
        className: "header"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "logo-holder-div"
      }, /*#__PURE__*/React.createElement("div", {
        className: "xs-menu-icon-master"
      }, /*#__PURE__*/React.createElement("div", {
        className: "xs-menu-icon"
      }, /*#__PURE__*/React.createElement("span", {
        className: "menu-xs sprite"
      }))), /*#__PURE__*/React.createElement("div", {
        className: "logo-holder"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home')
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/spot-my-crib-logo.png"),
        alt: "SpotMyCrib",
        title: "SpotMyCrib - Safe and easy rentals",
        className: "logo-big"
      }), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/spotmycrib-logo-130.jpg"),
        alt: "SpotMyCrib",
        title: "SpotMyCrib - Safe and easy rentals",
        className: "logo-xs"
      }))), /*#__PURE__*/React.createElement("div", {
        className: "menu"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", {
        className: "hidden-xs"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('advertisewithus'),
        className: "btns green-btn addPropertyHeaderBtn",
        type: "button"
      }, /*#__PURE__*/React.createElement("span", {
        className: "glyphicon glyphicon-object-align-bottom",
        "aria-hidden": "true"
      }), " Advertise property")), this.props.currentUserId ? /*#__PURE__*/React.createElement("li", {
        className: "login-menu hidden-xs"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('account/myProperties')
      }, /*#__PURE__*/React.createElement("span", {
        className: "glyphicon glyphicon-check",
        "aria-hidden": "true"
      }), " MY PROPERTIES")) : "", this.props.currentUserId ? /*#__PURE__*/React.createElement("li", {
        className: "login-menu hidden-xs"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('account/profile')
      }, /*#__PURE__*/React.createElement("span", {
        className: "glyphicon glyphicon-check",
        "aria-hidden": "true"
      }), " MY REFERENCES")) : "", this.props.currentUserId ? /*#__PURE__*/React.createElement("li", {
        className: "login-menu hidden-xs"
      }, /*#__PURE__*/React.createElement("a", {
        href: "javascript:void(0);",
        onClick: self.logoutBtnClick.bind(this),
        className: "logoutBtn"
      }, "SIGN OUT")) : "", this.props.currentUserId ? /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("div", {
        className: "navbar-accounts"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.path('account/profile')
      }, /*#__PURE__*/React.createElement("img", {
        className: "circular-icon profileBtn",
        src: this.props.getProfilePic,
        width: "40px",
        height: "40px"
      }), /*#__PURE__*/React.createElement("span", {
        id: "logged-in-display-name profileBtn"
      }, this.props.displayName)))) : /*#__PURE__*/React.createElement("ul", {
        className: "oval logedout-menu"
      }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        className: "right-border showLoginDialog",
        onClick: self.showLoginDialogClick.bind(this),
        href: "javascript:;"
      }, "SIGN IN")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "javascript:;",
        onClick: self.showSignupDialogClick.bind(this),
        className: "showSignupDialog"
      }, "SIGN UP"))))), /*#__PURE__*/React.createElement("div", {
        className: "xs-menu visible-xs transition"
      }, /*#__PURE__*/React.createElement("div", {
        className: "xs-menu-close-icon text-right"
      }, /*#__PURE__*/React.createElement("span", {
        className: "sprite xs-close"
      })), /*#__PURE__*/React.createElement("ul", {
        className: "transition"
      }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home')
      }, "HOME / SEARCH")), this.props.currentUserId ? /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.path('account/profile')
      }, "MY REFERENCES")) : "", /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('advertisewithus')
      }, "LIST PROPERTY")), this.props.currentUserId ? /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.path('account/myProperties')
      }, "MY PROPERTIES")) : "", /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('estateagent')
      }, "AGENTS/LANDLORDS")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('howitworks')
      }, "HOW IT WORKS?")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('faqs')
      }, "FAQ")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('contactus')
      }, "CONTACT US")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('careers')
      }, "CAREERS")), this.props.currentUserId ? /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "javascript:void(0);",
        onClick: self.logoutBtnClick.bind(this)
      }, "SIGN OUT")) : ""))))), /*#__PURE__*/React.createElement("div", {
        id: "errorModel",
        className: "alert alert-danger ",
        style: {
          display: 'none'
        }
      }), /*#__PURE__*/React.createElement("div", {
        id: "signin-div",
        className: "signin1",
        style: {
          display: 'none'
        }
      }, this.props.showLoginDialog ? /*#__PURE__*/React.createElement(LoginFormT, null) : ""), this.NeedsCreateAlertPopup ? /*#__PURE__*/React.createElement("div", {
        id: "create-alert-popup",
        style: {
          display: 'none'
        },
        className: "verification-div1"
      }, /*#__PURE__*/React.createElement("div", {
        className: "refund-div"
      }, this.state.newAlertCreateForm && !this.state.newAlertCreatedSuccessfully ? /*#__PURE__*/React.createElement("h2", null, EMAILALERT.heading) : "", this.state.newAlertCreatedSuccessfully && !this.state.newAlertCreateForm ? /*#__PURE__*/React.createElement("h2", {
        className: "green-text"
      }, "Well Done! Alert Created.") : ""), this.state.newAlertCreateForm && !this.state.newAlertCreatedSuccessfully ? /*#__PURE__*/React.createElement("div", {
        className: "profile-text"
      }, /*#__PURE__*/React.createElement("p", {
        className: "color-text",
        style: {
          textAlign: 'center',
          margin: '10px 0px',
          fontSize: '14px'
        }
      }, EMAILALERT.para), /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement("form", {
        className: "signin-form",
        action: "javascript:void(0);"
      }, /*#__PURE__*/React.createElement("div", {
        className: "form-border"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("input", {
        type: "text",
        placeholder: "Enter your email address",
        id: "emailAlertUserEmailAddress",
        required: "required",
        style: {
          fontSize: '14px',
          marginBottom: '10px !important',
          borderBottom: 'none !important'
        },
        value: this.state.emailAlertEmailAddress,
        onChange: this.emailAlertEmailAddressHandler
      }))), /*#__PURE__*/React.createElement("div", {
        className: "signup-btn"
      }, /*#__PURE__*/React.createElement("button", {
        onClick: this.emailAlertCreateBtnHandler,
        className: "green-btn btns",
        type: "submit",
        style: {
          width: '100%',
          marginTop: '10px'
        }
      }, EMAILALERT.yesButtonText))), /*#__PURE__*/React.createElement("a", {
        href: "javascript:void(0)",
        onClick: this.emailAlertNoThanksBtnHandler,
        className: 'noThanks'
      }, "No thanks, I'm happy to search myself")) : "", this.state.newAlertCreatedSuccessfully && !this.state.newAlertCreateForm ? /*#__PURE__*/React.createElement("div", {
        className: "profile-text"
      }, /*#__PURE__*/React.createElement("p", {
        className: "color-text",
        style: {
          textAlign: 'center',
          margin: '10px 0px',
          fontSize: '13px'
        }
      }, "We will send you an email a day with new lettings. Be the first to apply for them. "), /*#__PURE__*/React.createElement("iframe", {
        src: "https://giphy.com/embed/fxsqOYnIMEefC",
        frameBorder: 0,
        className: "giphy-embed",
        allowFullScreen: true,
        style: {
          width: '80%'
        }
      })) : "", false ? /*#__PURE__*/React.createElement("div", {
        className: "profile-text"
      }, /*#__PURE__*/React.createElement("p", {
        className: "green-text",
        style: {
          textAlign: 'center',
          margin: '10px 0px',
          color: 'black'
        }
      }, "You will now be notified of the new lettings in Dundrum of County Dubin."), /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement("p", {
        className: "color-text mar-top-20",
        style: {
          textAlign: 'center',
          margin: '20px 0px 10px',

          /* display: 'none', */
          fontSize: '14px'
        }
      }, "Your active alerts are"), /*#__PURE__*/React.createElement("table", {
        className: "table table-bordered"
      }, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("th", {
        style: {
          textAlign: 'center'
        }
      }, "County"), /*#__PURE__*/React.createElement("th", {
        style: {
          textAlign: 'center'
        }
      }, "Area"), /*#__PURE__*/React.createElement("th", null))), /*#__PURE__*/React.createElement("tbody", {
        style: {
          color: '#8b8b8b',
          fontSize: '14px'
        }
      }, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, "Dublin"), /*#__PURE__*/React.createElement("td", null, "All Areas"), /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("a", null, "Delete"))), /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, "Limrick"), /*#__PURE__*/React.createElement("td", null, "City Center North"), /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("a", null, "Delete"))), /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, "Limrick"), /*#__PURE__*/React.createElement("td", null, "Madison square"), /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("a", null, "Delete")))))) : "") : "");
    }

    return render;
  }();

  return MainLayoutHeader;
}(Component);

;
module.exportDefault(withTracker(function () {
  var showCookieConsent = false;
  var errorModel = false;
  var showLoginDialog = false;

  if (Meteor.isClient) {
    if (Session.get('loginFlowComplete')) {
      setTimeout(function () {
        Session.set('loginFlowComplete', undefined);
      }, 1000);
    } ///////////////////// errorModel start


    var tmp = Session.get("showErrorDlg");
    if (!tmp) tmp = [];
    if (tmp) if (tmp.length) {
      var timeoutVal = 0;
      if (!$.fancybox) timeoutVal = 3000;
      var tmpHTML = '';

      for (var j = 0; j < tmp.length; j++) {
        tmpHTML += '<p>' + tmp[j] + '</p>';
      }

      $('#errorModel').html(tmpHTML);
      setTimeout(function () {
        $.fancybox({
          'padding': 0,
          'href': '#errorModel',
          // afterShow:function(template){
          //     setTimeout(function () {
          //         $.fancybox.close();
          //     },3000)
          // },
          afterClose: function () {
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            tmp.shift();
            Session.set("showErrorDlg", tmp);
          }
        });
      }, timeoutVal);
    } ///////////////////// showLoginDialog start

    if (Session.get('showLoginSignupFancyBoxDialog')) {
      showLoginPopup();
    } else {
      if ($) if ($.fancybox) $.fancybox.close();
    } ///////////////////// showCreateAlertPopup start


    if (Session.get('showCreateAlertPopup')) {
      showCreateAlertPopup();
    } // else {//No need for any control over its closing.
    //     if ($)
    //         if ($.fancybox)
    //             $.fancybox.close();
    // }


    showCookieConsent = !parseInt(readCookie('cookieConsent'));
    errorModel = Session.get("showErrorDlg");
    showLoginDialog = Session.get("showLoginDialog");
  }

  var user = Meteor.user(); ///////////////////// displayName start

  var displayName = "Guest";

  try {
    if (user) {
      if (user.profile && user.profile.name) {
        displayName = user.profile.name;
      }
    }
  } catch (e) {} ///////////////////// getProfilePic start


  var getProfilePic = cdnPath("/images/user-img.png");

  try {
    if (user.profile.picture) {
      if (user.services.facebook) if (user.services.facebook.indexOf('?width=40') == -1) getProfilePic = user.profile.picture + "?width=40"; //@BCompatibility : adding ?width=40 to it

      getProfilePic = user.profile.picture;
    }
  } catch (e) {}

  return {
    showCookieConsent: showCookieConsent,
    currentUserId: Meteor.userId(),
    errorModel: errorModel,
    showLoginDialog: showLoginDialog,
    displayName: displayName,
    currentUser: Meteor.user()
  };
})(MainLayoutHeader));

var LoginFormMessages = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(LoginFormMessages, _Component2);

  function LoginFormMessages() {
    return _Component2.apply(this, arguments) || this;
  }

  var _proto2 = LoginFormMessages.prototype;

  _proto2.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, this.props.messages ? /*#__PURE__*/React.createElement("div", null, this.props.messages.info ? this.props.messages.info.map(function (item, i) {
        return /*#__PURE__*/React.createElement("div", {
          className: "changePwdAlertMsgs alert alert-info",
          role: "alert",
          key: i
        }, /*#__PURE__*/React.createElement("span", {
          className: "glyphicon glyphicon-info-sign",
          "aria-hidden": "true"
        }), "\xA0 ", item.reason);
      }) : "", this.props.messages.warning ? this.props.messages.warning.map(function (item, i) {
        return /*#__PURE__*/React.createElement("div", {
          className: "changePwdAlertMsgs alert alert-warning",
          role: "alert",
          key: i
        }, /*#__PURE__*/React.createElement("span", {
          className: "glyphicon glyphicon-warning-sign",
          "aria-hidden": "true"
        }), "\xA0 ", item.reason);
      }) : "", this.props.messages.success ? this.props.messages.success.map(function (item, i) {
        return /*#__PURE__*/React.createElement("div", {
          className: "changePwdAlertMsgs alert success",
          role: "alert",
          key: i
        }, /*#__PURE__*/React.createElement("span", {
          className: "glyphicon glyphicon-ok",
          "aria-hidden": "true"
        }), "\xA0 ", item.reason);
      }) : "", this.props.messages.errors ? this.props.messages.errors.map(function (item, i) {
        return /*#__PURE__*/React.createElement("div", {
          className: "changePwdAlertMsgs alert alert-danger",
          role: "alert",
          key: i
        }, /*#__PURE__*/React.createElement("span", {
          className: "glyphicon glyphicon-exclamation-sign",
          "aria-hidden": "true"
        }), "\xA0 ", item.reason);
      }) : "") : "");
    }

    return render;
  }();

  return LoginFormMessages;
}(Component);

;

var LoginForm = /*#__PURE__*/function (_Component3) {
  _inheritsLoose(LoginForm, _Component3);

  function LoginForm(props) {
    var _this2;

    _this2 = _Component3.call(this, props) || this;
    _this2.state = {
      showForgotForm: props.showForgotForm ? true : false,
      showSignupForm: props.showSignupForm ? true : false,
      isLandLordMode: props.isLandLordMode ? true : false,
      loginFromApplyNowBtn: props.loginFromApplyNowBtn ? true : false
    };
    return _this2;
  }

  var _proto3 = LoginForm.prototype;

  _proto3.showForgotFormHandler = function () {
    function showForgotFormHandler() {
      this.setState({
        showForgotForm: true
      });
      this.setState({
        showSignupForm: false
      });
      this.setState({
        isLandLordMode: false
      });
    }

    return showForgotFormHandler;
  }();

  _proto3.showSignupFormHandler = function () {
    function showSignupFormHandler() {
      this.setState({
        showForgotForm: false
      });
      this.setState({
        showSignupForm: true
      });
      this.setState({
        isLandLordMode: false
      });
    }

    return showSignupFormHandler;
  }();

  _proto3.showSignInFormHandler = function () {
    function showSignInFormHandler() {
      this.setState({
        showForgotForm: false
      });
      this.setState({
        showSignupForm: false
      });
      this.setState({
        isLandLordMode: false
      });
    }

    return showSignInFormHandler;
  }();

  _proto3.showLandlordViewHandler = function () {
    function showLandlordViewHandler() {
      this.setState({
        showForgotForm: false
      });
      this.setState({
        showSignupForm: true
      });
      this.setState({
        isLandLordMode: true
      });
    }

    return showLandlordViewHandler;
  }();

  _proto3.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", {
        className: "loginForm"
      }, this.state.showForgotForm ? /*#__PURE__*/React.createElement(LoginFormResetPasswordView, {
        onPage: false,
        showSignInFormHandler: this.showSignInFormHandler.bind(this)
      }) : this.state.showSignupForm ? this.state.isLandLordMode ? /*#__PURE__*/React.createElement(LoginFormSignUpViewLandlord, {
        onPage: false,
        showSignInFormHandler: this.showSignInFormHandler.bind(this)
      }) : /*#__PURE__*/React.createElement(LoginFormSignUpView, {
        loginFromApplyNowBtn: this.state.loginFromApplyNowBtn,
        onPage: false,
        showSignInFormHandler: this.showSignInFormHandler.bind(this)
      }) : /*#__PURE__*/React.createElement(LoginFormSignInView, {
        loginFromApplyNowBtn: this.state.loginFromApplyNowBtn,
        onPage: false,
        showSignupFormHandler: this.showSignupFormHandler.bind(this),
        showForgotFormHandler: this.showForgotFormHandler.bind(this)
      }));
    }

    return render;
  }();

  return LoginForm;
}(Component);

;
module.runSetters(LoginFormT = withTracker(function () {
  var ret = {};

  if (Meteor.isClient) {
    ret.showSignupForm = Session.get('showSignupForm');
    ret.showForgotForm = Session.get('showForgotForm');
    ret.isLandLordMode = Session.get('isLandLordMode');
    ret.loginFromApplyNowBtn = Session.get('loginFromApplyNowBtn');
  }

  return ret;
})(LoginForm));

var LoginPage = /*#__PURE__*/function (_Component4) {
  _inheritsLoose(LoginPage, _Component4);

  function LoginPage() {
    return _Component4.apply(this, arguments) || this;
  }

  var _proto4 = LoginPage.prototype;

  _proto4.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("section", {
        className: "mar-top-20 no-print"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "head-border-bottom"
      }, /*#__PURE__*/React.createElement(LoginFormT, null)))));
    }

    return render;
  }();

  return LoginPage;
}(Component);

;

var SocialLoginButtons = /*#__PURE__*/function (_Component5) {
  _inheritsLoose(SocialLoginButtons, _Component5);

  function SocialLoginButtons() {
    return _Component5.apply(this, arguments) || this;
  }

  var _proto5 = SocialLoginButtons.prototype;

  _proto5.componentWillMount = function () {
    function componentWillMount() {
      if (Meteor.isClient) {
        Session.set('loginFlowStart', true);
        Session.set('loginFlowComplete', undefined);
        delete Session.keys.loginFlowComplete;
      }

      this.state = {
        errorMessages: {}
      };
      this.dontShow = true;
      this.buttonForText = '';

      switch (this.props.buttonFor) {
        case 'login':
          this.buttonForText = 'Login';
          break;

        case 'signup':
          this.buttonForText = 'Signup';
          break;

        default:
          this.buttonForText = 'Login / Signup';
      }

      this.handleFBLogin = this.handleFBLogin.bind(this);
      this.handleTwitterLogin = this.handleTwitterLogin.bind(this);
      this.handleGoogleLogin = this.handleGoogleLogin.bind(this);
      this.handleLinkedInLogin = this.handleLinkedInLogin.bind(this);
    }

    return componentWillMount;
  }();

  _proto5.handleFBLogin = function () {
    function handleFBLogin(event) {
      this.setState({
        errorMessages: {}
      });

      this.FBCallback = function (err) {
        switch (this.props.buttonFor) {
          case 'login':
            fbq('track', 'FBUserLogin' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'FB Login ' + (err ? "Failed" : "Successful"));
            break;

          case 'signup':
            fbq('track', 'FBUserSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'FB Signup ' + (err ? "Failed" : "Successful"));
            break;

          default:
            fbq('track', 'FBUserLoginSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'FB LoginSignup ' + (err ? "Failed" : "Successful"));
            break;
        }

        if (err) {
          console.log(err);
          var msg = 'Connect with Facebook failed. ';
          if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
            msg += err.reason + ' ';
          } else if (err.message) msg += err.message + '. ';
          msg += "Please try again. Contact us if needed.";
          var errors = [];
          errors.push({
            "error": "SOCIALLOGIN_FAIL",
            "reason": msg
          });
          this.setState({
            errorMessages: {
              errors: errors
            }
          });
        } else {
          if (this.props.usedInDlg) {
            Session.set('showLoginSignupFancyBoxDialog', false);
            Session.set('showForgotForm', false);
            Session.set('showSignupForm', true);
            Session.set('showLoginDialog', true);
          }

          Session.set('loginFlowComplete', true);
          Session.set('loginFlowStart', undefined);
          delete Session.keys.loginFlowStart;
        }
      };

      this.FBCallback = this.FBCallback.bind(this);
      Meteor.loginWithFacebook({}, this.FBCallback);
    }

    return handleFBLogin;
  }();

  _proto5.handleTwitterLogin = function () {
    function handleTwitterLogin(event) {
      this.setState({
        errorMessages: {}
      });

      this.TwitterCallback = function (err) {
        switch (this.props.buttonFor) {
          case 'login':
            fbq('track', 'TwitterUserLogin' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'Twitter Login ' + (err ? "Failed" : "Successful"));
            break;

          case 'signup':
            fbq('track', 'TwitterUserSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'Twitter Signup ' + (err ? "Failed" : "Successful"));
            break;

          default:
            fbq('track', 'TwitterUserLoginSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'Twitter LoginSignup ' + (err ? "Failed" : "Successful"));
            break;
        }

        if (err) {
          console.log(err);
          var msg = 'Connect with Twitter failed. ';
          if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
            msg += err.reason + ' ';
          } else if (err.message) msg += err.message + '. ';
          msg += "Please try again. Contact us if needed.";
          var errors = [];
          errors.push({
            "error": "SOCIALLOGIN_FAIL",
            "reason": msg
          });
          this.setState({
            errorMessages: {
              errors: errors
            }
          });
        } else {
          if (this.props.usedInDlg) {
            Session.set('showLoginSignupFancyBoxDialog', false);
            Session.set('showForgotForm', false);
            Session.set('showSignupForm', true);
            Session.set('showLoginDialog', true);
          }

          Session.set('loginFlowComplete', true);
          Session.set('loginFlowStart', undefined);
          delete Session.keys.loginFlowStart;
        }
      };

      this.TwitterCallback = this.TwitterCallback.bind(this);
      Meteor.loginWithTwitter({}, this.TwitterCallback);
    }

    return handleTwitterLogin;
  }();

  _proto5.handleGoogleLogin = function () {
    function handleGoogleLogin(event) {
      this.setState({
        errorMessages: {}
      });

      this.GoogleCallback = function (err) {
        switch (this.props.buttonFor) {
          case 'login':
            fbq('track', 'GoogleUserLogin' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'Google Login ' + (err ? "Failed" : "Successful"));
            break;

          case 'signup':
            fbq('track', 'GoogleUserSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'Google Signup ' + (err ? "Failed" : "Successful"));
            break;

          default:
            fbq('track', 'GoogleUserLoginSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'Google LoginSignup ' + (err ? "Failed" : "Successful"));
            break;
        }

        if (err) {
          console.log(err);
          var msg = 'Connect with Google failed. ';
          if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
            msg += err.reason + ' ';
          } else if (err.message) msg += err.message + '. ';
          msg += "Please try again. Contact us if needed.";
          var errors = [];
          errors.push({
            "error": "SOCIALLOGIN_FAIL",
            "reason": msg
          });
          this.setState({
            errorMessages: {
              errors: errors
            }
          });
        } else {
          if (this.props.usedInDlg) {
            Session.set('showLoginSignupFancyBoxDialog', false);
            Session.set('showForgotForm', false);
            Session.set('showSignupForm', true);
            Session.set('showLoginDialog', true);
          }

          Session.set('loginFlowComplete', true);
          Session.set('loginFlowStart', undefined);
          delete Session.keys.loginFlowStart;
        }
      };

      this.GoogleCallback = this.GoogleCallback.bind(this);
      Meteor.loginWithGoogle({}, this.GoogleCallback);
    }

    return handleGoogleLogin;
  }();

  _proto5.handleLinkedInLogin = function () {
    function handleLinkedInLogin(event) {
      this.setState({
        errorMessages: {}
      });

      this.LinkedInCallback = function (err) {
        switch (this.props.buttonFor) {
          case 'login':
            fbq('track', 'LinkedInUserLogin' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'LinkedIn Login ' + (err ? "Failed" : "Successful"));
            break;

          case 'signup':
            fbq('track', 'LinkedInUserSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'LinkedIn Signup ' + (err ? "Failed" : "Successful"));
            break;

          default:
            fbq('track', 'LinkedInUserLoginSignup' + (err ? "Failed" : "Successful"));
            ga('send', 'event', 'General', 'userLoginSignup', 'LinkedIn LoginSignup ' + (err ? "Failed" : "Successful"));
            break;
        }

        if (err) {
          console.log(err);
          var msg = 'Connect with LinkedIn failed. ';
          if (err.errorType == 'Accounts.LoginCancelledError') msg += 'Seems like attempt was cancelled. ';else if (err.error == 'account-exists') {
            msg += err.reason + ' ';
          } else if (err.message) msg += err.message + '. ';
          msg += "Please try again. Contact us if needed.";
          var errors = [];
          errors.push({
            "error": "SOCIALLOGIN_FAIL",
            "reason": msg
          });
          this.setState({
            errorMessages: {
              errors: errors
            }
          });
        } else {
          if (this.props.usedInDlg) {
            Session.set('showLoginSignupFancyBoxDialog', false);
            Session.set('showForgotForm', false);
            Session.set('showSignupForm', true);
            Session.set('showLoginDialog', true);
          }

          Session.set('loginFlowComplete', true);
          Session.set('loginFlowStart', undefined);
          delete Session.keys.loginFlowStart;
        }
      };

      this.LinkedInCallback = this.LinkedInCallback.bind(this);
      Meteor.loginWithLinkedIn({}, this.LinkedInCallback);
    }

    return handleLinkedInLogin;
  }();

  _proto5.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
        onClick: self.handleFBLogin,
        id: "facebook-login",
        className: "blue-btn btns social-button",
        "data-max-rows": "1",
        "data-size": "medium",
        "data-show-faces": "false",
        "data-auto-logout-link": "false"
      }, this.buttonForText, " with Facebook"), /*#__PURE__*/React.createElement("div", {
        onClick: self.handleTwitterLogin,
        id: "twitter-login",
        style: {
          marginTop: '10px'
        },
        className: "blue-btn btns social-button",
        "data-max-rows": "1",
        "data-size": "medium",
        "data-show-faces": "false",
        "data-auto-logout-link": "false"
      }, this.buttonForText, " with Twitter"), /*#__PURE__*/React.createElement("div", {
        onClick: self.handleGoogleLogin,
        id: "google-login",
        style: {
          marginTop: '10px'
        },
        className: "blue-btn btns social-button",
        "data-max-rows": "1",
        "data-size": "medium",
        "data-show-faces": "false",
        "data-auto-logout-link": "false"
      }, this.buttonForText, " with Google"), this.dontShow ? "" : /*#__PURE__*/React.createElement("div", {
        onClick: self.handleLinkedInLogin,
        id: "linkedin-login",
        style: {
          marginTop: '10px'
        },
        className: "blue-btn btns social-button",
        "data-max-rows": "1",
        "data-size": "medium",
        "data-show-faces": "false",
        "data-auto-logout-link": "false"
      }, "Login with LinkedIn"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(LoginFormMessages, {
        messages: this.state.errorMessages
      }), /*#__PURE__*/React.createElement("br", null));
    }

    return render;
  }();

  return SocialLoginButtons;
}(Component);

;
module.runSetters(SocialLoginButtonsT = withTracker(function () {
  var ret = {};

  if (Meteor.isClient) {
    ret.showSignupForm = Session.get('showSignupForm');
    ret.showForgotForm = Session.get('showForgotForm');
  }

  ret.user = Meteor.user();
  return ret;
})(SocialLoginButtons));

var LoginFormHorizontal = /*#__PURE__*/function (_Component6) {
  _inheritsLoose(LoginFormHorizontal, _Component6);

  function LoginFormHorizontal(props) {
    var _this3;

    _this3 = _Component6.call(this, props) || this;
    _this3.state = {
      showForgotForm: props.showForgotForm ? true : false,
      isLandLordMode: props.isLandLordMode ? true : false
    };
    return _this3;
  }

  var _proto6 = LoginFormHorizontal.prototype;

  _proto6.showForgotFormHandler = function () {
    function showForgotFormHandler() {
      this.setState({
        showForgotForm: true
      });
    }

    return showForgotFormHandler;
  }();

  _proto6.showSignInFormHandler = function () {
    function showSignInFormHandler() {
      this.setState({
        showForgotForm: false
      });
    }

    return showSignInFormHandler;
  }();

  _proto6.componentDidMount = function () {
    function componentDidMount() {
      if (this.props.user) Session.set('loginFlowComplete', true); //todo: check this
    }

    return componentDidMount;
  }();

  _proto6.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", {
        className: "loginForm onpageSignin-form"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement(SocialLoginButtonsT, null)), /*#__PURE__*/React.createElement("div", {
        className: "row text-center"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-6 col-sm-12"
      }, this.state.showForgotForm ? /*#__PURE__*/React.createElement(LoginFormResetPasswordView, {
        onPage: true,
        showSignInFormHandler: this.showSignInFormHandler.bind(this)
      }) : /*#__PURE__*/React.createElement(LoginFormSignInView, {
        onPage: true,
        showForgotFormHandler: this.showForgotFormHandler.bind(this)
      })), /*#__PURE__*/React.createElement("div", {
        className: "col-md-6 col-sm-12"
      }, this.state.isLandLordMode ? /*#__PURE__*/React.createElement(LoginFormSignUpViewLandlord, {
        onPage: true
      }) : /*#__PURE__*/React.createElement(LoginFormSignUpView, {
        onPage: true
      }))));
    }

    return render;
  }();

  return LoginFormHorizontal;
}(Component);

;
module.runSetters(LoginFormHorizontalT = withTracker(function () {
  var ret = {};
  ret.user = Meteor.user();
  return ret;
})(LoginFormHorizontal));

var LoginPageHorizontal = /*#__PURE__*/function (_Component7) {
  _inheritsLoose(LoginPageHorizontal, _Component7);

  function LoginPageHorizontal() {
    return _Component7.apply(this, arguments) || this;
  }

  var _proto7 = LoginPageHorizontal.prototype;

  _proto7.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("section", {
        className: "mar-top-20 mar-btm-20 no-print loginPageHorizontal"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "head-border-bottom"
      }, /*#__PURE__*/React.createElement(LoginFormHorizontalT, null)))));
    }

    return render;
  }();

  return LoginPageHorizontal;
}(Component);

;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"NotFound.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/layout/NotFound.jsx                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return NotFound;
  }
});
var Component;
module.link("react", {
  Component: function (v) {
    Component = v;
  }
}, 0);
var MainLayoutHeader;
module.link("./MainLayoutHeader", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 1);
var MainLayoutFooter;
module.link("./MainLayoutFooter", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var React;
module.link("react", {
  "default": function (v) {
    React = v;
  }
}, 3);

var NotFound = /*#__PURE__*/function (_Component) {
  _inheritsLoose(NotFound, _Component);

  function NotFound() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = NotFound.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("main", {
        role: "main",
        id: "main"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("h2", null, "Page Not Found"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("button", {
        className: "blue-btn btns backBtn",
        type: "button"
      }, "Try again"))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return NotFound;
}(Component);

;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"pages":{"AdvertiseWithUs.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/pages/AdvertiseWithUs.jsx                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _assertThisInitialized;

module.link("@babel/runtime/helpers/assertThisInitialized", {
  default: function (v) {
    _assertThisInitialized = v;
  }
}, 0);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 1);
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var ReactDOM;
module.link("react-dom", {
  "default": function (v) {
    ReactDOM = v;
  }
}, 2);
var withTracker;
module.link("meteor/react-meteor-data", {
  withTracker: function (v) {
    withTracker = v;
  }
}, 3);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 4);
var MainLayoutHeader, LoginFormHorizontalT;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  },
  LoginFormHorizontalT: function (v) {
    LoginFormHorizontalT = v;
  }
}, 5);
var Collections;
module.link("../../api/collections", {
  Collections: function (v) {
    Collections = v;
  }
}, 6);
if (Meteor.isClient) Session.set('subscriptionsReady', false);

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
} // function getAreas(countySelected) {
//     var distinctEntries = _.uniq(Collections.Areas.find({County:countySelected}, {
//         sort: {Area: 1}, fields: {Area: true}
//     }).fetch().map(function(x) {
//         return x.Area;
//     }), true);
//     allareas = []
//     for(var i=0;i< distinctEntries.length;i++){
//         if(!distinctEntries[i])continue;
//         allareas.push({label: titleCase(distinctEntries[i]), value: distinctEntries[i] })
//     }
//     return allareas;
// }


searialisedAdvertiseForm = '';

function saveToLocalStorage() {
  searialisedAdvertiseForm = $('#advertiseWithUsFormCF').serializeArray();

  if (localStorage) {
    // localStorage.searialisedAdvertiseForm=searialisedAdvertiseForm// doesn' work as it saves as string, but we need to store as object
    localStorage.advertisewithusFormData = {};
    localStorage.advertisewithusFormData_address = $("input[name='address.address']").val();
    localStorage.advertisewithusFormData_price = $("input[name='price']").val();
    localStorage.advertisewithusFormData_county = $("select[name='address.county']").val();
    localStorage.advertisewithusFormData_area = $("select[name='address.area']").val();
    localStorage.advertisewithusFormData_type = $("select[name='type']").val();
    localStorage.advertisewithusFormData_furnished = $("select[name='furnished']").val();
    localStorage.advertisewithusFormData_baths = $("input[name='baths']").val();
    localStorage.advertisewithusFormData_numBedRoomCount = $("input[name='numBedRoomCount']").val();
  }
}

var AdvertiseWithUs = /*#__PURE__*/function (_Component) {
  _inheritsLoose(AdvertiseWithUs, _Component);

  function AdvertiseWithUs(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.components = {
      c1: AwsStep1,
      c2: AwsStep2,
      AwsStep1: AwsStep1,
      AwsStep2: AwsStep2,
      AwsStep3: AwsStep3
    };
    return _this;
  }

  var _proto = AdvertiseWithUs.prototype;

  _proto.render = function () {
    function render() {
      var self = this;
      var TagName = this.components[this.props.curStepComponent];
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        id: "video-div",
        style: {
          display: "none"
        }
      }, /*#__PURE__*/React.createElement("iframe", {
        width: "560",
        height: "315",
        src: "https://www.youtube.com/embed/L689NIDwFdc?autoplay=1&rel=0",
        frameBorder: "0",
        allowFullScreen: true
      })), /*#__PURE__*/React.createElement("section", {
        className: "mar-top-20 mar-btm-20"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container background-white "
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder mar-top-20 pad-btm-20"
      }, /*#__PURE__*/React.createElement("div", {
        className: "autoFrm"
      }, /*#__PURE__*/React.createElement(TagName, null))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return AdvertiseWithUs;
}(Component);

module.exportDefault(withTracker(function () {
  if (Meteor.isClient) {
    var pageno = FlowRouter.getParam('pageno');
    if (!pageno) pageno = 1;
    var loginFlowComplete = Session.get('loginFlowComplete');

    if (pageno == 2 && loginFlowComplete) {
      FlowRouter.go('advertisewithus', {
        pageno: 3
      });
      Session.set('loginFlowComplete', undefined);
      if (typeof fbq !== 'undefined') fbq('track', 'Lead');
      if (typeof ga !== 'undefined') ga('send', 'event', 'AdvertiseWithUsPage', 'UserLoginCompleted', 'User login / signup');
    }
  }

  return {};
})(AdvertiseWithUs));

var AwsStep1 = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(AwsStep1, _Component2);

  function AwsStep1() {
    return _Component2.apply(this, arguments) || this;
  }

  var _proto2 = AwsStep1.prototype;

  _proto2.componentDidMount = function () {
    function componentDidMount() {
      setTimeout(function () {
        try {
          $.fancybox({
            'padding': 0,
            'href': '#video-div'
          });
        } catch (e) {}
      }, 3000);
    }

    return componentDidMount;
  }();

  _proto2.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Advertise your property to rent for FREE!"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("p", null, "List your property to rent in SpotMyCrib. Let thousands of verified tenants apply for your letting. Choose if you are a landlord, agent or the current tenant looking for a replacement so you can move. "), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("p", null, "Enter the details of the property below and click submit.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement(AdvertiseWithUsFormT, null));
    }

    return render;
  }();

  return AwsStep1;
}(Component);

var AwsStep2 = /*#__PURE__*/function (_Component3) {
  _inheritsLoose(AwsStep2, _Component3);

  function AwsStep2(props) {
    var _this2;

    _this2 = _Component3.call(this, props) || this;
    _this2.backBtnHandler = _this2.backBtnHandler.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  var _proto3 = AwsStep2.prototype;

  _proto3.backBtnHandler = function () {
    function backBtnHandler() {
      FlowRouter.go('advertisewithus');
    }

    return backBtnHandler;
  }();

  _proto3.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Advertise your property to rent (step 2 of 3)"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
        href: "javascript:void(0)",
        className: "backBtn",
        onClick: this.backBtnHandler
      }, "<< Back to step 1"), /*#__PURE__*/React.createElement("p", null, "Connect your advert to your account. Login now or sign up with your social account. ", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement(LoginFormHorizontalT, {
        isLandLordMode: true
      }));
    }

    return render;
  }();

  return AwsStep2;
}(Component);

var AwsStep3 = /*#__PURE__*/function (_Component4) {
  _inheritsLoose(AwsStep3, _Component4);

  function AwsStep3(props) {
    var _this3;

    _this3 = _Component4.call(this, props) || this;
    _this3.state = {
      propertyId: '',
      auctionId: '',
      myPropertyLink: ''
    };
    _this3.backBtnHandler = _this3.backBtnHandler.bind(_assertThisInitialized(_this3));
    _this3.addPropImagesHandler = _this3.addPropImagesHandler.bind(_assertThisInitialized(_this3));
    return _this3;
  }

  var _proto4 = AwsStep3.prototype;

  _proto4.backBtnHandler = function () {
    function backBtnHandler() {
      FlowRouter.go('advertisewithus');
    }

    return backBtnHandler;
  }();

  _proto4.addPropImagesHandler = function () {
    function addPropImagesHandler() {
      if (typeof ga !== 'undefined') ga('send', 'event', 'AdvertiseWithUsPage', 'addPropertyImagesBtnClick', 'AddPropertyImages button clicked.');
      Session.set('OpenImageUploader', true);
      Session.set('fromAdvertiseWithUsPage', true);
      FlowRouter.go('account/editproperty', {
        id: this.state.propertyId
      });
    }

    return addPropImagesHandler;
  }();

  _proto4.myPropertyLink = function () {
    function myPropertyLink() {
      var propertyId = this.state.propertyId;
      if (!propertyId) return '';
      var auctionId = this.state.auctionId;
      if (!auctionId) return '';
      var prop = Collections.Properties.findOne(propertyId);
      if (!prop) return '';
      var auction = Collections.Auctions.findOne({
        _id: auctionId
      });
      if (!auction) return '';
      return FlowRouter.path('rent', {
        slug: prop.slug,
        key: auction.lettingAuctionCode
      });
    }

    return myPropertyLink;
  }();

  _proto4.componentDidMount = function () {
    function componentDidMount() {
      if (Meteor.isClient) {
        var user = Meteor.user();

        if (!user) {
          //
          FlowRouter.go('advertisewithus', {
            pageno: 2
          });
          return;
        }

        if (!searialisedAdvertiseForm) {
          FlowRouter.go('advertisewithus');
          return;
        }

        this.addPropertyCallback = function (error, propertyId) {
          if (error) {
            console.log(error);
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            var msg = 'An error occurred.';
            if (error.reason) msg += ' ' + error.reason + '.';else if (error.message) msg += ' ' + error.message + '.';
            tmp.push(msg);
            Session.set("showErrorDlg", tmp);
            return;
          }

          this.setState({
            propertyId: propertyId
          });
          Meteor.subscribe('editProperty', propertyId); //Can also be used for advertisewithus

          this.addAdvertisementFormCallback = function (error, auctionId) {
            if (error) {
              console.log(error); //    validator.showErrors({
              //         email: error.reason
              //     });

              var tmp = Session.get("showErrorDlg");
              if (!tmp) tmp = [];
              var msg = 'An error occurred.';
              if (error.reason) msg += ' ' + error.reason + '.';else if (error.message) msg += ' ' + error.message + '.';
              tmp.push(msg);
              Session.set("showErrorDlg", tmp);
              return;
            }

            console.log('addAdvertisement created successfully');
            console.log(auctionId);
            var templateInstance = this;
            this.setState({
              auctionId: auctionId
            }, function () {
              var propertyId = templateInstance.state.propertyId;
              if (!propertyId) return '';
              var auctionId = templateInstance.state.auctionId;
              if (!auctionId) return '';
              var prop = Collections.Properties.findOne({
                _id: propertyId
              });
              if (!prop) return '';
              var auction = Collections.Auctions.findOne({
                _id: auctionId
              });
              if (!auction) return '';
              var myPropertyLink = FlowRouter.url('rent', {
                slug: prop.slug,
                key: auction.lettingAuctionCode
              });
              this.setState({
                myPropertyLink: myPropertyLink
              });
            });
          };

          this.addAdvertisementFormCallback = this.addAdvertisementFormCallback.bind(this);
          Meteor.call('addAdvertisement', searialisedAdvertiseForm, propertyId, this.addAdvertisementFormCallback);
        };

        this.addPropertyCallback = this.addPropertyCallback.bind(this);
        Meteor.call('addProperty', searialisedAdvertiseForm, this.addPropertyCallback);
      }
    }

    return componentDidMount;
  }() //todo: this is page is not developed. So finish it.
  ;

  _proto4.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Congratulations! Your property is now live."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
        href: "javascript:void(0)",
        className: "backBtn",
        onClick: this.backBtnHandler
      }, "<< Back to step 1"), /*#__PURE__*/React.createElement("p", {
        style: {
          margin: '10px 0 10px 0px'
        }
      }, "Choose add property images button below to add images to your advert to make it clear and attractive. Add description and choose amenities available by choosing edit option below. Choose preview below to view it, use the link from the preview window to share it with others. "), /*#__PURE__*/React.createElement("div", {
        className: "signin-form cf-1"
      }, /*#__PURE__*/React.createElement("div", {
        className: "clearfix"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-full-width"
      }, /*#__PURE__*/React.createElement("button", {
        className: "btns blue-btn addPropImages",
        onClick: self.addPropImagesHandler
      }, "Add property images"), self.state.propertyId ? /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('account/editproperty', {
          id: self.state.propertyId
        }),
        className: "btns transparent-btn mar-left-10"
      }, "Edit property") : "", /*#__PURE__*/React.createElement("a", {
        href: self.state.myPropertyLink,
        target: "_blank",
        className: "btns blue-btn mar-left-10"
      }, "Preview property")), /*#__PURE__*/React.createElement("div", {
        className: "w-100"
      }))), /*#__PURE__*/React.createElement("h2", null, "Whats next?"), /*#__PURE__*/React.createElement("p", null, "Visit ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('account/myProperties')
      }, "my properties"), " from ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('account/myProperties')
      }, "here"), " or from top menu to see the list of all your properties. Visit ", /*#__PURE__*/React.createElement("span", {
        className: "green-text"
      }, "view applications"), " from my properties to see list of all applications your property receive. ."));
    }

    return render;
  }();

  return AwsStep3;
}(Component);

var AdvertiseWithUsForm = /*#__PURE__*/function (_Component5) {
  _inheritsLoose(AdvertiseWithUsForm, _Component5);

  function AdvertiseWithUsForm(props) {
    var _this4;

    _this4 = _Component5.call(this, props) || this;
    _this4.state = {
      addPropertyFormSaving: false,
      numBedRoomCount: 0,
      numBedRoomCountArr: 0,
      counties: props.counties,
      areas: props.areas,
      countySelected: props.countySelected,
      propertyTypes: props.propertyTypes
    };
    _this4.countySelectedHandler = _this4.countySelectedHandler.bind(_assertThisInitialized(_this4));
    _this4.areaSelectedHandler = _this4.areaSelectedHandler.bind(_assertThisInitialized(_this4));
    _this4.propertyTypeHandler = _this4.propertyTypeHandler.bind(_assertThisInitialized(_this4));
    return _this4;
  }

  var _proto5 = AdvertiseWithUsForm.prototype;

  _proto5.countySelectedHandler = function () {
    function countySelectedHandler(event) {
      var countySelected = event.target.value;
      this.setState({
        countySelected: countySelected
      });
      if (Meteor.isClient) Session.set('countySelected', countySelected); // if(countySelected) this.setState({areas:getAreas(countySelected)})

      setTimeout(function () {
        $('.areaSelected').val("");
        saveToLocalStorage();
      }, 250);
    }

    return countySelectedHandler;
  }();

  _proto5.areaSelectedHandler = function () {
    function areaSelectedHandler(event) {
      this.setState({
        areaSelected: event.target.value
      });
      setTimeout(saveToLocalStorage, 250);
    }

    return areaSelectedHandler;
  }();

  _proto5.propertyTypeHandler = function () {
    function propertyTypeHandler(event) {
      this.setState({
        propertyTypeSelected: event.target.value
      });
      setTimeout(saveToLocalStorage, 250);
    }

    return propertyTypeHandler;
  }();

  _proto5.handleSubmit = function () {
    function handleSubmit(event) {
      event.preventDefault();
      this.setState({
        addPropertyFormSaving: true
      });
      var instance = this;
      setTimeout(function () {
        instance.setState({
          addPropertyFormSaving: false
        });
      }, 2000);
      var address = ReactDOM.findDOMNode(this.refs.address).value.trim();
      var price = ReactDOM.findDOMNode(this.refs.price).value.trim();
      var county = ReactDOM.findDOMNode(this.refs.county).value.trim();
    }

    return handleSubmit;
  }();

  _proto5.updateNumBedRoomCount = function () {
    function updateNumBedRoomCount(event) {
      this.setState({
        numBedRoomCount: event.target.value
      });
      var countArr = [];

      for (var i = 0; i < event.target.value; i++) {
        countArr.push({
          'index': i + 1
        });
      }

      this.setState({
        numBedRoomCountArr: countArr
      });
    }

    return updateNumBedRoomCount;
  }();

  _proto5.componentDidMount = function () {
    function componentDidMount() {
      // console.log(this.props)
      var instance = this;

      if (Meteor.isClient) {
        var validator = $('#advertiseWithUsFormCF').validate({
          submitHandler: function (event) {
            // addPropertyFormSaving.set(true);//Not needed on this form.
            console.log("You just submitted the 'addPropertyForm' form.");
            saveToLocalStorage();

            if (instance.props.user) {
              FlowRouter.go('advertisewithus', {
                pageno: 3
              });
            } else {
              FlowRouter.go('advertisewithus', {
                pageno: 2
              });
            }
          }
        });
      }

      setTimeout(function () {
        try {
          jQuery("html,body").animate({
            scrollTop: 0
          }, 250);
        } catch (e) {
          document.body.scrollTop = document.documentElement.scrollTop = 0;
        }

        instance.restoreLocalStorageSettings();
      }, 500);
    }

    return componentDidMount;
  }();

  _proto5.componentWillReceiveProps = function () {
    function componentWillReceiveProps(nextProps) {
      if (nextProps.propertyTypes.length) //update only if it has vals.
        this.setState({
          propertyTypes: nextProps.propertyTypes
        });
      if (nextProps.areas.length) //update only if it has vals.
        this.setState({
          areas: nextProps.areas
        });
    }

    return componentWillReceiveProps;
  }();

  _proto5.restoreLocalStorageSettings = function () {
    function restoreLocalStorageSettings() {
      var county = '';

      if (localStorage) {
        if (localStorage.advertisewithusFormData_county) {
          county = localStorage.advertisewithusFormData_county;
        } else if (localStorage.advertisewithusFormData_county === undefined) {
          //Only for first time users
          county = 'Dublin';
        }

        if (localStorage.advertisewithusFormData_type) {
          this.setState({
            propertyTypeSelected: localStorage.advertisewithusFormData_type
          });
        }
      }

      this.setState({
        countySelected: county
      });
      if (Meteor.isClient) Session.set('countySelected', county); // if(county)this.setState({areas:getAreas(county)})

      if (localStorage) if (localStorage.advertisewithusFormData_area) {
        this.setState({
          areaSelected: localStorage.advertisewithusFormData_area
        });
      }
    }

    return restoreLocalStorageSettings;
  }();

  _proto5.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("form", {
        className: "signin-form cf-1",
        id: "advertiseWithUsFormCF",
        onSubmit: this.handleSubmit.bind(this)
      }, /*#__PURE__*/React.createElement("div", {
        className: "clearfix"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input "
      }, /*#__PURE__*/React.createElement("input", {
        type: "text",
        name: "address.address",
        id: "address.address",
        required: true,
        ref: "address"
      }), /*#__PURE__*/React.createElement("label", {
        id: "address.address-error",
        className: "error",
        htmlFor: "address.address"
      }, "This field is required."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "Name and Street *"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input "
      }, /*#__PURE__*/React.createElement("input", {
        type: "number",
        name: "price",
        required: true,
        ref: "price"
      }), /*#__PURE__*/React.createElement("label", {
        id: "address.address-error",
        className: "error",
        htmlFor: "address.address"
      }, "This field is required."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "Rent *"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("label", null, "County"), /*#__PURE__*/React.createElement("select", {
        autoComplete: "on",
        name: "address.county",
        ref: "county",
        required: true,
        className: "countySelected",
        onChange: this.countySelectedHandler,
        value: this.state.countySelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "(Select One)"), this.state.counties.map(function (c, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: c.value
        }, c.label);
      })), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("label", null, "Area *"), /*#__PURE__*/React.createElement("select", {
        autoComplete: "on",
        name: "address.area",
        required: true,
        className: "areaSelected",
        onChange: this.areaSelectedHandler,
        value: this.state.areaSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "(Select One)"), this.state.areas.map(function (c, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: c.value
        }, c.label);
      })), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("label", null, "Property type *"), /*#__PURE__*/React.createElement("select", {
        autoComplete: "on",
        name: "type",
        ref: "type",
        required: true,
        className: "",
        onChange: this.propertyTypeHandler,
        value: this.state.propertyTypeSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "(Select One)"), this.state.propertyTypes.map(function (c, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: c.value
        }, c.label);
      })), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("label", null, "Furnished? *"), /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        required: true,
        autoComplete: "on",
        ref: "furnished"
      }, /*#__PURE__*/React.createElement("option", {
        value: "true"
      }, "Yes"), /*#__PURE__*/React.createElement("option", {
        value: "false"
      }, "No")), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input underline"
      }, /*#__PURE__*/React.createElement("input", {
        type: "number",
        name: "baths",
        id: "baths",
        required: true,
        ref: "baths"
      }), /*#__PURE__*/React.createElement("label", null, "Number of bathrooms"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input underline"
      }, /*#__PURE__*/React.createElement("input", {
        type: "number",
        name: "numBedRoomCount",
        id: "numBedRoomCount",
        required: true,
        ref: "numBedRoomCount",
        onChange: this.updateNumBedRoomCount.bind(this),
        value: self.state.numBedRoomCount
      }), /*#__PURE__*/React.createElement("label", null, "Number of bedrooms"), /*#__PURE__*/React.createElement("span", null)), self.state.numBedRoomCountArr ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
        className: "styled-full-width"
      }, /*#__PURE__*/React.createElement("label", {
        className: "sep-label"
      }, "Ensuite? "), this.state.numBedRoomCountArr.map(function (arr, k) {
        return /*#__PURE__*/React.createElement("div", {
          key: k,
          className: "styled-input-select styled-input-checkbox max-20"
        }, /*#__PURE__*/React.createElement("div", {
          className: "checkbox disabled"
        }, /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
          type: "checkbox",
          name: "bedrooms." + arr.index + ".ensuite"
        }), "Bedroom ", arr.index, " Ensuite?")), /*#__PURE__*/React.createElement("label", null, "Bed Type"), /*#__PURE__*/React.createElement("select", {
          required: "",
          autoComplete: "",
          name: "bedrooms." + arr.index + ".bedType"
        }, /*#__PURE__*/React.createElement("option", {
          value: "single"
        }, "Single"), /*#__PURE__*/React.createElement("option", {
          value: "double"
        }, "Double"), /*#__PURE__*/React.createElement("option", {
          value: "twin"
        }, "Twin")), /*#__PURE__*/React.createElement("span", null));
      })), /*#__PURE__*/React.createElement("div", {
        className: "w-100"
      })) : "", /*#__PURE__*/React.createElement("div", {
        className: "styled-full-width"
      }, self.state.addPropertyFormSaving ? /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: "btns transparent-btn"
      }, "Saving") : /*#__PURE__*/React.createElement("button", {
        type: "submit",
        className: "btns blue-btn addPropertyFormSaveBtn"
      }, "Save"), /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: "btns transparent-btn addPropertyFormCancelBtn mar-left-10"
      }, "Cancel")), /*#__PURE__*/React.createElement("div", {
        className: "w-100"
      })));
    }

    return render;
  }();

  return AdvertiseWithUsForm;
}(Component);

AdvertiseWithUsFormT = withTracker(function () {
  var staticCounties = ["Carlow", "Cavan", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Kilkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow"];
  var allareas = [];
  var allcounties = [];
  var countySelected = 'Dublin';
  if (Meteor.isClient) if (Session.get('countySelected')) countySelected = Session.get('countySelected');

  for (var i = 0; i < staticCounties.length; i++) {
    if (!staticCounties[i]) continue;
    allcounties.push({
      label: staticCounties[i],
      value: staticCounties[i]
    });
  }

  var distinctEntries = _.uniq(Collections.Areas.find({}, {
    //County:countySelected ; Dynamically load areas based on the subscription.
    sort: {
      Area: 1
    },
    fields: {
      Area: true
    }
  }).fetch().map(function (x) {
    return x.Area;
  }), true);

  allareas = [];

  for (var i = 0; i < distinctEntries.length; i++) {
    if (!distinctEntries[i]) continue;
    allareas.push({
      label: titleCase(distinctEntries[i]),
      value: distinctEntries[i]
    });
  }

  var Config = Collections.Config.find().fetch();
  Config = Config[0];
  var propertyTypes = [];
  if (Config) for (var i = 0; i < Config.propertyType.length; i++) {
    propertyTypes.push({
      label: titleCase(Config.propertyType[i].name),
      value: Config.propertyType[i].value
    });
  }
  var AreasSub = Meteor.subscribe('Areas', '', '', countySelected, '', '', function () {
    if (ConfigSub.ready()) Session.set('subscriptionsReady', true);
  });
  var ConfigSub = Meteor.subscribe('Config', function () {
    if (AreasSub.ready()) Session.set('subscriptionsReady', true);
  });
  if (Meteor.isClient) Session.get('subscriptionsReady'); // Meteor.subscribe('Areas');
  // Meteor.subscribe('Config');

  Meteor.subscribe('userData');
  return {
    user: Meteor.user(),
    counties: allcounties,
    countySelected: countySelected,
    areas: allareas,
    propertyTypes: propertyTypes
  };
})(AdvertiseWithUsForm);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"BlogDetail.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/pages/BlogDetail.jsx                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _assertThisInitialized;

module.link("@babel/runtime/helpers/assertThisInitialized", {
  default: function (v) {
    _assertThisInitialized = v;
  }
}, 0);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 1);
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var ReactDOM;
module.link("react-dom", {
  "default": function (v) {
    ReactDOM = v;
  }
}, 2);
var withTracker;
module.link("meteor/react-meteor-data", {
  withTracker: function (v) {
    withTracker = v;
  }
}, 3);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 4);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 5);
var Collections;
module.link("../../api/collections", {
  Collections: function (v) {
    Collections = v;
  }
}, 6);
if (Meteor.isClient) Session.set('subscriptionsReady', false);

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function dateFormat(text) {
  var date = new Date(text);
  if (date.toString() == "Invalid Date") return 'N/A';
  return date.toDateString();
}

function chunkify(a, n, balanced) {
  if (n < 2) return [a];
  var len = a.length,
      out = [],
      i = 0,
      size;

  if (len % n === 0) {
    size = Math.floor(len / n);

    while (i < len) {
      out.push(a.slice(i, i += size));
    }
  } else if (balanced) {
    while (i < len) {
      size = Math.ceil((len - i) / n--);
      out.push(a.slice(i, i += size));
    }
  } else {
    n--;
    size = Math.floor(len / n);
    if (len % size === 0) size--;

    while (i < size * n) {
      out.push(a.slice(i, i += size));
    }

    out.push(a.slice(size * n));
  }

  return out;
}

var blogDetail = /*#__PURE__*/function (_Component) {
  _inheritsLoose(blogDetail, _Component);

  function blogDetail(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    var current = FlowRouter.current();
    _this.currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params);
    _this.backBtnHandler = _this.backBtnHandler.bind(_assertThisInitialized(_this));
    _this.propsListHTML = '';
    _this.isServerSSRReq = '';
    return _this;
  }

  var _proto = blogDetail.prototype;

  _proto.backBtnHandler = function () {
    function backBtnHandler() {
      var prevRoute = Session.get('prevRoute');

      if (prevRoute) {
        FlowRouter.go(prevRoute.name, prevRoute.args);
        Session.set('prevRoute', false);
      } else {
        FlowRouter.go("/account/myproperies/", {
          pageno: 1
        });
      }
    }

    return backBtnHandler;
  }();

  _proto.componentDidMount = function () {
    function componentDidMount() {
      try {
        jQuery("html,body").animate({
          scrollTop: 0
        }, 250);
      } catch (e) {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
      }

      setTimeout(function () {
        try {
          jQuery("html,body").animate({
            scrollTop: 0
          }, 250);
        } catch (e) {
          document.body.scrollTop = document.documentElement.scrollTop = 0;
        }
      }, 500);
    }

    return componentDidMount;
  }();

  _proto.componentDidUpdate = function () {
    function componentDidUpdate() {}

    return componentDidUpdate;
  }();

  _proto.renderMain = function () {
    function renderMain() {
      var blog = this.props.data;
      var blogImage = '';
      return /*#__PURE__*/React.createElement("section", {
        className: "main-sec",
        style: {
          marginTop: 0
        }
      }, false ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("section", {
        className: "banner"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        id: "imagessection",
        className: "col-md-7 padding0"
      }, /*#__PURE__*/React.createElement("figure", null, /*#__PURE__*/React.createElement("div", {
        className: "banner-holder"
      }, blog.image ? /*#__PURE__*/React.createElement("img", {
        src: cdnPath(blog.image),
        alt: 'Photo of ' + blog.title,
        title: blog.title
      }) : /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/no-photo.png"),
        alt: 'Image not available',
        title: 'Image not available'
      })), false ? /*#__PURE__*/React.createElement("figcaption", null, /*#__PURE__*/React.createElement("h2", null, this.props.isAgent.name), /*#__PURE__*/React.createElement("h5", {
        style: {
          padding: 0
        }
      }, this.props.isAgent.address1)) : "")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-5 purva-bg"
      }, /*#__PURE__*/React.createElement("div", {
        className: "purva"
      }, /*#__PURE__*/React.createElement("h1", {
        dangerouslySetInnerHTML: {
          __html: blog.title
        }
      }), /*#__PURE__*/React.createElement("div", {
        className: "blogContentArea",
        style: {
          marginBottom: '10px'
        },
        dangerouslySetInnerHTML: {
          __html: blog.excerpt
        }
      }))))))) : "", /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        id: "detailssection",
        className: "border mar-btm-20 background-white col-md-9 col-sm-12 col-xs-12"
      }, /*#__PURE__*/React.createElement("div", {
        className: "head-border-bottom head-border-bottomTitleArea"
      }, /*#__PURE__*/React.createElement("h1", {
        dangerouslySetInnerHTML: {
          __html: blog.title
        }
      })), /*#__PURE__*/React.createElement("div", {
        className: "developer proj-dtls "
      }, /*#__PURE__*/React.createElement("div", {
        className: "clearfix"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 blogContentArea",
        style: {
          marginBottom: '10px'
        },
        dangerouslySetInnerHTML: {
          __html: blog.content
        }
      })))), this.props.data.related ? /*#__PURE__*/React.createElement("div", {
        id: "",
        className: "rightRelatedSection mar-btm-30 amenities col-md-3 col-sm-12 col-xs-12"
      }, /*#__PURE__*/React.createElement("div", {
        className: "head-border-bottom head-border-bottomTitleArea"
      }, /*#__PURE__*/React.createElement("h2", null, "Similar Articles")), /*#__PURE__*/React.createElement("div", {
        className: "background-white",
        style: {
          "float": 'left',
          display: 'block'
        }
      }, /*#__PURE__*/React.createElement("p", {
        style: {
          margin: '0px 0px 5px 5px'
        }
      }, "Below are few more articles similar to ", /*#__PURE__*/React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: blog.title
        }
      })), /*#__PURE__*/React.createElement("ul", {
        className: "thumbnails thumbRelated"
      }, this.props.data.related.map(function (relatedBlog, i) {
        // style={{width: 250, height: 188}}
        return /*#__PURE__*/React.createElement("li", {
          className: "span4",
          key: i,
          style: {
            "float": 'left'
          }
        }, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url('blogdetail', {
            slug: relatedBlog.slug
          })
        }, /*#__PURE__*/React.createElement("div", {
          className: "thumbnail"
        }, relatedBlog.image.src ? /*#__PURE__*/React.createElement("img", {
          src: relatedBlog.image.src,
          width: relatedBlog.image.width,
          height: relatedBlog.image.height,
          alt: relatedBlog.title,
          className: "img-responsive"
        }) : /*#__PURE__*/React.createElement("img", {
          src: cdnPath("/images/no-photo.png"),
          alt: 'Image not available',
          className: "img-responsive",
          style: {
            width: 250,
            height: 188
          }
        }), /*#__PURE__*/React.createElement("h3", {
          dangerouslySetInnerHTML: {
            __html: relatedBlog.title
          }
        }))));
      })))) : "", this.props.recentBlogs ? /*#__PURE__*/React.createElement("div", {
        id: "realtedsection",
        className: "background-white mar-btm-30 amenities col-md-12 col-sm-12 col-xs-12"
      }, /*#__PURE__*/React.createElement("div", {
        className: "head-border-bottom head-border-bottomTitleArea"
      }, /*#__PURE__*/React.createElement("h2", null, "Recent Articles")), /*#__PURE__*/React.createElement("div", {
        className: "amenitiy-block",
        style: {
          "float": 'left',
          display: 'block'
        }
      }, /*#__PURE__*/React.createElement("p", {
        style: {
          margin: '0 20px'
        }
      }, "Below are few more recenty updated articles similar to ", /*#__PURE__*/React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: blog.title
        }
      })), /*#__PURE__*/React.createElement("ul", {
        className: "thumbnails thumbRelated"
      }, this.props.recentBlogs.map(function (relatedBlog, i) {
        // style={{width: 250, height: 188}}
        return /*#__PURE__*/React.createElement("li", {
          className: "span4",
          key: i,
          style: {
            "float": 'left'
          }
        }, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url('blogdetail', {
            slug: relatedBlog.slug
          })
        }, /*#__PURE__*/React.createElement("div", {
          className: "thumbnail"
        }, relatedBlog.image ? /*#__PURE__*/React.createElement("img", {
          src: relatedBlog.image,
          style: {
            width: 250,
            height: 188
          },
          alt: relatedBlog.title,
          className: "img-responsive"
        }) : /*#__PURE__*/React.createElement("img", {
          src: cdnPath("/images/no-photo.png"),
          alt: 'Image not available',
          className: "img-responsive",
          style: {
            width: 250,
            height: 188
          }
        }), /*#__PURE__*/React.createElement("h3", {
          dangerouslySetInnerHTML: {
            __html: relatedBlog.title
          }
        }))));
      })))) : "")));
    }

    return renderMain;
  }();

  _proto.renderFullMain = function () {
    function renderFullMain() {
      if (Meteor.isClient) {
        setTimeout(function () {
          $('#lettingDetailCarousel').carousel();
          $('#lettingDetailCarousel .carousel-control.right').unbind('click').bind('click', function () {
            $('#lettingDetailCarousel').carousel('next');
          });
          $('#lettingDetailCarousel .carousel-control.left').unbind('click').bind('click', function () {
            $('#lettingDetailCarousel').carousel('prev');
          });
        }, 1000);
      }

      return /*#__PURE__*/React.createElement("div", {
        className: "property-details-page",
        id: 'props_list'
      }, Meteor.isServer ? /*#__PURE__*/React.createElement("div", {
        id: "isservercheckdiv"
      }) : "", /*#__PURE__*/React.createElement("section", {
        className: "banner"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("nav", {
        "aria-label": "breadcrumb"
      }, /*#__PURE__*/React.createElement("ol", {
        className: "breadcrumb",
        style: {
          margin: "10px 0"
        }
      }, /*#__PURE__*/React.createElement("li", {
        className: "breadcrumb-item"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home')
      }, "Home")), /*#__PURE__*/React.createElement("li", {
        className: "breadcrumb-item"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('bloghome')
      }, "Blogs")), /*#__PURE__*/React.createElement("li", {
        className: "breadcrumb-item active",
        "aria-current": "page"
      }, "This Article")))))), this.props.isSubsLoaded ? this.props.data ? this.renderMain() : /*#__PURE__*/React.createElement("section", {
        className: ""
      }, /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("strong", null, "This article is not found. Please check the url and try again."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('bloghome'),
        className: "blue-btn btns noPropBackBtn"
      }, "Find recent articles")))))) : /*#__PURE__*/React.createElement("section", {
        className: "mar-top-20 mar-btm-20 no-print"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: 'h2-div'
      }, "Loading..."))))));
    }

    return renderFullMain;
  }();

  _proto.render = function () {
    function render() {
      var self = this;

      if (Meteor.isClient && this.propsListHTML == "") {
        this.propsListHTML = $('#props_list').html();
      }

      if (Meteor.isClient) {
        this.isServerSSRReq = $('#isservercheckdiv').html();
        if (this.isServerSSRReq == "") this.isServerSSRReq = true;else this.isServerSSRReq = false;
      } // if(this.propsListHTML) console.log("propsListHTML: "+this.propsListHTML.length)


      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), this.props.isSubsLoaded ? this.renderFullMain() : this.isServerSSRReq && this.propsListHTML ? /*#__PURE__*/React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: this.propsListHTML
        }
      }) : /*#__PURE__*/React.createElement("section", {
        className: "mar-top-20 mar-btm-20 no-print"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: 'h2-div'
      }, "Loading..."))))), /*#__PURE__*/React.createElement(MainLayoutFooter, null));
    }

    return render;
  }();

  return blogDetail;
}(Component);

module.exportDefault(withTracker(function () {
  var slug = FlowRouter.getParam('slug');
  if (!slug) return {
    data: false,
    isSubsLoaded: true
  };
  var viewBlogSub = Meteor.subscribe("viewBlog", slug, function () {
    Session.set('subscriptionsReady', true);
  });
  if (Meteor.isClient) Session.get('subscriptionsReady');

  if (!viewBlogSub.ready()) {
    return {
      data: false,
      isSubsLoaded: false
    };
  }

  var blog = Collections.Blogs.find({
    "slug": slug
  }, {
    limit: 1
  }).fetch();

  if (blog.length) {
    blog = blog[0];
  }

  var recentBlogs = Collections.Blogs.find({
    "slug": {
      $not: slug
    }
  }, {
    sort: {
      updatedAt: -1
    }
  }).fetch();

  if (!blog || blog.length == 0) {
    //Blog not found
    clearMeta();
    DocHead.setTitle('Article not found | SpotMyCrib');
    DocHead.addMeta({
      name: "description",
      content: ""
    });
    return {
      data: false,
      recentBlogs: recentBlogs,
      isSubsLoaded: true
    };
  } else {
    var title = blog.metaTitle; //Is Rental Cap Able to Control the Housing Market Crisis? - Blog - SpotMyCrib

    var desc = blog.metaDesc;
    clearMeta();
    var titleTmp = title + ' | SpotMyCrib Blog';
    if (titleTmp.length <= 75) title = titleTmp;
    DocHead.setTitle(title);
    DocHead.addMeta({
      name: "description",
      content: desc
    });
    var socialDesc = blog.metaDesc;
    var socialTitle = blog.metaTitle;
    var currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params);
    DocHead.addMeta({
      property: "og:title",
      content: socialTitle
    });
    DocHead.addMeta({
      property: "og:description",
      content: socialDesc
    });
    DocHead.addMeta({
      rel: "canonical",
      href: currentURL
    });
    DocHead.addMeta({
      property: "og:type",
      content: "article"
    });
    DocHead.addMeta({
      property: "og:url",
      content: currentURL
    });
    DocHead.addMeta({
      property: "fb:app_id",
      content: '309356899476430'
    });

    try {
      DocHead.addMeta({
        property: "og:image",
        content: blog.image
      });
    } catch (c) {//Putting this here is making FB take the first response from here. & its showing no image if if this meta is later updated. So better put it later after all rendering at a template level. For now lets not keep anywhere.
      // DocHead.addMeta({name: "og:image", content: 'https://www.spotmycrib.ie/images/spot-my-crib-logo.png'  });
    }
  }

  return {
    data: blog,
    recentBlogs: recentBlogs,
    isSubsLoaded: true
  };
})(blogDetail));

var ImagesSlider = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(ImagesSlider, _Component2);

  function ImagesSlider(props) {
    var _this2;

    _this2 = _Component2.call(this, props) || this;
    var current = FlowRouter.current();
    _this2.currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params);
    return _this2;
  }

  var _proto2 = ImagesSlider.prototype;

  _proto2.componentDidMount = function () {
    function componentDidMount() {
      $(document).ready(function () {
        // $('#lettingDetailCarousel').first().addClass('active');//not needed as bug of isActive helper not working is fixed.
        $('#imagessection .item img').width('100%');
        var w = $('#imagessection .item img').first().width();
        var h = w / 1.33;
        if (h > 250) $('#imagessection .item img').height(w / 1.33);
        setTimeout(function () {
          $('#imagessection .item img').width('100%');
          var w = $('#imagessection .item img').first().width();
          var h = w / 1.33;
          if (h > 250) $('#imagessection .item img').height();
        }, 3000); // $('#lettingDetailCarousel').carousel();
        // $("#lettingDetailCarousel").swiperight(function() {
        //     $(this).carousel('prev');
        // });
        // $("#lettingDetailCarousel").swipeleft(function() {
        //     $(this).carousel('next');
        // });
      });
    }

    return componentDidMount;
  }();

  _proto2.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", {
        id: "lettingDetailCarousel",
        className: "carousel slide",
        "data-ride": "carousel"
      }, /*#__PURE__*/React.createElement("div", {
        className: "carousel-inner"
      }, this.props.images ? this.props.images.map(function (image, i) {
        return /*#__PURE__*/React.createElement("div", {
          key: i,
          className: 'item ' + (i == 0 ? 'active' : "")
        }, /*#__PURE__*/React.createElement("img", {
          src: image.url,
          alt: image.altText,
          title: image.altText,
          className: "img-responsive"
        }));
      }) : /*#__PURE__*/React.createElement("div", {
        className: "item active"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/no-photo.png"),
        alt: 'Image not available',
        title: 'Image not available',
        className: "img-responsive"
      }))), /*#__PURE__*/React.createElement("a", {
        className: "left carousel-control",
        href: "javascript:void(0)",
        "data-slide": "prev"
      }, /*#__PURE__*/React.createElement("span", {
        className: "glyphicon glyphicon-chevron-left"
      }), /*#__PURE__*/React.createElement("span", {
        className: "sr-only"
      }, "Previous")), /*#__PURE__*/React.createElement("a", {
        className: "right carousel-control",
        href: "javascript:void(0)",
        "data-slide": "next"
      }, /*#__PURE__*/React.createElement("span", {
        className: "glyphicon glyphicon-chevron-right"
      }), /*#__PURE__*/React.createElement("span", {
        className: "sr-only"
      }, "Next")));
    }

    return render;
  }();

  return ImagesSlider;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"BlogHome.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/pages/BlogHome.jsx                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var withTracker;
module.link("meteor/react-meteor-data", {
  withTracker: function (v) {
    withTracker = v;
  }
}, 2);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 3);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 4);
var Collections;
module.link("../../api/collections.js", {
  Collections: function (v) {
    Collections = v;
  }
}, 5);
if (Meteor.isClient) Session.set('subscriptionsReady', false);
var countsCollection = null;

function dateFormat(text) {
  var date = new Date(text);
  if (date.toString() == "Invalid Date") return 'N/A';
  return date.toDateString();
}

var Pagination = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Pagination, _Component);

  function Pagination(props) {
    return _Component.call(this, props) || this;
  }

  var _proto = Pagination.prototype;

  _proto.componentDidMount = function () {
    function componentDidMount() {// console.log(this.props)
    }

    return componentDidMount;
  }();

  _proto.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("nav", null, /*#__PURE__*/React.createElement("ul", {
        className: "pagination"
      }, /*#__PURE__*/React.createElement("li", {
        className: "page-item " + self.props.pagination.prevPage.disabled
      }, /*#__PURE__*/React.createElement("a", {
        className: "page-link",
        href: self.props.pagination.prevPage.href,
        tabIndex: "-1",
        onClick: self.props.handleChoosePage.bind(self, self.props.pagination.prevPage.prevPageNo, self.props.parent)
      }, self.props.pagination.prevPage.text)), self.props.pagination.pages.map(function (page, i) {
        if (typeof page.current !== 'undefined' && page.current) {
          return /*#__PURE__*/React.createElement("li", {
            key: i,
            className: "page-item active"
          }, /*#__PURE__*/React.createElement("a", {
            className: "page-link",
            href: page.href
          }, page.text, " ", /*#__PURE__*/React.createElement("span", {
            className: "sr-only"
          }, "(current)")));
        } else {
          return /*#__PURE__*/React.createElement("li", {
            key: i,
            className: "page-item"
          }, /*#__PURE__*/React.createElement("a", {
            className: "page-link",
            onClick: self.props.handleChoosePage.bind(self, page.text, self.props.parent),
            href: page.href
          }, page.text));
        }
      }), /*#__PURE__*/React.createElement("li", {
        className: "page-item " + self.props.pagination.nextPage.disabled
      }, /*#__PURE__*/React.createElement("a", {
        className: "page-link",
        href: self.props.pagination.nextPage.href,
        onClick: self.props.handleChoosePage.bind(self, self.props.pagination.nextPage.nextPageNo, self.props.parent)
      }, self.props.pagination.nextPage.text))));
    }

    return render;
  }();

  return Pagination;
}(Component);

var BlogHome = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(BlogHome, _Component2);

  function BlogHome(props) {
    var _this;

    _this = _Component2.call(this, props) || this;
    var pBlogs = props.blogs;
    if (!pBlogs) pBlogs = [];
    var pTotalCount = props.totalCount;
    if (!pTotalCount) pTotalCount = 0;
    var pPagination = props.pagination;
    if (!pPagination) pPagination = 0;
    _this.state = {
      blogs: pBlogs,
      totalCount: pTotalCount,
      pagination: pPagination
    };
    _this.propsListHTML = '';
    _this.isServerSSRReq = '';
    return _this;
  }

  var _proto2 = BlogHome.prototype;

  _proto2.componentWillReceiveProps = function () {
    function componentWillReceiveProps(nextProps) {
      this.setState({
        blogs: nextProps.blogs,
        totalCount: nextProps.totalCount,
        pagination: nextProps.pagination
      });
    }

    return componentWillReceiveProps;
  }();

  _proto2.componentWillMount = function () {
    function componentWillMount() {}

    return componentWillMount;
  }();

  _proto2.componentDidMount = function () {
    function componentDidMount() {
      var self = this;
      setTimeout(function () {
        try {
          jQuery("html,body").animate({
            scrollTop: 0
          }, 250);
        } catch (e) {
          document.body.scrollTop = document.documentElement.scrollTop = 0;
        }
      }, 500);
    }

    return componentDidMount;
  }();

  _proto2.componentDidUpdate = function () {
    function componentDidUpdate() {}

    return componentDidUpdate;
  }();

  _proto2.handleChoosePage = function () {
    function handleChoosePage(page, component) {
      if (typeof page == "undefined") return; // var data = getSlugData();
      // var slug = generateSlug(data);
      //
      // FlowRouter.go('/b/:slug/:pageno?', {slug: slug[0], pageno: page}, slug[1]);
      //
      // component.setState({pagination: pagination()});
    }

    return handleChoosePage;
  }();

  _proto2.propGrid = function () {
    function propGrid() {
      var self = this;
      var blogImage = '';
      return /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, self.state.blogs.map(function (blog, i) {
        if (blog.image) {
          var tmp = blog.image.split('?');
          blogImage = tmp[0] + "?resize=200%2C140";
        } else {
          blogImage = '';
        }

        return /*#__PURE__*/React.createElement("section", {
          key: i,
          className: "main-holder border-top mar-btm-10",
          id: true
        }, /*#__PURE__*/React.createElement("div", {
          className: "container"
        }, /*#__PURE__*/React.createElement("div", {
          className: "act-box"
        }, /*#__PURE__*/React.createElement("div", {
          className: "background-white"
        }, /*#__PURE__*/React.createElement("div", {
          className: "logo-holder-div",
          style: {
            padding: '10px 20px'
          }
        }, /*#__PURE__*/React.createElement("div", {
          className: "logo-holder"
        }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url('blogdetail', {
            slug: blog.slug
          })
        }, /*#__PURE__*/React.createElement("h3", {
          className: "pad-btm-0",
          dangerouslySetInnerHTML: {
            __html: blog.title
          }
        }))))))), /*#__PURE__*/React.createElement("div", {
          className: "apt-info1 background-white clearfix"
        }, /*#__PURE__*/React.createElement("div", {
          className: "media"
        }, blogImage ? /*#__PURE__*/React.createElement("a", {
          className: "pull-left",
          href: FlowRouter.url('blogdetail', {
            slug: blog.slug
          })
        }, /*#__PURE__*/React.createElement("img", {
          className: "media-object",
          src: blogImage,
          alt: blog.title
        })) : /*#__PURE__*/React.createElement("img", {
          src: cdnPath("/images/no-photo.png"),
          alt: 'Image not available',
          className: "img-responsive"
        }), /*#__PURE__*/React.createElement("div", {
          className: "media-body"
        }, /*#__PURE__*/React.createElement("div", {
          className: "text-left mar-btm-10",
          dangerouslySetInnerHTML: {
            __html: blog.excerpt
          }
        }), /*#__PURE__*/React.createElement("ul", {
          className: "list-inline list-unstyled"
        }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("i", {
          className: "glyphicon glyphicon-calendar"
        }), " ", dateFormat(blog.created), " ")))))))));
      }));
    }

    return propGrid;
  }();

  _proto2.mainAllPage = function () {
    function mainAllPage() {
      var self = this;
      return /*#__PURE__*/React.createElement("div", {
        id: "props_list"
      }, /*#__PURE__*/React.createElement("section", {
        className: "logo-below-div value-div"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "logo-holder-div"
      }, /*#__PURE__*/React.createElement("div", {
        className: "logo-holder"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h1", {
        style: {
          marginBottom: 10
        }
      }, "Blog \u2013 SpotMyCrib"), /*#__PURE__*/React.createElement("div", {
        className: "h4-div",
        style: {
          paddingBottom: 5
        }
      }, "Property renting tips, management and much more"))))))), self.state.totalCount == 0 && this.props.isSubsLoaded ? /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("strong", null, "No blogs found.")) : "", self.state.totalCount > 0 ? /*#__PURE__*/React.createElement("section", {
        className: "paginationArea mar-top-20 "
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement("p", {
        className: 'mar-btm-20'
      }, "Found total ", self.state.totalCount ? self.state.totalCount : 'no', " articles. Browse the latest property news, renting tips, management and much more. Use the navigation below to find more."), /*#__PURE__*/React.createElement(Pagination, {
        pagination: self.state.pagination,
        handleChoosePage: self.handleChoosePage,
        parent: self
      }))))) : "", Meteor.isServer ? /*#__PURE__*/React.createElement("div", {
        id: "isservercheckdiv"
      }) : "", self.state.totalCount > 0 ? /*#__PURE__*/React.createElement("section", {
        className: "proplist-sec property-list"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, this.propGrid())) : "", self.state.totalCount > 0 ? /*#__PURE__*/React.createElement("section", {
        className: "paginationArea"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement(Pagination, {
        pagination: self.state.pagination,
        handleChoosePage: self.handleChoosePage,
        parent: self
      }))))) : "");
    }

    return mainAllPage;
  }();

  _proto2.render = function () {
    function render() {
      var self = this;
      var totalCount = 0;

      if (Meteor.isClient && this.propsListHTML == "") {
        this.propsListHTML = $('#props_list').html();
      }

      if (Meteor.isClient) {
        this.isServerSSRReq = $('#isservercheckdiv').html();
        if (this.isServerSSRReq == "") this.isServerSSRReq = true;else this.isServerSSRReq = false;
      } // if(this.propsListHTML) console.log("propsListHTML: "+this.propsListHTML.length)


      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), this.props.isSubsLoaded && self.state.blogs ? this.mainAllPage() : this.isServerSSRReq && this.propsListHTML ? /*#__PURE__*/React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: this.propsListHTML
        }
      }) : /*#__PURE__*/React.createElement("section", {
        className: "mar-top-20 mar-btm-20 no-print"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: 'h2-div'
      }, "Loading..."))))), /*#__PURE__*/React.createElement(MainLayoutFooter, null));
    }

    return render;
  }();

  return BlogHome;
}(Component);

;
module.exportDefault(withTracker(function () {
  function getPaginationData(totalResultsCount, currentPageNo, resultsPerPage) {
    currentPageNo = parseInt(currentPageNo);
    var pages = [],
        prevPage = {},
        nextPage = {};
    var pgMin = currentPageNo - 4,
        pgMax = currentPageNo + 5,
        maxPages = Math.ceil(totalResultsCount / resultsPerPage);

    if (!Number.isInteger(currentPageNo)) {
      return {
        "prevPage": prevPage,
        "pages": pages,
        "nextPage": nextPage
      };
    }

    if (pgMin < 1) pgMin = 1;
    if (pgMax < 1) pgMax = 1;
    if (maxPages < 1) maxPages = 1;
    if (pgMin > maxPages) currentPageNo = maxPages;
    var tmp = {};
    var href = '';
    var cRoute = FlowRouter.current().route.name,
        cParams = FlowRouter.current().params,
        cQueryParams = FlowRouter.current().queryParams;

    for (var i = pgMin; i <= maxPages; i++) {
      cParams.pageno = i;
      tmp = {
        "href": FlowRouter.url(cRoute, cParams, cQueryParams),
        "text": i
      };

      if (i == currentPageNo) {
        tmp['href'] = 'javascript:void(0);';
        tmp['current'] = true;
      }

      pages.push(tmp);
    }

    var prevPageNo = currentPageNo - 1,
        nextPageNo = currentPageNo + 1;

    if (prevPageNo < 1) {
      prevPage['href'] = 'javascript:void(0)';
      prevPage['text'] = 'Previous';
      prevPage['disabled'] = 'disabled';
    } else {
      cParams.pageno = prevPageNo;
      prevPage['href'] = FlowRouter.url(cRoute, cParams, cQueryParams), prevPage['prevPageNo'] = prevPageNo;
      prevPage['text'] = 'Previous';
      prevPage['disabled'] = '';
    }

    if (nextPageNo > maxPages) nextPageNo = maxPages;

    if (nextPageNo == currentPageNo) {
      nextPage['href'] = 'javascript:void(0)';
      nextPage['text'] = 'Next';
      nextPage['disabled'] = 'disabled';
    } else {
      cParams.pageno = nextPageNo;
      nextPage['href'] = FlowRouter.url(cRoute, cParams, cQueryParams), nextPage['text'] = 'Next';
      nextPage['nextPageNo'] = nextPageNo;
      nextPage['disabled'] = '';
    }

    return {
      "prevPage": prevPage,
      "pages": pages,
      "nextPage": nextPage
    };
  }

  var pageno = FlowRouter.getParam('pageno');
  if (!pageno) pageno = 1;
  var resperpage = 6; // var query = FlowRouter.current().queryParams;

  var current = FlowRouter.current();
  var currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params, FlowRouter.current().queryParams);
  var sortOptions = {
    updatedAt: -1
  };
  var bBlogsSub = Meteor.subscribe("browseBlogs", {
    viewName: 'browseBlogs.view',
    pageno: pageno,
    resperpage: resperpage
  }, function () {
    if (bBlogsSub.ready() && Meteor.isClient) Session.set('subscriptionsReady', true);
  });
  Meteor.subscribe("total-blogs-count", {
    viewName: 'browseBlogs.view',
    pageno: pageno,
    resperpage: resperpage
  });

  if (Meteor.isServer) {
    if (countsCollection == null) countsCollection = new Mongo.Collection('counts');

    Counts.get = function () {
      function countsGet(name) {
        var count = countsCollection.findOne(name);
        return count && count.count || 0;
      }

      return countsGet;
    }();

    Counts.has = function () {
      function countsHas(name) {
        return !!countsCollection.findOne(name);
      }

      return countsHas;
    }();

    totalCount = Counts.get("total-blogs-count");
  } else {
    totalCount = Counts.get("total-blogs-count");
  } // Meteor.subscribe('userData');
  // Meteor.subscribe('Config');


  if (Meteor.isClient) Session.get('subscriptionsReady');

  if (!bBlogsSub.ready()) {
    return {
      isSubsLoaded: false
    };
  }

  return {
    totalCount: totalCount,
    pagination: getPaginationData(totalCount, pageno, 6),
    blogs: Collections.Blogs.find().fetch(),
    isSubsLoaded: true
  };
})(BlogHome));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Home.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/pages/Home.jsx                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof;

module.link("@babel/runtime/helpers/typeof", {
  default: function (v) {
    _typeof = v;
  }
}, 0);

var _assertThisInitialized;

module.link("@babel/runtime/helpers/assertThisInitialized", {
  default: function (v) {
    _assertThisInitialized = v;
  }
}, 1);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 2);
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var withTracker;
module.link("meteor/react-meteor-data", {
  withTracker: function (v) {
    withTracker = v;
  }
}, 2);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 3);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 4);
var Collections;
module.link("../../api/collections", {
  Collections: function (v) {
    Collections = v;
  }
}, 5);
if (Meteor.isClient) Session.set('subscriptionsReady', false);

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function saveToLocalStorage() {
  if (Meteor.isServer) return;

  if (localStorage) {
    // if($( ".countySelected" ).val().toString().trim()) //It needs to work even all options are reset, i.e its empty.
    localStorage.homePageMainFormData_county = $(".countySelected").val(); // if($( ".areaSelected" ).val().toString().trim())//it needs to reset to empty

    localStorage.homePageMainFormData_area = $(".areaSelected").val();
    var tmp = $("input:radio[name=propertyType]:checked").val();
    if (tmp) localStorage.homePageMainFormData_propertyType = tmp;
    localStorage.homePageMainFormData_maxRent = $('.maxRent').val();
  }
}

function slugify(text) {
  if (!text) return '';
  var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/,:;';
  var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
  var p = new RegExp(a.split('').join('|'), 'g');
  return text.toString().toLowerCase().replace(/\s+/g, '') // Replace spaces with ""
  .replace(p, function (c) {
    return b.charAt(a.indexOf(c));
  }) // Replace special chars
  .replace(/&/g, '-and-') // Replace & with ''
  .replace(/[^\w\-]+/g, '') // Remove all non-word chars
  .replace(/\-\-+/g, '-') // Replace multiple - with single ''
  .replace(/^-+/, '') // Trim - from start of text
  .replace(/-+$/, ''); // Trim - from end of text
}

function generateSlug(curURL) {
  var propertyType = curURL.propertyType;
  var county = curURL.county;
  var area = curURL.area;
  var maxRent = curURL.maxRent;
  var country = curURL.country; // const territory = target.territory.value;

  var slug = '';
  var query = [];
  if (propertyType) propertyType = propertyType.replace(/\s+/g, '_');
  if (county) county = county.replace(/\s+/g, '_');
  if (area) area = area.replace(/\s+/g, '_');
  if (country) country = country.replace(/\s+/g, '_');
  if (propertyType) slug = propertyType + "-for-";
  slug += "rent"; // if(areaSelected||countySelected||country)

  slug += "-in-";
  if (!county) area = '';
  if (area) slug += area;
  if (area && county) slug += "-";
  if (county) slug += county;
  if (country) slug += "-" + country;
  var range = [{
    cur: "eur",
    min: 400,
    max: 10000
  }];
  var selectedCur = range[0];
  if (maxRent && maxRent != selectedCur.max) query["maxRent"] = maxRent; // apartment-for-rent-in-dundrum-dublin-ireland
  // apartment-for-rent-in-donnybroke-london-uk
  // rent/apartment/dundrum/dublin
  // rent/apartment/donnybroke/london/england/uk/

  return [slugify(slug), query];
}

function chunkify(a, n, balanced) {
  if (n < 2) return [a];
  var len = a.length,
      out = [],
      i = 0,
      size;

  if (len % n === 0) {
    size = Math.floor(len / n);

    while (i < len) {
      out.push(a.slice(i, i += size));
    }
  } else if (balanced) {
    while (i < len) {
      size = Math.ceil((len - i) / n--);
      out.push(a.slice(i, i += size));
    }
  } else {
    n--;
    size = Math.floor(len / n);
    if (len % size === 0) size--;

    while (i < size * n) {
      out.push(a.slice(i, i += size));
    }

    out.push(a.slice(size * n));
  }

  return out;
}

function generateSlug(curURL) {
  var propertyType = curURL.propertyType;
  var county = curURL.county;
  var area = curURL.area;
  var maxRent = curURL.maxRent;
  var country = curURL.country;
  var bedCount = curURL.bedCount;
  var luxurySort = curURL.luxurySort;
  var cheapSort = curURL.cheapSort; // const territory = target.territory.value;

  var slug = '';
  var query = {};
  if (propertyType) propertyType = propertyType.replace(/\s+/g, '_');
  if (county) county = county.replace(/\s+/g, '_');
  if (area) area = area.replace(/\s+/g, '_');
  if (country) country = country.replace(/\s+/g, '_');
  if (propertyType) slug = propertyType + "-for-";
  slug += "rent"; // if(areaSelected||countySelected||country)

  slug += "-in-";
  if (!county) area = '';
  if (area) slug += area;
  if (area && county) slug += "-";
  if (county) slug += county;
  if (bedCount) query.bedCount = bedCount;
  if (luxurySort) query.luxurySort = 1;
  if (cheapSort) query.cheapSort = 1;
  if (country) slug += "-" + country;else slug += "-ireland";
  var range = [{
    cur: "eur",
    min: 400,
    max: 10000
  }];
  var selectedCur = range[0];
  if (maxRent && maxRent != selectedCur.max) query.maxRent = maxRent; // apartment-for-rent-in-dundrum-dublin-ireland
  // apartment-for-rent-in-donnybroke-london-uk
  // rent/apartment/dundrum/dublin
  // rent/apartment/donnybroke/london/england/uk/

  return [slugify(slug), query];
}

function generateSlugURL(curURL) {
  var ret = generateSlug(curURL);
  return FlowRouter.url('b', {
    slug: ret[0]
  }, ret[1]);
}

function fixImageSize() {
  var avgW = 0;
  $('.image-holder img').each(function () {
    if (!avgW) avgW = $(this).width();else {
      avgW += $(this).width();
      avgW = avgW / 2;
    }
  });
  if (!avgW) avgW = 250;
  $('.image-holder img').width('100%');
  $('.image-holder img').height(avgW * 0.7);
}

var Home = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Home, _Component);

  function Home(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    var searchCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };
    var fCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };
    var areaCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };
    var countyCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };

    if (props.searchCrumbs) {
      var chunks = chunkify(props.searchCrumbs, 3, true);
      searchCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    if (props.fCrumbs) {
      var chunks = chunkify(props.fCrumbs, 3, true);
      fCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    if (props.areaCrumbs) {
      var chunks = chunkify(props.areaCrumbs, 3, true);
      areaCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    if (props.countyCrumbs) {
      var chunks = chunkify(props.countyCrumbs, 3, true);
      countyCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    _this.state = {
      'searchCrumbs': searchCrumbs,
      fCrumbs: fCrumbs,
      areaCrumbs: areaCrumbs,
      countyCrumbs: countyCrumbs
    };
    _this.searchCrumbsLoaded = false;
    return _this;
  }

  var _proto = Home.prototype;

  _proto.componentWillMount = function () {
    function componentWillMount() {
      if (Meteor.isClient) Session.set('showLoginInPlace', false); // console.log('In componentWillMount');
    }

    return componentWillMount;
  }();

  _proto.componentDidMount = function () {
    function componentDidMount() {
      // console.log('In componentDidMount');
      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        $('select').addClass('safariSelect'); //css('-moz-appearance','none');
      }

      $('.iamarenterbtn').click(function (e) {
        e.preventDefault();
        $('html,body').animate({
          scrollTop: $(this.hash).offset().top
        }, 500, function () {
          $(".bigsearchbox").css({
            border: '0 solid red',
            'background-color': "rgba(0, 0, 0, 0.8)"
          }).animate({
            borderWidth: 2,
            'background-color': "rgba(0, 0, 0, 1)"
          }, 500, function () {
            $(".bigsearchbox").animate({
              borderWidth: 0,
              'background-color': "rgba(0, 0, 0, 0.8)"
            }, 500);
          });
        });
      });

      if (Meteor.isClient) {
        setTimeout(function () {
          if (window.location.hash) {
            jQuery("html,body").animate({
              scrollTop: $(window.location.hash).offset().top
            }, 250);
          }
        }, 2000);
      }
    }

    return componentDidMount;
  }();

  _proto.componentDidUpdate = function () {
    function componentDidUpdate() {}

    return componentDidUpdate;
  }();

  _proto.crumbsUpdate = function () {
    function crumbsUpdate() {
      if (!this.searchCrumbsLoaded) {
        var searchCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var fCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var areaCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var countyCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };

        if (this.props.searchCrumbs) {
          var chunks = chunkify(this.props.searchCrumbs, 3, true);
          searchCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.props.fCrumbs) {
          var chunks = chunkify(this.props.fCrumbs, 3, true);
          fCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.props.areaCrumbs) {
          var chunks = chunkify(this.props.areaCrumbs, 3, true);
          areaCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.props.countyCrumbs) {
          var chunks = chunkify(this.props.countyCrumbs, 3, true);
          countyCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.searchCrumbsLoaded) //Update the state only once; when its true
          this.setState({
            'searchCrumbs': searchCrumbs,
            fCrumbs: fCrumbs,
            areaCrumbs: areaCrumbs,
            countyCrumbs: countyCrumbs
          });
      }
    }

    return crumbsUpdate;
  }();

  _proto.componentWillReceiveProps = function () {
    function componentWillReceiveProps(nextProps) {
      // console.log(nextProps)
      // console.log(this)
      // console.log('In componentWillReceiveProps');
      this.crumbsUpdate();
    }

    return componentWillReceiveProps;
  }();

  _proto.handleJoinNow = function () {
    function handleJoinNow() {
      Session.set('showForgotForm', false);
      Session.set('isLandLordMode', true);
      Session.set('showSignupForm', true);
      Session.set('showLoginSignupFancyBoxDialog', true);
      Session.set('showLoginDialog', true);
    }

    return handleJoinNow;
  }();

  _proto.handlePostYourProperty = function () {
    function handlePostYourProperty(event) {
      event.preventDefault();
      var prevRoute = {
        name: FlowRouter.current().route.name,
        args: {
          scrollTo: 0
        },
        instructions: {
          openPostNewProp: true
        }
      };
      Session.set('prevRoute', prevRoute);
      FlowRouter.go('account/myProperties');
    }

    return handlePostYourProperty;
  }();

  _proto.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index home"
      }, /*#__PURE__*/React.createElement("section", {
        className: "",
        id: "searchform"
      }, /*#__PURE__*/React.createElement("div", {
        className: "index-main-banner"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "index-bnr-cont"
      }, true ? /*#__PURE__*/React.createElement("div", {
        id: "homeSliderParent"
      }, /*#__PURE__*/React.createElement("div", {
        id: "homeSlider"
      }, /*#__PURE__*/React.createElement("div", {
        className: "carousel-inner"
      }, /*#__PURE__*/React.createElement("div", {
        className: "item active"
      }, /*#__PURE__*/React.createElement("p", null, "Best properties to rent in Ireland. Find them, right here!"))))) : "", /*#__PURE__*/React.createElement("div", {
        className: "home-banner",
        style: {
          marginBottom: "50px"
        }
      }, /*#__PURE__*/React.createElement("a", {
        className: "btns green-btn ",
        href: FlowRouter.url('estateagent'),
        style: {
          fontSize: '15px'
        }
      }, "I'm a Landlord"), /*#__PURE__*/React.createElement("a", {
        className: "btns transparent-btn iamarenterbtn",
        href: "#searchform"
      }, "I'm a Renter")), /*#__PURE__*/React.createElement("div", {
        className: "box-places home-page-box-places bigsearchbox"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement(HomePageMainFormT, null)))))))), /*#__PURE__*/React.createElement(HomePageLatestPropsT, null), true ? /*#__PURE__*/React.createElement("section", {
        id: "homeLinks",
        className: "sec-holder how-it-works"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement("div", {
        id: "",
        className: "mar-btm-30 amenities"
      }, /*#__PURE__*/React.createElement("div", {
        className: "",
        style: {
          paddingTop: 0
        }
      }, this.props.fCrumbs === undefined || this.props.fCrumbs.length == 0 ? "" : /*#__PURE__*/React.createElement("div", {
        className: 'bottomcrumbs row'
      }, /*#__PURE__*/React.createElement("h2", null, "Browse properties to rent in top cities"), /*#__PURE__*/React.createElement("span", {
        className: "bottom-line"
      }), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 col-sm-12 col-xs-12 pad0"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.fCrumbs.c1 ? this.state.fCrumbs.c1.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.fCrumbs.c2 ? this.state.fCrumbs.c2.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.fCrumbs.c3 ? this.state.fCrumbs.c3.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : "", /*#__PURE__*/React.createElement("a", {
        style: {
          display: "block"
        },
        className: "iamarenterbtn",
        href: "#searchform"
      }, "More")))), this.props.countyCrumbs === undefined || this.props.countyCrumbs.length == 0 ? "" : /*#__PURE__*/React.createElement("div", {
        className: 'bottomcrumbs row mar-top-30'
      }, /*#__PURE__*/React.createElement("span", {
        className: "bottom-line"
      }), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 col-sm-12 col-xs-12 pad0"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.countyCrumbs.c1 ? this.state.countyCrumbs.c1.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.countyCrumbs.c2 ? this.state.countyCrumbs.c2.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.countyCrumbs.c3 ? this.state.countyCrumbs.c3.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : "", /*#__PURE__*/React.createElement("a", {
        style: {
          display: "block"
        },
        className: "iamarenterbtn",
        href: "#searchform"
      }, "More")))))))))) : "", /*#__PURE__*/React.createElement("section", {
        id: "whatis",
        className: "sec-holder how-it-works whatissmc",
        style: {
          background: 'white'
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("h2", null, "What is SpotMyCrib?"), /*#__PURE__*/React.createElement("span", {
        className: "bottom-line"
      }), /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("p", null, "SpotMyCrib is the safest platform to find your next rental home. It brings 100% verified landlords with genuine rentals to you. Just search for your ideal home, apply, get screened, e-sign your lease and pay rent online."), /*#__PURE__*/React.createElement("a", {
        href: "#how-works",
        className: "scroll1 transparent-btn btns "
      }, "Know More")))), /*#__PURE__*/React.createElement("section", {
        id: "how-works",
        className: "sec-holder how-it-works"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("h2", null, "How it works"), /*#__PURE__*/React.createElement("span", {
        className: "bottom-line"
      }), /*#__PURE__*/React.createElement("ul", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-btm-30"
      }, "Search Property"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/how-it-works/search-and-find-property-apartment-flat.png"),
        alt: "Search and find your rental property",
        className: "pad-btm-30"
      }), /*#__PURE__*/React.createElement("p", null, "Search and find an apartment/house you like from our ", /*#__PURE__*/React.createElement("a", {
        className: "iamarenterbtn",
        href: FlowRouter.url('home') + '#searchform'
      }, "browse form"), ". Or choose your county from our ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home') + '#homeLinks'
      }, "county list"), ".")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-btm-30"
      }, "Set Your Rent"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/how-it-works/set-your-rent-apartment.png"),
        alt: "Apply and set your rent for Apartment",
        className: "pad-btm-30"
      }), /*#__PURE__*/React.createElement("p", null, "Make your offer for the house and click apply. Remember to upload all your references in your profile.")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-btm-30"
      }, "Confirm your Home"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/how-it-works/confirm-your-rent-in-dublin.png"),
        alt: "Confirm your rental",
        className: "pad-btm-30"
      }), /*#__PURE__*/React.createElement("p", null, "Landlord chooses a tenant based on your references and your offer. If you are chosen, you would receive a confirmation email. ")))), /*#__PURE__*/React.createElement("div", {
        className: "container mar-top-30"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('faqs'),
        className: "transparent-btn btns ",
        type: "button"
      }, "Learn more"), /*#__PURE__*/React.createElement("span", {
        className: "pad-btm-30 visible-xs visible-sm"
      }, "\xA0"))), /*#__PURE__*/React.createElement("section", {
        className: "sec-holder about-us"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("h1", null, "Manage all your lettings at one place"), /*#__PURE__*/React.createElement("h3", {
        style: {
          marginTop: "10px",
          color: "white"
        }
      }, "From finding tenants to verifying their social profiles"), /*#__PURE__*/React.createElement("h3", {
        style: {
          marginTop: "10px",
          color: "white"
        }
      }, "From collecting rents to logging maintenance costs"), /*#__PURE__*/React.createElement("div", null, self.props.currentUserId ? /*#__PURE__*/React.createElement("a", {
        href: "#TODO",
        style: {
          marginTop: "10px"
        },
        onClick: self.handlePostYourProperty,
        className: "pink-btn oval-btn postYourProperty"
      }, "Post your property") : /*#__PURE__*/React.createElement("a", {
        href: "javascript:;",
        style: {
          marginTop: "10px"
        },
        onClick: self.handleJoinNow,
        className: "pink-btn oval-btn joinNowBtn"
      }, "Start Your Free 30-Day Trial"))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return Home;
}(Component);

;
module.exportDefault(withTracker(function () {
  ////////// ADV BREADCRUMBS MORE LINKS
  advancedCrumbs = function (propertyType) {
    var fCrumbs = [],
        tmpCrumbs = [],
        areaCrumbs = [],
        countyCrumbs = [];
    if (propertyType) propertyType = propertyType.toLowerCase(); // Home / Search Residential Rentals / Dublin City Apartments for Rent / Dublin 2 Apartments for Rent
    //Property Size
    //Property Size - Property Type
    //Property Size - Property Type - County
    //Property Type - county
    //Counties
    //Areas
    //Property Size - Property Type - area - County
    //Property Size - area - County
    //Property Type - area - county

    fCrumbs.push({
      url: generateSlugURL({
        propertyType: 'studio'
      }),
      name: 'Studios'
    }); //Property Size

    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 1
      }),
      name: '1-Beds'
    }); //Property Size

    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 2
      }),
      name: '2-Beds'
    });
    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 3
      }),
      name: '3-Beds'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        cheapSort: true,
        propertyType: 'house'
      }),
      name: 'Cheap Houses'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        bedCount: 1,
        propertyType: 'house'
      }),
      name: '1-Bed Houses'
    }); //Property Size - Property Type

    tmpCrumbs.push({
      url: generateSlugURL({
        bedCount: 2,
        propertyType: 'house'
      }),
      name: '2-Bed Houses'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        bedCount: 3,
        propertyType: 'house'
      }),
      name: '3-Bed Houses'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        luxurySort: true,
        propertyType: 'house'
      }),
      name: 'Luxury Houses'
    });

    if (propertyType == 'house') {
      fCrumbs = fCrumbs.concat(tmpCrumbs);
    }

    fCrumbs.push({
      url: generateSlugURL({
        cheapSort: true,
        propertyType: 'apartment'
      }),
      name: 'Cheap Apartments'
    });
    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 1,
        propertyType: 'apartment'
      }),
      name: '1-Bed Apartments'
    }); //Property Size - Property Type

    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 2,
        propertyType: 'apartment'
      }),
      name: '2-Bed Apartments'
    });
    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 3,
        propertyType: 'apartment'
      }),
      name: '3-Bed Apartments'
    });
    fCrumbs.push({
      url: generateSlugURL({
        luxurySort: true,
        propertyType: 'apartment'
      }),
      name: 'Luxury Apartments'
    });

    if (propertyType != 'house') {
      fCrumbs = fCrumbs.concat(tmpCrumbs);
    } //dublin-apartments
    //Not doing dublin-houses due to less searches for Dublin apartments


    var staticCounties = ["Carlow", "Cavan", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Kilkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow"];

    for (var i = 0; i < staticCounties.length; i++) {
      if (!staticCounties[i]) continue;
      countyCrumbs.push({
        url: generateSlugURL({
          county: staticCounties[i]
        }),
        name: staticCounties[i] + ' Apartments'
      });
    }

    return {
      fCrumbs: fCrumbs,
      areaCrumbs: areaCrumbs,
      countyCrumbs: countyCrumbs
    };
  };

  var advC = {
    fCrumbs: [],
    areaCrumbs: [],
    countyCrumbs: []
  };

  if (true) {
    var propertyType = '';
    if (Meteor.isClient) propertyType = Session.get('HPFpropertyTypeSelected');
    if (!propertyType) propertyType = 'Apartment';
    advC = advancedCrumbs(propertyType);
  } ////////// END ADV BREADCRUMBS
  // Meteor.subscribe('Areas')
  // Meteor.subscribe('Config');


  return {
    currentUserId: Meteor.userId(),
    fCrumbs: advC.fCrumbs,
    areaCrumbs: advC.areaCrumbs,
    countyCrumbs: advC.countyCrumbs
  };
})(Home));

var HomePageMainForm = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(HomePageMainForm, _Component2);

  function HomePageMainForm(props) {
    var _this2;

    _this2 = _Component2.call(this, props) || this;
    _this2.state = {
      counties: props.counties,
      areas: props.areas,
      countySelected: props.countySelected
    };
    _this2.isLocalAlreadySet = false;
    _this2.isLocalAreaAlreadySet = false;
    _this2.countySelectedHandler = _this2.countySelectedHandler.bind(_assertThisInitialized(_this2));
    _this2.areaSelectedHandler = _this2.areaSelectedHandler.bind(_assertThisInitialized(_this2));
    _this2.propertyTypeHandler = _this2.propertyTypeHandler.bind(_assertThisInitialized(_this2));
    _this2.maxRentHandler = _this2.maxRentHandler.bind(_assertThisInitialized(_this2));
    _this2.localHistorySet = _this2.localHistorySet.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  var _proto2 = HomePageMainForm.prototype;

  _proto2.componentWillReceiveProps = function () {
    function componentWillReceiveProps(nextProps) {
      // console.log(nextProps)
      this.setState({
        areas: nextProps.areas
      });
    }

    return componentWillReceiveProps;
  }();

  _proto2.localHistorySet = function () {
    function localHistorySet() {
      if (this.props.isSubsLoaded && this.isLocalAlreadySet && !this.isLocalAreaAlreadySet) {
        if (localStorage.homePageMainFormData_area) {
          this.setState({
            areaSelected: localStorage.homePageMainFormData_area
          });
        }

        this.isLocalAreaAlreadySet = true;
      }

      if (this.props.isSubsLoaded && !this.isLocalAlreadySet) {
        var county = '';

        if (localStorage) {
          if (localStorage.homePageMainFormData_maxRent) {
            $('.maxRent').val(localStorage.homePageMainFormData_maxRent);
          }

          if (localStorage.homePageMainFormData_county) {
            county = localStorage.homePageMainFormData_county;
          } else if (localStorage.homePageMainFormData_county === undefined) {
            //Only for first time users
            county = 'Dublin';
          }

          if (localStorage.homePageMainFormData_propertyType) {
            var tmp = localStorage.homePageMainFormData_propertyType;
            $('input:radio[name=propertyType]').removeAttr('checked');
            $('input:radio[name=propertyType][value="' + tmp + '"]').prop('checked', true);
          }
        }

        this.setState({
          countySelected: county
        });
        if (Meteor.isClient) Session.set('countySelected', county); // if(county)this.setState({areas:getAreas(county)})

        this.isLocalAreaAlreadySet = false;
        this.isLocalAlreadySet = true;
      }
    }

    return localHistorySet;
  }();

  _proto2.componentDidMount = function () {
    function componentDidMount() {
      this.localHistorySet(); // setTimeout(function () {
      //     $('.countySelected').val(county)
      // },100)
      // setTimeout(function () {
      //     if (localStorage.homePageMainFormData_area) {
      //         Session.set('areaRestored',localStorage.homePageMainFormData_area)
      //         // setTimeout(function () {
      //         //     $('.areaSelected').val(localStorage.homePageMainFormData_area)
      //         // },100)
      //     }
      // },1000)
    }

    return componentDidMount;
  }();

  _proto2.componentDidUpdate = function () {
    function componentDidUpdate() {
      this.localHistorySet();
    }

    return componentDidUpdate;
  }();

  _proto2.countySelectedHandler = function () {
    function countySelectedHandler(event) {
      var countySelected = event.target.value;
      this.setState({
        countySelected: countySelected
      });
      if (Meteor.isClient) Session.set('countySelected', countySelected); //if(countySelected) this.setState({areas:getAreas(countySelected)})

      this.isLocalAreaAlreadySet = false;
      if (localStorage) localStorage.homePageMainFormData_county = countySelected;
    }

    return countySelectedHandler;
  }();

  _proto2.areaSelectedHandler = function () {
    function areaSelectedHandler(event) {
      this.setState({
        areaSelected: event.target.value
      });
      if (localStorage) localStorage.homePageMainFormData_area = event.target.value;
    }

    return areaSelectedHandler;
  }();

  _proto2.propertyTypeHandler = function () {
    function propertyTypeHandler(event) {
      if (localStorage) localStorage.homePageMainFormData_propertyType = event.target.value;
    }

    return propertyTypeHandler;
  }();

  _proto2.maxRentHandler = function () {
    function maxRentHandler(event) {
      if (localStorage) localStorage.homePageMainFormData_maxRent = event.target.value;
    }

    return maxRentHandler;
  }();

  _proto2.submitFormHandler = function () {
    function submitFormHandler(event) {
      event.preventDefault();
      var target = event.target;
      var key = target.propertykey.value;

      if (key) {
        if (key.length != 5) {
          alert('Invalid property key! It should of 5 characters in length.');
          return;
        }

        FlowRouter.go('letting', {
          key: key.toUpperCase()
        });
        return;
      } // const territory = target.territory.value;


      var data = {
        country: target.country.value,
        county: target.countySelected.value == 'all' ? '' : target.countySelected.value,
        area: target.areaSelected.value == 'all' ? '' : target.areaSelected.value,
        maxRent: target.maxRent.value,
        propertyType: target.propertyType.value
      };
      var slug = generateSlug(data);
      FlowRouter.go('b', {
        slug: slug[0]
      }, slug[1]);
    }

    return submitFormHandler;
  }();

  _proto2.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("form", {
        className: "propertykey-form",
        onSubmit: this.submitFormHandler
      }, /*#__PURE__*/React.createElement("div", {
        className: "input-group"
      }, /*#__PURE__*/React.createElement("div", {
        className: "searchformSec"
      }, /*#__PURE__*/React.createElement("input", {
        type: "hidden",
        name: "country",
        defaultValue: "ireland"
      }), /*#__PURE__*/React.createElement("div", {
        className: "profile-text"
      }, /*#__PURE__*/React.createElement("div", {
        className: "rd-details"
      }, false ? /*#__PURE__*/React.createElement("span", null, "I am looking for an") : "", /*#__PURE__*/React.createElement("label", {
        className: "account-type-label",
        htmlFor: "rd1"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "on",
        className: "account-type-radio propertyType",
        id: "rd1",
        name: "propertyType",
        defaultValue: "apartment",
        type: "radio",
        defaultChecked: true,
        onChange: this.propertyTypeHandler
      }), "Apartment for rent"), /*#__PURE__*/React.createElement("label", {
        className: "account-type-label"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "on",
        className: "account-type-radio propertyType",
        name: "propertyType",
        defaultValue: "house",
        type: "radio",
        onChange: this.propertyTypeHandler
      }), "House for rent"), /*#__PURE__*/React.createElement("label", {
        className: "account-type-label"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "on",
        className: "account-type-radio propertyType",
        name: "propertyType",
        defaultValue: "student",
        type: "radio",
        onChange: this.propertyTypeHandler
      }), "Student Accommodation"), /*#__PURE__*/React.createElement("label", {
        className: "account-type-label"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "on",
        className: "account-type-radio propertyType",
        name: "propertyType",
        defaultValue: "share",
        type: "radio",
        onChange: this.propertyTypeHandler
      }), "Share"), false ? /*#__PURE__*/React.createElement("label", {
        className: "account-type-label"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "on",
        className: "account-type-radio propertyType",
        name: "propertyType",
        defaultValue: "holidayhomes",
        type: "radio",
        onChange: this.propertyTypeHandler
      }), "Holiday Homes") : ""), /*#__PURE__*/React.createElement("div", {
        className: "signin-form"
      }, /*#__PURE__*/React.createElement("div", {
        className: "frm-group clearfix"
      }, /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        autoComplete: "on",
        name: "countySelected",
        className: "countySelected",
        onChange: this.countySelectedHandler,
        value: this.state.countySelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "Choose City/County"), /*#__PURE__*/React.createElement("option", {
        value: "all"
      }, "All"), this.state.counties.map(function (c, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: c.value
        }, c.label);
      })), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        autoComplete: "on",
        name: "areaSelected",
        className: "areaSelected",
        onChange: this.areaSelectedHandler,
        value: this.state.areaSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "Choose Area"), /*#__PURE__*/React.createElement("option", {
        value: "all"
      }, "All"), this.state.areas.map(function (c, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: c.value
        }, c.label);
      })), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        autoComplete: "on",
        name: "maxRent",
        className: "maxRent",
        onChange: this.maxRentHandler
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "Max Rent"), /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "Any"), this.props.maxRent.map(function (c, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: c.value
        }, c.label);
      })), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "on",
        type: "text",
        className: "form-control propertykey",
        name: "propertykey",
        placeholder: "Property KEY"
      })), /*#__PURE__*/React.createElement("div", {
        className: "styled-input"
      }, /*#__PURE__*/React.createElement("span", {
        className: "input-group-btn",
        style: {
          zIndex: 0
        }
      }, /*#__PURE__*/React.createElement("button", {
        className: "btn white-btn",
        type: "submit",
        style: {
          width: '100%'
        }
      }, "Find")))))))));
    }

    return render;
  }();

  return HomePageMainForm;
}(Component);

HomePageMainFormT = withTracker(function () {
  var countries = [{
    label: "Ireland",
    value: "Ireland"
  }]; //Both capital

  var staticCounties = ["Carlow", "Cavan", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Kilkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow"];
  var allareas = [];
  var allcounties = [];
  var countySelected = 'Dublin';
  if (Meteor.isClient) if (Session.get('countySelected')) countySelected = Session.get('countySelected');
  var isSubsLoaded = false; //    const areasSub = Meteor.subscribe('Areas','','',countySelected,'','',function(){
  //        if(areasSub.ready() && Meteor.isClient )Session.set('subscriptionsReady',true);
  //    })
  // Meteor.subscribe('Config');

  if (Meteor.isClient) if (Session.get('subscriptionsReady')) {
    isSubsLoaded = true;
  }
  if (Meteor.isClient) Session.get('subscriptionsReady');

  for (var i = 0; i < staticCounties.length; i++) {
    if (!staticCounties[i]) continue;
    allcounties.push({
      label: staticCounties[i],
      value: staticCounties[i]
    });
  } ////////////////////////START AREAS PROCESSING


  var distinctEntries = _.uniq(Collections.Areas.find({}, {
    //Dynamically load areas based on the subscription.
    sort: {
      Area: 1
    },
    fields: {
      Area: true
    }
  }).fetch().map(function (x) {
    return x.Area;
  }), true);

  allareas = [];

  for (var i = 0; i < distinctEntries.length; i++) {
    if (!distinctEntries[i]) continue;
    allareas.push({
      label: titleCase(distinctEntries[i]),
      value: distinctEntries[i]
    });
  } ////////////////////////END AREAS PROCESSING


  var range = [{
    cur: "eur",
    min: 400,
    max: 10000
  }];
  var selectedCur = range[0];
  var maxRent = [];

  for (var i = selectedCur.min; i < selectedCur.max + 1; i = i + 50) {
    maxRent.push({
      label: i,
      value: i
    });
  } // var Config = Collections.Config.find().fetch();Config = Config[0];


  var propertyTypes = []; // if(Config)
  // for(var i=0;i< Config.propertyType.length;i++){
  //     propertyTypes.push({label: titleCase(Config.propertyType[i].name), value: Config.propertyType[i].value})
  // }

  return {
    // countries: countries,
    counties: allcounties,
    countySelected: countySelected,
    areas: allareas,
    maxRent: maxRent,
    isSubsLoaded: isSubsLoaded // propertyTypes: propertyTypes,

  };
})(HomePageMainForm);

var HomePageLatestProps = /*#__PURE__*/function (_Component3) {
  _inheritsLoose(HomePageLatestProps, _Component3);

  function HomePageLatestProps(props) {
    var _this3;

    _this3 = _Component3.call(this, props) || this;
    var pAuctions = props.auctions;
    if (!pAuctions) pAuctions = [];
    var pProperties = props.properties;
    if (!pProperties) pProperties = [];
    _this3.state = {
      auctions: pAuctions,
      properties: pProperties
    };
    _this3.propsListHTML = '';
    _this3.isServerSSRReq = '';
    return _this3;
  }

  var _proto3 = HomePageLatestProps.prototype;

  _proto3.componentWillReceiveProps = function () {
    function componentWillReceiveProps(nextProps) {
      // console.log(nextProps)
      this.setState({
        auctions: nextProps.auctions,
        properties: nextProps.properties
      });
    }

    return componentWillReceiveProps;
  }();

  _proto3.componentWillMount = function () {
    function componentWillMount() {}

    return componentWillMount;
  }();

  _proto3.componentDidMount = function () {
    function componentDidMount() {
      var self = this; // console.log('In componentDidMount');
      // console.log(this)

      setTimeout(fixImageSize, 1000);
      setTimeout(fixImageSize, 3000);
      setTimeout(fixImageSize, 5000);
      $(window).resize(fixImageSize);
    }

    return componentDidMount;
  }();

  _proto3.componentDidUpdate = function () {
    function componentDidUpdate() {
      // console.log('In did update');
      // console.log(this)
      setTimeout(fixImageSize, 1000);
      setTimeout(fixImageSize, 3000);
      setTimeout(fixImageSize, 5000);
    }

    return componentDidUpdate;
  }();

  _proto3.propGrid = function () {
    function propGrid() {
      var _this4 = this;

      var self = this;
      var propType = '';
      return /*#__PURE__*/React.createElement("div", {
        className: "row",
        id: "props_list"
      }, Meteor.isServer ? /*#__PURE__*/React.createElement("div", {
        id: "isservercheckdiv"
      }) : "", self.state.auctions.map(function (auction, i) {
        return /*#__PURE__*/React.createElement("div", {
          key: i,
          className: "col-md-4 col-sm-6 img-hold-div"
        }, _this4.state.properties.map(function (property, a) {
          if (auction.propertyId !== property._id) return false;
          if (typeof property.gallery === 'undefined' || property.gallery.length == 0 || _typeof(property.gallery[0]) !== 'object') return false;
          propType = '';

          switch (property.type) {
            case 'apartment':
              propType = 'Apartment to rent';
              break;

            case 'house':
              propType = 'House for rent';
              break;

            case 'student':
              propType = 'Student Accommodation';
              break;

            case 'share':
              propType = 'Flat Share';
              break;

            case 'holidayhomes':
              propType = 'Holiday Home';
              break;

            case 'studio':
              propType = 'Studio for rent';
              break;
          }

          return /*#__PURE__*/React.createElement("div", {
            key: a,
            className: "proj-card"
          }, /*#__PURE__*/React.createElement("div", {
            className: "prop-img-hold"
          }, /*#__PURE__*/React.createElement("a", {
            href: property.slug && auction.lettingAuctionCode ? FlowRouter.url('rent', {
              slug: property.slug,
              key: auction.lettingAuctionCode
            }) : FlowRouter.url('letting', {
              key: auction.lettingAuctionCode
            })
          }, /*#__PURE__*/React.createElement("div", {
            className: "image-holder"
          }, typeof property.gallery !== 'undefined' && property.gallery.length > 0 && _typeof(property.gallery[0]) === 'object' ? /*#__PURE__*/React.createElement("img", {
            className: "img-responsive",
            src: property.gallery[0].url,
            alt: 'Photo 1 of ' + titleCase(property.address.address) + (property.address.area ? ", " + titleCase(property.address.area) : '') + (property.address.county ? ", " + titleCase(property.address.county) : '')
          }) : /*#__PURE__*/React.createElement("div", {
            className: "item active"
          }, /*#__PURE__*/React.createElement("img", {
            src: cdnPath("/images/no-photo.png"),
            alt: 'Image not available',
            className: "img-responsive"
          })), /*#__PURE__*/React.createElement("div", {
            className: "image-position"
          }, /*#__PURE__*/React.createElement("h3", {
            className: "color-white",
            style: {
              paddingBottom: "2px"
            }
          }, property.address.area ? titleCase(property.address.area) : '', property.address.county ? (property.address.area ? ", " : "") + titleCase(property.address.county) : ''), propType ? /*#__PURE__*/React.createElement("h4", {
            style: {
              paddingBottom: '4px'
            }
          }, propType) : '', /*#__PURE__*/React.createElement("h4", null, property.bedCount ? property.bedCount : '1', " Beds, ", property.baths ? property.baths : '1', " Baths "))), /*#__PURE__*/React.createElement("div", {
            className: "bg-opacity"
          }))), /*#__PURE__*/React.createElement("div", {
            className: "textbox-holder",
            style: {
              margin: 0,
              padding: 20,
              height: 130
            }
          }, /*#__PURE__*/React.createElement("h4", null, /*#__PURE__*/React.createElement("a", {
            href: property.slug && auction.lettingAuctionCode ? FlowRouter.url('rent', {
              slug: property.slug,
              key: auction.lettingAuctionCode
            }) : FlowRouter.url('letting', {
              key: auction.lettingAuctionCode
            })
          }, titleCase(property.address.address), property.address.area ? " " + titleCase(property.address.area) : '')), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", {
            className: "left-border"
          }, /*#__PURE__*/React.createElement("h4", null, "Rent"), /*#__PURE__*/React.createElement("div", {
            className: 'h2-div'
          }, "\u20AC", /*#__PURE__*/React.createElement("span", null, auction.price))), /*#__PURE__*/React.createElement("li", {
            className: "pad-right-0"
          }, /*#__PURE__*/React.createElement("a", {
            className: "transparent-btn btns view-details",
            href: property.slug && auction.lettingAuctionCode ? FlowRouter.url('rent', {
              slug: property.slug,
              key: auction.lettingAuctionCode
            }) : FlowRouter.url('letting', {
              key: auction.lettingAuctionCode
            }),
            type: "button",
            id: "enter-auction"
          }, "view details")))));
        }));
      }));
    }

    return propGrid;
  }();

  _proto3.render = function () {
    function render() {
      if (Meteor.isClient && this.propsListHTML == "") {
        this.propsListHTML = $('#props_list').html();
      }

      if (Meteor.isClient) {
        this.isServerSSRReq = $('#isservercheckdiv').html();
        if (this.isServerSSRReq == "") this.isServerSSRReq = true;else this.isServerSSRReq = false;
      } // if(this.propsListHTML) console.log("propsListHTML: "+this.propsListHTML.length)


      return /*#__PURE__*/React.createElement("section", {
        className: "property-list",
        id: "latestRentals"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, true ? /*#__PURE__*/React.createElement("div", {
        className: "prop-wrap"
      }, /*#__PURE__*/React.createElement("h2", null, "Latest Rentals"), /*#__PURE__*/React.createElement("span", {
        className: "bottom-line"
      })) : '', /*#__PURE__*/React.createElement("div", {
        className: "auction"
      }, false ? /*#__PURE__*/React.createElement("h5", null, "Ends on endsDate") : "", /*#__PURE__*/React.createElement("section", null, /*#__PURE__*/React.createElement("section", {
        className: "proplist-sec"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row blogs"
      }, this.props.isSubsLoaded && this.state.auctions && this.state.properties ? this.propGrid() : this.isServerSSRReq && this.propsListHTML ? /*#__PURE__*/React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: this.propsListHTML
        }
      }) : /*#__PURE__*/React.createElement("div", {
        className: 'h2-div',
        style: {
          textAlign: 'center'
        }
      }, "Loading..."), /*#__PURE__*/React.createElement("div", {
        className: "pink-div col-xs-12 col-sm-12 col-md-12 col-lg-12"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('b', {
          'slug': "rent-in-ireland"
        }, {
          'mostRecentSort': 1
        }),
        className: "pink-btn oval-btn "
      }, "View All"))))))));
    }

    return render;
  }();

  return HomePageLatestProps;
}(Component);

HomePageLatestPropsT = withTracker(function () {
  //    const bLettingsSub = Meteor.subscribe("browseLettings", {viewName: 'browseLettings.view', slug:'rent-in-ireland', pageno:1, resperpage:6, query:{mostRecentSort:1}, propertykey:''} ,function(){
  //        if(bLettingsSub.ready() && Meteor.isClient)Session.set('subscriptionsReady',true);
  //    });
  if (Meteor.isClient) Session.get('subscriptionsReady'); //    if( !bLettingsSub.ready() ) {
  //       return {
  //           isSubsLoaded : false
  //       }
  //   }

  return {
    auctions: Collections.Auctions.find({}, {
      sort: {
        updatedAt: -1
      }
    }).fetch(),
    properties: Collections.Properties.find().fetch(),
    isSubsLoaded: true
  };
})(HomePageLatestProps);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"HousesForrent.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/pages/HousesForrent.jsx                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof;

module.link("@babel/runtime/helpers/typeof", {
  default: function (v) {
    _typeof = v;
  }
}, 0);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 1);
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var withTracker;
module.link("meteor/react-meteor-data", {
  withTracker: function (v) {
    withTracker = v;
  }
}, 2);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 3);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 4);
var Collections;
module.link("../../api/collections.js", {
  Collections: function (v) {
    Collections = v;
  }
}, 5);
var countsCollection = null;
if (Meteor.isClient) Session.set('subscriptionsReady', false);

function titleCase(str) {
  if (!str) return;
  return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

function titleCaseAllWords(str) {
  if (!str) return;
  return str.split(' ').map(function (str) {
    return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
  }).join(' ');
}

function chunkify(a, n, balanced) {
  if (n < 2) return [a];
  var len = a.length,
      out = [],
      i = 0,
      size;

  if (len % n === 0) {
    size = Math.floor(len / n);

    while (i < len) {
      out.push(a.slice(i, i += size));
    }
  } else if (balanced) {
    while (i < len) {
      size = Math.ceil((len - i) / n--);
      out.push(a.slice(i, i += size));
    }
  } else {
    n--;
    size = Math.floor(len / n);
    if (len % size === 0) size--;

    while (i < size * n) {
      out.push(a.slice(i, i += size));
    }

    out.push(a.slice(size * n));
  }

  return out;
}

function slugify(text) {
  if (!text) return '';
  var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/,:;';
  var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
  var p = new RegExp(a.split('').join('|'), 'g');
  return text.toString().toLowerCase().replace(/\s+/g, '') // Replace spaces with ""
  .replace(p, function (c) {
    return b.charAt(a.indexOf(c));
  }) // Replace special chars
  .replace(/&/g, '-and-') // Replace & with ''
  .replace(/[^\w\-]+/g, '') // Remove all non-word chars
  .replace(/\-\-+/g, '-') // Replace multiple - with single ''
  .replace(/^-+/, '') // Trim - from start of text
  .replace(/-+$/, ''); // Trim - from end of text
}

function getSlugData() {
  var query = FlowRouter.current().queryParams;
  var slug = FlowRouter.current().params.slug;
  var propertyType = "";
  var county = "";
  var area = "";
  var maxRent = "";
  var minRent = "";
  var minBeds = "";
  var maxBeds = "";
  var country = "";
  var bedCount = "";
  var luxurySort = "";
  var cheapSort = "";
  var mostRecentSort = "";
  var leastRecentSort = "";
  var range = [{
    cur: "eur",
    min: 0,
    max: 10000
  }];
  var selectedCur = range[0];

  if (query) {
    if (query.minRent) minRent = query.minRent;
    if (query.maxRent) maxRent = query.maxRent;
    if (query.minBeds) minBeds = query.minBeds;
    if (query.maxBeds) maxBeds = query.maxBeds;
    if (query.bedCount) bedCount = query.bedCount;
    if (query.luxurySort) luxurySort = query.luxurySort;
    if (query.cheapSort) cheapSort = query.cheapSort;
    if (query.mostRecentSort) mostRecentSort = query.mostRecentSort;
    if (query.leastRecentSort) leastRecentSort = query.leastRecentSort;
  }

  if (!slug) {
    return {
      country: country,
      county: county,
      area: area,
      minRent: minRent,
      maxRent: maxRent,
      minBeds: minBeds,
      maxBeds: maxBeds,
      bedCount: bedCount,
      luxurySort: luxurySort,
      cheapSort: cheapSort,
      mostRecentSort: mostRecentSort,
      leastRecentSort: leastRecentSort,
      propertyType: propertyType
    };
  }

  if (slug.indexOf('-for-') != -1) {
    propertyType = slug.split('-for-')[0];
    propertyType = propertyType.split('-').join(' ');
  }

  if (slug.indexOf('-in-') != -1) {
    var tmp = slug.split('-in-')[1].split('-');

    switch (tmp.length) {
      case 3:
        country = tmp[2];
        county = tmp[1];
        area = tmp[0];
        break;

      case 2:
        country = tmp[1];
        county = tmp[0];
        break;

      case 1:
        country = tmp[0];
        break;
    }

    if (propertyType) propertyType = propertyType.replace(/_/g, ' ');
    if (county) county = titleCaseAllWords(county.replace(/_/g, ' '));
    if (country) country = titleCaseAllWords(country.replace(/_/g, ' '));
    if (area) area = titleCaseAllWords(area.replace(/_/g, ' '));
  }

  return {
    country: country,
    county: county,
    area: area,
    minRent: minRent,
    maxRent: maxRent,
    minBeds: minBeds,
    maxBeds: maxBeds,
    bedCount: bedCount,
    luxurySort: luxurySort,
    cheapSort: cheapSort,
    mostRecentSort: mostRecentSort,
    leastRecentSort: leastRecentSort,
    propertyType: propertyType
  };
}

function generateSlug(curURL) {
  var propertyType = curURL.propertyType;
  var county = curURL.county;
  var area = curURL.area;
  var minRent = curURL.minRent;
  var maxRent = curURL.maxRent;
  var minBeds = curURL.minBeds;
  var maxBeds = curURL.maxBeds;
  var sortBy = curURL.sortBy;
  var country = curURL.country;
  var bedCount = curURL.bedCount;
  var luxurySort = curURL.luxurySort;
  var cheapSort = curURL.cheapSort;
  var mostRecentSort = curURL.mostRecentSort;
  var leastRecentSort = curURL.leastRecentSort; // const territory = target.territory.value;

  var slug = '';
  var query = {};
  if (propertyType) propertyType = propertyType.replace(/\s+/g, '_');
  if (county) county = county.replace(/\s+/g, '_');
  if (area) area = area.replace(/\s+/g, '_');
  if (country) country = country.replace(/\s+/g, '_');
  if (propertyType) slug = propertyType + "-for-";
  slug += "rent"; // if(areaSelected||countySelected||country)

  slug += "-in-";
  if (!county) area = '';
  if (area) slug += area;
  if (area && county) slug += "-";
  if (county) slug += county;
  if (bedCount) query.bedCount = bedCount;
  if (country) slug += "-" + country;else slug += "-ireland";
  var range = [{
    cur: "eur",
    min: 200,
    max: 10000
  }];
  var selectedCur = range[0];
  if (minRent && minRent != selectedCur.min) query.minRent = minRent;
  if (maxRent && maxRent != selectedCur.max) query.maxRent = maxRent;
  if (minBeds) query.minBeds = minBeds;
  if (maxBeds) query.maxBeds = maxBeds;

  if (sortBy) {
    switch (sortBy) {
      case 'ascRent':
        query.cheapSort = 1;
        break;

      case 'descRent':
        query.luxurySort = 1;
        break;

      case 'mRecent':
        query.mostRecentSort = 1;
        break;

      case 'lRecent':
        query.leastRecentSort = 1;
        break;
    }
  } else {
    if (luxurySort) query.luxurySort = 1;
    if (cheapSort) query.cheapSort = 1;
    if (mostRecentSort) query.mostRecentSort = 1;
    if (leastRecentSort) query.leastRecentSort = 1;
  } // apartment-for-rent-in-dundrum-dublin-ireland
  // apartment-for-rent-in-donnybroke-london-uk
  // rent/apartment/dundrum/dublin
  // rent/apartment/donnybroke/london/england/uk/


  return [slugify(slug), query];
}

function generateSlugURL(curURL) {
  var ret = generateSlug(curURL);
  return FlowRouter.url('b', {
    slug: ret[0]
  }, ret[1]);
}

function updateRoute() {
  // Function is not in use
  //console.log("In updateRoute")
  // TODO Router.query.clear();
  var baseURL = window.location.href.split('?')[0];
  var route = baseURL; //debugger;

  var curCity = Session.get('curCity');
  if (curCity && curCity != 'All') route = updateQueryStringParameter(route, 'city', curCity);
  var curBuilder = Session.get('curBuilder');
  if (curBuilder && curBuilder != 'All') route = updateQueryStringParameter(route, 'builder', curBuilder); //console.log("New Route"+route);

  FlowRouter.go(route);
}

function fixImageSize() {
  var avgW = 0;
  $('.image-holder img').each(function () {
    if (!avgW) avgW = $(this).width();else {
      avgW += $(this).width();
      avgW = avgW / 2;
    }
  });
  if (!avgW) avgW = 250;
  $('.image-holder img').width('100%');
  $('.image-holder img').height(avgW * 0.7);
}

function saveToLocalStorage() {
  //There is no restore local on this page; its not needed as people come to this page from other pages and they might have diff preferences every time.
  if (localStorage) {
    localStorage.homePageMainFormData_county = $(".countySelected").val();
    localStorage.homePageMainFormData_area = $(".areaSelected").val();
    var tmp = $("input:radio[name=propertyType]:checked").val();
    if (tmp) localStorage.homePageMainFormData_propertyType = tmp;
    tmp = $('.maxRent').val();
    if (tmp) localStorage.homePageMainFormData_maxRent = $('.maxRent').val();
  }
}

var Pagination = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Pagination, _Component);

  function Pagination(props) {
    return _Component.call(this, props) || this;
  }

  var _proto = Pagination.prototype;

  _proto.componentDidMount = function () {
    function componentDidMount() {// console.log(this.props)
    }

    return componentDidMount;
  }();

  _proto.render = function () {
    function render() {
      var self = this;
      return /*#__PURE__*/React.createElement("nav", null, /*#__PURE__*/React.createElement("ul", {
        className: "pagination"
      }, /*#__PURE__*/React.createElement("li", {
        className: "page-item " + self.props.pagination.prevPage.disabled
      }, /*#__PURE__*/React.createElement("a", {
        className: "page-link",
        href: self.props.pagination.prevPage.href,
        tabIndex: "-1",
        onClick: self.props.handleChoosePage.bind(self, self.props.pagination.prevPage.prevPageNo, self.props.parent)
      }, self.props.pagination.prevPage.text)), self.props.pagination.pages.map(function (page, i) {
        if (typeof page.current !== 'undefined' && page.current) {
          return /*#__PURE__*/React.createElement("li", {
            key: i,
            className: "page-item active"
          }, /*#__PURE__*/React.createElement("a", {
            className: "page-link",
            href: page.href
          }, page.text, " ", /*#__PURE__*/React.createElement("span", {
            className: "sr-only"
          }, "(current)")));
        } else {
          return /*#__PURE__*/React.createElement("li", {
            key: i,
            className: "page-item"
          }, /*#__PURE__*/React.createElement("a", {
            className: "page-link",
            onClick: self.props.handleChoosePage.bind(self, page.text, self.props.parent),
            href: page.href
          }, page.text));
        }
      }), /*#__PURE__*/React.createElement("li", {
        className: "page-item " + self.props.pagination.nextPage.disabled
      }, /*#__PURE__*/React.createElement("a", {
        className: "page-link",
        href: self.props.pagination.nextPage.href,
        onClick: self.props.handleChoosePage.bind(self, self.props.pagination.nextPage.nextPageNo, self.props.parent)
      }, self.props.pagination.nextPage.text))));
    }

    return render;
  }();

  return Pagination;
}(Component);

var HousesForrent = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(HousesForrent, _Component2);

  function HousesForrent(props) {
    var _this;

    _this = _Component2.call(this, props) || this;
    var searchCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };
    var fCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };
    var areaCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };
    var countyCrumbs = {
      c1: [],
      c2: [],
      c3: []
    };

    if (props.searchCrumbs) {
      var chunks = chunkify(props.searchCrumbs, 3, true);
      searchCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    if (props.fCrumbs) {
      var chunks = chunkify(props.fCrumbs, 3, true);
      fCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    if (props.areaCrumbs) {
      var chunks = chunkify(props.areaCrumbs, 3, true);
      areaCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    if (props.countyCrumbs) {
      var chunks = chunkify(props.countyCrumbs, 3, true);
      countyCrumbs = {
        c1: chunks[0],
        c2: chunks[1],
        c3: chunks[2]
      };
    }

    var pCS = props.countySelected;
    if (!pCS) pCS = '';
    var pAS = props.areaSelected;
    if (!pAS) pAS = '';
    var pTS = props.propertyTypeSelected;
    if (!pTS) pTS = '';
    var pCounties = props.counties;
    if (!pCounties) pCounties = [];
    var pPropertyTypes = props.propertyTypes;
    if (!pPropertyTypes) pPropertyTypes = [];
    var pAreas = props.areas;
    if (!pAreas) pAreas = [];
    var pAuctions = props.auctions;
    if (!pAuctions) pAuctions = [];
    var pProperties = props.properties;
    if (!pProperties) pProperties = [];
    var pTotalCount = props.totalCount;
    if (!pTotalCount) pTotalCount = 0;
    var pPagination = props.pagination;
    if (!pPagination) pPagination = 0;
    _this.state = {
      showXSMenu: false,
      countySelected: pCS,
      areaSelected: pAS,
      propertyTypeSelected: pTS,
      counties: pCounties,
      propertyTypes: pPropertyTypes,
      areas: pAreas,
      auctions: pAuctions,
      properties: pProperties,
      totalCount: pTotalCount,
      pagination: pPagination,
      'searchCrumbs': searchCrumbs,
      fCrumbs: fCrumbs,
      areaCrumbs: areaCrumbs,
      countyCrumbs: countyCrumbs
    };
    _this.searchCrumbsLoaded = false;
    _this.propsListHTML = '';
    _this.isServerSSRReq = '';
    return _this;
  }

  var _proto2 = HousesForrent.prototype;

  _proto2.componentWillReceiveProps = function () {
    function componentWillReceiveProps(nextProps) {
      // console.log(nextProps)
      this.setState({
        counties: nextProps.counties,
        areas: nextProps.areas,
        propertyTypes: nextProps.propertyTypes,
        auctions: nextProps.auctions,
        properties: nextProps.properties,
        totalCount: nextProps.totalCount,
        pagination: nextProps.pagination
      }); // if(!this.state.countySelected)

      this.setState({
        countySelected: nextProps.countySelected
      }); // if(!this.state.areaSelected)

      this.setState({
        areaSelected: nextProps.areaSelected
      }); // if(!this.state.propertyTypeSelected)

      this.setState({
        propertyTypeSelected: nextProps.propertyTypeSelected
      });
      this.setState({
        minRentSelected: nextProps.minRentSelected
      });
      this.setState({
        maxRentSelected: nextProps.maxRentSelected
      });
      this.setState({
        minBedCountSelected: nextProps.minBedCountSelected
      });
      this.setState({
        maxBedCountSelected: nextProps.maxBedCountSelected
      });
      this.setState({
        sortBySelected: nextProps.sortBySelected
      });
    }

    return componentWillReceiveProps;
  }();

  _proto2.componentWillMount = function () {
    function componentWillMount() {}

    return componentWillMount;
  }();

  _proto2.componentDidMount = function () {
    function componentDidMount() {
      var self = this; // console.log('In componentDidMount');
      // console.log(this)

      try {
        jQuery("html,body").animate({
          scrollTop: 0
        }, 250);
      } catch (e) {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
      }

      setTimeout(fixImageSize, 1000);
      setTimeout(fixImageSize, 3000);
      setTimeout(fixImageSize, 5000);
      $(window).resize(fixImageSize);
      setTimeout(function () {
        try {
          jQuery("html,body").animate({
            scrollTop: 0
          }, 250);
        } catch (e) {
          document.body.scrollTop = document.documentElement.scrollTop = 0;
        }
      }, 500);
    }

    return componentDidMount;
  }();

  _proto2.componentDidUpdate = function () {
    function componentDidUpdate() {
      // console.log('In did update');
      // console.log(this)
      setTimeout(fixImageSize, 1000);
      setTimeout(fixImageSize, 3000);
      setTimeout(fixImageSize, 5000);
      this.crumbsUpdate();
      setTimeout(function () {
        try {
          jQuery("html,body").animate({
            scrollTop: 0
          }, 250);
        } catch (e) {
          document.body.scrollTop = document.documentElement.scrollTop = 0;
        }
      }, 500);
    }

    return componentDidUpdate;
  }();

  _proto2.minRentOptions = function () {
    function minRentOptions() {
      var range = [{
        cur: "eur",
        min: 200,
        max: 9900
      }];
      var selectedCur = range[0];
      var maxRent = [];

      for (var i = selectedCur.min; i < selectedCur.max + 1;) {
        maxRent.push({
          label: i,
          value: i
        });
        if (i < 1000) i = i + 50;else if (i <= 4000) i = i + 100;else if (i <= 8000) i = i + 500;else i = i + 1000;
      }

      return maxRent;
    }

    return minRentOptions;
  }();

  _proto2.maxRentOptions = function () {
    function maxRentOptions() {
      var range = [{
        cur: "eur",
        min: 400,
        max: 10000
      }];
      var selectedCur = range[0];
      var maxRent = [];

      for (var i = selectedCur.min; i < selectedCur.max + 1;) {
        maxRent.push({
          label: i,
          value: i
        });
        if (i < 1000) i = i + 50;else if (i <= 4000) i = i + 100;else if (i <= 8000) i = i + 500;else i = i + 1000;
      }

      return maxRent;
    }

    return maxRentOptions;
  }();

  _proto2.minBedOptions = function () {
    function minBedOptions() {
      var range = [{
        min: 1,
        max: 9
      }];
      var selectedCur = range[0];
      var maxRent = [];

      for (var i = selectedCur.min; i < selectedCur.max + 1; i = i + 1) {
        maxRent.push({
          label: i,
          value: i
        });
      }

      return maxRent;
    }

    return minBedOptions;
  }();

  _proto2.maxBedOptions = function () {
    function maxBedOptions() {
      var range = [{
        min: 2,
        max: 10
      }];
      var selectedCur = range[0];
      var maxRent = [];

      for (var i = selectedCur.min; i < selectedCur.max + 1; i = i + 1) {
        maxRent.push({
          label: i,
          value: i
        });
      }

      return maxRent;
    }

    return maxBedOptions;
  }();

  _proto2.sortByOptions = function () {
    function sortByOptions() {
      var sortBy = [{
        label: "Most recent",
        value: "mRecent"
      }, {
        label: "Least recent",
        value: "lRecent"
      }, {
        label: "Rent: Cheaper first",
        value: "ascRent"
      }, {
        label: "Rent: Luxury first",
        value: "descRent"
      }];
      return sortBy;
    }

    return sortByOptions;
  }();

  _proto2.crumbsUpdate = function () {
    function crumbsUpdate() {
      if (!this.searchCrumbsLoaded) {
        var searchCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var fCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var areaCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var countyCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };

        if (this.props.searchCrumbs) {
          var chunks = chunkify(this.props.searchCrumbs, 3, true);
          searchCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.props.fCrumbs) {
          var chunks = chunkify(this.props.fCrumbs, 3, true);
          fCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.props.areaCrumbs) {
          var chunks = chunkify(this.props.areaCrumbs, 3, true);
          areaCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.props.countyCrumbs) {
          var chunks = chunkify(this.props.countyCrumbs, 3, true);
          countyCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
          this.searchCrumbsLoaded = true;
        }

        if (this.searchCrumbsLoaded) //Update the state only once; when its true
          this.setState({
            'searchCrumbs': searchCrumbs,
            fCrumbs: fCrumbs,
            areaCrumbs: areaCrumbs,
            countyCrumbs: countyCrumbs
          });
      }
    }

    return crumbsUpdate;
  }();

  _proto2.isEqualSelect = function () {
    function isEqualSelect(a, b) {
      if (a == b) return ' selected ';
      return '';
    }

    return isEqualSelect;
  }();

  _proto2.updateQueryStringParameter = function () {
    function updateQueryStringParameter(uri, key, value) {
      var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
      var separator = uri.indexOf('?') !== -1 ? "&" : "?";

      if (uri.match(re)) {
        return uri.replace(re, '$1' + key + "=" + value + '$2');
      } else {
        return uri + separator + key + "=" + value;
      }
    }

    return updateQueryStringParameter;
  }();

  _proto2.handleChoosePage = function () {
    function handleChoosePage(page, component) {
      if (typeof page == "undefined") return; // var data = getSlugData();
      // var slug = generateSlug(data);
      //
      // FlowRouter.go('/b/:slug/:pageno?', {slug: slug[0], pageno: page}, slug[1]);
      //
      // component.setState({pagination: pagination()});
    }

    return handleChoosePage;
  }();

  _proto2.handleCountyDropdown = function () {
    function handleCountyDropdown(event) {
      var val = event.target.value;
      var countyChanged = false;
      var data = getSlugData();
      var countySelected = data.county;
      this.setState({
        countySelected: val
      });
      if (localStorage) localStorage.homePageMainFormData_county = val;
      this.setState({
        areaSelected: ""
      }); // if(val!=countySelected)
      //     countyChanged=true;
      // if(countyChanged)
      //     this.setState({areaSelected: ""});

      data.county = val;
      data.area = ''; // if(countyChanged)data.area='';

      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handleCountyDropdown;
  }();

  _proto2.handleAreaDropdown = function () {
    function handleAreaDropdown(event) {
      var val = event.target.value;
      this.setState({
        areaSelected: val
      });
      if (localStorage) localStorage.homePageMainFormData_area = val;
      var data = getSlugData();
      data.area = val;
      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handleAreaDropdown;
  }();

  _proto2.handlePropertyTypeDropdown = function () {
    function handlePropertyTypeDropdown(event) {
      var val = event.target.value;
      this.setState({
        propertyTypeSelected: val
      });
      if (localStorage) localStorage.homePageMainFormData_propertyType = val;
      var data = getSlugData();
      data.propertyType = val;
      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handlePropertyTypeDropdown;
  }();

  _proto2.handleMinRentDropdown = function () {
    function handleMinRentDropdown(event) {
      var val = event.target.value;
      this.setState({
        minRentSelected: val
      });
      if (localStorage) localStorage.homePageMainFormData_minRent = val;
      var data = getSlugData();
      data.minRent = val;
      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handleMinRentDropdown;
  }();

  _proto2.handleMaxRentDropdown = function () {
    function handleMaxRentDropdown(event) {
      var val = event.target.value;
      this.setState({
        maxRentSelected: val
      });
      if (localStorage) localStorage.homePageMainFormData_maxRent = val;
      var data = getSlugData();
      data.maxRent = val;
      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handleMaxRentDropdown;
  }();

  _proto2.handleMinBedDropdown = function () {
    function handleMinBedDropdown(event) {
      var val = event.target.value;
      this.setState({
        minBedCountSelected: val
      });
      if (localStorage) localStorage.homePageMainFormData_minBed = val;
      var data = getSlugData();
      data.minBeds = val;
      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handleMinBedDropdown;
  }();

  _proto2.handleMaxBedDropdown = function () {
    function handleMaxBedDropdown(event) {
      var val = event.target.value;
      this.setState({
        maxBedCountSelected: val
      });
      if (localStorage) localStorage.homePageMainFormData_maxBed = val;
      var data = getSlugData();
      data.maxBeds = val;
      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handleMaxBedDropdown;
  }();

  _proto2.handleSortByDropdown = function () {
    function handleSortByDropdown(event) {
      var val = event.target.value;
      this.setState({
        sortBySelected: val
      });
      var data = getSlugData();
      data.sortBy = val;
      var slug = generateSlug(data);
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: slug[0]
      }, slug[1]);
    }

    return handleSortByDropdown;
  }();

  _proto2.searchXSMenu = function () {
    function searchXSMenu(event) {
      console.log('searchXSMenu');
      this.setState({
        showXSMenu: false
      });
      ga('send', 'event', 'BrowsePage', 'searchXSMenuBtn', 'Mobile: searchXSMenu Btn Clicked');
    }

    return searchXSMenu;
  }();

  _proto2.cancelSearchXSMenu = function () {
    function cancelSearchXSMenu(event) {
      console.log('cancelSearchXSMenu');
      this.setState({
        showXSMenu: false
      });
      ga('send', 'event', 'BrowsePage', 'cancelFilterBtn', 'Mobile: cancelFilter Btn Clicked');
    }

    return cancelSearchXSMenu;
  }();

  _proto2.handleShowFilters = function () {
    function handleShowFilters(event) {
      this.setState({
        showXSMenu: true
      });
      ga('send', 'event', 'BrowsePage', 'showFilterBtn', 'Mobile: showFilter Btn Clicked');
    }

    return handleShowFilters;
  }();

  _proto2.showFilterText = function () {
    function showFilterText(state) {
      var text = [];

      if (state.countySelected) {
        text.push("County: " + state.countySelected);
      } //else text.push("all counties")


      if (state.areaSelected) {
        text.push("Area: " + state.areaSelected);
      } //else text.push("Area: all areas")


      if (state.propertyTypeSelected) {
        text.push("Type: " + this.formatedPT(state.propertyTypeSelected));
      } //else text.push("Type: all property types")


      if (state.minRentSelected && state.maxRentSelected) {
        text.push("Rent: between &euro;" + state.minRentSelected + " and &euro;" + state.maxRentSelected + "");
      } else if (state.minRentSelected) {
        text.push("Rent: greater than &euro;" + state.minRentSelected + "");
      } else if (state.maxRentSelected) {
        text.push("Rent: less than &euro;" + state.maxRentSelected + "");
      } else {// text.push("Rent: Any")
      }

      if (state.minBedCountSelected && state.maxBedCountSelected) {
        text.push("Beds: between " + state.minBedCountSelected + " and " + state.maxBedCountSelected);
      } else if (state.minBedCountSelected) {
        text.push("Beds: has at least " + state.minBedCountSelected + "");
      } else if (state.maxBedCountSelected) {
        text.push("Beds: at most " + state.maxBedCountSelected + "");
      } else {// text.push("Rent: Any")
      }

      switch (this.state.sortBySelected) {
        case 'mRecent':
          text.push('Showing: Most recent first');
          break;

        case 'lRecent':
          text.push('Showing: Oldest first');
          break;
      }

      if (state.propertyTypeSelected) {
        switch (this.state.sortBySelected) {
          case 'ascRent':
            text.push('Showing: Cheap ' + this.formatedPT(state.propertyTypeSelected) + ' first');
            break;

          case 'descRent':
            text.push('Showing: Luxury ' + this.formatedPT(state.propertyTypeSelected) + ' first');
            break;
        }
      } else {
        switch (this.state.sortBySelected) {
          case 'ascRent':
            text.push('Showing: Least expensive first');
            break;

          case 'descRent':
            text.push('Showing: Most expensive first');
            break;
        }
      }

      return 'Chosen filters are <br/>' + text.join('<br/>'); // Searching in county Dublin<br>
      // Area: Amiens Street<br>
      // Rent: between 200 to 1200 Euros<br>
      // Bedrooms: between 2 to 4<br>
      // Showing: Most recent first
    }

    return showFilterText;
  }();

  _proto2.handleClearFilters = function () {
    function handleClearFilters() {
      FlowRouter.go('/b/:slug/:pageno?', {
        slug: 'rent-in-ireland'
      });
    }

    return handleClearFilters;
  }();

  _proto2.formatedPT = function () {
    function formatedPT(propertyTypeSelected) {
      propertyTypeSelected = propertyTypeSelected.toLowerCase();
      if (propertyTypeSelected == 'student') return 'Student Accommodation';
      if (propertyTypeSelected == 'holidayhomes') return 'Holiday Homes';
      if (propertyTypeSelected == 'parkingspace') return 'Parking Space';
      return titleCaseAllWords(propertyTypeSelected);
    }

    return formatedPT;
  }();

  _proto2.propGrid = function () {
    function propGrid() {
      var _this2 = this;

      var self = this;
      var propType = '';
      return /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, self.state.auctions.map(function (auction, i) {
        return /*#__PURE__*/React.createElement("div", {
          key: i,
          className: "col-md-4 col-sm-6 img-hold-div"
        }, _this2.state.properties.map(function (property, a) {
          if (auction.propertyId !== property._id) return false;
          propType = '';

          switch (property.type) {
            case 'apartment':
              propType = 'Apartment to rent';
              break;

            case 'house':
              propType = 'House for rent';
              break;

            case 'student':
              propType = 'Student Accommodation';
              break;

            case 'share':
              propType = 'Flat Share';
              break;

            case 'holidayhomes':
              propType = 'Holiday Home';
              break;

            case 'studio':
              propType = 'Studio for rent';
              break;
          }

          return /*#__PURE__*/React.createElement("div", {
            key: a,
            className: "proj-card"
          }, /*#__PURE__*/React.createElement("div", {
            className: "prop-img-hold"
          }, /*#__PURE__*/React.createElement("a", {
            href: property.slug && auction.lettingAuctionCode ? FlowRouter.url('rent', {
              slug: property.slug,
              key: auction.lettingAuctionCode
            }) : FlowRouter.url('letting', {
              key: auction.lettingAuctionCode
            })
          }, /*#__PURE__*/React.createElement("div", {
            className: "image-holder"
          }, typeof property.gallery !== 'undefined' && property.gallery.length > 0 && _typeof(property.gallery[0]) === 'object' ? /*#__PURE__*/React.createElement("img", {
            className: "img-responsive",
            src: property.gallery[0].url,
            alt: 'Photo 1 of ' + titleCase(property.address.address) + (property.address.area ? ", " + titleCase(property.address.area) : '') + (property.address.county ? ", " + titleCase(property.address.county) : '')
          }) : /*#__PURE__*/React.createElement("div", {
            className: "item active"
          }, /*#__PURE__*/React.createElement("img", {
            src: cdnPath("/images/no-photo.png"),
            alt: 'Image not available',
            className: "img-responsive"
          })), /*#__PURE__*/React.createElement("div", {
            className: "image-position"
          }, /*#__PURE__*/React.createElement("h3", {
            className: "color-white",
            style: {
              paddingBottom: "2px"
            }
          }, property.address.area ? titleCase(property.address.area) : '', property.address.county ? (property.address.area ? ", " : "") + titleCase(property.address.county) : ''), propType ? /*#__PURE__*/React.createElement("h4", {
            style: {
              paddingBottom: '4px'
            }
          }, propType) : '', /*#__PURE__*/React.createElement("h4", null, property.bedCount ? property.bedCount : '1', " Beds, ", property.baths ? property.baths : '1', " Baths "))), /*#__PURE__*/React.createElement("div", {
            className: "bg-opacity"
          }))), /*#__PURE__*/React.createElement("div", {
            className: "textbox-holder",
            style: {
              margin: 0,
              padding: 20,
              height: 130
            }
          }, /*#__PURE__*/React.createElement("h4", null, /*#__PURE__*/React.createElement("a", {
            href: property.slug && auction.lettingAuctionCode ? FlowRouter.url('rent', {
              slug: property.slug,
              key: auction.lettingAuctionCode
            }) : FlowRouter.url('letting', {
              key: auction.lettingAuctionCode
            })
          }, titleCase(property.address.address), property.address.area ? " " + titleCase(property.address.area) : '')), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", {
            className: "left-border"
          }, /*#__PURE__*/React.createElement("h4", null, "Rent"), /*#__PURE__*/React.createElement("div", {
            className: 'h2-div'
          }, "\u20AC", /*#__PURE__*/React.createElement("span", null, auction.price))), /*#__PURE__*/React.createElement("li", {
            className: "pad-right-0"
          }, /*#__PURE__*/React.createElement("a", {
            className: "transparent-btn btns view-details",
            href: property.slug && auction.lettingAuctionCode ? FlowRouter.url('rent', {
              slug: property.slug,
              key: auction.lettingAuctionCode
            }) : FlowRouter.url('letting', {
              key: auction.lettingAuctionCode
            }),
            type: "button",
            id: "enter-auction"
          }, "view details")))));
        }));
      }));
    }

    return propGrid;
  }();

  _proto2.mainAllPage = function () {
    function mainAllPage() {
      var self = this;
      var slugData = getSlugData();
      this.sluggedTitle = '';
      this.sluggedTitleWithoutType = '';
      this.sluggedType = '';

      try {
        this.sluggedType = slugData.propertyType ? slugData.propertyType : 'Property';
        this.sluggedTitle += slugData.propertyType ? slugData.propertyType + " for" : '';
        this.sluggedTitle += this.sluggedTitle ? ' rent in' : 'rent in';
        this.sluggedTitle += slugData.area ? ' ' + slugData.area + "" : '';
        this.sluggedTitle += slugData.county ? ' ' + slugData.county + "" : '';
        this.sluggedTitle += ' Ireland';
        this.sluggedTitleWithoutType = 'rent in';
        this.sluggedTitleWithoutType += slugData.area ? ' ' + slugData.area + "" : '';
        this.sluggedTitleWithoutType += slugData.county ? ' ' + slugData.county + "" : '';
        this.sluggedTitleWithoutType += ' Ireland';
      } catch (e) {}

      try {
        this.sluggedTitle = this.props.slug.replace(/[-_]/g, ' ');
      } catch (e) {}

      this.propertyTypePlural = this.state.propertyTypeSelected;

      switch (this.propertyTypePlural) {
        case 'apartment':
          this.propertyTypePlural = 'Apartments ';
          break;

        case 'house':
          this.propertyTypePlural = 'Houses ';
          break;

        case 'student':
          this.propertyTypePlural = 'Student Accommodations ';
          break;

        case 'share':
          this.propertyTypePlural = 'Flat Shares ';
          break;

        case 'holidayhomes':
          this.propertyTypePlural = 'Holiday Homes ';
          break;

        case 'studio':
          this.propertyTypePlural = 'Studios ';
          break;

        case '':
          this.propertyTypePlural = 'advertisements ';
          break;
      }

      return /*#__PURE__*/React.createElement("div", {
        id: "props_list"
      }, /*#__PURE__*/React.createElement("section", {
        className: "logo-below-div value-div"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "logo-holder-div"
      }, /*#__PURE__*/React.createElement("div", {
        className: "logo-holder"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h1", {
        style: {
          marginBottom: 10
        }
      }, self.state.propertyTypeSelected ? this.formatedPT(self.state.propertyTypeSelected) : 'Houses', "\xA0for rent", self.state.countySelected ? /*#__PURE__*/React.createElement("span", null, "\xA0in ", self.state.areaSelected ? self.state.areaSelected + " " : '', self.state.countySelected) : ""), /*#__PURE__*/React.createElement("div", {
        className: "h4-div",
        style: {
          paddingBottom: 5
        }
      }, "Found ", self.state.totalCount, this.props.pageno > 1 ? ' (Showing page 3)' : "")))), this.state.showXSMenu ? /*#__PURE__*/React.createElement("div", {
        className: "xs-filter-menu xs-menu visible-xs transition"
      }, /*#__PURE__*/React.createElement("div", {
        className: "xs-menu-close-icon text-right"
      }, /*#__PURE__*/React.createElement("span", {
        className: "h2-h2",
        style: {
          "float": "left",
          marginLeft: '12px'
        }
      }, "FILTERS"), /*#__PURE__*/React.createElement("span", {
        className: "sprite xs-close",
        onClick: self.cancelSearchXSMenu.bind(this)
      })), /*#__PURE__*/React.createElement("ul", {
        className: "transition",
        style: {
          paddingTop: 0
        }
      }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Change County"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleCountyDropdown.bind(this),
        value: self.state.countySelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.state.counties ? self.state.counties.map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      }) : ""))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Area"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown areaSelected",
        onChange: self.handleAreaDropdown.bind(this),
        value: self.state.areaSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.state.areas ? self.state.areas.map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      }) : ""))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-xs-6 col-md-6"
      }, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Min Rent"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleMinRentDropdown.bind(this),
        value: self.state.minRentSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.minRentOptions().map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      })))), /*#__PURE__*/React.createElement("div", {
        className: "col-xs-6 col-md-6"
      }, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Max Rent"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleMaxRentDropdown.bind(this),
        value: self.state.maxRentSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.maxRentOptions().map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      })))))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "How many bedrooms?"), /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-xs-6 col-md-6"
      }, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Min Beds"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleMinBedDropdown.bind(this),
        value: self.state.minBedCountSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.minBedOptions().map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      })))), /*#__PURE__*/React.createElement("div", {
        className: "col-xs-6 col-md-6"
      }, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Max Beds"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleMaxBedDropdown.bind(this),
        value: self.state.maxBedCountSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.maxBedOptions().map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      })))))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Property Type? "), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handlePropertyTypeDropdown.bind(this),
        value: self.state.propertyTypeSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.state.propertyTypes ? self.state.propertyTypes.map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      }) : ""))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Sort by"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleSortByDropdown.bind(this),
        value: self.state.sortBySelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.sortByOptions().map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      })))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("button", {
        className: "btns green-btn",
        onClick: self.searchXSMenu.bind(this)
      }, "Search"), /*#__PURE__*/React.createElement("button", {
        className: "btns transparent-btn",
        style: {
          marginLeft: 5
        },
        onClick: self.cancelSearchXSMenu.bind(this)
      }, "Cancel")))) : "", /*#__PURE__*/React.createElement("div", {
        className: "menu houseForRentFilters"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", {
        className: "left-border pad-right-0 cf-1"
      }, /*#__PURE__*/React.createElement("p", {
        className: "visible-xs",
        dangerouslySetInnerHTML: {
          __html: this.showFilterText(this.state)
        }
      }), /*#__PURE__*/React.createElement("a", {
        className: "visible-xs",
        href: "javascript:void(0)",
        onClick: self.handleShowFilters.bind(this)
      }, /*#__PURE__*/React.createElement("h4", {
        className: "hfr-h4"
      }, "Edit Filters ", /*#__PURE__*/React.createElement("span", {
        className: "glyphicon glyphicon-filter"
      }))), /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Change County"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleCountyDropdown.bind(this),
        value: self.state.countySelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.state.counties ? self.state.counties.map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      }) : ""))), /*#__PURE__*/React.createElement("li", {
        className: "cf-1 pad-right-0"
      }, /*#__PURE__*/React.createElement("p", {
        className: "color-grey"
      }, "Area"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input styled-input-select"
      }, /*#__PURE__*/React.createElement("select", {
        name: "furnished",
        autoComplete: "true",
        style: {
          margin: 0
        },
        className: "countyDropdown countySelected",
        onChange: self.handleAreaDropdown.bind(this),
        value: self.state.areaSelected
      }, /*#__PURE__*/React.createElement("option", {
        value: ""
      }, "All"), self.state.areas ? self.state.areas.map(function (item, i) {
        return /*#__PURE__*/React.createElement("option", {
          key: i,
          value: item.value
        }, item.label);
      }) : "")))))))), self.state.totalCount == 0 && this.props.isSubsLoaded ? /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("strong", null, "No ", this.propertyTypePlural, "found", self.state.countySelected ? /*#__PURE__*/React.createElement("span", null, "\xA0in ", self.state.areaSelected ? self.state.areaSelected + " of " : '', "county ", self.state.countySelected) : "", ".\xA0 Click show all below to search other areas."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("button", {
        className: "blue-btn btns clearFilters",
        onClick: self.handleClearFilters,
        type: "button"
      }, "Show all")) : "", self.state.totalCount > 0 ? /*#__PURE__*/React.createElement("section", {
        className: "paginationArea mar-top-20 "
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement("p", {
        className: 'mar-btm-20'
      }, this.props.pageno > 1 ? 'Showing page 3 of ' : 'Found ', "total ", self.state.totalCount ? self.state.totalCount : 'no', " ", this.sluggedTitle, ". Browse through the apartments, houses, studios, 1 bed, 2 bed, 3 bed rooms available to ", this.sluggedTitleWithoutType, ". Choose county and area from the top right drop-down options. Click view details button by the ", this.sluggedType.toLowerCase(), " to know more about it. Use the navigation below to find more ", this.sluggedTitle, "."), /*#__PURE__*/React.createElement(Pagination, {
        pagination: self.state.pagination,
        handleChoosePage: self.handleChoosePage,
        parent: self
      }))))) : "", Meteor.isServer ? /*#__PURE__*/React.createElement("div", {
        id: "isservercheckdiv"
      }) : "", /*#__PURE__*/React.createElement("section", {
        className: "proplist-sec property-list"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, this.propGrid())), self.state.totalCount > 0 ? /*#__PURE__*/React.createElement("section", {
        className: "paginationArea subscribeTillPopop"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "row"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement(Pagination, {
        pagination: self.state.pagination,
        handleChoosePage: self.handleChoosePage,
        parent: self
      }))))) : "", true ? /*#__PURE__*/React.createElement("section", {
        className: ""
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        id: "homeLinks",
        className: "mar-btm-30 amenities"
      }, /*#__PURE__*/React.createElement("div", {
        className: "amenitiy-block-removed",
        style: {
          paddingTop: 0,
          textAlign: "center"
        }
      }, this.props.searchCrumbs === undefined || this.props.searchCrumbs.length == 0 ? "" : /*#__PURE__*/React.createElement("div", {
        id: "searchsection",
        className: 'row'
      }, /*#__PURE__*/React.createElement("h2", null, "Search more properties to rent"), /*#__PURE__*/React.createElement("p", null, "Chooes a link below to browse through more relavent properties to rent."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "pad0"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-5 col-sm-5 col-xs-12"
      }, this.state.searchCrumbs.c1 ? this.state.searchCrumbs.c1.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.searchCrumbs.c2 ? this.state.searchCrumbs.c2.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 col-sm-3 col-xs-12"
      }, this.state.searchCrumbs.c3 ? this.state.searchCrumbs.c3.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""))), this.props.fCrumbs === undefined || this.props.fCrumbs.length == 0 ? "" : /*#__PURE__*/React.createElement("div", {
        className: 'row mar-top-30'
      }, /*#__PURE__*/React.createElement("h2", null, "Property types to rent"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "pad0"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 col-sm-3 col-xs-12"
      }, this.state.fCrumbs.c1 ? this.state.fCrumbs.c1.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.fCrumbs.c2 ? this.state.fCrumbs.c2.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-5 col-sm-5 col-xs-12"
      }, this.state.fCrumbs.c3 ? this.state.fCrumbs.c3.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""))), this.props.areaCrumbs === undefined || this.props.areaCrumbs.length == 0 ? "" : /*#__PURE__*/React.createElement("div", {
        className: 'row mar-top-30'
      }, /*#__PURE__*/React.createElement("h2", null, self.state.countySelected, " neighbourhoods"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "pad0"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.areaCrumbs.c1 ? this.state.areaCrumbs.c1.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.areaCrumbs.c2 ? this.state.areaCrumbs.c2.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.areaCrumbs.c3 ? this.state.areaCrumbs.c3.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""))), this.props.countyCrumbs === undefined || this.props.countyCrumbs.length == 0 ? "" : /*#__PURE__*/React.createElement("div", {
        className: 'row mar-top-30'
      }, /*#__PURE__*/React.createElement("h2", null, "Other counties"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "pad0"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.countyCrumbs.c1 ? this.state.countyCrumbs.c1.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.countyCrumbs.c2 ? this.state.countyCrumbs.c2.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 col-sm-4 col-xs-12"
      }, this.state.countyCrumbs.c3 ? this.state.countyCrumbs.c3.map(function (crumb, i) {
        return /*#__PURE__*/React.createElement("a", {
          key: i,
          style: {
            display: "block"
          },
          href: crumb.url
        }, crumb.name);
      }) : ""))))))) : "");
    }

    return mainAllPage;
  }();

  _proto2.render = function () {
    function render() {
      var self = this;
      var totalCount = 0;

      if (Meteor.isClient && this.propsListHTML == "") {
        this.propsListHTML = $('#props_list').html();
      }

      if (Meteor.isClient) {
        this.isServerSSRReq = $('#isservercheckdiv').html();
        if (this.isServerSSRReq == "") this.isServerSSRReq = true;else this.isServerSSRReq = false;
      } // if(this.propsListHTML) console.log("propsListHTML: "+this.propsListHTML.length)


      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), this.props.isSubsLoaded && self.state.auctions && self.state.properties ? this.mainAllPage() : this.isServerSSRReq && this.propsListHTML ? /*#__PURE__*/React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: this.propsListHTML
        }
      }) : /*#__PURE__*/React.createElement("section", {
        className: "mar-top-20 mar-btm-20 no-print"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container text-center mar-top-20 pad-btm-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: "filter-holder"
      }, /*#__PURE__*/React.createElement("div", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: 'h2-div'
      }, "Loading..."))))), /*#__PURE__*/React.createElement(MainLayoutFooter, null));
    }

    return render;
  }();

  return HousesForrent;
}(Component);

;
var startTime = Date.now();
module.exportDefault(withTracker(function () {
  var staticCounties = ["Carlow", "Cavan", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Kilkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow"];

  function counties() {
    var ret = [];

    for (var i = 0; i < staticCounties.length; i++) {
      if (!staticCounties[i]) continue;
      ret.push({
        label: titleCase(staticCounties[i]),
        value: staticCounties[i]
      });
    }

    return ret;
  }

  function areas() {
    var distinctEntries = _.uniq(Collections.Areas.find({}, {
      //Dynamically load areas based on the subscription.
      sort: {
        Area: 1
      },
      fields: {
        Area: true
      }
    }).fetch().map(function (x) {
      return x.Area;
    }), true);

    var ret = [];

    for (var i = 0; i < distinctEntries.length; i++) {
      if (!distinctEntries[i]) continue;
      ret.push({
        label: titleCase(distinctEntries[i]),
        value: distinctEntries[i]
      });
    }

    return ret;
  }

  function propertyTypes() {
    var Config = Collections.Config.find().fetch();
    Config = Config[0];
    var propertyTypes = [];
    if (Config) for (var i = 0; i < Config.propertyType.length; i++) {
      propertyTypes.push({
        label: titleCase(Config.propertyType[i].name),
        value: Config.propertyType[i].value
      });
    }
    return propertyTypes;
  }

  function areaSelected() {
    var data = getSlugData();
    var areaSelected = data.area;
    if (areaSelected != false) return areaSelected;else {
      var data = getSlugData();
      return data.area;
    }
  }

  function propertyTypeSelected() {
    var data = getSlugData();
    var propertyTypeSelected = data.propertyType;

    if (propertyTypeSelected != false) {
      propertyTypeSelected = propertyTypeSelected.toLowerCase();
      return propertyTypeSelected;
    } else {
      var data = getSlugData();
      propertyTypeSelected = data.propertyType;
      propertyTypeSelected = propertyTypeSelected.toLowerCase();
      return propertyTypeSelected;
    }
  }

  function getPaginationData(totalResultsCount, currentPageNo, resultsPerPage) {
    currentPageNo = parseInt(currentPageNo);
    var pages = [],
        prevPage = {},
        nextPage = {};
    var pgMin = currentPageNo - 4,
        pgMax = currentPageNo + 5,
        maxPages = Math.ceil(totalResultsCount / resultsPerPage);

    if (!Number.isInteger(currentPageNo)) {
      return {
        "prevPage": prevPage,
        "pages": pages,
        "nextPage": nextPage
      };
    }

    if (pgMin < 1) pgMin = 1;
    if (pgMax < 1) pgMax = 1;
    if (maxPages < 1) maxPages = 1;
    if (pgMin > maxPages) currentPageNo = maxPages;
    var tmp = {};
    var href = '';
    var cRoute = FlowRouter.current().route.name,
        cParams = FlowRouter.current().params,
        cQueryParams = FlowRouter.current().queryParams;

    for (var i = pgMin; i <= maxPages; i++) {
      cParams.pageno = i;
      tmp = {
        "href": FlowRouter.url(cRoute, cParams, cQueryParams),
        "text": i
      };

      if (i == currentPageNo) {
        tmp['href'] = 'javascript:void(0);';
        tmp['current'] = true;
      }

      pages.push(tmp);
    }

    var prevPageNo = currentPageNo - 1,
        nextPageNo = currentPageNo + 1;

    if (prevPageNo < 1) {
      prevPage['href'] = 'javascript:void(0)';
      prevPage['text'] = 'Previous';
      prevPage['disabled'] = 'disabled';
    } else {
      cParams.pageno = prevPageNo;
      prevPage['href'] = FlowRouter.url(cRoute, cParams, cQueryParams), prevPage['prevPageNo'] = prevPageNo;
      prevPage['text'] = 'Previous';
      prevPage['disabled'] = '';
    }

    if (nextPageNo > maxPages) nextPageNo = maxPages;

    if (nextPageNo == currentPageNo) {
      nextPage['href'] = 'javascript:void(0)';
      nextPage['text'] = 'Next';
      nextPage['disabled'] = 'disabled';
    } else {
      cParams.pageno = nextPageNo;
      nextPage['href'] = FlowRouter.url(cRoute, cParams, cQueryParams), nextPage['text'] = 'Next';
      nextPage['nextPageNo'] = nextPageNo;
      nextPage['disabled'] = '';
    }

    return {
      "prevPage": prevPage,
      "pages": pages,
      "nextPage": nextPage
    };
  }

  advancedCrumbs = function (countyParam, areaParam, propertyType) {
    var fCrumbs = [],
        tmpCrumbs = [],
        areaCrumbs = [],
        countyCrumbs = [];
    if (propertyType) propertyType = propertyType.toLowerCase(); // Home / Search Residential Rentals / Dublin City Apartments for Rent / Dublin 2 Apartments for Rent
    //Property Size
    //Property Size - Property Type
    //Property Size - Property Type - County
    //Property Type - county
    //Counties
    //Areas
    //Property Size - Property Type - area - County
    //Property Size - area - County
    //Property Type - area - county

    fCrumbs.push({
      url: generateSlugURL({
        propertyType: 'studio'
      }),
      name: 'Studios'
    }); //Property Size

    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 1
      }),
      name: '1-Bed'
    }); //Property Size

    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 2
      }),
      name: '2-Beds'
    });
    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 3
      }),
      name: '3-Beds'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        cheapSort: true,
        propertyType: 'house'
      }),
      name: 'Cheap Houses'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        bedCount: 1,
        propertyType: 'house'
      }),
      name: '1-Bed Houses'
    }); //Property Size - Property Type

    tmpCrumbs.push({
      url: generateSlugURL({
        bedCount: 2,
        propertyType: 'house'
      }),
      name: '2-Bed Houses'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        bedCount: 3,
        propertyType: 'house'
      }),
      name: '3-Bed Houses'
    });
    tmpCrumbs.push({
      url: generateSlugURL({
        luxurySort: true,
        propertyType: 'house'
      }),
      name: 'Luxury Houses'
    });

    if (propertyType == 'house') {
      fCrumbs = fCrumbs.concat(tmpCrumbs);
    }

    fCrumbs.push({
      url: generateSlugURL({
        cheapSort: true,
        propertyType: 'apartment'
      }),
      name: 'Cheap Apartments'
    });
    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 1,
        propertyType: 'apartment'
      }),
      name: '1-Bed Apartments'
    }); //Property Size - Property Type

    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 2,
        propertyType: 'apartment'
      }),
      name: '2-Bed Apartments'
    });
    fCrumbs.push({
      url: generateSlugURL({
        bedCount: 3,
        propertyType: 'apartment'
      }),
      name: '3-Bed Apartments'
    });
    fCrumbs.push({
      url: generateSlugURL({
        luxurySort: true,
        propertyType: 'apartment'
      }),
      name: 'Luxury Apartments'
    });

    if (propertyType != 'house') {
      fCrumbs = fCrumbs.concat(tmpCrumbs);
    } //dublin-apartments
    //Not doing dublin-houses due to less searches for Dublin apartments


    for (var i = 0; i < staticCounties.length; i++) {
      if (!staticCounties[i]) continue;
      countyCrumbs.push({
        url: generateSlugURL({
          county: staticCounties[i]
        }),
        name: staticCounties[i] + ' Apartments'
      });
    }

    if (countyParam) {
      // var propertyType = curURL.propertyType;
      // var county = curURL.county
      // var area = curURL.area
      // var maxRent = curURL.maxRent
      // var country = curURL.country;
      // var bedCount = curURL.bedCount;
      // var luxurySort = curURL.luxurySort;
      // var cheapSort = curURL.cheapSort;
      //////////////////////////// WITH COUNTY
      tmpCrumbs = [];
      tmpCrumbs.push({
        url: generateSlugURL({
          cheapSort: true,
          propertyType: 'house',
          county: countyParam
        }),
        name: 'Cheap Houses to rent in ' + titleCase(countyParam)
      });

      if (propertyType == 'house') {
        fCrumbs = fCrumbs.concat(tmpCrumbs);
      }

      fCrumbs.push({
        url: generateSlugURL({
          cheapSort: true,
          propertyType: 'apartment',
          county: countyParam
        }),
        name: 'Cheap Apartments to rent in ' + titleCase(countyParam)
      });

      if (propertyType != 'house') {
        fCrumbs = fCrumbs.concat(tmpCrumbs);
      }

      fCrumbs.push({
        url: generateSlugURL({
          propertyType: 'studio',
          county: countyParam
        }),
        name: 'Studio to rent in ' + titleCase(countyParam)
      });
      tmpCrumbs = [];
      tmpCrumbs.push({
        url: generateSlugURL({
          bedCount: 1,
          propertyType: 'house',
          county: countyParam
        }),
        name: '1-Bed Houses to rent in ' + titleCase(countyParam)
      }); //Property Size - Property Type

      tmpCrumbs.push({
        url: generateSlugURL({
          bedCount: 2,
          propertyType: 'house',
          county: countyParam
        }),
        name: '2-Bed Houses to rent in ' + titleCase(countyParam)
      });
      tmpCrumbs.push({
        url: generateSlugURL({
          bedCount: 3,
          propertyType: 'house',
          county: countyParam
        }),
        name: '3-Bed Houses to rent in ' + titleCase(countyParam)
      });
      tmpCrumbs.push({
        url: generateSlugURL({
          luxurySort: true,
          propertyType: 'house',
          county: countyParam
        }),
        name: 'Luxury Houses to rent in ' + titleCase(countyParam)
      });

      if (propertyType == 'house') {
        fCrumbs = fCrumbs.concat(tmpCrumbs);
      }

      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 1,
          propertyType: 'apartment',
          county: countyParam
        }),
        name: '1-Bed Apartments to rent in ' + titleCase(countyParam)
      }); //Property Size - Property Type

      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 2,
          propertyType: 'apartment',
          county: countyParam
        }),
        name: '2-Bed Apartments to rent in ' + titleCase(countyParam)
      });
      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 3,
          propertyType: 'apartment',
          county: countyParam
        }),
        name: '3-Bed Apartments to rent in ' + titleCase(countyParam)
      });
      fCrumbs.push({
        url: generateSlugURL({
          luxurySort: true,
          propertyType: 'apartment',
          county: countyParam
        }),
        name: 'Luxury Apartments to rent in ' + titleCase(countyParam)
      });

      if (propertyType != 'house') {
        fCrumbs = fCrumbs.concat(tmpCrumbs);
      }

      if (areaParam) {
        //////////////////////////// WITH AREA COUNTY
        tmpCrumbs = [];
        tmpCrumbs.push({
          url: generateSlugURL({
            cheapSort: true,
            propertyType: 'house',
            county: countyParam,
            area: areaParam
          }),
          name: 'Cheap Houses to rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });

        if (propertyType == 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }

        fCrumbs.push({
          url: generateSlugURL({
            cheapSort: true,
            propertyType: 'apartment',
            county: countyParam,
            area: areaParam
          }),
          name: 'Cheap Apartments to rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });

        if (propertyType != 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }

        fCrumbs.push({
          url: generateSlugURL({
            propertyType: 'studio',
            county: countyParam,
            area: areaParam
          }),
          name: 'Studio to rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });
        tmpCrumbs = [];
        tmpCrumbs.push({
          url: generateSlugURL({
            bedCount: 1,
            propertyType: 'house',
            county: countyParam,
            area: areaParam
          }),
          name: '1-Bed Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        }); //Property Size - Property Type

        tmpCrumbs.push({
          url: generateSlugURL({
            bedCount: 2,
            propertyType: 'house',
            county: countyParam,
            area: areaParam
          }),
          name: '2-Bed Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });
        tmpCrumbs.push({
          url: generateSlugURL({
            bedCount: 3,
            propertyType: 'house',
            county: countyParam,
            area: areaParam
          }),
          name: '3-Bed Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });
        tmpCrumbs.push({
          url: generateSlugURL({
            luxurySort: true,
            propertyType: 'house',
            county: countyParam,
            area: areaParam
          }),
          name: 'Luxury Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });

        if (propertyType == 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }

        fCrumbs.push({
          url: generateSlugURL({
            bedCount: 1,
            propertyType: 'apartment',
            county: countyParam,
            area: areaParam
          }),
          name: '1-Bed Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        }); //Property Size - Property Type

        fCrumbs.push({
          url: generateSlugURL({
            bedCount: 2,
            propertyType: 'apartment',
            county: countyParam,
            area: areaParam
          }),
          name: '2-Bed Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });
        fCrumbs.push({
          url: generateSlugURL({
            bedCount: 3,
            propertyType: 'apartment',
            county: countyParam,
            area: areaParam
          }),
          name: '3-Bed Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });
        fCrumbs.push({
          url: generateSlugURL({
            luxurySort: true,
            propertyType: 'apartment',
            county: countyParam,
            area: areaParam
          }),
          name: 'Luxury Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
        });

        if (propertyType != 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }
      }

      var distinctEntries = _.uniq(Collections.Areas.find({}, {
        //County: countyParam ; Dynamically load areas based on the subscription.
        sort: {
          Area: 1
        },
        fields: {
          Area: true
        }
      }).fetch().map(function (x) {
        return x.Area;
      }), true);

      areaCrumbs = [];

      for (var i = 0; i < distinctEntries.length; i++) {
        if (!distinctEntries[i]) continue; // if (distinctEntries[i] == areaParam) continue;//Don't show the same area in this list

        areaCrumbs.push({
          url: generateSlugURL({
            county: countyParam,
            area: distinctEntries[i]
          }),
          name: distinctEntries[i] + ' Apartments'
        });
      } // let ptypeString='';
      // switch(propertyType){
      //     case 'apartment': ptypeString = 'Apartments '; break;
      //     case 'house': ptypeString = 'Houses '; break;
      // }
      // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'Studio for rent in county '+titleCase(PD.address.county)})
      // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'1-Bed '+ptypeString+'for rent in county '+titleCase(PD.address.county)})
      // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'2-Bed '+ptypeString+'for rent in county '+titleCase(PD.address.county)})
      // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'3-Bed '+ptypeString+'for rent in county '+titleCase(PD.address.county)})

    }

    return {
      fCrumbs: fCrumbs,
      areaCrumbs: areaCrumbs,
      countyCrumbs: countyCrumbs
    };
  };

  var pageno = FlowRouter.getParam('pageno');
  if (!pageno) pageno = 1;
  var resperpage = 20;
  var minBeds = FlowRouter.getQueryParam('minBeds');
  if (!minBeds) minBeds = "";
  var maxBeds = FlowRouter.getQueryParam('maxBeds');
  if (!maxBeds) maxBeds = "";
  var minRent = FlowRouter.getQueryParam('minRent');
  if (!minRent) minRent = "";
  var maxRent = FlowRouter.getQueryParam('maxRent');
  if (!maxRent) maxRent = "";
  var bedCount = FlowRouter.getQueryParam('bedCount');
  if (!bedCount) bedCount = null;
  var luxurySort = FlowRouter.getQueryParam('luxurySort');
  if (!luxurySort) luxurySort = null;
  var cheapSort = FlowRouter.getQueryParam('cheapSort');
  if (!cheapSort) cheapSort = null;
  var mostRecentSort = FlowRouter.getQueryParam('mostRecentSort');
  if (!mostRecentSort) mostRecentSort = null;
  var leastRecentSort = FlowRouter.getQueryParam('leastRecentSort');
  if (!leastRecentSort) leastRecentSort = null;
  var propertykey = FlowRouter.getQueryParam('propertykey');
  if (!propertykey) propertykey = null;
  var slug = FlowRouter.getParam('slug');
  var query = FlowRouter.current().queryParams;
  var current = FlowRouter.current();
  var currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params, FlowRouter.current().queryParams); // try{if(!slug)slug = FlowRouter.current().params.slug;}catch(e){}

  if (!slug || slug.indexOf('-in-') == -1) {
    return {
      isSubsLoaded: false
    }; // if( (Date.now() - startTime) < 1000 )
    //     return {
    //         isSubsLoaded : false
    //     }
    // // this.render('notFound');
    // var prevRoute = {name: 'home',args:{scrollTo:0} }
    // Session.set('prevRoute',prevRoute);
    // FlowRouter.go('pagenotfound');
    // return;
  }

  var sortBySelected = "mRecent";
  var sortOptions = {
    updatedAt: -1
  };

  if (luxurySort) {
    sortBySelected = "descRent";
    sortOptions = {
      rentMonthly: -1
    };
  } else if (cheapSort) {
    sortBySelected = "ascRent";
    sortOptions = {
      rentMonthly: 1
    };
  } else if (mostRecentSort) {
    sortBySelected = "mRecent";
    sortOptions = {
      updatedAt: -1
    };
  } else if (leastRecentSort) {
    sortBySelected = "lRecent";
    sortOptions = {
      updatedAt: 1
    };
  }

  var bLettingsSub = Meteor.subscribe("browseLettings", {
    viewName: 'browseLettings.view',
    slug: slug,
    pageno: pageno,
    resperpage: resperpage,
    query: query,
    propertykey: propertykey
  }, function () {
    if (bLettingsSub.ready() && areasSub.ready() && Meteor.isClient) Session.set('subscriptionsReady', true);
  });
  Meteor.subscribe("total-houses-for-rent-count", {
    viewName: 'browseLettings.view',
    slug: slug,
    pageno: pageno,
    resperpage: resperpage,
    query: query,
    propertykey: propertykey
  });

  if (Meteor.isServer) {
    if (countsCollection == null) countsCollection = new Mongo.Collection('counts');

    Counts.get = function () {
      function countsGet(name) {
        var count = countsCollection.findOne(name);
        return count && count.count || 0;
      }

      return countsGet;
    }();

    Counts.has = function () {
      function countsHas(name) {
        return !!countsCollection.findOne(name);
      }

      return countsHas;
    }();

    totalCount = Counts.get("total-houses-for-rent-count");
  } else {
    totalCount = Counts.get("total-houses-for-rent-count");
  }

  var slugData = getSlugData();
  var countySelected = slugData.county;
  Meteor.subscribe('userData');
  var areasSub = Meteor.subscribe('Areas', '', '', countySelected, '', '', function () {
    if (bLettingsSub.ready() && areasSub.ready() && Meteor.isClient) Session.set('subscriptionsReady', true);
  });
  Meteor.subscribe('Config');
  if (Meteor.isClient) Session.get('subscriptionsReady');

  if (!bLettingsSub.ready() || !areasSub.ready()) {
    return {
      isSubsLoaded: false
    };
  } ////////// ADV BREADCRUMBS MORE LINKS


  var advC = {
    fCrumbs: [],
    areaCrumbs: [],
    countyCrumbs: []
  };

  if (true) {
    advC = advancedCrumbs(slugData.county, slugData.area, slugData.propertyType);
  } ////////// END ADV BREADCRUMBS


  var title = ''; //slug.replace(/[-_]/g,' ')

  title += slugData.propertyType ? slugData.propertyType + " for" : '';
  title += title ? ' rent in' : 'Rent in';
  title += slugData.area ? ' ' + slugData.area + "" : '';
  title += slugData.county ? ' ' + slugData.county + "" : '';
  title += ' Ireland';
  var description = "";
  description = 'Find';
  description += slugData.propertyType ? ' an ' + slugData.propertyType + " for" : '';
  description += ' rent in';
  description += slugData.area ? ' ' + slugData.area + "" : '';
  description += slugData.county ? ' ' + slugData.county + "" : '';
  description += ' Ireland.';
  description += " Browse through the apartments, houses, studios, 1 bed, 2 bed, 3 bed rooms available to rent in Ireland."; // Find an apartment for rent in Ireland. Browse through the studio, apartments, houses, 1 bed, 2 bed, 3 bed rooms available to rent in Ireland.
  // Found total 32 apartment for rent in Ireland. Browse through the studio, apartments, houses, 1 bed, 2 bed, 3 bed rooms available to rent in Ireland. Choose county and area from the top right drop-down options. Click view details button by the apartment to know more about it. Use the navigation below to find more apartment for rent in Ireland.

  clearMeta();
  var titleTmp = title + ' | SpotMyCrib';
  if (titleTmp.length <= 75) title = titleTmp;
  DocHead.setTitle(title);
  DocHead.addMeta({
    name: "description",
    content: description
  });
  return {
    // currentUserId: Meteor.userId(),
    counties: counties(),
    totalCount: totalCount,
    pagination: getPaginationData(totalCount, pageno, 20),
    pageno: pageno,
    areas: areas(),
    propertyTypes: propertyTypes(),
    auctions: Collections.Auctions.find({}, {
      sort: sortOptions
    }).fetch(),
    properties: Collections.Properties.find().fetch(),
    areaSelected: areaSelected(),
    countySelected: countySelected,
    propertyTypeSelected: propertyTypeSelected(),
    isSubsLoaded: true,
    slug: slug,
    fCrumbs: advC.fCrumbs,
    areaCrumbs: advC.areaCrumbs,
    countyCrumbs: advC.countyCrumbs,
    minRentSelected: slugData.minRent,
    maxRentSelected: slugData.maxRent,
    minBedCountSelected: slugData.minBeds,
    maxBedCountSelected: slugData.maxBeds,
    sortBySelected: sortBySelected
  };
})(HousesForrent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"LettingDetail.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/pages/LettingDetail.jsx                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function (module1) {
  var _assertThisInitialized;

  module1.link("@babel/runtime/helpers/assertThisInitialized", {
    default: function (v) {
      _assertThisInitialized = v;
    }
  }, 0);

  var _inheritsLoose;

  module1.link("@babel/runtime/helpers/inheritsLoose", {
    default: function (v) {
      _inheritsLoose = v;
    }
  }, 1);
  var Meteor;
  module1.link("meteor/meteor", {
    Meteor: function (v) {
      Meteor = v;
    }
  }, 0);
  var React, Component;
  module1.link("react", {
    "default": function (v) {
      React = v;
    },
    Component: function (v) {
      Component = v;
    }
  }, 1);
  var ReactDOM;
  module1.link("react-dom", {
    "default": function (v) {
      ReactDOM = v;
    }
  }, 2);
  var withTracker;
  module1.link("meteor/react-meteor-data", {
    withTracker: function (v) {
      withTracker = v;
    }
  }, 3);
  var MainLayoutFooter;
  module1.link("../layout/MainLayoutFooter.jsx", {
    "default": function (v) {
      MainLayoutFooter = v;
    }
  }, 4);
  var MainLayoutHeader;
  module1.link("../layout/MainLayoutHeader.jsx", {
    "default": function (v) {
      MainLayoutHeader = v;
    }
  }, 5);
  var Collections;
  module1.link("../../api/collections", {
    Collections: function (v) {
      Collections = v;
    }
  }, 6);
  var isArray;
  module1.link("util", {
    isArray: function (v) {
      isArray = v;
    }
  }, 7);
  updateViewsCalled = false;
  propertyKeyOfThisPage = '';
  if (Meteor.isClient) Session.set('subscriptionsReady', false);
  if (Meteor.isClient) Session.set('subscriptionsReady2', false);

  function titleCase(str) {
    if (!str) return;
    return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
  }

  function dateFormat(text) {
    var date = new Date(text);
    if (date.toString() == "Invalid Date") return 'N/A';
    return date.toDateString();
  }

  function addCommaToEach(arr) {
    if (!arr) return '';
    return arr.join(', ');
  }

  function nlToBr(str) {
    if (!str) return '';
    return str.replace(/(?:\r\n|\r|\n)/g, '<br />');
  }

  function validateMobileNumber(mobile) {
    var tmp = mobile.split('+');
    if (tmp.length > 1) mobile = tmp[1];
    if (mobile.length < 6) return false;
    return /^\d+$/.test(mobile);
  }

  function attachEvents() {
    $(".confirmApplyBtn").unbind().bind("click", function () {
      ga('send', 'event', 'PDPage', 'confirmApplyBtn', 'CAP: Confirm Apply Btn Clicked');
    });
    $(".redirectToProfilePage").unbind().bind("click", function () {
      redirectToProfilePageEvent();
    });
    $(".pd_cap_btn").unbind().bind("click", function () {
      console.log('pd_cap_btn');
      ga('send', 'event', 'PDPage', 'CAPUploadRefBtnClicked', 'CAP: Upload Reference Btn Clicked');
      redirectToProfilePageEvent();
    });
    $(".pd_cap_a").unbind().bind("click", function () {
      console.log('pd_cap_a');
      ga('send', 'event', 'PDPage', 'CAPUploadRefAClicked', 'CAP: Upload Reference Anchor Link Clicked');
      redirectToProfilePageEvent();
    });
    $(".cap_closePopupBtn").unbind().bind("click", function () {
      console.log('cap_closePopupBtn');
      ga('send', 'event', 'PDPage', 'CAPClosePopupBtn', 'CAP: Cancle Apply Btn Clicked');
      closePopupEvent();
    });
  }

  function showConfDialog() {
    $.fancybox({
      'padding': 0,
      'href': '#fully-confirm',
      afterShow: function () {
        attachEvents();
      },
      afterClose: function (template) {}
    });
  }

  function redirectToProfilePageEvent() {
    var prevRoute = {
      name: FlowRouter.current().route.name,
      args: {
        key: FlowRouter.current().params.key
      }
    };
    Session.set('prevRoute', prevRoute);
    FlowRouter.go("account/profile");
    closePopupEvent();
  }

  function closePopupEvent() {
    if ($) if ($.fancybox) $.fancybox.close();
  }

  function generateSlug(curURL) {
    var propertyType = curURL.propertyType;
    var county = curURL.county;
    var area = curURL.area;
    var maxRent = curURL.maxRent;
    var country = curURL.country;
    var bedCount = curURL.bedCount;
    var luxurySort = curURL.luxurySort;
    var cheapSort = curURL.cheapSort; // const territory = target.territory.value;

    var slug = '';
    var query = {};
    if (propertyType) propertyType = propertyType.replace(/\s+/g, '_');
    if (county) county = county.replace(/\s+/g, '_');
    if (area) area = area.replace(/\s+/g, '_');
    if (country) country = country.replace(/\s+/g, '_');
    if (propertyType) slug = propertyType + "-for-";
    slug += "rent"; // if(areaSelected||countySelected||country)

    slug += "-in-";
    if (!county) area = '';
    if (area) slug += area;
    if (area && county) slug += "-";
    if (county) slug += county;
    if (bedCount) query.bedCount = bedCount;
    if (luxurySort) query.luxurySort = 1;
    if (cheapSort) query.cheapSort = 1;
    if (country) slug += "-" + country;else slug += "-ireland";
    var range = [{
      cur: "eur",
      min: 400,
      max: 10000
    }];
    var selectedCur = range[0];
    if (maxRent && maxRent != selectedCur.max) query.maxRent = maxRent; // apartment-for-rent-in-dundrum-dublin-ireland
    // apartment-for-rent-in-donnybroke-london-uk
    // rent/apartment/dundrum/dublin
    // rent/apartment/donnybroke/london/england/uk/

    return [slugify(slug), query];
  }

  function generateSlugURL(curURL) {
    var ret = generateSlug(curURL);
    return FlowRouter.url('b', {
      slug: ret[0]
    }, ret[1]);
  }

  function slugify(text) {
    if (!text) return '';
    var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/,:;';
    var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
    var p = new RegExp(a.split('').join('|'), 'g');
    return text.toString().toLowerCase().replace(/\s+/g, '') // Replace spaces with ""
    .replace(p, function (c) {
      return b.charAt(a.indexOf(c));
    }) // Replace special chars
    .replace(/&/g, '-and-') // Replace & with ''
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-') // Replace multiple - with single ''
    .replace(/^-+/, '') // Trim - from start of text
    .replace(/-+$/, ''); // Trim - from end of text
  }

  function showLoginDialog() {
    Session.set('showForgotForm', false);
    Session.set('showSignupForm', false);
    Session.set('showLoginSignupFancyBoxDialog', true);
    Session.set('showLoginDialog', true);
  }

  function fixImageSize() {
    var avgW = 0;
    $('#relatedsection .thumbnail img').each(function () {
      if (!avgW) avgW = $(this).width();else {
        avgW += $(this).width();
        avgW = avgW / 2;
      }
    });
    if (!avgW) avgW = 250;
    $('#relatedsection .thumbnail img').width('100%');
    $('#relatedsection .thumbnail img').height(avgW * 0.7);
  }

  function chunkify(a, n, balanced) {
    if (n < 2) return [a];
    if (!Array.isArray(a)) return [];
    var len = a.length,
        out = [],
        i = 0,
        size;

    if (len % n === 0) {
      size = Math.floor(len / n);

      while (i < len) {
        out.push(a.slice(i, i += size));
      }
    } else if (balanced) {
      while (i < len) {
        size = Math.ceil((len - i) / n--);
        out.push(a.slice(i, i += size));
      }
    } else {
      n--;
      size = Math.floor(len / n);
      if (len % size === 0) size--;

      while (i < size * n) {
        out.push(a.slice(i, i += size));
      }

      out.push(a.slice(size * n));
    }

    return out;
  }

  function autoExpandDelayed() {
    setTimeout(autoExpand, 500);
  }

  function autoExpand() {
    var field = $('#bidMessage')[0];
    if (!field) return; // Reset field height

    field.style.height = 'inherit'; // Get the computed styles for the element

    var computed = window.getComputedStyle(field); // Calculate the height

    var height = parseInt(computed.getPropertyValue('border-top-width'), 10) + parseInt(computed.getPropertyValue('padding-top'), 10) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom'), 10) + parseInt(computed.getPropertyValue('border-bottom-width'), 10);
    field.style.height = height - 20 + 'px'; //adding -40 due to the result of test case that its causing too much space extra in a normal way, may be due to font size, line height etc.
  }

  ;
  isApplySuccessfulOpen = false;

  function showApplySuccessfulDialog() {
    // console.log("Apply showApplySuccessfulDialog")
    $.fancybox({
      'padding': 0,
      'href': '#apply-successful-popup',
      afterShow: function () {
        isApplySuccessfulOpen = true;
      },
      afterClose: function () {
        isApplySuccessfulOpen = false;
      }
    });
  }

  var LettingDetail = /*#__PURE__*/function (_Component) {
    _inheritsLoose(LettingDetail, _Component);

    function LettingDetail(props) {
      var _this;

      _this = _Component.call(this, props) || this;
      var current = FlowRouter.current();
      _this.currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params);
      var searchCrumbs = {
        c1: [],
        c2: [],
        c3: []
      };
      var fCrumbs = {
        c1: [],
        c2: [],
        c3: []
      };
      var areaCrumbs = {
        c1: [],
        c2: [],
        c3: []
      };
      var countyCrumbs = {
        c1: [],
        c2: [],
        c3: []
      };

      if (props.data) {
        if (props.data.searchCrumbs) {
          var chunks = chunkify(props.data.searchCrumbs, 3, true);
          searchCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
        }

        if (props.data.fCrumbs) {
          var chunks = chunkify(props.data.fCrumbs, 3, true);
          fCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
        }

        if (props.data.areaCrumbs) {
          var chunks = chunkify(props.data.areaCrumbs, 3, true);
          areaCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
        }

        if (props.data.countyCrumbs) {
          var chunks = chunkify(props.data.countyCrumbs, 3, true);
          countyCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          };
        }
      }

      _this.state = {
        isApplicationInProgress: false,
        'searchCrumbs': searchCrumbs,
        fCrumbs: fCrumbs,
        areaCrumbs: areaCrumbs,
        countyCrumbs: countyCrumbs,
        personalMessage: ""
      };
      _this.searchCrumbsLoaded = false;
      _this.applyNowBtnHandler = _this.applyNowBtnHandler.bind(_assertThisInitialized(_this));
      _this.redirectToProfilePageHandler = _this.redirectToProfilePageHandler.bind(_assertThisInitialized(_this));
      _this.confirmApplyBtnHandler = _this.confirmApplyBtnHandler.bind(_assertThisInitialized(_this));
      _this.cap_closePopupBtnHandler = _this.cap_closePopupBtnHandler.bind(_assertThisInitialized(_this));
      _this.cap_viewSimilarLettingsBtnHandler = _this.cap_viewSimilarLettingsBtnHandler.bind(_assertThisInitialized(_this));
      _this.backBtnHandler = _this.backBtnHandler.bind(_assertThisInitialized(_this));
      _this.noPropBackBtnHandler = _this.noPropBackBtnHandler.bind(_assertThisInitialized(_this));
      _this.pd_cap_btnHandler = _this.pd_cap_btnHandler.bind(_assertThisInitialized(_this));
      _this.pd_cap_aHandler = _this.pd_cap_aHandler.bind(_assertThisInitialized(_this));
      _this.headerApplyNowBtnHandler = _this.headerApplyNowBtnHandler.bind(_assertThisInitialized(_this));
      _this.mainUploadRefBtnHandler = _this.mainUploadRefBtnHandler.bind(_assertThisInitialized(_this));
      _this.mainUpdateRefBtnHandler = _this.mainUpdateRefBtnHandler.bind(_assertThisInitialized(_this));
      _this.mainApplyNowBtnHandler = _this.mainApplyNowBtnHandler.bind(_assertThisInitialized(_this));
      _this.createAlertBtnHandler = _this.createAlertBtnHandler.bind(_assertThisInitialized(_this));
      updateViewsCalled = false;
      _this.propsListHTML = '';
      _this.isServerSSRReq = '';
      _this.handlePersonalMessageChange = _this.handlePersonalMessageChange.bind(_assertThisInitialized(_this));
      return _this;
    }

    var _proto = LettingDetail.prototype;

    _proto.backBtnHandler = function () {
      function backBtnHandler() {
        var prevRoute = Session.get('prevRoute');

        if (prevRoute) {
          FlowRouter.go(prevRoute.name, prevRoute.args);
          Session.set('prevRoute', false);
        } else {
          FlowRouter.go("/account/myproperies/", {
            pageno: 1
          });
        }
      }

      return backBtnHandler;
    }();

    _proto.noPropBackBtnHandler = function () {
      function noPropBackBtnHandler() {
        var prevRoute = Session.get('prevRoute');

        if (prevRoute) {
          FlowRouter.go(prevRoute.name, prevRoute.args);
          Session.set('prevRoute', false);
        } else {
          FlowRouter.go("home");
        }
      }

      return noPropBackBtnHandler;
    }();

    _proto.cap_closePopupBtnHandler = function () {
      function cap_closePopupBtnHandler() {
        console.log('cap_closePopupBtn');
        ga('send', 'event', 'PDPage', 'CAPClosePopupBtn', 'CAP: Cancle Apply Btn Clicked');
        closePopupEvent();
      }

      return cap_closePopupBtnHandler;
    }();

    _proto.cap_viewSimilarLettingsBtnHandler = function () {
      function cap_viewSimilarLettingsBtnHandler() {
        console.log('cap_viewSimilarLettingsBtnHandler');
        ga('send', 'event', 'PDPage', 'CAPViewSimilarLettingsBtn', 'CAP: View Simiar Lettings Btn Clicked'); //CAP: Confirm Apply Popup

        closePopupEvent();
        var element = document.getElementById("relatedsection");
        element.scrollIntoView();
      }

      return cap_viewSimilarLettingsBtnHandler;
    }();

    _proto.redirectToProfilePageHandler = function () {
      function redirectToProfilePageHandler() {
        redirectToProfilePageEvent();
      }

      return redirectToProfilePageHandler;
    }();

    _proto.handlePersonalMessageChange = function () {
      function handlePersonalMessageChange(event) {
        this.setState({
          personalMessage: event.target.value
        });
        autoExpandDelayed();
      }

      return handlePersonalMessageChange;
    }();

    _proto.confirmApplyBtnHandler = function () {
      function confirmApplyBtnHandler() {
        console.log('confirmApplyBtn');
        ga('send', 'event', 'PDPage', 'confirmApplyBtn', 'CAP: Confirm Apply Btn Clicked');
        var auctionId = this.props.data._id;
        var price = $('#bidPrice').val();
        price = parseInt(price);

        if (isNaN(price)) {
          alert("Please enter a valid offer price.");
          return;
        } // var bidMessage = $('#bidMessage').val();


        var bidMessage = this.state.personalMessage;
        bidMessage = bidMessage.substring(0, 500);
        var min = this.props.data.price * 0.7,
            max = this.props.data.price * 1.5;

        if (!auctionId) {
          console.log("invalid data");
          return;
        }

        if (price < min || price > max) {
          alert("Offer price should be between " + min + " and " + max + ". Please adjust your offer price again.");
          return;
        } // debugger;


        this.setState({
          isApplicationInProgress: true
        });

        this.placeBidCallback = function (error, result) {
          this.setState({
            isApplicationInProgress: false
          });

          if (error) {
            console.log(error);
            var tmp = Session.get("showErrorDlg");
            if (!tmp) tmp = [];
            tmp.push("Failed applying. Please try again, try checking your internet connectivity. Contact us if needed.");
            Session.set("showErrorDlg", tmp);
            return;
          }

          if (result.status == 'Success') {
            console.log("Success");
            closePopupEvent(); //Dont close it, instead show the successful part of that dialog

            setTimeout(showApplySuccessfulDialog, 500);
            setTimeout(function () {
              if (!isApplySuccessfulOpen) showApplySuccessfulDialog();
            }, 1500);
            setTimeout(function () {
              if (!isApplySuccessfulOpen) showApplySuccessfulDialog();
            }, 3000);
          }
        };

        this.placeBidCallback = this.placeBidCallback.bind(this);
        Meteor.call('placeBid', [auctionId, price, bidMessage], this.placeBidCallback);
        var user = Accounts.user();
        if (user) if (user.profile) if (!user.profile.mobile) {
          var mobile = false,
              isValid = false;
          mobile = prompt("You don't have a mobile number attached to your profile. Please enter mobile to proceed. ");

          var _tmp = mobile.split('+');

          if (_tmp.length > 1) mobile = _tmp[1];
          if (validateMobileNumber(mobile)) isValid = true;

          while (!isValid) {
            //This is an un limited loop of mobile number.
            mobile = prompt("Error! invalid format. Please enter mobile number in format +353 893456789.");
            if (validateMobileNumber(mobile)) isValid = true;
          } // if(/^\d{10}$/.test(mobile)) {


          if (isValid) {
            Meteor.call('updateMobile', mobile, function (error, result) {
              if (error) {
                console.log(error.error);
                var tmp = Session.get("showErrorDlg");
                var msg = 'Mobile number update failed. Please try again. Contact us if needed.';
                tmp.push(msg);
                Session.set("showErrorDlg", tmp);
                return;
              }
            });
          }
        }
      }

      return confirmApplyBtnHandler;
    }();

    _proto.applyNowBtnHandler = function () {
      function applyNowBtnHandler(event) {
        // Prevent default browser form submit
        if (event) event.preventDefault();
        console.log("Apply now btn clicked");

        if (!this.props.user) {
          Session.set('loginFromApplyNowBtn', true);
          showLoginDialog();
          return;
        } // if(user._id == this._createdByAgent ){
        //     console.log("Owner cannot apply for the house.");
        //     return;
        // }
        //Do mobile verification


        if (this.props.user.profile) if (this.props.user.profile.personalMessage && !this.state.personalMessage) {
          //Do this only if the current sessions personal message is empty
          this.setState({
            personalMessage: this.props.user.profile.personalMessage
          });
        }

        if (this.props.myBid) {
          var tmp = Session.get("showErrorDlg");
          if (!tmp) tmp = [];
          tmp.push("Error: You have an existing application, please refresh the page.");
          Session.set("showErrorDlg", tmp);
          console.log("Already has a bid");
          return;
        }

        this.afterCFun = function () {
          attachEvents();
          setTimeout(function () {
            $('#bidPrice').focus().select();
            autoExpandDelayed();
          }, 500);
        };

        this.afterCFun = this.afterCFun.bind(this);
        $.fancybox({
          'padding': 0,
          'href': '#confirm-apply-pop',
          afterShow: this.afterCFun,
          afterClose: function () {}
        });
      }

      return applyNowBtnHandler;
    }();

    _proto.headerApplyNowBtnHandler = function () {
      function headerApplyNowBtnHandler() {
        console.log('headerApplyNowBtn');
        ga('send', 'event', 'PDPage', 'HeaderApplyNowBtnClicked', 'Header: Apply now Btn Clicked');
        this.applyNowBtnHandler();
      }

      return headerApplyNowBtnHandler;
    }();

    _proto.mainApplyNowBtnHandler = function () {
      function mainApplyNowBtnHandler(event) {
        console.log('mainApplyNowBtn');
        ga('send', 'event', 'PDPage', 'ApplyNowBtnClicked', 'Main: Apply now Btn Clicked');
        this.applyNowBtnHandler(event);
      }

      return mainApplyNowBtnHandler;
    }();

    _proto.pd_cap_btnHandler = function () {
      function pd_cap_btnHandler(event) {
        if (event) event.preventDefault();
        console.log('pd_cap_btn');
        ga('send', 'event', 'PDPage', 'CAPUploadRefBtnClicked', 'CAP: Upload Reference Btn Clicked');
        redirectToProfilePageEvent();
      }

      return pd_cap_btnHandler;
    }();

    _proto.pd_cap_aHandler = function () {
      function pd_cap_aHandler(event) {
        if (event) event.preventDefault();
        console.log('pd_cap_a');
        ga('send', 'event', 'PDPage', 'CAPUploadRefAClicked', 'CAP: Upload Reference Anchor Link Clicked');
        redirectToProfilePageEvent();
      }

      return pd_cap_aHandler;
    }();

    _proto.mainUploadRefBtnHandler = function () {
      function mainUploadRefBtnHandler() {
        console.log('mainUploadRefBtn');
        ga('send', 'event', 'PDPage', 'UploadRefBtnClicked', 'Main: Upload Reference Btn Clicked');
        redirectToProfilePageEvent();
      }

      return mainUploadRefBtnHandler;
    }();

    _proto.mainUpdateRefBtnHandler = function () {
      function mainUpdateRefBtnHandler() {
        console.log('mainUpdateRefBtn');
        ga('send', 'event', 'PDPage', 'UpdateRefBtnClicked', 'Main: Update Reference Btn Clicked');
        redirectToProfilePageEvent();
      }

      return mainUpdateRefBtnHandler;
    }();

    _proto.createAlertBtnHandler = function () {
      function createAlertBtnHandler() {
        console.log('createAlertBtnHandler');
        ga('send', 'event', 'PDPage', 'createAlertBtnClicked', 'Main: Create Alert Btn Clicked');
        Session.set('showCreateAlertPopup', true);
      }

      return createAlertBtnHandler;
    }();

    _proto.componentDidMount = function () {
      function componentDidMount() {
        $(document).ready(function () {
          $('.scroll-menu-div').hide();
          $(window).on("scroll", function () {
            var scrollPercent = 100 * $(window).scrollTop() / ($(document).height() - $(window).height());

            if (scrollPercent > 10) {
              $('.scroll-menu-div').fadeIn();
              $(".scroll-menu-div").addClass('fixed-header');
            } else {
              $('.scroll-menu-div').hide();
              $(".scroll-menu-div").removeClass("fixed-header");
            }
          });
          setTimeout(function () {
            try {
              jQuery("html,body").animate({
                scrollTop: 0
              }, 250);
            } catch (e) {
              document.body.scrollTop = document.documentElement.scrollTop = 0;
            }

            $('.scroll-menu-div').hide();
            $(".scroll-menu-div").removeClass("fixed-header");
          }, 500);
        });
        setTimeout(fixImageSize, 1000);
        setTimeout(fixImageSize, 3000);
        setTimeout(fixImageSize, 5000); // setTimeout(function(){addthis.init();addthis.layers.refresh();},5000)

        $(window).resize(fixImageSize);
        $(window).resize(autoExpandDelayed);
      }

      return componentDidMount;
    }();

    _proto.componentDidUpdate = function () {
      function componentDidUpdate() {
        setTimeout(fixImageSize, 1000);
        setTimeout(fixImageSize, 3000);
        setTimeout(fixImageSize, 5000);

        if (this.props.data && !updateViewsCalled) {
          updateViewsCalled = true;
          Meteor.call('updateViews', this.props.data._id);
        }

        if (propertyKeyOfThisPage && this.props.data.lettingAuctionCode) {
          if (this.props.data.lettingAuctionCode != propertyKeyOfThisPage) {
            //lettingAuctionCode changed, means page is changed
            //Constructor elements needs to be called again
            updateViewsCalled = true;
            Meteor.call('updateViews', this.props.data._id);
            this.setState({
              isApplicationInProgress: false,
              personalMessage: ""
            });
            this.searchCrumbsLoaded = false;
            Session.set('subscriptionsReady2', false);
            propertyKeyOfThisPage = this.props.data.lettingAuctionCode;
            setTimeout(function () {
              try {
                jQuery("html,body").animate({
                  scrollTop: 0
                }, 250);
              } catch (e) {
                document.body.scrollTop = document.documentElement.scrollTop = 0;
              }
            }, 500);
          }
        }
      }

      return componentDidUpdate;
    }();

    _proto.componentWillReceiveProps = function () {
      function componentWillReceiveProps(props) {
        var searchCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var fCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var areaCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };
        var countyCrumbs = {
          c1: [],
          c2: [],
          c3: []
        };

        if (props.data.searchCrumbs != this.state.searchCrumbs) {
          var chunks = chunkify(props.data.searchCrumbs, 3, true);
          searchCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          }; // console.log('in the setState for searchCrumbs')

          this.setState({
            'searchCrumbs': searchCrumbs
          });
        }

        if (props.data.fCrumbs != this.state.fCrumbs) {
          var chunks = chunkify(props.data.fCrumbs, 3, true);
          fCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          }; // console.log('in the setState for fCrumbs')

          this.setState({
            fCrumbs: fCrumbs
          });
        }

        if (props.data.areaCrumbs != this.state.areaCrumbs) {
          var chunks = chunkify(props.data.areaCrumbs, 3, true);
          areaCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          }; // console.log('in the setState for areaCrumbs')

          this.setState({
            areaCrumbs: areaCrumbs
          });
        }

        if (props.data.countyCrumbs != this.state.countyCrumbs) {
          var chunks = chunkify(props.data.countyCrumbs, 3, true);
          countyCrumbs = {
            c1: chunks[0],
            c2: chunks[1],
            c3: chunks[2]
          }; // console.log('in the setState for countyCrumbs')

          this.setState({
            countyCrumbs: countyCrumbs
          });
        }
      }

      return componentWillReceiveProps;
    }() // currentURL:function () {
    //     return Router.current().originalUrl;
    // },
    ;

    _proto.isCurUserBid = function () {
      function isCurUserBid() {
        //todo: test this
        debugger;
        if (!this.props.user) return false;
        if (this.userId == user._id) return true;
        return false;
      }

      return isCurUserBid;
    }();

    _proto.renderMain = function () {
      function renderMain() {
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("section", {
          className: "scroll-menu-div",
          style: {
            zIndex: '1000'
          }
        }, /*#__PURE__*/React.createElement("div", {
          className: "container"
        }, /*#__PURE__*/React.createElement("div", {
          className: "scroll-menu"
        }, /*#__PURE__*/React.createElement("div", {
          className: "left-menu"
        }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + "#imagessection",
          className: "active scroll1"
        }, "PHOTOS")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + "#detailssection",
          className: "scroll1"
        }, "DETAILS")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + "#amenitiessection",
          className: "scroll1"
        }, "AMENITIES")))), /*#__PURE__*/React.createElement("div", {
          className: "right-menu"
        }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", {
          className: "left-line"
        }, /*#__PURE__*/React.createElement("p", null, "Applications received"), /*#__PURE__*/React.createElement("p", {
          className: "pad-btm-0 text-center"
        }, this.props.data.applicationsReceivedCount)), /*#__PURE__*/React.createElement("li", {
          className: "left-line"
        }, /*#__PURE__*/React.createElement("p", null, "Owner's Current Rent"), /*#__PURE__*/React.createElement("p", {
          className: "pad-btm-0 text-center"
        }, "\u20AC ", this.props.data.price + " (" + this.props.data.rentType + ")")), /*#__PURE__*/React.createElement("li", null, this.props.alreadyLeased ? /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + '#relatedsection',
          className: "green-btn  btns",
          type: "button"
        }, "View similar lettings") : this.props.myBid ? /*#__PURE__*/React.createElement("button", {
          className: "green-btn  btns viewMyApplication",
          type: "button"
        }, "Already applied") : /*#__PURE__*/React.createElement("buttons", {
          onClick: this.headerApplyNowBtnHandler,
          className: "blue-btn btns headerApplyNowBtn applyNowBtn"
        }, "Apply for this ", this.props.PD.type))))))), /*#__PURE__*/React.createElement("section", {
          className: "banner"
        }, /*#__PURE__*/React.createElement("div", {
          className: "container"
        }, /*#__PURE__*/React.createElement("div", {
          className: "row"
        }, /*#__PURE__*/React.createElement("div", {
          id: "imagessection",
          className: "col-md-7 padding0"
        }, /*#__PURE__*/React.createElement("figure", null, /*#__PURE__*/React.createElement("div", {
          className: "banner-holder"
        }, /*#__PURE__*/React.createElement(ImagesSlider, {
          images: this.props.sliderImages
        })), this.props.isAgent ? /*#__PURE__*/React.createElement("figcaption", null, /*#__PURE__*/React.createElement("h2", null, this.props.isAgent.name), /*#__PURE__*/React.createElement("h5", {
          style: {
            padding: 0
          }
        }, this.props.isAgent.address1)) : "")), /*#__PURE__*/React.createElement("div", {
          className: "col-md-5 purva-bg"
        }, /*#__PURE__*/React.createElement("div", {
          className: "purva"
        }, this.props.isAgent ? /*#__PURE__*/React.createElement("img", {
          src: this.props.isAgent.logourl,
          alt: this.props.isAgent.name,
          style: this.props.isAgent.style
        }) : "", /*#__PURE__*/React.createElement("h1", null, titleCase(this.props.PD.address.address), this.props.PD.address.area ? /*#__PURE__*/React.createElement("span", null, ", ", titleCase(this.props.PD.address.area)) : '', this.props.PD.address.county ? /*#__PURE__*/React.createElement("span", null, ", ", titleCase(this.props.PD.address.county)) : ''), /*#__PURE__*/React.createElement("p", {
          style: {
            marginBottom: '10px'
          }
        }, titleCase(this.props.PD.type), " to rent in ", titleCase(this.props.PD.address.area), this.props.PD.address.county ? /*#__PURE__*/React.createElement("span", null, ", ", titleCase(this.props.PD.address.county)) : '', ". Its ", this.props.PD.furnished ? "a furnished" : "an Unfurnished", " ", titleCase(this.props.PD.type), " with ", this.props.PD.bedroomsCount, " beds, ", this.props.PD.baths, " baths, ", this.props.PD.ensuiteCount ? this.props.PD.ensuiteCount : "no", " Ensuite and ", this.props.PD.doubleBedCount ? this.props.PD.doubleBedCount : "has no", " Double bed property/accommodation, your next my home. ", this.props.isAgent ? /*#__PURE__*/React.createElement("span", null, "Its posted by ", this.props.isAgent.name, ".") : "", " Click apply below to send your interest to the landlord and he would contact you soon. "), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("span", {
          style: {
            color: '#b3b3b3'
          }
        }, "Views"), " :  ", this.props.data.views)), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url('howitworks')
        }, /*#__PURE__*/React.createElement("p", {
          style: {
            color: '#39b54a',
            fontFamily: '"montserratregular"',
            padding: 0
          }
        }, "How it works?"))), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url('contactus')
        }, /*#__PURE__*/React.createElement("p", {
          style: {
            color: '#39b54a',
            fontFamily: '"montserratregular"',
            padding: 0
          }
        }, "Need help?")))), /*#__PURE__*/React.createElement("p", null, "\xA0"), /*#__PURE__*/React.createElement("div", {
          className: "purva-developer"
        }, /*#__PURE__*/React.createElement("h5", null, /*#__PURE__*/React.createElement("span", {
          style: {
            color: '#b3b3b3'
          }
        }, "Owner's Current Rent :"), "\u20AC ", this.props.data.price + " (" + this.props.data.rentType + ")")), this.props.alreadyLeased ? /*#__PURE__*/React.createElement("p", {
          style: {
            fontFamily: '"montserratregular"'
          }
        }, "This property is already leased. Please use one of the options below.") : "", /*#__PURE__*/React.createElement("div", {
          className: "purva-btns"
        }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, this.props.alreadyLeased ? /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + '#relatedsection',
          className: "green-btn  btns",
          type: "button"
        }, "View similar lettings"), /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + '#searchsection',
          className: "transparent-btn btns mar-left-10",
          type: "button"
        }, "Search More")) : this.props.myBid ? /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("button", {
          className: "green-btn  btns viewMyApplication",
          type: "button"
        }, "Already applied"), this.hasAllReqReferences ? /*#__PURE__*/React.createElement("button", {
          className: "transparent-btn btns mainUpdateRefBtn mar-left-10",
          onClick: this.mainUpdateRefBtnHandler,
          type: "button",
          title: "View your references"
        }, "Update references") : /*#__PURE__*/React.createElement("button", {
          className: "transparent-btn btns mainUploadRefBtn mar-left-10",
          onClick: this.mainUploadRefBtnHandler,
          type: "button",
          title: "You dont have all your references updated in your profile. Missing files are  {addCommaToEach(this.props.refListArr)}"
        }, "Upload references")) : /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("buttons", {
          onClick: this.mainApplyNowBtnHandler,
          className: "blue-btn btns mainApplyNowBtn applyNowBtn"
        }, "Apply for this ", this.props.PD.type), /*#__PURE__*/React.createElement("span", {
          className: "hidden-xs"
        }, "\xA0"), /*#__PURE__*/React.createElement("span", {
          className: "visible-xs",
          style: {
            height: 1
          }
        }, /*#__PURE__*/React.createElement("br", null)), this.hasAllReqReferences ? /*#__PURE__*/React.createElement("button", {
          className: "transparent-btn btns mainUpdateRefBtn",
          onClick: this.mainUpdateRefBtnHandler,
          type: "button",
          title: "View your references"
        }, "Update references") : /*#__PURE__*/React.createElement("button", {
          className: "transparent-btn btns mainUploadRefBtn",
          onClick: this.mainUploadRefBtnHandler,
          type: "button",
          title: "You dont have all your references updated in your profile. Missing files are  " + addCommaToEach(this.props.refListArr)
        }, "Upload references")), /*#__PURE__*/React.createElement("span", {
          className: "hidden-xs"
        }, "\xA0"), /*#__PURE__*/React.createElement("span", {
          className: "visible-xs",
          style: {
            height: 1
          }
        }, /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("button", {
          className: "green-btn btns",
          onClick: this.createAlertBtnHandler,
          type: "button",
          title: "Be the first to hear about the latest lettings in your area. Signup for our email alerts."
        }, /*#__PURE__*/React.createElement("span", {
          className: "glyphicon glyphicon-bell"
        }), " Create Alert"))))))))), /*#__PURE__*/React.createElement("section", {
          className: "main-sec"
        }, /*#__PURE__*/React.createElement("div", {
          className: "container"
        }, /*#__PURE__*/React.createElement("div", {
          className: "row"
        }, /*#__PURE__*/React.createElement("div", {
          id: "detailssection",
          className: "border mar-btm-20 background-white"
        }, /*#__PURE__*/React.createElement("div", {
          className: "head-border-bottom head-border-bottomTitleArea"
        }, /*#__PURE__*/React.createElement("h2", null, "Details")), /*#__PURE__*/React.createElement("div", {
          className: "developer proj-dtls "
        }, /*#__PURE__*/React.createElement("div", {
          className: "clearfix"
        }, /*#__PURE__*/React.createElement("div", {
          className: "col-md-9"
        }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("ul", {
          className: "list-inline"
        }, /*#__PURE__*/React.createElement("li", {
          className: true
        }, /*#__PURE__*/React.createElement("h3", null, "Rent type"), /*#__PURE__*/React.createElement("h4", {
          className: "pad-btm-0"
        }, titleCase(this.props.data.rentType))), /*#__PURE__*/React.createElement("li", {
          className: "left-line"
        }, /*#__PURE__*/React.createElement("h3", null, "Available from"), /*#__PURE__*/React.createElement("h4", {
          className: "pad-btm-0"
        }, dateFormat(this.props.data.readyFrom))), /*#__PURE__*/React.createElement("li", {
          className: "left-line"
        }, /*#__PURE__*/React.createElement("h3", null, "Available until"), /*#__PURE__*/React.createElement("h4", {
          className: "pad-btm-0"
        }, this.props.data.lease))), /*#__PURE__*/React.createElement("div", {
          className: "project-detail"
        }, /*#__PURE__*/React.createElement("ul", {
          className: "bdr-btm"
        }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", {
          className: "color-grey"
        }, "Location"), /*#__PURE__*/React.createElement("h5", {
          className: "heading-reg"
        }, " ", titleCase(this.props.PD.address.address), ", ", titleCase(this.props.PD.address.area), ", ", titleCase(this.props.PD.address.county))), /*#__PURE__*/React.createElement("li", {
          className: "pad-left-35"
        }, /*#__PURE__*/React.createElement("span", {
          className: "color-grey"
        }, "BER"), /*#__PURE__*/React.createElement("h5", {
          className: "heading-reg"
        }, " ", addCommaToEach(this.props.PD.BER)))))), /*#__PURE__*/React.createElement("div", {
          className: "mar-top-20 "
        }, /*#__PURE__*/React.createElement("h5", {
          className: "heading-reg"
        }, "Description"), /*#__PURE__*/React.createElement("p", {
          className: "color-grey pad-btm-10",
          dangerouslySetInnerHTML: {
            __html: nlToBr(this.props.PD.about)
          }
        }))), /*#__PURE__*/React.createElement("div", {
          className: "col-md-3"
        }, /*#__PURE__*/React.createElement("h5", {
          className: "heading-reg"
        }, "Bedrooms : ", this.props.PD.bedroomsCount), /*#__PURE__*/React.createElement("div", {
          className: "handed-proj-bg clearfix"
        }, /*#__PURE__*/React.createElement("div", {
          className: "col-md-6"
        }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, this.props.PD.doubleBedCount), /*#__PURE__*/React.createElement("h4", {
          className: "pad-btm-0"
        }, "Double"))), /*#__PURE__*/React.createElement("div", {
          className: "col-md-6",
          style: {
            padding: 0
          }
        }, /*#__PURE__*/React.createElement("div", {
          className: "left-line"
        }, /*#__PURE__*/React.createElement("h3", null, this.props.PD.ensuiteCount), /*#__PURE__*/React.createElement("h4", {
          className: "pad-btm-0"
        }, "Ensuite")))), /*#__PURE__*/React.createElement("h5", {
          className: "heading-reg mar-top-30"
        }, "Contact"), /*#__PURE__*/React.createElement("div", {
          className: "handed-proj-bg clearfix"
        }, this.props.alreadyLeased ? /*#__PURE__*/React.createElement("p", {
          style: {
            fontFamily: '"montserratregular"'
          },
          className: "text-center"
        }, "This property is already leased.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + '#relatedsection',
          title: "Browse through more available lettings for rent in " + titleCase(this.props.PD.address.area) + ", " + titleCase(this.props.PD.address.county)
        }, "View similar lettings"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + '#searchsection',
          title: "Search more available properties for rent in " + titleCase(this.props.PD.address.area) + ", " + titleCase(this.props.PD.address.county)
        }, "Search More")) : this.props.data.primaryContact.phone ? this.props.PD.contacts.map(function (contact, i) {
          return /*#__PURE__*/React.createElement("div", {
            key: i,
            className: "col-md-12"
          }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, titleCase(contact.name), " : ", /*#__PURE__*/React.createElement("a", {
            href: "tel:" + contact.phone
          }, contact.phone))));
        }) : /*#__PURE__*/React.createElement("div", {
          className: "col-md-12"
        }, "Apply for this property to email owner")))))), /*#__PURE__*/React.createElement("div", {
          id: "amenitiessection",
          className: "mar-btm-30 amenities"
        }, /*#__PURE__*/React.createElement("div", {
          className: "head-border-bottom head-border-bottomTitleArea"
        }, /*#__PURE__*/React.createElement("h2", null, "Amenities")), /*#__PURE__*/React.createElement("div", {
          className: "amenitiy-block"
        }, /*#__PURE__*/React.createElement("ul", null, this.props.PD.amenitiesWithImgs.map(function (aminity, i) {
          return /*#__PURE__*/React.createElement("li", {
            key: i
          }, /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("img", {
            src: aminity.src
          })), titleCase(aminity.name)));
        })))), this.props.data.relatedProps ? /*#__PURE__*/React.createElement("div", {
          id: "relatedsection",
          className: "mar-btm-30 amenities subscribeTillPopop"
        }, /*#__PURE__*/React.createElement("div", {
          className: "head-border-bottom head-border-bottomTitleArea"
        }, /*#__PURE__*/React.createElement("h2", null, "Similar ", titleCase(this.props.PD.type), " to rent in ", titleCase(this.props.PD.address.area), this.props.PD.address.county ? /*#__PURE__*/React.createElement("span", null, ", ", titleCase(this.props.PD.address.county)) : '')), /*#__PURE__*/React.createElement("div", {
          className: "amenitiy-block",
          style: {
            "float": 'left',
            display: 'block'
          }
        }, /*#__PURE__*/React.createElement("p", {
          style: {
            margin: '0 20px'
          }
        }, "Below are few more ", titleCase(this.props.PD.type), " to rent in ", this.props.PD.address.area ? /*#__PURE__*/React.createElement("span", null, titleCase(this.props.PD.address.area)) : '', this.props.PD.address.county ? /*#__PURE__*/React.createElement("span", null, ", ", titleCase(this.props.PD.address.county)) : '', ". They are also located near ", titleCase(this.props.PD.address.address), this.props.PD.address.area ? /*#__PURE__*/React.createElement("span", null, ", ", titleCase(this.props.PD.address.area)) : '', this.props.PD.address.county ? /*#__PURE__*/React.createElement("span", null, ", ", titleCase(this.props.PD.address.county)) : ''), /*#__PURE__*/React.createElement("ul", {
          className: "thumbnails thumbRelated"
        }, this.props.data.relatedProps.map(function (property, i) {
          return /*#__PURE__*/React.createElement("li", {
            className: "span4",
            key: i,
            style: {
              "float": 'left'
            }
          }, /*#__PURE__*/React.createElement("a", {
            href: FlowRouter.url('rent', {
              slug: property.slug,
              key: property.auction.lettingAuctionCode
            })
          }, /*#__PURE__*/React.createElement("div", {
            className: "thumbnail"
          }, property.firstImg ? property.firstImg.url ? property.firstImg.url.indexOf('amazonaws') ? /*#__PURE__*/React.createElement("img", {
            src: "https://process.filestackapi.com/AIPACLEs7ShGwwPh6fMTxz/resize=width:250/" + property.firstImg.url,
            alt: titleCase(property.address.address) + property.address.area ? ", " + titleCase(property.address.area) : '' + property.address.county ? ", " + titleCase(property.address.county) : ''
          }) : /*#__PURE__*/React.createElement("img", {
            src: "https://process.filestackapi.com/resize=width:250/" + property.firstImg.url,
            alt: titleCase(property.address.address) + property.address.area ? ", " + titleCase(property.address.area) : '' + property.address.county ? ", " + titleCase(property.address.county) : ''
          }) : /*#__PURE__*/React.createElement("img", {
            src: cdnPath("/images/no-photo.png"),
            style: {
              width: 250,
              height: 188
            }
          }) : "", /*#__PURE__*/React.createElement("h3", null, titleCase(property.address.address), property.address.area ? /*#__PURE__*/React.createElement("as", null, ", ", titleCase(property.address.area)) : '', property.address.county ? /*#__PURE__*/React.createElement("as", null, ", ", titleCase(property.address.county)) : '', " for rent"))));
        }))), /*#__PURE__*/React.createElement("div", {
          className: "amenitiy-block",
          style: {
            paddingTop: 0
          }
        }, /*#__PURE__*/React.createElement("div", {
          id: "searchsection",
          className: 'bottomcrumbs row'
        }, /*#__PURE__*/React.createElement("h2", null, "Search more properties to rent"), /*#__PURE__*/React.createElement("p", null, "Chooes a link below to browse through more relavent properties to rent."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
          className: "col-md-12 col-sm-12 col-xs-12 pad0"
        }, /*#__PURE__*/React.createElement("div", {
          className: "col-md-5 col-sm-5 col-xs-12"
        }, this.state.searchCrumbs.c1 ? this.state.searchCrumbs.c1.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.searchCrumbs.c2 ? this.state.searchCrumbs.c2.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-3 col-sm-3 col-xs-12"
        }, this.state.searchCrumbs.c3 ? this.state.searchCrumbs.c3.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""))), /*#__PURE__*/React.createElement("div", {
          className: 'bottomcrumbs row'
        }, /*#__PURE__*/React.createElement("h2", null, "Property types to rent"), /*#__PURE__*/React.createElement("div", {
          className: "col-md-12 col-sm-12 col-xs-12 pad0"
        }, /*#__PURE__*/React.createElement("div", {
          className: "col-md-3 col-sm-3 col-xs-12"
        }, this.state.fCrumbs.c1 ? this.state.fCrumbs.c1.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.fCrumbs.c2 ? this.state.fCrumbs.c2.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-5 col-sm-5 col-xs-12"
        }, this.state.fCrumbs.c3 ? this.state.fCrumbs.c3.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""))), /*#__PURE__*/React.createElement("div", {
          className: 'bottomcrumbs row'
        }, /*#__PURE__*/React.createElement("h2", null, this.props.PD.address.county, " neighbourhoods"), /*#__PURE__*/React.createElement("div", {
          className: "col-md-12 col-sm-12 col-xs-12 pad0"
        }, /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.areaCrumbs.c1 ? this.state.areaCrumbs.c1.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.areaCrumbs.c2 ? this.state.areaCrumbs.c2.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.areaCrumbs.c3 ? this.state.areaCrumbs.c3.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""))), /*#__PURE__*/React.createElement("div", {
          className: 'bottomcrumbs row'
        }, /*#__PURE__*/React.createElement("h2", null, "Other counties to rent"), /*#__PURE__*/React.createElement("div", {
          className: "col-md-12 col-sm-12 col-xs-12 pad0"
        }, /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.countyCrumbs.c1 ? this.state.countyCrumbs.c1.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.countyCrumbs.c2 ? this.state.countyCrumbs.c2.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""), /*#__PURE__*/React.createElement("div", {
          className: "col-md-4 col-sm-4 col-xs-12"
        }, this.state.countyCrumbs.c3 ? this.state.countyCrumbs.c3.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("a", {
            key: i,
            style: {
              display: "block"
            },
            href: crumb.url
          }, crumb.name);
        }) : ""))))) : ""))), /*#__PURE__*/React.createElement("div", {
          id: "apply-successful-popup",
          style: {
            display: 'none'
          },
          className: "verification-div1 isApplicationSuccessful"
        }, /*#__PURE__*/React.createElement("div", {
          className: "refund-div"
        }, /*#__PURE__*/React.createElement("h2", {
          className: "green-text"
        }, "Application Successful")), /*#__PURE__*/React.createElement("div", {
          className: "profile-text"
        }, /*#__PURE__*/React.createElement("h3", null, "Good Job!"), /*#__PURE__*/React.createElement("p", {
          style: {
            padding: 0
          }
        }, "Landlord is notified of your application and would contact you via email if successful."), false ? "" : this.hasAllReqReferences ? "" : /*#__PURE__*/React.createElement("div", {
          className: ""
        }, /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement("h3", null, "Improve your chances of securing this letting"), /*#__PURE__*/React.createElement("p", {
          className: "color-text",
          style: {
            textAlign: "center",
            margin: "10px 0"
          }
        }, "Upload your references in your profile to have an higher chance over other applicants. Missing files are\xA0", addCommaToEach(this.props.refListArr), "\xA0", /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url("account/profile"),
          onClick: this.pd_cap_aHandler,
          className: "pd_cap_a "
        }, "Upload them now?")), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url("account/profile"),
          style: {
            margin: '0 auto',
            width: "200px"
          },
          className: "blue-btn btns",
          onClick: this.pd_cap_btnHandler,
          type: "button"
        }, "Upload references "))), /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement("p", {
          style: {
            padding: 0
          }
        }, /*#__PURE__*/React.createElement("a", {
          href: this.currentURL + "#relatedsection",
          onClick: this.cap_viewSimilarLettingsBtnHandler,
          className: "transparent-btn btns",
          style: {
            margin: '0 auto',
            width: "200px"
          }
        }, "View Similar lettings")))), /*#__PURE__*/React.createElement("div", {
          id: "confirm-apply-pop",
          style: {
            display: 'none'
          },
          className: "verification-div1 "
        }, /*#__PURE__*/React.createElement("div", {
          className: "refund-div"
        }, /*#__PURE__*/React.createElement("h2", null, "Confirm Apply")), /*#__PURE__*/React.createElement("div", {
          className: "profile-text"
        }, /*#__PURE__*/React.createElement("h3", null, "Landlords asking rent is ", this.props.data.price + " (" + this.props.data.rentType + ")"), /*#__PURE__*/React.createElement("form", {
          className: "signin-form"
        }, /*#__PURE__*/React.createElement("div", {
          className: "form-border",
          style: {
            padding: '20px 0'
          }
        }, /*#__PURE__*/React.createElement("div", {
          className: "styled-input underline",
          style: {
            borderBottom: '1px solid #2169a8'
          }
        }, /*#__PURE__*/React.createElement("input", {
          className: "bidPrice",
          type: "number",
          placeholder: this.props.data.price,
          defaultValue: this.props.data.price,
          name: "number",
          id: "bidPrice",
          required: true,
          min: this.props.priceRange.min,
          max: this.props.priceRange.max
        })), /*#__PURE__*/React.createElement("div", {
          className: "styled-input underline"
        }, /*#__PURE__*/React.createElement("textarea", {
          className: "form-control bidMessage",
          id: "bidMessage",
          rows: 1,
          placeholder: "You may enter a personal message to landlord if you wish.",
          maxLength: 500,
          value: this.state.personalMessage,
          onChange: this.handlePersonalMessageChange,
          style: {
            textAlign: "center"
          }
        })))), /*#__PURE__*/React.createElement("p", {
          className: "color-text",
          style: {
            marginTop: '20px',
            textAlign: "center"
          }
        }, "We will submit all the references available in your profile. "), false ? "" : this.hasAllReqReferences ? "" : /*#__PURE__*/React.createElement("div", {
          className: "radio-bg register"
        }, /*#__PURE__*/React.createElement("h3", {
          style: {
            lineHeight: '22px',
            marginBottom: '10px'
          }
        }, "Oops! You dont have all your references updated in your profile. "), /*#__PURE__*/React.createElement("p", {
          className: "color-text",
          style: {
            textAlign: "center"
          }
        }, "Missing files are\xA0", addCommaToEach(this.props.refListArr), "\xA0", /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url("account/profile"),
          onClick: this.pd_cap_aHandler,
          className: "pd_cap_a "
        }, "Upload them now?")), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url("account/profile"),
          style: {
            margin: '0 auto',
            width: "200px"
          },
          className: "transparent-btn btns pd_cap_btn",
          onClick: this.pd_cap_btnHandler,
          type: "button"
        }, "Upload references ")), /*#__PURE__*/React.createElement("p", null, "Your chances of getting the house will be more if you apply with all the references. To proceed anyways click Submit below.")), /*#__PURE__*/React.createElement("ul", null, this.state.isApplicationInProgress ? /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("button", {
          className: "transparent-btn  btns",
          type: "button"
        }, "Applying... ")) : /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("button", {
          onClick: this.confirmApplyBtnHandler,
          className: "blue-btn  btns confirmApplyBtn",
          type: "button"
        }, "Submit ")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("button", {
          onClick: this.cap_closePopupBtnHandler,
          style: {
            marginLeft: '10px'
          },
          className: "transparent-btn btns cap_closePopupBtn",
          disabled: this.state.isApplicationInProgress,
          type: "button"
        }, "Cancel"))))));
      }

      return renderMain;
    }();

    _proto.renderFullMain = function () {
      function renderFullMain() {
        if (Meteor.isClient) {
          setTimeout(function () {
            $('#lettingDetailCarousel').carousel();
            $('#lettingDetailCarousel .carousel-control.right').unbind('click').bind('click', function () {
              $('#lettingDetailCarousel').carousel('next');
            });
            $('#lettingDetailCarousel .carousel-control.left').unbind('click').bind('click', function () {
              $('#lettingDetailCarousel').carousel('prev');
            });
          }, 1000);
        }

        return /*#__PURE__*/React.createElement("div", {
          className: "property-details-page",
          id: 'props_list'
        }, Meteor.isServer ? /*#__PURE__*/React.createElement("div", {
          id: "isservercheckdiv"
        }) : "", /*#__PURE__*/React.createElement("section", {
          className: "banner"
        }, /*#__PURE__*/React.createElement("div", {
          className: "container"
        }, /*#__PURE__*/React.createElement("div", {
          className: "row"
        }, /*#__PURE__*/React.createElement("nav", {
          "aria-label": "breadcrumb"
        }, /*#__PURE__*/React.createElement("ol", {
          className: "breadcrumb"
        }, /*#__PURE__*/React.createElement("li", {
          className: "breadcrumb-item"
        }, /*#__PURE__*/React.createElement("a", {
          href: FlowRouter.url('home')
        }, "Home")), this.props.data ? this.props.data.bcrumbs.map(function (crumb, i) {
          return /*#__PURE__*/React.createElement("li", {
            key: i,
            className: "breadcrumb-item"
          }, /*#__PURE__*/React.createElement("a", {
            href: crumb.url
          }, crumb.name));
        }) : "", /*#__PURE__*/React.createElement("li", {
          className: "breadcrumb-item active",
          "aria-current": "page"
        }, "This property")))))), this.props.isSubsLoaded ? this.props.data ? this.renderMain() : /*#__PURE__*/React.createElement("section", {
          className: "mar-top-20"
        }, /*#__PURE__*/React.createElement("div", {
          className: "container text-center mar-top-20 pad-btm-30"
        }, /*#__PURE__*/React.createElement("div", {
          className: "filter-holder"
        }, /*#__PURE__*/React.createElement("div", {
          className: "mar-top-30"
        }, this.props.alreadyLeased ? /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("strong", null, "Property already leased. Your landlord would contact you if you are chosen as a tenant."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("button", {
          onClick: this.backBtnHandler,
          className: "blue-btn btns backBtn",
          type: "button"
        }, "Try again")) : /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("strong", null, "This property is not found. Please check your key and try again."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("button", {
          onClick: this.noPropBackBtnHandler,
          className: "blue-btn btns noPropBackBtn",
          type: "button"
        }, "Try again")))))) : /*#__PURE__*/React.createElement("section", {
          className: "mar-top-20 mar-btm-20 no-print"
        }, /*#__PURE__*/React.createElement("div", {
          className: "container text-center mar-top-20 pad-btm-30"
        }, /*#__PURE__*/React.createElement("div", {
          className: "filter-holder"
        }, /*#__PURE__*/React.createElement("div", {
          className: "mar-top-30"
        }, /*#__PURE__*/React.createElement("div", {
          className: 'h2-div'
        }, "Loading..."))))));
      }

      return renderFullMain;
    }();

    _proto.render = function () {
      function render() {
        var self = this;

        if (Meteor.isClient && this.propsListHTML == "") {
          this.propsListHTML = $('#props_list').html();
        }

        if (Meteor.isClient) {
          this.isServerSSRReq = $('#isservercheckdiv').html();
          if (this.isServerSSRReq == "") this.isServerSSRReq = true;else this.isServerSSRReq = false;
        } // if(this.propsListHTML) console.log("propsListHTML: "+this.propsListHTML.length)


        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), this.props.isSubsLoaded ? this.renderFullMain() : this.isServerSSRReq && this.propsListHTML ? /*#__PURE__*/React.createElement("div", {
          dangerouslySetInnerHTML: {
            __html: this.propsListHTML
          }
        }) : /*#__PURE__*/React.createElement("section", {
          className: "mar-top-20 mar-btm-20 no-print"
        }, /*#__PURE__*/React.createElement("div", {
          className: "container text-center mar-top-20 pad-btm-30"
        }, /*#__PURE__*/React.createElement("div", {
          className: "filter-holder"
        }, /*#__PURE__*/React.createElement("div", {
          className: "mar-top-30"
        }, /*#__PURE__*/React.createElement("div", {
          className: 'h2-div'
        }, "Loading..."))))), /*#__PURE__*/React.createElement(MainLayoutFooter, null));
      }

      return render;
    }();

    return LettingDetail;
  }(Component);

  module1.exportDefault(withTracker(function () {
    var key = FlowRouter.getParam('key');
    if (!key) return {
      data: false,
      alreadyLeased: false,
      isSubsLoaded: true
    };
    if (key && !propertyKeyOfThisPage) propertyKeyOfThisPage = key; //This will init the var

    var viewLettingSub = Meteor.subscribe("viewLetting", key, function () {
      if (ConfigSub.ready()) Session.set('subscriptionsReady', true); //AreasSub.ready() &&  make areas sub not req
    }); // const AreasSub = Meteor.subscribe('Areas',function(){
    //     if(viewLettingSub.ready() && ConfigSub.ready()  )Session.set('subscriptionsReady',true);
    // });

    var ConfigSub = Meteor.subscribe('Config', function () {
      if (viewLettingSub.ready()) Session.set('subscriptionsReady', true);
    });
    if (Meteor.isClient) Session.get('subscriptionsReady');

    if (!viewLettingSub.ready() || !ConfigSub.ready()) {
      return {
        data: false,
        alreadyLeased: false,
        isSubsLoaded: false
      };
    }

    var globalConfig = Collections.Config.findOne();
    var deletedList = [];

    if (globalConfig) {
      deletedList = globalConfig.deletedList;
    }

    if (deletedList.includes(key)) {
      return {
        data: false,
        alreadyLeased: false,
        isSubsLoaded: true
      };
    }

    var user = Meteor.user();
    var priceRange = {
      min: 0,
      max: 10000
    };
    var myBid = false;
    var otherBids = false;
    var PD = {};
    var sliderImages = [];

    advancedCrumbs = function (countyParam, areaParam, propertyType) {
      var fCrumbs = [],
          tmpCrumbs = [],
          areaCrumbs = [],
          countyCrumbs = [];
      if (propertyType) propertyType = propertyType.toLowerCase(); // Home / Search Residential Rentals / Dublin City Apartments for Rent / Dublin 2 Apartments for Rent
      //Property Size
      //Property Size - Property Type
      //Property Size - Property Type - County
      //Property Type - county
      //Counties
      //Areas
      //Property Size - Property Type - area - County
      //Property Size - area - County
      //Property Type - area - county

      fCrumbs.push({
        url: generateSlugURL({
          propertyType: 'studio'
        }),
        name: 'Studios'
      }); //Property Size

      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 1
        }),
        name: '1-Beds'
      }); //Property Size

      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 2
        }),
        name: '2-Beds'
      });
      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 3
        }),
        name: '3-Beds'
      });
      tmpCrumbs.push({
        url: generateSlugURL({
          cheapSort: true,
          propertyType: 'house'
        }),
        name: 'Cheap Houses'
      });
      tmpCrumbs.push({
        url: generateSlugURL({
          bedCount: 1,
          propertyType: 'house'
        }),
        name: '1-Bed Houses'
      }); //Property Size - Property Type

      tmpCrumbs.push({
        url: generateSlugURL({
          bedCount: 2,
          propertyType: 'house'
        }),
        name: '2-Bed Houses'
      });
      tmpCrumbs.push({
        url: generateSlugURL({
          bedCount: 3,
          propertyType: 'house'
        }),
        name: '3-Bed Houses'
      });
      tmpCrumbs.push({
        url: generateSlugURL({
          luxurySort: true,
          propertyType: 'house'
        }),
        name: 'Luxury Houses'
      });

      if (propertyType == 'house') {
        fCrumbs = fCrumbs.concat(tmpCrumbs);
      }

      fCrumbs.push({
        url: generateSlugURL({
          cheapSort: true,
          propertyType: 'apartment'
        }),
        name: 'Cheap Apartments'
      });
      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 1,
          propertyType: 'apartment'
        }),
        name: '1-Bed Apartments'
      }); //Property Size - Property Type

      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 2,
          propertyType: 'apartment'
        }),
        name: '2-Bed Apartments'
      });
      fCrumbs.push({
        url: generateSlugURL({
          bedCount: 3,
          propertyType: 'apartment'
        }),
        name: '3-Bed Apartments'
      });
      fCrumbs.push({
        url: generateSlugURL({
          luxurySort: true,
          propertyType: 'apartment'
        }),
        name: 'Luxury Apartments'
      });

      if (propertyType != 'house') {
        fCrumbs = fCrumbs.concat(tmpCrumbs);
      } //dublin-apartments
      //Not doing dublin-houses due to less searches for Dublin apartments


      var staticCounties = ["Carlow", "Cavan", "Clare", "Cork", "Donegal", "Dublin", "Galway", "Kerry", "Kildare", "Kilkenny", "Laois", "Leitrim", "Limerick", "Longford", "Louth", "Mayo", "Meath", "Monaghan", "Offaly", "Roscommon", "Sligo", "Tipperary", "Waterford", "Westmeath", "Wexford", "Wicklow"];

      for (var i = 0; i < staticCounties.length; i++) {
        if (!staticCounties[i]) continue;
        countyCrumbs.push({
          url: generateSlugURL({
            county: staticCounties[i]
          }),
          name: staticCounties[i] + ' Apartments'
        });
      }

      if (countyParam) {
        // var propertyType = curURL.propertyType;
        // var county = curURL.county
        // var area = curURL.area
        // var maxRent = curURL.maxRent
        // var country = curURL.country;
        // var bedCount = curURL.bedCount;
        // var luxurySort = curURL.luxurySort;
        // var cheapSort = curURL.cheapSort;
        //////////////////////////// WITH COUNTY
        tmpCrumbs = [];
        tmpCrumbs.push({
          url: generateSlugURL({
            cheapSort: true,
            propertyType: 'house',
            county: countyParam
          }),
          name: 'Cheap Houses for rent in county ' + titleCase(countyParam)
        });

        if (propertyType == 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }

        fCrumbs.push({
          url: generateSlugURL({
            cheapSort: true,
            propertyType: 'apartment',
            county: countyParam
          }),
          name: 'Cheap Apartments for rent in county ' + titleCase(countyParam)
        });

        if (propertyType != 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }

        fCrumbs.push({
          url: generateSlugURL({
            propertyType: 'studio',
            county: countyParam
          }),
          name: 'Studio for rent in county ' + titleCase(countyParam)
        });
        tmpCrumbs = [];
        tmpCrumbs.push({
          url: generateSlugURL({
            bedCount: 1,
            propertyType: 'house',
            county: countyParam
          }),
          name: '1-Bed Houses for rent in county ' + titleCase(countyParam)
        }); //Property Size - Property Type

        tmpCrumbs.push({
          url: generateSlugURL({
            bedCount: 2,
            propertyType: 'house',
            county: countyParam
          }),
          name: '2-Bed Houses for rent in county ' + titleCase(countyParam)
        });
        tmpCrumbs.push({
          url: generateSlugURL({
            bedCount: 3,
            propertyType: 'house',
            county: countyParam
          }),
          name: '3-Bed Houses for rent in county ' + titleCase(countyParam)
        });
        tmpCrumbs.push({
          url: generateSlugURL({
            luxurySort: true,
            propertyType: 'house',
            county: countyParam
          }),
          name: 'Luxury Houses for rent in county ' + titleCase(countyParam)
        });

        if (propertyType == 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }

        fCrumbs.push({
          url: generateSlugURL({
            bedCount: 1,
            propertyType: 'apartment',
            county: countyParam
          }),
          name: '1-Bed Apartments for rent in county ' + titleCase(countyParam)
        }); //Property Size - Property Type

        fCrumbs.push({
          url: generateSlugURL({
            bedCount: 2,
            propertyType: 'apartment',
            county: countyParam
          }),
          name: '2-Bed Apartments for rent in county ' + titleCase(countyParam)
        });
        fCrumbs.push({
          url: generateSlugURL({
            bedCount: 3,
            propertyType: 'apartment',
            county: countyParam
          }),
          name: '3-Bed Apartments for rent in county ' + titleCase(countyParam)
        });
        fCrumbs.push({
          url: generateSlugURL({
            luxurySort: true,
            propertyType: 'apartment',
            county: countyParam
          }),
          name: 'Luxury Apartments for rent in county ' + titleCase(countyParam)
        });

        if (propertyType != 'house') {
          fCrumbs = fCrumbs.concat(tmpCrumbs);
        }

        if (areaParam) {
          //////////////////////////// WITH AREA COUNTY
          tmpCrumbs = [];
          tmpCrumbs.push({
            url: generateSlugURL({
              cheapSort: true,
              propertyType: 'house',
              county: countyParam,
              area: areaParam
            }),
            name: 'Cheap Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });

          if (propertyType == 'house') {
            fCrumbs = fCrumbs.concat(tmpCrumbs);
          }

          fCrumbs.push({
            url: generateSlugURL({
              cheapSort: true,
              propertyType: 'apartment',
              county: countyParam,
              area: areaParam
            }),
            name: 'Cheap Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });

          if (propertyType != 'house') {
            fCrumbs = fCrumbs.concat(tmpCrumbs);
          }

          fCrumbs.push({
            url: generateSlugURL({
              propertyType: 'studio',
              county: countyParam,
              area: areaParam
            }),
            name: 'Studio for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });
          tmpCrumbs = [];
          tmpCrumbs.push({
            url: generateSlugURL({
              bedCount: 1,
              propertyType: 'house',
              county: countyParam,
              area: areaParam
            }),
            name: '1-Bed Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          }); //Property Size - Property Type

          tmpCrumbs.push({
            url: generateSlugURL({
              bedCount: 2,
              propertyType: 'house',
              county: countyParam,
              area: areaParam
            }),
            name: '2-Bed Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });
          tmpCrumbs.push({
            url: generateSlugURL({
              bedCount: 3,
              propertyType: 'house',
              county: countyParam,
              area: areaParam
            }),
            name: '3-Bed Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });
          tmpCrumbs.push({
            url: generateSlugURL({
              luxurySort: true,
              propertyType: 'house',
              county: countyParam,
              area: areaParam
            }),
            name: 'Luxury Houses for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });

          if (propertyType == 'house') {
            fCrumbs = fCrumbs.concat(tmpCrumbs);
          }

          fCrumbs.push({
            url: generateSlugURL({
              bedCount: 1,
              propertyType: 'apartment',
              county: countyParam,
              area: areaParam
            }),
            name: '1-Bed Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          }); //Property Size - Property Type

          fCrumbs.push({
            url: generateSlugURL({
              bedCount: 2,
              propertyType: 'apartment',
              county: countyParam,
              area: areaParam
            }),
            name: '2-Bed Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });
          fCrumbs.push({
            url: generateSlugURL({
              bedCount: 3,
              propertyType: 'apartment',
              county: countyParam,
              area: areaParam
            }),
            name: '3-Bed Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });
          fCrumbs.push({
            url: generateSlugURL({
              luxurySort: true,
              propertyType: 'apartment',
              county: countyParam,
              area: areaParam
            }),
            name: 'Luxury Apartments for rent in ' + titleCase(areaParam) + ' ' + titleCase(countyParam)
          });

          if (propertyType != 'house') {
            fCrumbs = fCrumbs.concat(tmpCrumbs);
          }
        }

        var distinctEntries = _.uniq(Collections.Areas.find({}, {
          //County: countyParam ; Dynamically load areas based on the subscription.
          sort: {
            Area: 1
          },
          fields: {
            Area: true
          }
        }).fetch().map(function (x) {
          return x.Area;
        }), true);

        areaCrumbs = [];

        for (var i = 0; i < distinctEntries.length; i++) {
          if (!distinctEntries[i]) continue; // if (distinctEntries[i] == areaParam) continue;//Don't show the same area in this list

          areaCrumbs.push({
            url: generateSlugURL({
              county: countyParam,
              area: distinctEntries[i]
            }),
            name: distinctEntries[i] + ' Apartments'
          });
        } // let ptypeString='';
        // switch(propertyType){
        //     case 'apartment': ptypeString = 'Apartments '; break;
        //     case 'house': ptypeString = 'Houses '; break;
        // }
        // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'Studio for rent in county '+titleCase(PD.address.county)})
        // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'1-Bed '+ptypeString+'for rent in county '+titleCase(PD.address.county)})
        // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'2-Bed '+ptypeString+'for rent in county '+titleCase(PD.address.county)})
        // fCrumbs.push({url:FlowRouter.url('b',{slug:slugTemp[0]}), name:'3-Bed '+ptypeString+'for rent in county '+titleCase(PD.address.county)})

      }

      return {
        fCrumbs: fCrumbs,
        areaCrumbs: areaCrumbs,
        countyCrumbs: countyCrumbs
      };
    };

    var data = Collections.Auctions.findOne({
      "lettingAuctionCode": key
    }, {
      limit: 1
    });

    if (data) {
      data.applicationsReceivedCount = Collections.Bids.find({
        auctionId: data._id
      }).count();
      PDret = Collections.Properties.find(data.propertyId).fetch();
      PD = PDret[0];
      PD.bedroomsCount = 0;
      PD.ensuiteCount = 0;
      PD.doubleBedCount = 0;

      if (PD.bedrooms) {
        PD.bedroomsCount = PD.bedrooms.length;

        for (var i = 0; i < PD.bedrooms.length; i++) {
          if (PD.bedrooms[i]["ensuite"]) {
            PD.ensuiteCount++;
          }

          if (PD.bedrooms[i]["bedType"] == 'double') {
            PD.doubleBedCount++;
          }
        }
      }

      if (PD.contacts) {
        //Take the contact of activation not property
        data.primaryContact = PD.contacts[0];
      } else data.primaryContact = {};

      tmp = [];

      if (PD.amenities) {
        for (var i = 0; i < PD.amenities.length; i++) {
          var src = globalConfig.amenitiesLogos[PD.amenities[i]];
          if (!src) src = globalConfig.amenitiesLogos["default"];
          tmp.push({
            name: PD.amenities[i],
            src: cdnPath(src)
          });
        }
      }

      PD.amenitiesWithImgs = tmp;

      if (PD.gallery) {
        for (var i = 0; i < PD.gallery.length; i++) {
          var altText = 'Photo ' + (i + 1) + ' of ' + titleCase(PD.address.address);
          if (PD.address.area) altText += ', ' + titleCase(PD.address.area);
          if (PD.address.county) altText += ', ' + titleCase(PD.address.county); // sliderImages.push(PD.gallery[i].url)

          sliderImages.push({
            url: PD.gallery[i].url,
            altText: altText
          });
        }
      } ////////// BREADCRUMBS


      var bcrumbs = [];
      var slugTemp,
          searchCrumbs = []; // Home / Search Residential Rentals / Dublin City Apartments for Rent / Dublin 2 Apartments for Rent

      if (PD.address.county) {
        slugTemp = generateSlug({
          county: PD.address.county
        });
        bcrumbs.push({
          url: FlowRouter.url('b', {
            slug: slugTemp[0]
          }),
          name: titleCase(PD.address.county)
        });
        searchCrumbs.push({
          url: FlowRouter.url('b', {
            slug: slugTemp[0]
          }),
          name: 'rent in ' + titleCase(PD.address.county)
        });
      }

      if (PD.address.area && PD.address.county) {
        slugTemp = generateSlug({
          county: PD.address.county,
          area: PD.address.area
        });
        bcrumbs.push({
          url: FlowRouter.url('b', {
            slug: slugTemp[0]
          }),
          name: titleCase(PD.address.area)
        });
        searchCrumbs.push({
          url: FlowRouter.url('b', {
            slug: slugTemp[0]
          }),
          name: 'rent in ' + titleCase(PD.address.area) + " of county " + titleCase(PD.address.county)
        });
      }

      if (PD.address.area && PD.address.county && PD.type) {
        slugTemp = generateSlug({
          county: PD.address.county,
          area: PD.address.area,
          propertyType: PD.type
        });
        bcrumbs.push({
          url: FlowRouter.url('b', {
            slug: slugTemp[0]
          }),
          name: titleCase(PD.type)
        });
        searchCrumbs.push({
          url: FlowRouter.url('b', {
            slug: slugTemp[0]
          }),
          name: '' + titleCase(PD.type) + " for rent in " + titleCase(PD.address.area) + " of county " + titleCase(PD.address.county)
        });
      }

      data.bcrumbs = bcrumbs;
      data.searchCrumbs = searchCrumbs.reverse(); ////////// END BREADCRUMBS
      ////////// ADV BREADCRUMBS MORE LINKS

      if (true) {
        if (PD.address.county) {
          AreasSub = Meteor.subscribe('Areas', '', '', PD.address.county, '', '', function () {
            Session.set('subscriptionsReady2', true);
          });
        }

        if (Meteor.isClient) Session.get('subscriptionsReady2');
        var advC = advancedCrumbs(PD.address.county, PD.address.area, PD.type);
        data.fCrumbs = advC.fCrumbs;
        data.areaCrumbs = advC.areaCrumbs;
        data.countyCrumbs = advC.countyCrumbs;
      } ////////// END ADV BREADCRUMBS
      //////// RELATED PROPS


      var notArr = [PD._id];
      var filters = {
        "type": PD.type,
        "address.county": PD.address.county,
        "address.area": PD.address.area,
        "auctionId": {
          $exists: true,
          $gt: ""
        },
        "isArchived": false,
        "_id": {
          $not: {
            $in: notArr
          }
        }
      };
      data.relatedProps = [];
      var tmpRelated = Collections.Properties.find(filters, {
        transform: function (doc) {
          doc.auction = Collections.Auctions.findOne({
            _id: doc.auctionId
          });

          if (doc.gallery) {
            if (doc.gallery[0]) doc.firstImg = doc.gallery[0];
          }

          return doc;
        },
        limit: 4
      }).fetch();
      data.relatedProps = data.relatedProps.concat(tmpRelated);
      notArr = [PD._id];

      for (var i = 0; i < data.relatedProps.length; i++) {
        notArr.push(data.relatedProps[i]._id);
      }

      filters["_id"] = {
        $not: {
          $in: notArr
        }
      };

      if (data.relatedProps.length < 4) {
        delete filters["address.area"];
        var tmpRelated = Collections.Properties.find(filters, {
          transform: function (doc) {
            doc.auction = Collections.Auctions.findOne({
              _id: doc.auctionId
            });

            if (doc.gallery) {
              if (doc.gallery[0]) doc.firstImg = doc.gallery[0];
            }

            return doc;
          },
          limit: 4
        }).fetch();
        data.relatedProps = data.relatedProps.concat(tmpRelated);
      }

      notArr = [PD._id];

      for (var i = 0; i < data.relatedProps.length; i++) {
        notArr.push(data.relatedProps[i]._id);
      }

      filters["_id"] = {
        $not: {
          $in: notArr
        }
      };

      if (data.relatedProps.length < 4) {
        delete filters["address.county"];
        var tmpRelated = Collections.Properties.find(filters, {
          transform: function (doc) {
            doc.auction = Collections.Auctions.findOne({
              _id: doc.auctionId
            });

            if (doc.gallery) {
              if (doc.gallery[0]) doc.firstImg = doc.gallery[0];
            }

            return doc;
          },
          limit: 4
        }).fetch();
        data.relatedProps = data.relatedProps.concat(tmpRelated);
        tmpRelated;
      }

      notArr = [PD._id];

      for (var i = 0; i < data.relatedProps.length; i++) {
        notArr.push(data.relatedProps[i]._id);
      }

      filters["_id"] = {
        $not: {
          $in: notArr
        }
      };

      if (data.relatedProps.length < 4) {
        delete filters["type"];
        var tmpRelated = Collections.Properties.find(filters, {
          transform: function (doc) {
            doc.auction = Collections.Auctions.findOne({
              _id: doc.auctionId
            });

            if (doc.gallery) {
              if (doc.gallery[0]) doc.firstImg = doc.gallery[0];
            }

            return doc;
          },
          limit: 4
        }).fetch();
        data.relatedProps = data.relatedProps.concat(tmpRelated);
        tmpRelated;
      }

      if (data.relatedProps.length > 4) {
        data.relatedProps = data.relatedProps.slice(0, 4);
      } ///////// END FILTERS


      var min = data.price * 0.7,
          max = data.price * 1.5; // also used in propertyApplications.onRendered

      priceRange = {
        min: min,
        max: max
      }; ///////// START MY BIG AND OTHER BIDS

      if (user) {
        var ret = Collections.Bids.find({
          auctionId: data._id,
          userId: user._id,
          isArchived: false
        }, {
          limit: 1
        }).fetch();
        myBid = ret[0];
        var maxLen = 5;
        var forTotCount = Collections.Bids.find({
          auctionId: data._id,
          isArchived: false
        }, {
          limit: maxLen,
          sort: {
            yourBid: -1
          }
        }); // debugger;

        if (!forTotCount.count()) {
          //No results, return
          otherBids = {
            needed: false,
            arr: []
          };
        } else {
          if (!myBid || !user) otherBids = {
            needed: true,
            arr: forTotCount.fetch()
          };else {
            var weNeedOnSides = Math.floor(maxLen / 2);
            var needAbove = weNeedOnSides;
            var back = Collections.Bids.find({
              auctionId: data._id,
              userId: {
                $ne: user._id
              },
              yourBid: {
                $lt: myBid.yourBid
              },
              isArchived: false
            }, {
              limit: maxLen - 1,
              sort: {
                yourBid: -1
              }
            });
            var backCount = back.count();

            if (backCount < weNeedOnSides) {
              // if count isn't enough, then change back itself.
              back = Collections.Bids.find({
                auctionId: data._id,
                userId: {
                  $ne: user._id
                },
                yourBid: {
                  $lte: myBid.yourBid
                },
                isArchived: false
              }, {
                limit: maxLen - 1,
                sort: {
                  yourBid: -1
                }
              });
            }

            backCount = back.count();

            if (backCount < weNeedOnSides) {
              //if its still less, then update we needAbove value
              needAbove += weNeedOnSides - backCount;
            }

            var above = Collections.Bids.find({
              auctionId: data._id,
              userId: {
                $ne: user._id
              },
              yourBid: {
                $gt: myBid.yourBid
              },
              isArchived: false
            }, {
              limit: maxLen - 1,
              sort: {
                yourBid: -1
              }
            });
            var aboveCount = above.count();

            if (aboveCount < needAbove) {
              // if count isn't enough, then change back itself.
              above = Collections.Bids.find({
                auctionId: data._id,
                userId: {
                  $ne: user._id
                },
                yourBid: {
                  $gte: myBid.yourBid
                },
                isArchived: false
              }, {
                limit: maxLen - 1,
                sort: {
                  yourBid: -1
                }
              });
            }

            aboveCount = above.count();
            var retAbove = above.fetch();
            var retBack = back.fetch();
            retAbove.push(myBid);
            otherBids = {
              needed: true,
              arr: retAbove.concat(retBack)
            };
          }
        }
      } ///////// START MY BIG AND OTHER BIDS

    }

    var isAgent = false; // switch(data.createdByAgent){
    //     case '':
    //         isAgent = {
    //             "logourl":Meteor.absoluteUrl()+'images/property-rental-agents/Bell-Property-Consultants.jpeg',
    //             "name": 'Bell Property Consultants Ltd',
    //             "address1":"Harolds Cross, Dublin",
    //             "style":{height:"100px"}
    //         }
    // }

    var alreadyLeased = false;

    if (data) {
      if (data.isArchived) alreadyLeased = true;
    }

    var refListArr = [];
    var hasAllReqReferences = false;
    if (user) if (user.profile) if (user.profile.references) {
      // if (!user.profile.references.hasResume) refListArr.push("Resume");//Why do you need it?
      if (!user.profile.references.hasLandlordRef) refListArr.push("Landlord reference");
      if (!user.profile.references.employerName) refListArr.push("Employer name");
      if (!user.profile.references.hasWorkRef) refListArr.push("Work reference");
      if (!user.profile.references.hasFinancialRef) refListArr.push("Financial reference");
      if (!user.profile.references.hasGovtID) refListArr.push("Government ID");
      if (!user.profile.references.hasPassport) refListArr.push("Passport");
      if (!user.profile.references.hasPPS) refListArr.push("PPS");

      try {
        if (user.profile.references.hasResume && user.profile.references.hasLandlordRef && user.profile.references.hasGovtID && user.profile.references.hasWorkRef) hasAllReqReferences = true;
      } catch (e) {
        console.log(e);
      }
    }

    try {
      var title = '';
      title = PD.address.address + ', ' + PD.address.area;
      if (PD.address.county) title += ', ' + PD.address.county;
      var desc = '';
      if (PD.type) desc += titleCase(PD.type) + ' for rent at ';
      desc += PD.address.address + ', ' + PD.address.area;
      if (PD.address.county) desc += ', ' + PD.address.county + '. ';
      desc += 'Its ' + (PD.furnished ? "a furnished " : "an Unfurnished ") + titleCase(PD.type) + " with " + (PD.bedroomsCount ? PD.bedroomsCount : 'no') + " beds, " + (PD.baths ? PD.baths : 'no') + " baths, " + (PD.ensuiteCount ? PD.ensuiteCount : "no") + " Ensuite and " + (PD.doubleBedCount ? PD.doubleBedCount : "has no") + " Double bed property. ";
      desc += "Apply for this " + PD.type + ", view its images, details and much more."; // Apartment for rent in
      //     Newbrook road, mullingar, co. westmeath, murrisk, mayo | SpotMyCrib

      clearMeta();
      var titleTmp = title + ' | SpotMyCrib';
      if (titleTmp.length <= 75) title = titleTmp;
      DocHead.setTitle(title);
      DocHead.addMeta({
        name: "description",
        content: desc
      });
      var socialDesc = "Apply for this " + PD.type + ", view its images, details and much more.";
      var socialTitle = '';
      if (PD.bedroomsCount) socialTitle += PD.bedroomsCount + ' Bed ';
      if (PD.type) socialTitle += PD.type + ' available at ';
      socialTitle += title;
      socialTitle = '' + titleCase(socialTitle) + ' | SpotMyCrib';
      DocHead.addMeta({
        property: "og:title",
        content: socialTitle
      });
      DocHead.addMeta({
        property: "og:description",
        content: socialDesc
      });
      {
        /*<link rel="canonical" href="http://example.com/wordpress/seo-plugin/" />*/
      }
      if (FlowRouter.current().route.name == 'letting') DocHead.addMeta({
        rel: "canonical",
        href: FlowRouter.url('rent', {
          slug: PD.slug,
          key: key
        })
      });
      DocHead.addMeta({
        property: "og:type",
        content: "place"
      });
      DocHead.addMeta({
        property: "og:url",
        content: FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params)
      });
      DocHead.addMeta({
        property: "fb:app_id",
        content: '309356899476430'
      });

      try {
        DocHead.addMeta({
          property: "og:image",
          content: PD.gallery[0].url
        });
      } catch (c) {//Putting this here is making FB take the first response from here. & its showing no image if if this meta is later updated. So better put it later after all rendering at a template level. For now lets not keep anywhere.
        // DocHead.addMeta({name: "og:image", content: 'https://www.spotmycrib.ie/images/spot-my-crib-logo.png'  });
      }
    } catch (err) {
      clearMeta();
      DocHead.setTitle(' Property not found | SpotMyCrib');
      DocHead.addMeta({
        name: "description",
        content: ""
      });
    }

    return {
      data: data,
      alreadyLeased: alreadyLeased,
      isAgent: isAgent,
      user: user,
      refListArr: refListArr,
      priceRange: priceRange,
      hasAllReqReferences: hasAllReqReferences,
      myBid: myBid,
      otherBids: otherBids,
      PD: PD,
      sliderImages: sliderImages,
      isSubsLoaded: true
    };
  })(LettingDetail));

  var ImagesSlider = /*#__PURE__*/function (_Component2) {
    _inheritsLoose(ImagesSlider, _Component2);

    function ImagesSlider(props) {
      var _this2;

      _this2 = _Component2.call(this, props) || this;
      var current = FlowRouter.current();
      _this2.currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params);
      return _this2;
    }

    var _proto2 = ImagesSlider.prototype;

    _proto2.componentDidMount = function () {
      function componentDidMount() {
        $(document).ready(function () {
          // $('#lettingDetailCarousel').first().addClass('active');//not needed as bug of isActive helper not working is fixed.
          $('#imagessection .item img').width('100%');
          var w = $('#imagessection .item img').first().width();
          var h = w / 1.33;
          if (h > 250) $('#imagessection .item img').height(w / 1.33);
          setTimeout(function () {
            $('#imagessection .item img').width('100%');
            var w = $('#imagessection .item img').first().width();
            var h = w / 1.33;
            if (h > 250) $('#imagessection .item img').height();
          }, 3000); // $('#lettingDetailCarousel').carousel();
          // $("#lettingDetailCarousel").swiperight(function() {
          //     $(this).carousel('prev');
          // });
          // $("#lettingDetailCarousel").swipeleft(function() {
          //     $(this).carousel('next');
          // });
        });
      }

      return componentDidMount;
    }();

    _proto2.render = function () {
      function render() {
        return /*#__PURE__*/React.createElement("div", {
          id: "lettingDetailCarousel",
          className: "carousel slide",
          "data-ride": "carousel"
        }, /*#__PURE__*/React.createElement("div", {
          className: "carousel-inner"
        }, this.props.images ? this.props.images.map(function (image, i) {
          return /*#__PURE__*/React.createElement("div", {
            key: i,
            className: 'item ' + (i == 0 ? 'active' : "")
          }, /*#__PURE__*/React.createElement("img", {
            src: image.url,
            alt: image.altText,
            title: image.altText,
            className: "img-responsive"
          }));
        }) : /*#__PURE__*/React.createElement("div", {
          className: "item active"
        }, /*#__PURE__*/React.createElement("img", {
          src: cdnPath("/images/no-photo.png"),
          alt: 'Image not available',
          title: 'Image not available',
          className: "img-responsive"
        }))), /*#__PURE__*/React.createElement("a", {
          className: "left carousel-control",
          href: "javascript:void(0)",
          "data-slide": "prev"
        }, /*#__PURE__*/React.createElement("span", {
          className: "glyphicon glyphicon-chevron-left"
        }), /*#__PURE__*/React.createElement("span", {
          className: "sr-only"
        }, "Previous")), /*#__PURE__*/React.createElement("a", {
          className: "right carousel-control",
          href: "javascript:void(0)",
          "data-slide": "next"
        }, /*#__PURE__*/React.createElement("span", {
          className: "glyphicon glyphicon-chevron-right"
        }), /*#__PURE__*/React.createElement("span", {
          className: "sr-only"
        }, "Next")));
      }

      return render;
    }();

    return ImagesSlider;
  }(Component);

  var AddThisReact = /*#__PURE__*/function (_Component3) {
    _inheritsLoose(AddThisReact, _Component3);

    function AddThisReact(props) {
      var _this3;

      _this3 = _Component3.call(this, props) || this;
      console.log('Add this started');
      return _this3;
    }

    var _proto3 = AddThisReact.prototype;

    _proto3.componentDidMount = function () {
      function componentDidMount() {
        console.log('Add this rendered');
      }

      return componentDidMount;
    }();

    _proto3.render = function () {
      function render() {
        return /*#__PURE__*/React.createElement("div", {
          className: "addThis"
        }, /*#__PURE__*/React.createElement("div", {
          className: "addthis_inline_share_toolbox"
        }));
      }

      return render;
    }();

    return AddThisReact;
  }(Component); // Error: Can't find npm module 'aws-sdk'. Did you forget to call 'Npm.depends' in package.js within the 'jns_flow-router-ssr' package?

}.call(this, module);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"static":{"About.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/About.jsx                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return About;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var About = /*#__PURE__*/function (_Component) {
  _inheritsLoose(About, _Component);

  function About() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = About.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "about-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "About Us")), /*#__PURE__*/React.createElement("section", {
        className: "abt-content1"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container text-center",
        style: {
          maxWidth: 750
        }
      }, /*#__PURE__*/React.createElement("h2", {
        className: "no-capitalize"
      }, "Renting in Ireland is a pain, let us make it easy."), /*#__PURE__*/React.createElement("span", {
        className: "bottom-line"
      }), /*#__PURE__*/React.createElement("q", {
        className: "color-grey",
        style: {
          display: 'block',
          marginBottom: 20
        }
      }, "An average tenant spends around 1 month of their time, viewing 10+ houses and submitting manual printed references to find their rental home. In the same way, a landlord shows their letting to 50+ potential tenants, manually verifying all of their paper refrences before finalising one of them. "), /*#__PURE__*/React.createElement("h6", null, "We are spotmycrib. A couple of months ago, we had an intuition : A painless renting system. One where people can find their dream home for rent without any pain, unnecessary viewings and disappointment. That gave us our inspiration \"Renting made digital\". That means both landlords and tenants can use spotmycrib to save their time and money - For the better. We are just getting started. So, join us. ", /*#__PURE__*/React.createElement("br", null), " Write to us at ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('contactus')
      }, "Contact"))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return About;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Careers.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/Careers.jsx                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return Careers;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var TxtType = function (el, toRotate, period) {
  this.toRotate = toRotate;
  this.el = el;
  this.loopNum = 0;
  this.period = parseInt(period, 10) || 2000;
  this.txt = '';
  this.tick();
  this.isDeleting = false;
};

TxtType.prototype.tick = function () {
  var i = this.loopNum % this.toRotate.length;
  var fullTxt = this.toRotate[i];

  if (this.isDeleting) {
    this.txt = fullTxt.substring(0, this.txt.length - 1);
  } else {
    this.txt = fullTxt.substring(0, this.txt.length + 1);
  }

  this.el.innerHTML = '<span class="wrap">' + this.txt + '</span>';
  var that = this;
  var delta = 200 - Math.random() * 100;

  if (this.isDeleting) {
    delta /= 2;
  }

  if (!this.isDeleting && this.txt === fullTxt) {
    delta = this.period;
    this.isDeleting = true;
  } else if (this.isDeleting && this.txt === '') {
    this.isDeleting = false;
    this.loopNum++;
    delta = 500;
  }

  setTimeout(function () {
    that.tick();
  }, delta);
};

var Careers = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Careers, _Component);

  function Careers() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Careers.prototype;

  _proto.componentDidMount = function () {
    function componentDidMount() {
      var elements = document.getElementsByClassName('typewrite');

      for (var i = 0; i < elements.length; i++) {
        var toRotate = elements[i].getAttribute('data-type');
        var period = elements[i].getAttribute('data-period');

        if (toRotate) {
          new TxtType(elements[i], JSON.parse(toRotate), period);
        }
      } // INJECT CSS


      var css = document.createElement("style");
      css.type = "text/css";
      css.innerHTML = ".typewrite > .wrap { border-right: 0.08em solid #fff}";
      document.body.appendChild(css);
    }

    return componentDidMount;
  }();

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "contact-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "We are looking for talented ", /*#__PURE__*/React.createElement("a", {
        className: "typewrite",
        "data-period": 2000,
        "data-type": "[ \"marketers\", \"sales\", \"engineers\" ]"
      }, /*#__PURE__*/React.createElement("span", {
        className: "wrap"
      })))), /*#__PURE__*/React.createElement("section", {
        className: "contact-content career-content"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("h3", {
        className: "bnr-txt"
      }, "Join our team in Dublin to transform the online real estate industry. Build tools that help hundreds of people find their dream home everyday. "), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("p", {
        style: {
          fontSize: 14
        }
      }, "Why wait? tell us about you and why you want to join us. "), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
        href: "https://goo.gl/forms/nYxSp8YmuyMYTMEc2",
        className: "btns blue-btn"
      }, "Apply")))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return Careers;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ContactUs.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/ContactUs.jsx                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _assertThisInitialized;

module.link("@babel/runtime/helpers/assertThisInitialized", {
  default: function (v) {
    _assertThisInitialized = v;
  }
}, 0);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 1);
module.export({
  "default": function () {
    return ContactUs;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

function updateFormFromLocalStorage() {
  if (localStorage) {
    if (localStorage.contactFormData_name) {
      $("input[name='name']").val(localStorage.contactFormData_name);
    }

    if (localStorage.contactFormData_email) {
      $("input[name='email']").val(localStorage.contactFormData_email);
    }

    if (localStorage.contactFormData_mobile) {
      $("input[name='mobile']").val(localStorage.contactFormData_mobile);
    }

    if (localStorage.contactFormData_message) {
      $("textarea[name='message']").val(localStorage.contactFormData_message);

      try {
        var element = $("textarea[name='message']")[0];
        element.style.height = "5px";
        if (element.scrollHeight < 310) element.style.height = element.scrollHeight + "px";else element.style.height = "310px";
      } catch (e) {}
    }
  }
}

function saveToLocalStorage() {
  searialisedContactUsForm = $('#contactUsForm').serializeArray();

  if (localStorage) {
    localStorage.contactFormData_name = $("input[name='name']").val();
    localStorage.contactFormData_email = $("input[name='email']").val();
    localStorage.contactFormData_mobile = $("input[name='mobile']").val();
    localStorage.contactFormData_message = $("textarea[name='message']").val();
  }
}

function clearLocalStorage() {
  searialisedContactUsForm = $('#contactUsForm').serializeArray();

  if (localStorage) {
    localStorage.removeItem('contactFormData_name');
    localStorage.removeItem('contactFormData_email');
    localStorage.removeItem('contactFormData_mobile');
    localStorage.removeItem('contactFormData_message');
  }
}

var ContactUs = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ContactUs, _Component);

  function ContactUs(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      contactFormSaving: false,
      contactFormSavedSuccess: false
    };
    _this.takeBackupHandler = _this.takeBackupHandler.bind(_assertThisInitialized(_this));
    _this.formSubmitHandler = _this.formSubmitHandler.bind(_assertThisInitialized(_this));
    _this.autoGrowTAHandler = _this.autoGrowTAHandler.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = ContactUs.prototype;

  _proto.takeBackupHandler = function () {
    function takeBackupHandler() {
      saveToLocalStorage();
    }

    return takeBackupHandler;
  }();

  _proto.formSubmitHandler = function () {
    function formSubmitHandler(event) {
      event.preventDefault();
    }

    return formSubmitHandler;
  }();

  _proto.autoGrowTAHandler = function () {
    function autoGrowTAHandler(event) {
      var element = event.target;
      element.style.height = "5px";
      if (element.scrollHeight < 310) element.style.height = element.scrollHeight + "px";else element.style.height = "310px";
    }

    return autoGrowTAHandler;
  }();

  _proto.componentDidMount = function () {
    function componentDidMount() {
      updateFormFromLocalStorage();
      var self = this;
      var validator = $('#contactUsForm').validate({
        submitHandler: function (event) {
          self.setState({
            contactFormSaving: true
          });
          self.setState({
            contactFormSavedSuccess: true
          });
          console.log("You just submitted the 'contact us' form.");
          var userId = Meteor.userId();
          if (!userId) userId = '';
          var sub = 'Contact form request ';
          var desc = "\n\nName: " + $("input[name='name']").val() + "<br/>\nEmail: " + $("input[name='email']").val() + "<br/>\nMobile: " + $("input[name='mobile']").val() + "<br/>\nMessage: " + $("textarea[name='message']").val() + "<br/>\nUser ID: " + userId + "<br/>\n";
          Meteor.call('notifyAdmin', sub, desc, function () {
            $('#contactUsForm')[0].reset();
            clearLocalStorage();
            self.setState({
              contactFormSaving: false
            });
            self.setState({
              contactFormSavedSuccess: false
            });
          }); //             var sub = 'Thank you for getting in touch!'
          //             var desc = `
          // We will look over your message and get back to you by soon. In the meantime, you can check the <a href="https://www.spotmycrib.ie/faqs">FAQ section</a>, our <a href="https://www.spotmycrib.ie/estateagent">EstateAgent / Landlord page</a>, our <a href="https://www.spotmycrib.com/b/rent-in-ireland/?">latest letting listings</a> or browse through our <a href="http://blog.spotmycrib.com/">latest blog posts</a>.
          //
          // Your friends at SpotMyCrib.ie
          // `
          //             Meteor.call('notifyAdmin', sub, desc,function(){
          //
          //             });
          // fbq('track', 'ViewContent');No FB Q here, let keep fb thing only for pre planned areas, just to make sure it doesn' give wrong success notices .

          ga('send', 'event', 'ContactUsPage', 'formSubmitted', 'Contact us form is submitted');
        }
      });
      setTimeout(function () {
        fbq('track', 'ViewContent');
        ga('send', 'event', 'ContactUsPage', 'formRendered', 'Contact us form is viewed');
      }, 2000);
    }

    return componentDidMount;
  }();

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "contact-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "Contact Us")), /*#__PURE__*/React.createElement("section", {
        className: "contact-content mar-btm-20",
        style: {
          background: 'white'
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("p", {
        className: "text-center",
        style: {
          marginBottom: 10
        }
      }, "Please contact the owner directly for queries regarding the properties advertised on our site as we do not own or deal diretly with them. For other queries please email at below email or fill the form below."), /*#__PURE__*/React.createElement("p", {
        className: "text-center"
      }, /*#__PURE__*/React.createElement("a", {
        style: {
          color: '#428bca'
        },
        href: "mailto:support@spotmycrib.com"
      }, /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-envelopee"
      }), " support@spotmycrib.com")), /*#__PURE__*/React.createElement("p", {
        className: "text-center"
      }, " Or "), /*#__PURE__*/React.createElement("form", {
        onSubmit: this.formSubmitHandler,
        className: "signin-form cf-1",
        id: "contactUsForm"
      }, /*#__PURE__*/React.createElement("div", {
        className: "w-100"
      }), /*#__PURE__*/React.createElement("div", {
        className: "sep-section"
      }, /*#__PURE__*/React.createElement("label", {
        className: "sep-label"
      }, "Write to us"), /*#__PURE__*/React.createElement("div", {
        className: "styled-input underline"
      }, /*#__PURE__*/React.createElement("input", {
        onChange: this.takeBackupHandler,
        type: "text",
        name: "name",
        required: true
      }), /*#__PURE__*/React.createElement("label", null, "Name *"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input underline"
      }, /*#__PURE__*/React.createElement("input", {
        onChange: this.takeBackupHandler,
        type: "email",
        name: "email",
        required: true
      }), /*#__PURE__*/React.createElement("label", null, "Email *"), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-input underline"
      }, /*#__PURE__*/React.createElement("input", {
        onChange: this.takeBackupHandler,
        type: "text",
        name: "mobile"
      }), /*#__PURE__*/React.createElement("label", null, "Mobile "), /*#__PURE__*/React.createElement("span", null)), /*#__PURE__*/React.createElement("div", {
        className: "styled-full-width"
      }, /*#__PURE__*/React.createElement("textarea", {
        onChange: this.takeBackupHandler,
        onKeyUp: this.autoGrowTAHandler,
        name: "message",
        className: "styled-input-textarea autoGrowTA",
        id: "contactAG",
        placeholder: "Enter your message",
        required: true,
        defaultValue: ""
      })), /*#__PURE__*/React.createElement("div", {
        className: "styled-full-width mar-top-10"
      }, this.state.contactFormSaving ? /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: "btns transparent-btn"
      }, "Saving") : /*#__PURE__*/React.createElement("button", {
        type: "submit",
        className: "btns blue-btn"
      }, "Submit")), this.state.contactFormSavedSuccess ? /*#__PURE__*/React.createElement("div", {
        className: "styled-full-width"
      }, /*#__PURE__*/React.createElement("div", {
        className: "alert alert-success",
        role: "alert"
      }, /*#__PURE__*/React.createElement("span", {
        className: "glyphicon glyphicon-ok",
        "aria-hidden": "true"
      }), "\xA0Thank you for contacting us, we will reach out to you as soon as possible.")) : ""), /*#__PURE__*/React.createElement("div", {
        className: "w-100"
      }))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return ContactUs;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"CookiePolicy.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/CookiePolicy.jsx                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return CookiePolicy;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var CookiePolicy = /*#__PURE__*/function (_Component) {
  _inheritsLoose(CookiePolicy, _Component);

  function CookiePolicy() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = CookiePolicy.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "about-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "Cookie Policy")), /*#__PURE__*/React.createElement("section", {
        className: "faq-content cookieconsent-content pad-btm-30"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "faq-section-hold"
      }, /*#__PURE__*/React.createElement("p", null, "By using this website, you consent to the use of cookies in accordance with the SpotMyCrib.ie Cookie Policy below.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "SpotMyCrib.ie uses small pieces of data called cookies to help customise your user experience. Learn more about cookies and how you can control them by reading our Cookies Policy.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "We may update our Cookies Policy to reflect any changes in technology or data protection legislation. Any updates or changes that may affect how we use cookies or how you as a user can manage cookies will appear on this page."), /*#__PURE__*/React.createElement("h3", null, "What is a Cookie?"), /*#__PURE__*/React.createElement("p", null, "A cookie is a small piece of data sent by a website\u2019s server to your computer or mobile device and stored in your browser (e.g. Google Chrome, Firefox, Internet Explorer etc). It consists of anonymous information, including a unique user identifier. When you revisit a site or navigate between pages, this data is passed from your browser to the site\u2019s server. With this data, the website is able to \u2018remember\u2019 your browser, enabling it to retrieve your user preferences, to personalise your visits and to simplify any sign-in procedures.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Cookies are intended to improve your user experience by making it easier and faster to navigate through a website. For example, some websites require that you log in to gain access. If such sites did not use cookies, then you would be required to enter your login details every time you navigated to a new page because the website would not be able to remember that you had already logged in.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Many websites also use cookies for advertising purposes. For example, certain cookies allow a website to determine if you\u2019ve already seen a particular ad and therefore it may not display that ad on subsequent pages that you visit.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "All of the information a cookie collects can only be retrieved by the website server that sent the cookie to your browser."), /*#__PURE__*/React.createElement("h3", null, "Cookies on SpotMyCrib.ie"), /*#__PURE__*/React.createElement("p", null, "We use the following Cookies on sections of SpotMyCrib.ie site and the mobile application:", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Strictly necessary cookies: These are cookies that are required for the operation of our website. They include, for example, cookies that enable you to log into secure areas of our website.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Analytical / Performance Cookies: They are set by SpotMyCrib.ie and third parties, including Comscore and Google Analytics. Performance cookies allow us to collect statistical information about our visitors, such as whether they have visited the site before and the pages they view. This information is gathered anonymously - it does NOT enable us to identify who you are. We use these cookies to determine the kind of content and services our visitors value most, which in turn helps us improve our website and its content.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Third Party Cookies: We and third-party vendors, including Google, use first-party cookies and third-party cookies together to inform, optimise and serve ads based on users\u2019 past visits to this website. We use data from Google's Interest-based advertising or 3rd-party audience data (such as age, gender and interests) with Google Analytics to understand who our users are in order to create a better experience for them while visiting our website. We may use Remarketing with Google Analytics to advertise online. Third-party vendors, including Google, show our ads on sites across the Internet.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Google Analytics: Users can opt out of Google Analytics for Display Advertising and customise Google Display Network ads using the Ads Settings found here: www.google.com/settings/ads.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Functionality cookies: These are used to recognise you when you return to our website. This enables us to personalise our content for you, greet you by name and remember your preferences.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Targeting cookies: These cookies record your visit to our website, the pages you have visited and the links you have followed. We will use this information to make our website and the advertising displayed on it more relevant to your interests. We may also share this information with third parties for this purpose.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "We do not control which cookies are set by third parties or how the cookie information is used \u2013 a cookie can only be accessed by the party who set it. For more information on these cookies, please visit the third-party website."), /*#__PURE__*/React.createElement("h3", null, "Controlling cookies"), /*#__PURE__*/React.createElement("p", null, "Cookies are meant to improve the user experience, but some users prefer to set restrictions on the types of cookies that can be stored on their computer or mobile phone.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "By modifying your browser preferences, you have the choice to accept all cookies, to be notified when a cookie is set or to reject all cookies.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "It is important to note that you will lose some functions of a website if you choose to restrict or disable its cookies."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("p", null, "Have more questions? ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('contactus')
      }, "Submit a request")))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return CookiePolicy;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"EstateAgent.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/EstateAgent.jsx                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _assertThisInitialized;

module.link("@babel/runtime/helpers/assertThisInitialized", {
  default: function (v) {
    _assertThisInitialized = v;
  }
}, 0);

var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 1);
module.export({
  "default": function () {
    return EstateAgent;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);

var EstateAgent = /*#__PURE__*/function (_Component) {
  _inheritsLoose(EstateAgent, _Component);

  function EstateAgent(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      f2Success: false,
      knowMore: false
    };
    _this.sinterestformHandler = _this.sinterestformHandler.bind(_assertThisInitialized(_this));
    _this.sinterestformtryagainHandler = _this.sinterestformtryagainHandler.bind(_assertThisInitialized(_this));
    _this.knowMoreBtnHandler = _this.knowMoreBtnHandler.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = EstateAgent.prototype;

  _proto.componentDidMount = function () {
    function componentDidMount() {
      // var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq ||
      //     {widgetcode:"5e6f4b070bdd6e53b8a76febfd867047f48220a3f0e688fad51400b27169fabc7e3e6a8594601225fa1324917f66ed28", values:{},ready:function(){}};
      // var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;
      // s.src="https://salesiq.zoho.eu/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);d.write("<div id='zsiqwidget'></div>");
      try {
        jQuery("html,body").animate({
          scrollTop: 0
        }, 250);
      } catch (e) {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
      }

      var data = [[30, 1, 2, 20], ['300', 10, 20, '200'], //333 //10
      ['3,000', 100, 200, '2,000'], //333 //100
      ['6,000', 200, 400, '4,000'], //333 //200
      ['12,000', 400, 800, '8,000'], //333 //400
      ['30,000', '1,000', '2,000', '20,000'], //333 //1000
      ['60,000', '2,000', '4,000', '40,000'] //333 //2000
      ]; // $("#slider").slider({
      //
      //     value: "1",
      //     min: 0,
      //     max: 6,
      //     step: 1,
      //     slide: function(event, ui) {
      //         console.log('Sliding in progress');
      //         // debugger;
      //         $(".viewingsSaved").html(data[ui.value][0]);
      //         $(".tripsSaved").html(data[ui.value][1]);
      //         $(".hoursSaved").html(data[ui.value][2]);
      //         $(".moneySaved").html(data[ui.value][3]);
      //
      //     }
      // });

      $("#many_properties_area_slider").noUiSlider({
        start: [10],
        range: {
          'min': [1],
          '30%': [10],
          '50%': [100],
          '60%': [500],
          '70%': [1000],
          'max': [2000]
        }
      }).on('slide', function (ev, val) {
        // set real values on 'slide' event
        var i = Math.round(val); // $('#lcountInline').html(i);

        $('#lcount').html(i);
        $(".viewingsSaved").html(30 * i);
        $(".tripsSaved").html(1 * i);
        $(".hoursSaved").html(2 * i);
        $(".moneySaved").html(80 * i);
      }).on('change', function (ev, val) {// round off values on 'change' event
      }); // setTimeout(function() {
      //     var slider = document.getElementById('many_properties_area_slider');
      //     templateInstance.noUiSlider.create(slider, {
      //         start: [ 10 ],
      //         range: {
      //             'min': [  1 ],
      //             '30%': [  200 ],
      //             '50%': [  500 ],
      //             '70%': [  1000 ],
      //             'max': [ 2000 ]
      //         },
      //         // tooltips: [wNumb({ decimals: 1 })]
      //         tooltips: true
      //
      //
      //     });
      //
      //     slider.noUiSlider.on('update', function( values, handle ) {
      //         var i = Math.round(values[handle]);
      //         $('#lcount').html(i);
      //         $(".viewingsSaved").html(30*i);
      //         $(".tripsSaved").html(1*i);
      //         $(".hoursSaved").html(2*i);
      //         $(".moneySaved").html(80*i);
      //     });
      // },500);
      // setTimeout(function() {
      //     // $.scrollify({
      //     //     section: "section",
      //     // });
      // },500);
    }

    return componentDidMount;
  }();

  _proto.joinNowBtnHandler = function () {
    function joinNowBtnHandler() {
      FlowRouter.go('joinnowlandlord');
    }

    return joinNowBtnHandler;
  }();

  _proto.sinterestformHandler = function () {
    function sinterestformHandler(event) {
      event.preventDefault();
      var target = event.target;
      var email = target.emailaddress.value;
      var fullname = target.fullname.value;
      var company = target.company.value;
      var phone = target.phone.value; // import "../accounts/validation.js";

      var validatedEmail = LoginFormValidation.email(email);

      if (validatedEmail !== true) {
        console.log(validatedEmail.error);
        alert(validatedEmail.reason); // var tmp =  Session.get("showErrorDlg");if(!tmp)tmp=[];
        // if(!validatedEmail.reason)error.reason = 'Invalid email. Please correct the email address entered.';
        // tmp.push(validatedEmail.reason);
        // Session.set("showErrorDlg",tmp)
      } else {
        ga('send', 'event', 'estateAgentPage', 'sinterestForm', 'Special intro offer form submitted');
        Meteor.call('introOfferRequestReceived', email, fullname, company, phone);
        this.setState({
          f2Success: true
        });
      }
    }

    return sinterestformHandler;
  }();

  _proto.sinterestformtryagainHandler = function () {
    function sinterestformtryagainHandler() {
      this.setState({
        f2Success: false
      });
    }

    return sinterestformtryagainHandler;
  }();

  _proto.knowMoreBtnHandler = function () {
    function knowMoreBtnHandler() {
      if (this.state.knowMore) this.setState({
        knowMore: false
      });else {
        this.setState({
          knowMore: true
        });
        setTimeout(function () {
          try {
            $('html, body').animate({
              scrollTop: $("#knowmorebegin").offset().top
            }, 500);
          } catch (e) {}
        }, 500);
      }
    }

    return knowMoreBtnHandler;
  }();

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("link", {
        rel: "stylesheet",
        href: "css/estateagent.css"
      }), /*#__PURE__*/React.createElement("section", {
        className: "topheader",
        id: "topheader"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 logo"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home')
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/logo.png")
      }))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-10 col-md-offset-1 property_listings"
      }, /*#__PURE__*/React.createElement("h1", null, "Post Your Property listings and Select your tenant now"), /*#__PURE__*/React.createElement("div", {
        className: "box-places home-page-box-places",
        style: {
          background: 'none',
          padding: 0
        }
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement(KnowMoreForm, null)))))))), /*#__PURE__*/React.createElement("section", {
        className: "spotyourtenant"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-6 "
      }, /*#__PURE__*/React.createElement("h2", null, "Spot Your Tenant"), /*#__PURE__*/React.createElement("p", null, "SpotMyCrib makes your work easy. You can ", /*#__PURE__*/React.createElement("br", null), "post your property and screen tenants online. The screening process includes a rental application ", /*#__PURE__*/React.createElement("br", null), "with their references and their complete social profiles.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-6 "
      }, false ? /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/video.png"),
        className: "img-responsive"
      }) : "", /*#__PURE__*/React.createElement("div", {
        id: "video-div"
      }, /*#__PURE__*/React.createElement("iframe", {
        width: "462.2",
        height: "260",
        src: "https://www.youtube.com/embed/L689NIDwFdc?rel=0",
        frameBorder: "0",
        allowFullScreen: true
      }))))))), /*#__PURE__*/React.createElement("section", {
        className: "many_properties_area",
        style: {
          minHeight: 700
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container rdc container-fixed"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc text-center"
      }, /*#__PURE__*/React.createElement("h2", null, "How Many Properties are you listing?"), /*#__PURE__*/React.createElement("div", {
        className: "wrappernew"
      }, /*#__PURE__*/React.createElement("div", {
        className: "colThree",
        style: {
          margin: '0px 0 20px 0px',
          textAlign: 'left'
        }
      }, /*#__PURE__*/React.createElement("div", {
        id: "contenta"
      }, /*#__PURE__*/React.createElement("div", {
        id: "lcount"
      }, "10"), /*#__PURE__*/React.createElement("span", null, "1"), /*#__PURE__*/React.createElement("span", {
        style: {
          "float": 'right'
        }
      }, "2000"), /*#__PURE__*/React.createElement("div", {
        id: "many_properties_area_slider"
      }))))), /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc"
      }, /*#__PURE__*/React.createElement("article", {
        className: "col oneline"
      }, /*#__PURE__*/React.createElement("div", {
        className: "circle-in"
      }, /*#__PURE__*/React.createElement("div", {
        className: "viewingsSaved"
      }, "300"), /*#__PURE__*/React.createElement("p", null, "Viewings Saved"))), /*#__PURE__*/React.createElement("article", {
        className: "col oneline"
      }, /*#__PURE__*/React.createElement("div", {
        className: "circle-in"
      }, /*#__PURE__*/React.createElement("div", {
        className: "tripsSaved"
      }, "10"), /*#__PURE__*/React.createElement("p", null, "Travel trips Saved"))), /*#__PURE__*/React.createElement("article", {
        className: "col oneline"
      }, /*#__PURE__*/React.createElement("div", {
        className: "circle-in"
      }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
        className: "hoursSaved"
      }, "20"), /*#__PURE__*/React.createElement("strong", null, "Hours")), /*#__PURE__*/React.createElement("p", null, "Time Saved"))), /*#__PURE__*/React.createElement("article", {
        className: "col oneline"
      }, /*#__PURE__*/React.createElement("div", {
        className: "circle-in"
      }, /*#__PURE__*/React.createElement("div", null, "\u20AC", /*#__PURE__*/React.createElement("span", {
        className: "moneySaved"
      }, "800")), /*#__PURE__*/React.createElement("p", null, "Money Saved"))))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 btn-account_area"
      }, /*#__PURE__*/React.createElement("button", {
        type: "submit",
        className: "btn green-btn joinNowBtn",
        onClick: this.joinNowBtnHandler
      }, "Claim your Free Account")), /*#__PURE__*/React.createElement("div", {
        className: "container rdc"
      })))), /*#__PURE__*/React.createElement("section", {
        className: "business_area",
        style: {
          minHeight: 970
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container  rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc business_area_onesecton"
      }, /*#__PURE__*/React.createElement("h2", null, "Expand / Develop Your Business with these BENEFITS"), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_01.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Competitive Advantage"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Get the competitive edge you need to excel in this extremely competitive market. ")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_02.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Reduced Admin"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Save time and money by automating ", /*#__PURE__*/React.createElement("br", null), "renting, managing and maintaining ", /*#__PURE__*/React.createElement("br", null), "your property.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_03.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Safe secure system"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "SpotMyCrib uses state of the art", /*#__PURE__*/React.createElement("br", null), "technology to keep your data", /*#__PURE__*/React.createElement("br", null), " safe and secure."))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc business_area_onesecton"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_04.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Digital accounting and maintenance"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Post your property instantly on the", /*#__PURE__*/React.createElement("br", null), "go, from your mobile phone. Save valuable time.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_05.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Screen tenants"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Receive and access all your tenant ", /*#__PURE__*/React.createElement("br", null), "references and applications from one centralised account. Access them anytime, anywhere across the globe. ")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_06.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Verify social profiles"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, " LinkedIn, twitter and facebook profile verification."))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc business_area_onesecton"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_10.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Report"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Get intelligent reports on rental and maintenance costs identifying patterns to add revenue streams.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_08.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "Get Paid"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Auto-rent collection, friendly rental reminders 24 hours prior to rental date, failure to pay on time leads to warning notices being issued and much more.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-4 competitive"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/img_09.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("h3", null, "e-Sign Lease"), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Generate and sign lease/contracts", /*#__PURE__*/React.createElement("br", null), "online.")))))), /*#__PURE__*/React.createElement("section", {
        className: "howitwork_section",
        style: {
          minHeight: 650
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container rdc"
      }, /*#__PURE__*/React.createElement("h2", null, "How it works"), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 posting_section",
        style: {
          paddingBottom: 81
        }
      }, /*#__PURE__*/React.createElement("h3", null, "POSTING LETTING"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/workimg_01.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Market your property through spotmycrib.ie and find your ideal tenant effortlessly. Post your property photographs n details."), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Market your property through spotmycrib.ie and find your ideal tenant effortlessly. Post your property photographs and particulars.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 posting_section",
        style: {
          paddingBottom: 56
        }
      }, /*#__PURE__*/React.createElement("h3", null, "SCREEN TENANTS"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/workimg_02.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Our applicants apply for your property online via SpotMyCrib. View all their details, references, social profiles online and screen them. Click \"choose\" and select your tenant. It is as simple as that.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 posting_section",
        style: {
          paddingBottom: 81
        }
      }, /*#__PURE__*/React.createElement("h3", null, "SIGN DIGITAL LEASE"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/workimg_03.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Generate and sign legally binding lease/contracts online. Automatic reminder and reporting on lease expiry dates. ")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-3 posting_section",
        style: {
          paddingBottom: 81
        }
      }, /*#__PURE__*/React.createElement("h3", null, "COLLECT RENTS"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/workimg_04.png"),
        className: "img-responsive"
      }), /*#__PURE__*/React.createElement("p", {
        style: {
          lineHeight: '30px',
          fontSize: '17px'
        }
      }, "Let your tenants pay rent online. Automated rent collection and owner disbursements. Reminders and reporting on all payments."))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 btn-account_area"
      }, this.state.knowMore ? /*#__PURE__*/React.createElement("button", {
        className: "btn green-btn knowMoreBtn",
        onClick: this.knowMoreBtnHandler
      }, "Know Less!") : /*#__PURE__*/React.createElement("button", {
        className: "btn green-btn knowMoreBtn",
        onClick: this.knowMoreBtnHandler
      }, "Know More!"))))), this.state.knowMore ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("section", {
        id: "knowmorebegin",
        className: "property_area",
        style: {
          minHeight: 700
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("h2", {
        style: {
          marginBottom: 60
        }
      }, "Make your life faster and easier!!"), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-6"
      }, /*#__PURE__*/React.createElement("h3", null, "Post your property"), /*#__PURE__*/React.createElement("p", {
        style: {}
      }, "Here is your chance to post your property in the best light possible. Describe it, is it furnished? What amenities are available? Pets allowed? Add all the desirable features of it. Post the best photographs of it. Have tenants fall in love with your property time and time again."), /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('advertisewithus'),
        className: "btn green-btn"
      }, "Post your letting")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-6"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/post.png"),
        className: "img-responsive",
        style: {
          boxShadow: 'none'
        }
      })))))), /*#__PURE__*/React.createElement("section", {
        className: "screentenants_area",
        style: {
          minHeight: 700
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-6"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/estateagentpage/screen-tenants.jpg"),
        className: "img-responsive"
      })), /*#__PURE__*/React.createElement("div", {
        className: "col-md-1"
      }), /*#__PURE__*/React.createElement("div", {
        className: "col-md-5"
      }, /*#__PURE__*/React.createElement("h3", null, "Screen Tenants"), /*#__PURE__*/React.createElement("p", null, "Find your best tenant by screening them online. You get all their details, references, social profiles as they apply for your property. Their application package will also include credentials like their experian credit check, criminal check, previous rental history and all other necessary details. Screen them faster and close your deal.")))))), /*#__PURE__*/React.createElement("section", {
        className: "property_area",
        style: {
          minHeight: 700
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-6"
      }, /*#__PURE__*/React.createElement("h3", null, "Manage Rent Online"), /*#__PURE__*/React.createElement("p", null, "No more paperwork. Manage your rental income online. SpotMyCrib is safe and reliable. You can also check the deposits, rent amount and deadlines here. No more hassle with cash payments or standing orders.")), /*#__PURE__*/React.createElement("div", {
        className: "col-md-6"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/payment.png"),
        className: "img-responsive"
      })))))), /*#__PURE__*/React.createElement("section", {
        className: "property_area",
        style: {
          minHeight: 700
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-6"
      }, /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/e-sign.png"),
        className: "img-responsive"
      })), /*#__PURE__*/React.createElement("div", {
        className: "col-md-1"
      }), /*#__PURE__*/React.createElement("div", {
        className: "col-md-5"
      }, /*#__PURE__*/React.createElement("h3", null, "Online Lease Signing"), /*#__PURE__*/React.createElement("p", null, "Simply upload your necessary details. Get your legally binding document back with minimal effort. SpotMyCrib makes your job much easier and simpler. Store your contract online and view it any time you wish."))))))) : "", /*#__PURE__*/React.createElement("section", {
        className: "receive_area"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 rdc text-center"
      }, /*#__PURE__*/React.createElement("h2", null, "Receive a Special Introductory Offer"), this.state.f2Success ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", {
        style: {
          marginBottom: 20,
          color: 'black'
        },
        className: "text-center"
      }, "Thank you for your interest."), /*#__PURE__*/React.createElement("button", {
        className: "btn green-btn sinterestformtryagain",
        type: "submit",
        onClick: this.sinterestformtryagainHandler
      }, "Add another")) : /*#__PURE__*/React.createElement("form", {
        role: "form",
        className: "sinterest-form",
        onSubmit: this.sinterestformHandler
      }, /*#__PURE__*/React.createElement("div", {
        className: "form-group col-xs-12 col-sm-6 col-md-6 col-lg-6"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "email",
        type: "email",
        className: "form-control",
        id: "emailaddress",
        name: "emailaddress",
        placeholder: "Enter your email"
      })), /*#__PURE__*/React.createElement("div", {
        className: "form-group col-xs-12 col-sm-6 col-md-6 col-lg-6"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "name",
        type: "text",
        className: "form-control",
        id: "fullname",
        name: "fullname",
        placeholder: "Your full name"
      })), /*#__PURE__*/React.createElement("div", {
        className: "clearfix"
      }), /*#__PURE__*/React.createElement("div", {
        className: "form-group col-xs-12 col-sm-6 col-md-6 col-lg-6"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "organization",
        type: "text",
        className: "form-control",
        id: "company",
        name: "company",
        placeholder: "Company"
      })), /*#__PURE__*/React.createElement("div", {
        className: "form-group col-xs-12 col-sm-6 col-md-6 col-lg-6"
      }, /*#__PURE__*/React.createElement("input", {
        autoComplete: "tel",
        type: "text",
        className: "form-control",
        id: "phone",
        name: "phone",
        placeholder: "Phone"
      })), /*#__PURE__*/React.createElement("div", {
        className: "clearfix"
      }), /*#__PURE__*/React.createElement("div", {
        className: "clearfix"
      }), /*#__PURE__*/React.createElement("div", {
        className: "col-xs-12 col-sm-12 col-md-12 col-lg-12 submit"
      }, /*#__PURE__*/React.createElement("button", {
        type: "submit",
        className: "btns green-btn"
      }, "Learn More!"))))))), /*#__PURE__*/React.createElement("section", {
        className: "frequently_area"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container-fluid"
      }, /*#__PURE__*/React.createElement("section", {
        className: "faq-content mar-btm-20"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container container-fixed rdc"
      }, /*#__PURE__*/React.createElement("div", {
        className: "faq-section-hold"
      }, /*#__PURE__*/React.createElement("h2", null, "Frequently asked questions"), /*#__PURE__*/React.createElement("div", {
        className: "panel-group agent-panel-group",
        id: "accordion",
        role: "tablist",
        "aria-multiselectable": "true"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseOne",
        "aria-expanded": "false",
        "aria-controls": "collapseOne",
        className: "collapsed"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingOne"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title "
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "1"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "It is my understanding that current legislation will not allow for bidding that exceeds the permitted rent amount. "), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseOne",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingOne",
        "aria-expanded": "false",
        style: {
          height: 0
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "We have an option to disable the bidding and have done so."), /*#__PURE__*/React.createElement("li", null, "We have contacted the RTB: Residential Tenancies Board in Ireland (in writing) and asked them if a tenant offers more rent and a landlord agrees to it - is that legal. They confirmed it is legal if both sides agree to it."))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseTwo",
        "aria-expanded": "false",
        "aria-controls": "collapseOne",
        className: "collapsed"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingOne"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title "
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "2"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "What would the knock effect be should there be arrears, can warning letters be sent? etc"), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseTwo",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingOne",
        "aria-expanded": "false"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "We can send warning emails/reminder emails and report on who are due rents, arrears."), "                                              ", /*#__PURE__*/React.createElement("li", null, "SpotMyCrib also remembers the history of a tenants arrears, etc"))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseThree",
        "aria-expanded": "false",
        "aria-controls": "collapseTwo"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingTwo"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "3"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "What responsibility is there on the agent, from a Data Protection perspective, If references are sent to a website?"), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseThree",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingTwo",
        "aria-expanded": "false"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "All Data is being held and maintained by SpotMyCrib within Europe and the key system ensures the data is being shared within in the terms of the consumer's signup."), /*#__PURE__*/React.createElement("li", null, "There is no responsibility on the agent, Users agree to terms of service, privacy when they upload their references. This actively operates within the GDPR (", /*#__PURE__*/React.createElement("a", {
        target: "_blank",
        href: "https://en.wikipedia.org/wiki/General_Data_Protection_Regulation"
      }, " Data protection Regulation"), ") framework. "), /*#__PURE__*/React.createElement("li", null, "Customers retain at all times the option to have all of their data removed, inspected or deletion if we're contacted in writing directly or indirectly by the agent on the consumer's behalf."), /*#__PURE__*/React.createElement("li", null, "The key system ensures the agent can deal with all Data Protection issues for a renter, speedily and thoroughly within the regulations."), /*#__PURE__*/React.createElement("li", null, "Plus we are 100% compliant with data being stored within Europe, all of our data is stored on Amazon Ireland."), /*#__PURE__*/React.createElement("li", null, "We also use https encryption, which encrypts all the communication between user and spotmycrib.ie"))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseFour",
        "aria-expanded": "false",
        "aria-controls": "collapseThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingThree"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "4"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "Is there a benefit to the references being collect by Spot my crib rather than say our personal emails? "), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseFour",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingThree",
        "aria-expanded": "false"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("p", null, "There are many other advantages as given below. "), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Centralised records, no more going through emails back and forth to gain references."), /*#__PURE__*/React.createElement("li", null, "Time tracking applications and sequencing"), /*#__PURE__*/React.createElement("li", null, "Elimination of duplication."), /*#__PURE__*/React.createElement("li", null, "Time-saving - as discussed on our previous meeting, let's say Neptune gets 30 viewings per house and for 100 units, its 3000 viewings - that is 3k digital applications"), /*#__PURE__*/React.createElement("li", null, "Instant social profile checks - verify users to check if they would they be a good fit for the property."), /*#__PURE__*/React.createElement("li", null, "Digital fingerprint background Checks - of all the references"), /*#__PURE__*/React.createElement("li", null, "Instant salary affordability checks - Check if the tenants can afford the house"), /*#__PURE__*/React.createElement("li", null, "No more paper to get lose."), /*#__PURE__*/React.createElement("li", null, "No longer tied to office - checks can be made from anywhere, any device, laptop/mobile."), /*#__PURE__*/React.createElement("li", null, "Customised filters - to choose only the best tenants using an Agent's experience."), /*#__PURE__*/React.createElement("li", null, "Set up invites for viewing - only invite selected applicants for the viewing."), /*#__PURE__*/React.createElement("li", null, "The key ensures it is a particular property and eliminates confusion for the renter."))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseFive",
        "aria-expanded": "false",
        "aria-controls": "collapseThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingThree"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "5"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "How does someone who Is looking for an Apartment know to go to Spot my Crib?. They will think My Home and Daft. "), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseFive",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingThree",
        "aria-expanded": "false"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Tenants can search for the property directly from our home page."), /*#__PURE__*/React.createElement("li", null, "A property's link/key is shared either in the ad or with the ad in daft, myhome etc."), /*#__PURE__*/React.createElement("li", null, "A property's link/key can also be posted on the Agent's website."), /*#__PURE__*/React.createElement("li", null, "Agents can print the key and give a hardcopy of the key to viewers when they visit the property. ")))))), /*#__PURE__*/React.createElement("div", {
        className: "col-md-12 btn-account_area"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('faqs'),
        className: "btn green-btn"
      }, "More FAQs!"))))))));
    }

    return render;
  }();

  return EstateAgent;
}(Component);

var KnowMoreForm = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(KnowMoreForm, _Component2);

  function KnowMoreForm(props) {
    var _this2;

    _this2 = _Component2.call(this, props) || this;
    _this2.state = {
      f1Success: false
    };
    _this2.knowmoreformtryagainHandler = _this2.knowmoreformtryagainHandler.bind(_assertThisInitialized(_this2));
    _this2.knowmoreformHandler = _this2.knowmoreformHandler.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  var _proto2 = KnowMoreForm.prototype;

  _proto2.knowmoreformtryagainHandler = function () {
    function knowmoreformtryagainHandler() {
      this.setState({
        f1Success: false
      });
    }

    return knowmoreformtryagainHandler;
  }();

  _proto2.knowmoreformHandler = function () {
    function knowmoreformHandler(event) {
      event.preventDefault();
      var target = event.target;
      var email = target.emailaddress.value;
      var validatedEmail = LoginFormValidation.email(email);

      if (validatedEmail !== true) {
        console.log(validatedEmail.error);
        alert(validatedEmail.reason); // var tmp =  Session.get("showErrorDlg");if(!tmp)tmp=[];
        // if(!validatedEmail.reason)error.reason = 'Invalid email. Please correct the email address entered.';
        // tmp.push(validatedEmail.reason);
        // Session.set("showErrorDlg",tmp)
      } else {
        ga('send', 'event', 'estateAgentPage', 'knowmoreForm', 'Know more form submitted');
        Meteor.call('knowMoreRequestReceived', email);
        this.setState({
          f1Success: true
        });
      }
    }

    return knowmoreformHandler;
  }();

  _proto2.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("form", {
        className: "knowmore-form",
        onSubmit: this.knowmoreformHandler
      }, /*#__PURE__*/React.createElement("div", {
        className: "input-group"
      }, /*#__PURE__*/React.createElement("span", {
        className: "input-group-btn",
        style: {
          zIndex: 0,
          margin: 0
        }
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('advertisewithus'),
        className: "btn green-btn"
      }, "Advertise your property")), this.state.f1Success ? /*#__PURE__*/React.createElement("p", {
        style: {
          marginBottom: 20,
          display: 'inline',
          paddingRight: '15px'
        }
      }, "Thank you for your interest.") : /*#__PURE__*/React.createElement("input", {
        autoComplete: "email",
        type: "text",
        className: "form-control emailaddress",
        name: "emailaddress",
        placeholder: "Enter your email.",
        style: {
          paddingLeft: 10,
          zIndex: 0
        }
      }), this.state.f1Success ? /*#__PURE__*/React.createElement("button", {
        className: "btn transparent-btn knowmoreformtryagain",
        type: "submit",
        onClick: this.knowmoreformtryagainHandler
      }, "Add another") : /*#__PURE__*/React.createElement("span", {
        className: "input-group-btn",
        style: {
          zIndex: 0
        }
      }, /*#__PURE__*/React.createElement("button", {
        className: "btn transparent-btn",
        type: "submit"
      }, "Know More!"))));
    }

    return render;
  }();

  return KnowMoreForm;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Faqs.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/Faqs.jsx                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return Faqs;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var Faqs = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Faqs, _Component);

  function Faqs() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Faqs.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "contact-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "Frequently Asked Questions")), /*#__PURE__*/React.createElement("section", {
        className: "faq-content"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "faq-section-hold"
      }, /*#__PURE__*/React.createElement("h3", null, "About SpotMyCrib"), /*#__PURE__*/React.createElement("div", {
        className: "panel-group",
        id: "accordion1",
        role: "tablist",
        "aria-multiselectable": "true"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion1",
        href: "#collapseOne1",
        "aria-expanded": "false",
        "aria-controls": "collapseOne"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingOne"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title "
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "1"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "What is SpotMyCrib?"), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseOne1",
        className: "panel-collapse collapse in",
        role: "tabpanel",
        "aria-labelledby": "headingOne"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("p", null, "Spotmycrib is an honest and open platform to provide you an ultimately safe and secure way make your renting experience an incredibly convenient experience for you. We understand your pain of standing in cold long queues and not getting called for. Say goodbye to your worries as spotmycrib is just a click away to bring together the landlord and the renter."), /*#__PURE__*/React.createElement("p", null, "SpotMyCrib brings renters and property owners together in one\xA0transparent platform.")))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion1",
        href: "#collapseTwo1",
        "aria-expanded": "false",
        "aria-controls": "collapseTwo"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingTwo"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "2"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "Why do you need it?"), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseTwo1",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingTwo"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("p", null, "Your pain in waiting for the call after a long reference is about to end. This is the platform to view and apply to your future home conveniently using your mobile and get screened sooner. This platform provides you the ideal experience like no other."), /*#__PURE__*/React.createElement("p", null, "Save your precious time and valuable money! You don\u2019t need to wait for long. Submit your online application along with your personal credentials and make this process much easier and faster. Get your dream house with just a few clicks. Our online rental payment system is reliable and safe to pay your rent once you are in your home. Monthly payment is digital now.")))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion1",
        href: "#collapseThree1",
        "aria-expanded": "false",
        "aria-controls": "collapseThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingThree"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "3"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "How it works?"), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseThree1",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("p", {
        className: "hidden-xs"
      }, "I am a", /*#__PURE__*/React.createElement("a", {
        className: "btns transparent-btn mar-left-10",
        href: FlowRouter.url('estateagent')
      }, "Landlord"), /*#__PURE__*/React.createElement("a", {
        className: "btns green-btn scroll1 mar-left-10",
        href: FlowRouter.url('howitworks')
      }, "Renter")), /*#__PURE__*/React.createElement("p", {
        className: "visible-xs"
      }, "Choose from below options", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
        className: "btns transparent-btn mar-left-10",
        href: FlowRouter.url('estateagent')
      }, "Landlord"), /*#__PURE__*/React.createElement("a", {
        className: "btns green-btn scroll1 mar-left-10",
        href: FlowRouter.url('howitworks')
      }, "Renter"))))))), /*#__PURE__*/React.createElement("div", {
        className: "faq-section-hold pad-btm-60"
      }, /*#__PURE__*/React.createElement("h3", null, "Estate Agents/Landlords/Property Owners"), /*#__PURE__*/React.createElement("div", {
        className: "panel-group agent-panel-group",
        id: "accordion",
        role: "tablist",
        "aria-multiselectable": "true"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseOne",
        "aria-expanded": "false",
        "aria-controls": "collapseOne"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingOne"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title "
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "1"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "It is my understanding that current legislation will not allow for bidding that exceeds the permitted rent amount. "), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseOne",
        className: "panel-collapse collapse in",
        role: "tabpanel",
        "aria-labelledby": "headingOne"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "We have an option to disable the bidding and have done so."), /*#__PURE__*/React.createElement("li", null, "We have contacted the RTB: Residential Tenancies Board in Ireland (in writing) and asked them if a tenant offers more rent and a landlord agrees to it - is that legal. They confirmed it is legal if both sides agree to it."))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseTwo",
        "aria-expanded": "false",
        "aria-controls": "collapseOne"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingOne"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title "
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "2"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "What would the knock effect be should there be arrears, can warning letters be sent? etc"), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseTwo",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingOne"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "We can send warning emails/ reminder emails and report on who are due rents, arrears."), "                                              ", /*#__PURE__*/React.createElement("li", null, "SpotMyCrib also remembers the history of a tenants arrears, etc"))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseThree",
        "aria-expanded": "false",
        "aria-controls": "collapseTwo"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingTwo"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "3"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "What responsibility is there on the agent, from a Data Protection perspective, If references are sent to a website?"), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseThree",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingTwo"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "All Data is being held and maintained by Spot My Crib within Europe and the key system ensures the data is being shared within in the terms of the consumer's signup."), /*#__PURE__*/React.createElement("li", null, "There is no responsibility on the agent, Users agree to terms of service, privacy when they upload their references. This actively operates within the GDPR (", /*#__PURE__*/React.createElement("a", {
        target: "_blank",
        href: "https://en.wikipedia.org/wiki/General_Data_Protection_Regulation"
      }, " Data protection Regulation"), ") framework. "), /*#__PURE__*/React.createElement("li", null, "Customers retain at all times the option to have all of their data removed, inspected or deletion if we're contacted in writing directly or indirectly by the agent on the consumer's behalf."), /*#__PURE__*/React.createElement("li", null, "The key system ensures the agent can deal with all Data Protection issues for a renter, speedily and thoroughly within the regulations."), /*#__PURE__*/React.createElement("li", null, "Plus we are 100% compliant with data being stored within Europe, all of our data is stored on Amazon Ireland."), /*#__PURE__*/React.createElement("li", null, "We also use https encryption, which encrypts all the communication between user and spotmycrib.ie"))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseFour",
        "aria-expanded": "false",
        "aria-controls": "collapseThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingThree"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "4"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "Is there a benefit to the references being collect by Spot my crib rather than say our personal emails? "), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseFour",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("p", null, "There are many other advantages as given below. "), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Centralised records, no more going through emails back and forth to gain references."), /*#__PURE__*/React.createElement("li", null, "Time tracking applications and sequencing"), /*#__PURE__*/React.createElement("li", null, "Elimination of duplication."), /*#__PURE__*/React.createElement("li", null, "Time-saving - as discussed on our previous meeting, let's say Neptune gets 30 viewings per house and for 100 units, its 3000 viewings - that is 3k digital applications"), /*#__PURE__*/React.createElement("li", null, "Instant social profile checks - verify users to check if they would they be a good fit for the property."), /*#__PURE__*/React.createElement("li", null, "Digital fingerprint background Checks - of all the references"), /*#__PURE__*/React.createElement("li", null, "Instant salary affordability checks - Check if the tenants can afford the house"), /*#__PURE__*/React.createElement("li", null, "No more paper to get lose."), /*#__PURE__*/React.createElement("li", null, "No longer tied to office - checks can be made from anywhere, any device, laptop/mobile."), /*#__PURE__*/React.createElement("li", null, "Customised filters - to choose only the best tenants using an Agent's experience."), /*#__PURE__*/React.createElement("li", null, "Set up invites for viewing - only invite selected applicants for the viewing."), /*#__PURE__*/React.createElement("li", null, "The key ensures it is a particular property and eliminates confusion for the renter."))))), /*#__PURE__*/React.createElement("div", {
        className: "panel panel-default"
      }, /*#__PURE__*/React.createElement("a", {
        className: "collapsed",
        role: "button",
        "data-toggle": "collapse",
        "data-parent": "#accordion",
        href: "#collapseFive",
        "aria-expanded": "false",
        "aria-controls": "collapseThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-heading",
        role: "tab",
        id: "headingThree"
      }, /*#__PURE__*/React.createElement("h4", {
        className: "panel-title"
      }, /*#__PURE__*/React.createElement("span", {
        className: "green-circle"
      }, "5"), /*#__PURE__*/React.createElement("p", {
        className: "position"
      }, "How does someone who Is looking for an Apartment know to go to Spot my Crib?. They will think My Home and Daft. "), /*#__PURE__*/React.createElement("i", {
        className: "glyphicon glyphicon-menu-down active-arrow"
      })))), /*#__PURE__*/React.createElement("div", {
        id: "collapseFive",
        className: "panel-collapse collapse",
        role: "tabpanel",
        "aria-labelledby": "headingThree"
      }, /*#__PURE__*/React.createElement("div", {
        className: "panel-body"
      }, /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Tenants can search for the property directly from our home page."), /*#__PURE__*/React.createElement("li", null, "A property's link/key is shared either in the ad or with the ad in daft, myhome etc."), /*#__PURE__*/React.createElement("li", null, "A property's link/key can also be posted on the Agent's website."), /*#__PURE__*/React.createElement("li", null, "Agents can print the key and give a hardcopy of the key to viewers when they visit the property. ")))))), /*#__PURE__*/React.createElement("div", {
        className: "container mar-top-30",
        style: {
          textAlign: 'center'
        }
      }, /*#__PURE__*/React.createElement("p", null, "Learn more"), /*#__PURE__*/React.createElement("a", {
        className: "btns transparent-btn mar-left-10",
        href: FlowRouter.url('estateagent')
      }, "I'm a Landlord"), /*#__PURE__*/React.createElement("a", {
        className: "btns green-btn scroll1 mar-left-10",
        href: FlowRouter.url('howitworks')
      }, "I'm a Renter")))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return Faqs;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Gdpr.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/Gdpr.jsx                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return Gdpr;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var Gdpr = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Gdpr, _Component);

  function Gdpr() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Gdpr.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "contact-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "Data Protection / GDPR")), /*#__PURE__*/React.createElement("section", {
        className: "faq-content conditions"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "pad-top-btm-30 for-font"
      }, /*#__PURE__*/React.createElement("h3", null, "EU General Data Protection Regulation (GDPR)"), /*#__PURE__*/React.createElement("div", {
        className: true
      }, /*#__PURE__*/React.createElement("p", null, "The EU General Data Protection Regulation (GDPR) will set a new standard for how companies use and protect EU citizens' data. It will take effect from May 2018."), /*#__PURE__*/React.createElement("p", null, "At SpotMyCrib, we've been working hard to prepare for GDPR, to ensure that we fulfil its obligations and maintain our transparency about user and customer data and how we use data."), /*#__PURE__*/React.createElement("p", null, "Here's an overview of GDPR, and how we are preparing for it at SpotMyCrib."), /*#__PURE__*/React.createElement("h3", null, "Overview"), /*#__PURE__*/React.createElement("h4", null, "What is GDPR?"), /*#__PURE__*/React.createElement("p", null, "The GDPR is a comprehensive European data protection law that provides significant data rights for protecting the privacy of natural persons residing in the EU. SpotMyCrib is committed to ensuring that our platform is GDPR-compliant when the regulation becomes enforceable on May 25, 2018."), /*#__PURE__*/React.createElement("h4", null, "How is GDPR applicable to SpotMyCrib?"), /*#__PURE__*/React.createElement("p", null, "We collect data from our users and customers to better serve them. We also take ID proofs, references from our users as a supporting document for their letting application. We respect everyone's personal information, and it makes perfect sense for us to have one privacy policy and set of procedures to protect everyone's interests, including compliance with applicable local laws."), /*#__PURE__*/React.createElement("h4", null, "What personal information does SpotMyCrib process on behalf of its customers?"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "We collect and maintain personal contact details which includes contact name, job title, email address, telephone number, and company name. If the customer is an individual sole proprietor or unaffiliated with any commercial or non-profit entity, it's possible that additional information such as street address and credit cardholder data is included."), /*#__PURE__*/React.createElement("li", null, "All customer data, that is, data controlled by our customers which we process according to their instructions, is appropriately classified as Confidential. This confidential data could contain personally-identifiable information about our Customers' End Users, which we cannot identify because it is encrypted and not accessible by SpotMyCrib staff."), /*#__PURE__*/React.createElement("li", null, "We also collect personal identity information as references to users application to a property. For example passport ID, PPS, resume or other details are collected to help you with your application process."), /*#__PURE__*/React.createElement("li", null, "More covered on ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('privacy')
      }, "privacy page"), ".")), /*#__PURE__*/React.createElement("h4", null, "What are Data Controllers and Data Processors?"), /*#__PURE__*/React.createElement("p", null, "GDPR is designed to ensure protection of the privacy rights of data subjects. Data subjects are people from whom or about whom you collect information in connection with your business and its operations. Your obligations with regard to data subjects and their personal data depend on whether you're considered a controller or a processor under GDPR."), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Data Controllers")), /*#__PURE__*/React.createElement("p", null, "GDPR defines a data controller as \"the natural or legal person, public authority, agency or another body which, alone or jointly with others, determines the purposes and means of the processing of personal data.\" In other words, if your organization processes personal data for your own organization's purposes and needs-not merely as a service provider acting on behalf of another organization-then you are likely to be a data controller."), /*#__PURE__*/React.createElement("p", null, "SpotMyCrib is a Data Controller for our direct customers."), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Data Processor")), /*#__PURE__*/React.createElement("p", null, "Businesses or organizations that process personal data solely on behalf of, and as directed by, data controllers are data processors. In other words, when a data controller outsources a data processing function to another entity, that other entity is generally a data processor."), /*#__PURE__*/React.createElement("p", null, "For purposes of the GDPR, SpotMyCrib is also considered a Data Processor for our customers' end-users."), /*#__PURE__*/React.createElement("h4", null, "What steps is SpotMyCrib taking to ensure GDPR compliance?"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "We conducted an internal review of all data our data points, how its collected, stored and how it's being used."), /*#__PURE__*/React.createElement("li", null, "We conducted an internal Data Protection Impact Assessment (DPIA) to discover what information we collect, and how it's being used."), /*#__PURE__*/React.createElement("li", null, "We will provide users and customers with resources and helpful information about privacy and GDPR, including whitepapers and blog posts."), /*#__PURE__*/React.createElement("li", null, "We will announce an update of our Privacy Policy for GDPR.")), /*#__PURE__*/React.createElement("h3", null, "Our Customers and the GDPR"), /*#__PURE__*/React.createElement("h4", null, "As a SpotMyCrib customer, what are my main responsibilities under the GDPR?"), /*#__PURE__*/React.createElement("p", null, "SpotMyCrib customers are responsible for protecting the personal information of their end users, as Data Controllers and/or Data Exporters."), /*#__PURE__*/React.createElement("p", null, "Your responsibilities under GDPR will depend on the nature of your business and your personal data processing activities.  Nonetheless, broadly speaking, GDPR requires that personal data be:"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "Processed lawfully, fairly and in a transparent manner,"), /*#__PURE__*/React.createElement("li", null, "Collected for specified, explicit and legitimate purposes and not further processed in a manner incompatible with those purposes,"), /*#__PURE__*/React.createElement("li", null, "Adequate, relevant, and limited to what is necessary for achieving those purposes,"), /*#__PURE__*/React.createElement("li", null, "Accurate and kept up to date"), /*#__PURE__*/React.createElement("li", null, "Stored no longer than necessary to achieve the purposes for which it was collected, and"), /*#__PURE__*/React.createElement("li", null, "Properly secured against accidental loss, destruction or damage.")), /*#__PURE__*/React.createElement("p", null, "It is our customer's responsibility to obtain the EXPRESS CONSENT of individual Data Subjects (for example, tenants, applications) to transfer their Personal Data to SpotMyCrib as a Data Processor and/or Data Importer. SpotMyCrib processes all such information as Confidential Data in accordance with the terms of our Data Processing Agreement and/or this Privacy Policy."), /*#__PURE__*/React.createElement("h4", null, "What actions does our customers need to take?"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "In addition to seeking independent legal advice regarding your obligations under the GDPR, here are some tips to get you started:"), /*#__PURE__*/React.createElement("li", null, "Educate yourself on the provisions of the ", /*#__PURE__*/React.createElement("a", {
        href: "https://gdpr-info.eu/",
        target: "_blank"
      }, "GDPR"), " to understand how they may differ from your existing data protection obligations and practices."), /*#__PURE__*/React.createElement("li", null, "If you don't have dedicated data privacy or security personnel in-house, consider appointing a directly responsible individual (DRI) or small team to manage your company's GDPR compliance efforts."), /*#__PURE__*/React.createElement("li", null, "Create an up-to-date inventory of personal data that you collect and manage."), /*#__PURE__*/React.createElement("li", null, "Create a list of vendors who you send data to (analytics tools, CRMs, email tools, etc.), and understand whether they are a controller or a processor. Then, determine what their obligations are, and make sure they have a plan to be ready for the GDPR."), /*#__PURE__*/React.createElement("li", null, "Develop a plan for obtaining and managing ", /*#__PURE__*/React.createElement("a", {
        href: "https://gdpr-info.eu/art-7-gdpr/",
        target: "_blank"
      }, "consent"), " in accordance with the GDPR or establish other lawful grounds for using personal data."), /*#__PURE__*/React.createElement("li", null, "Determine if your company needs to appoint a ", /*#__PURE__*/React.createElement("a", {
        href: "https://gdpr-info.eu/art-37-gdpr/",
        target: "_blank"
      }, "Data Protection Officer"), " (DPO). For public authorities, and companies processing large amounts of special categories of personal data, the appointment of a ", /*#__PURE__*/React.createElement("a", {
        href: "https://secure.edps.europa.eu/EDPSWEB/edps/EDPS/DPO",
        target: "_blank"
      }, "data protection officer"), " (DPO) is mandatory. Organizations will be expected to hire someone who has real expertise and knowledge of the latest laws and practices."), /*#__PURE__*/React.createElement("li", null, "Becoming GDPR compliant takes time, and will require you to rethink how you collect and manage customer data. If you have any questions about the GDPR or want to learn how SpotMyCrib can help you prepare, please let us know.")), /*#__PURE__*/React.createElement("h4", null, "What are the penalties for non-compliance with GDPR?"), /*#__PURE__*/React.createElement("p", null, "Depending on the nature of the violation, data protection authorities may issue fines or penalties for non-compliance up to \u20AC 20 million or 4% of global revenue."), /*#__PURE__*/React.createElement("h4", null, "Where can I get more information about GDPR?"), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "From the original source: The Council of the European Union where the legislation was approved. ", /*#__PURE__*/React.createElement("a", {
        href: "https://publications.europa.eu/en/publication-detail/-/publication/c7d157e6-fccd-11e7-b8f5-01aa75ed71a1/language-en/format-PDF/source-62885347",
        target: "_blank"
      }, "https://publications.europa.eu/en/publication-detail/-/publication/c7d157e6-fccd-11e7-b8f5-01aa75ed71a1/language-en/format-PDF/source-62885347")), /*#__PURE__*/React.createElement("li", null, "For more general GDPR readiness portals, we suggest:\xA0", /*#__PURE__*/React.createElement("a", {
        href: "https://www.eugdpr.org/",
        target: "_blank"
      }, "https://www.eugdpr.org/"), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "GDPR FAQs: ", /*#__PURE__*/React.createElement("a", {
        href: "https://www.eugdpr.org/gdpr-faqs.html",
        target: "_blank"
      }, "https://www.eugdpr.org/gdpr-faqs.html")))), /*#__PURE__*/React.createElement("li", null, "From leading Privacy advocacy organizations:", /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "https://iapp.org/resources/topics/eu-gdpr/",
        target: "_blank"
      }, "https://iapp.org/resources/topics/eu-gdpr/")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "https://www.epic.org/international/eu_general_data_protection_reg.html",
        target: "_blank"
      }, "https://www.epic.org/international/eu_general_data_protection_reg.html")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
        href: "http://www.truste.com",
        target: "_blank"
      }, "www.truste.com"))))), /*#__PURE__*/React.createElement("p", null, "Have more questions? ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('contactus'),
        target: "_blank"
      }, "Submit a request"))))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return Gdpr;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"HowItWorks.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/HowItWorks.jsx                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return HowItWorks;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var HowItWorks = /*#__PURE__*/function (_Component) {
  _inheritsLoose(HowItWorks, _Component);

  function HowItWorks() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = HowItWorks.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "about-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "How it Works")), /*#__PURE__*/React.createElement("section", {
        id: "how-works",
        className: "sec-holder how-it-works"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("ul", {
        className: "mar-top-30"
      }, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-btm-30"
      }, "Search Property"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/how-it-works/search-and-find-property-apartment-flat.png"),
        alt: "Search and find your rental property",
        className: "pad-btm-30"
      }), /*#__PURE__*/React.createElement("p", null, "Search and find an apartment/house you like from our ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home') + '#searchform'
      }, "browse form"), ". Or choose your county from our ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('home') + '#homeLinks'
      }, "county list"), " in our home page.")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-btm-30"
      }, "Set Your Rent"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/how-it-works/set-your-rent-apartment.png"),
        alt: "Apply and set your rent for Apartment",
        className: "pad-btm-30"
      }), /*#__PURE__*/React.createElement("p", null, "Make your offer for the house and click apply. Remember to upload all your references in your profile.")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("h6", {
        className: "pad-btm-30"
      }, "Confirm your Home"), /*#__PURE__*/React.createElement("img", {
        src: cdnPath("/images/how-it-works/confirm-your-rent-in-dublin.png"),
        alt: "Confirm your rental",
        className: "pad-btm-30"
      }), /*#__PURE__*/React.createElement("p", null, "Landlord chooses a tenant based on your references and your offer. If you are chosen, you would receive a confirmation email. ")))), /*#__PURE__*/React.createElement("div", {
        className: "container mar-top-30"
      }, /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('faqs'),
        className: "green-btn btns ",
        type: "button"
      }, "Learn more")))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return HowItWorks;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Privacy.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/Privacy.jsx                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return Privacy;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var Privacy = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Privacy, _Component);

  function Privacy() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Privacy.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "contact-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "Privacy Policy")), /*#__PURE__*/React.createElement("section", {
        className: "faq-content conditions"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "pad-top-btm-30 for-font"
      }, /*#__PURE__*/React.createElement("div", {
        className: "color-grey"
      }, /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Your privacy is important to us. This privacy policy explains what personal data SpotMyCrib collects from you, through our interactions with you and through our products, and how we use that data.", /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("span", {
        id: "infoCo"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "It is compiled to better serve those who are concerned with how their 'Personally Identifiable Information' (PII) is being used online. PII, as described in privacy law and information security, is information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context. Please read our privacy policy carefully to get a clear understanding of how we collect, use, protect or otherwise handle your Personally Identifiable Information in accordance with our website.", /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("span", {
        id: "infoCo"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "What personal information do we collect from the people that visit website?")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("ol", null, /*#__PURE__*/React.createElement("li", null, "We collect and maintain personal contact details which includes contact name, job title, email address, telephone number, and company name. If the customer is an individual sole proprietor or unaffiliated with any commercial or non-profit entity, it's possible that additional information such as street address and credit cardholder data is included."), /*#__PURE__*/React.createElement("li", null, "All customer data, that is, data controlled by our customers which we process according to their instructions, is appropriately classified as Confidential. This confidential data could contain personally-identifiable information about our Customers' End Users, which we cannot identify because it is encrypted and not accessible by SpotMyCrib staff."), /*#__PURE__*/React.createElement("li", null, "We also collect personal identity information as references to users application to a property. For example passport ID, PPS, resume or other details are collected to help you with your application process."), /*#__PURE__*/React.createElement("li", null, "More covered on ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('gdpr')
      }, "Data Protection"), " page.")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "When do we collect information?")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We collect information from you when you register on our site, applying for a letting, upload references to your profile, browse through the site, search for properties, fill out a form or enter information on our site."), /*#__PURE__*/React.createElement("br", null), " ", /*#__PURE__*/React.createElement("span", {
        id: "infoUs"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "How do we use your information? ")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, " We may use the information we collect from you when you register, apply for a letting, sign up for our newsletter, respond to a survey or marketing communication, surf the website, or use certain other site features in the following ways:", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " As a reference to your letting application process, your references and personal info will only be shared with the landlord or the agents who posted the property. Your information will not be shared with anyone else and will be kept confidential. "), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " To personalize your experience and to allow us to deliver the type of content and product offerings in which you are most interested."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " To improve our website in order to better serve you."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " To quickly process your transactions."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " To send periodic emails regarding your rental application, profile, property alerts or other similar services."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " To follow up with them after correspondence (live chat, email or phone inquiries)"), /*#__PURE__*/React.createElement("span", {
        id: "infoPro"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "How do we protect your information?")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We do not use vulnerability scanning and/or scanning to PCI standards."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We only provide articles and information. We never ask for credit card numbers."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We do not use Malware Scanning.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Your personal information is contained behind secured networks and is only accessible by a limited number of persons who have special access rights to such systems, and are required to keep the information confidential. In addition, all sensitive/credit information you supply is encrypted via Secure Socket Layer (SSL) technology. "), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We implement a variety of security measures when a user enters, submits, or accesses their information to maintain the safety of your personal information."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", {
        id: "coUs"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "How to Access & Control Your Personal Data?")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "You can view, edit, or delete your personal data online for your profile. You can always choose whether you wish to receive promotional email, SMS messages, telephone calls and postal mail from SpotMyCrib. You can also opt out from receiving interest-based advertising from SpotMyCrib by clicking on unsubscribe from our emails or by writing to us at ", /*#__PURE__*/React.createElement("a", {
        href: "mailto:support@spotmycrib.com"
      }, "support@spotmycrib.com"), " ."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", {
        id: "coUs"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "Do we use 'cookies'?")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Yes. Cookies are small files that a site or its service provider transfers to your computer's hard drive through your Web browser (if you allow) that enables the site's or service provider's systems to recognize your browser and capture and remember certain information. For instance, we use cookies to help us remember and process the items in your shopping cart. They are also used to help us understand your preferences based on previous or current site activity, which enables us to provide you with improved services. We also use cookies to help us compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("strong", null, "We use cookies to:")), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " Understand and save user's preferences for future visits."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), "You can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies. You do this through your browser settings. Since browser is a little different, look at your browser's Help Menu to learn the correct way to modify your cookies.", /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "If you turn cookies off, Some of the features that make your site experience more efficient may not function properly.It won't affect the user's experience that make your site experience more efficient and may not function properly."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "More information about out cookies are in our ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('cookiepolicy')
      }, "Cookie Policy"), " page."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", {
        id: "trDi"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "Third-party disclosure")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("strong", null, "Do we disclose the information we collect to Third-Parties?")), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We sell,trade, or otherwise transfer to outside parties your name, address,city,town, any form or online contact identifier email, name of chat account etc., screen name or user names, phone number", /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("strong", null, "We engage in this practice because,:")), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Users references and personal details uploaded in profile will only be shared with landlord or agents, as a proof of your application. "), "Personally Identifiable Information."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", {
        id: "trLi"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "color-black"
      }, /*#__PURE__*/React.createElement("strong", null, "Third-party links")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Occasionally, at our discretion, we may include or offer third-party products or services on our website. These third-party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites."), /*#__PURE__*/React.createElement("span", {
        id: "gooAd"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "blueText"
      }, /*#__PURE__*/React.createElement("strong", null, "Google")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Google's advertising requirements can be summed up by Google's Advertising Principles. They are put in place to provide a positive experience for users. https://support.google.com/adwordspolicy/answer/1316548?hl=en ", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We use Google AdSense Advertising on our website."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), "Google, as a third-party vendor, uses cookies to serve ads on our site. Google's use of the DART cookie enables it to serve ads to our users based on previous visits to our site and other sites on the Internet. Users may opt-out of the use of the DART cookie by visiting the Google Ad and Content Network privacy policy.", /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("strong", null, "We have implemented the following:")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We, along with third-party vendors such as Google use first-party cookies (such as the Google Analytics cookies) and third-party cookies (such as the DoubleClick cookie) or other third-party identifiers together to compile data regarding user interactions with ad impressions and other ad service functions as they relate to our website. "), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("strong", null, "Opting out:"), /*#__PURE__*/React.createElement("br", null), "Users can set preferences for how Google advertises to you using the Google Ad Settings page. Alternatively, you can opt out by visiting the Network Advertising Initiative Opt Out page or by using the Google Analytics Opt Out Browser add on."), /*#__PURE__*/React.createElement("span", {
        id: "calOppa"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "blueText"
      }, /*#__PURE__*/React.createElement("strong", null, "California Online Privacy Protection Act")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "CalOPPA is the first state law in the nation to require commercial websites and online services to post a privacy policy.  The law's reach stretches well beyond California to require any person or company in the United States (and conceivably the world) that operates websites collecting Personally Identifiable Information from California consumers to post a conspicuous privacy policy on its website stating exactly the information being collected and those individuals or companies with whom it is being shared. -  See more at: http://consumercal.org/california-online-privacy-protection-act-caloppa/#sthash.0FdRbT51.dpuf", /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("strong", null, "According to CalOPPA, we agree to the following:"), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Users can visit our site anonymously."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Once this privacy policy is created, we will add a link to it on our home page or as a minimum, on the first significant page after entering our website.", /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Our Privacy Policy link includes the word 'Privacy' and can easily be found on the page specified above."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), "You will be notified of any Privacy Policy changes:"), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " On our Privacy Policy Page", /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Can change your personal information:"), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " By logging in to your account"), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("strong", null, "How does our site handle Do Not Track signals?"), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We honor Do Not Track signals and Do Not Track, plant cookies, or use advertising when a Do Not Track (DNT) browser mechanism is in place. "), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("strong", null, "Does our site allow third-party behavioral tracking?"), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "It's also important to note that we do not allow third-party behavioral tracking"), /*#__PURE__*/React.createElement("span", {
        id: "coppAct"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "blueText"
      }, /*#__PURE__*/React.createElement("strong", null, "COPPA (Children Online Privacy Protection Act)")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "When it comes to the collection of personal information from children under the age of 13 years old, the Children's Online Privacy Protection Act (COPPA) puts parents in control.  The Federal Trade Commission, United States' consumer protection agency, enforces the COPPA Rule, which spells out what operators of websites and online services must do to protect children's privacy and safety online.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We do not specifically market to children under the age of 13 years old."), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "Do we let third-parties, including ad networks or plug-ins collect PII from children under 13?"), /*#__PURE__*/React.createElement("span", {
        id: "ftcFip"
      }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "blueText"
      }, /*#__PURE__*/React.createElement("strong", null, "Fair Information Practices")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "The Fair Information Practices Principles form the backbone of privacy law in the United States and the concepts they include have played a significant role in the development of data protection laws around the globe. Understanding the Fair Information Practice Principles and how they should be implemented is critical to comply with the various privacy laws that protect personal information.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null)), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("strong", null, "In order to be in line with Fair Information Practices we will take the following responsive action, should a data breach occur:")), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " Within 7 business days"), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "We will notify the users via in-site notification"), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, "\xA0\xA0\xA0\xA0\xA0 ", /*#__PURE__*/React.createElement("strong", null, "\u2022"), " Within 7 business days"), /*#__PURE__*/React.createElement("div", {
        className: "innerText"
      }, /*#__PURE__*/React.createElement("br", null), "We also agree to the Individual Redress Principle which requires that individuals have the right to legally pursue enforceable rights against data collectors and processors who fail to adhere to the law. This principle requires not only that individuals have enforceable rights against data users, but also that individuals have recourse to courts or government agencies to investigate and/or prosecute non-compliance by data processors."), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("p", null, "Have more questions? ", /*#__PURE__*/React.createElement("a", {
        href: FlowRouter.url('contactus')
      }, "Submit a request"))))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return Privacy;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Terms.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/reactui/static/Terms.jsx                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _inheritsLoose;

module.link("@babel/runtime/helpers/inheritsLoose", {
  default: function (v) {
    _inheritsLoose = v;
  }
}, 0);
module.export({
  "default": function () {
    return Terms;
  }
});
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
var React, Component;
module.link("react", {
  "default": function (v) {
    React = v;
  },
  Component: function (v) {
    Component = v;
  }
}, 1);
var MainLayoutFooter;
module.link("../layout/MainLayoutFooter.jsx", {
  "default": function (v) {
    MainLayoutFooter = v;
  }
}, 2);
var MainLayoutHeader;
module.link("../layout/MainLayoutHeader.jsx", {
  "default": function (v) {
    MainLayoutHeader = v;
  }
}, 3);

var Terms = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Terms, _Component);

  function Terms() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Terms.prototype;

  _proto.render = function () {
    function render() {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MainLayoutHeader, null), /*#__PURE__*/React.createElement("div", {
        className: "index"
      }, /*#__PURE__*/React.createElement("section", {
        className: "contact-bnr"
      }, /*#__PURE__*/React.createElement("h1", null, "Terms of Service")), /*#__PURE__*/React.createElement("section", {
        className: "faq-content conditions"
      }, /*#__PURE__*/React.createElement("div", {
        className: "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "pad-top-btm-30 for-font"
      }, /*#__PURE__*/React.createElement("div", {
        className: "color-grey"
      }, /*#__PURE__*/React.createElement("h3", null, "1. Terms"), /*#__PURE__*/React.createElement("p", null, "By accessing the website at ", /*#__PURE__*/React.createElement("a", {
        href: "https://www.spotmycrib.ie/"
      }, "https://www.spotmycrib.ie/"), ", you are agreeing to be bound by these terms of service, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this website are protected by applicable copyright and trademark law."), /*#__PURE__*/React.createElement("h3", null, "2. Use License"), /*#__PURE__*/React.createElement("ol", {
        type: "a"
      }, /*#__PURE__*/React.createElement("li", null, "Permission is granted to temporarily download one copy of the materials (information or software) on SpotMyCrib.ie's website for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not:", /*#__PURE__*/React.createElement("ol", {
        type: "i"
      }, /*#__PURE__*/React.createElement("li", null, "modify or copy the materials;"), /*#__PURE__*/React.createElement("li", null, "use the materials for any commercial purpose, or for any public display (commercial or non-commercial);"), /*#__PURE__*/React.createElement("li", null, "attempt to decompile or reverse engineer any software contained on SpotMyCrib.ie's website;"), /*#__PURE__*/React.createElement("li", null, "remove any copyright or other proprietary notations from the materials; or"), /*#__PURE__*/React.createElement("li", null, "transfer the materials to another person or \"mirror\" the materials on any other server."))), /*#__PURE__*/React.createElement("li", null, "This license shall automatically terminate if you violate any of these restrictions and may be terminated by SpotMyCrib.ie at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format.")), /*#__PURE__*/React.createElement("h3", null, "3. Disclaimer"), /*#__PURE__*/React.createElement("ol", {
        type: "a"
      }, /*#__PURE__*/React.createElement("li", null, "The materials on SpotMyCrib.ie's website are provided on an 'as is' basis. SpotMyCrib.ie makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties including, without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights."), /*#__PURE__*/React.createElement("li", null, "Further, SpotMyCrib.ie does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its website or otherwise relating to such materials or on any sites linked to this site.")), /*#__PURE__*/React.createElement("h3", null, "4. Limitations"), /*#__PURE__*/React.createElement("p", null, "In no event shall SpotMyCrib.ie or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use the materials on SpotMyCrib.ie's website, even if SpotMyCrib.ie or a SpotMyCrib.ie authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you."), /*#__PURE__*/React.createElement("h3", null, "5. Accuracy of materials"), /*#__PURE__*/React.createElement("p", null, "The materials appearing on SpotMyCrib.ie website could include technical, typographical, or photographic errors. SpotMyCrib.ie does not warrant that any of the materials on its website are accurate, complete or current. SpotMyCrib.ie may make changes to the materials contained on its website at any time without notice. However SpotMyCrib.ie does not make any commitment to update the materials."), /*#__PURE__*/React.createElement("h3", null, "6. Links"), /*#__PURE__*/React.createElement("p", null, "SpotMyCrib.ie has not reviewed all of the sites linked to its website and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by SpotMyCrib.ie of the site. Use of any such linked website is at the user's own risk."), /*#__PURE__*/React.createElement("h3", null, "7. Modifications"), /*#__PURE__*/React.createElement("p", null, "SpotMyCrib.ie may revise these terms of service for its website at any time without notice. By using this website you are agreeing to be bound by the then current version of these terms of service."), /*#__PURE__*/React.createElement("h3", null, "8. Governing Law"), /*#__PURE__*/React.createElement("p", null, "These terms and conditions are governed by and construed in accordance with the laws of Dublin and you irrevocably submit to the exclusive jurisdiction of the courts in that State or location.")))))), /*#__PURE__*/React.createElement("footer", {
        className: "footer-default"
      }, /*#__PURE__*/React.createElement(MainLayoutFooter, null)));
    }

    return render;
  }();

  return Terms;
}(Component);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"api":{"collections.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/collections.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  Collections: function () {
    return Collections;
  }
});
var Mongo;
module.link("meteor/mongo", {
  Mongo: function (v) {
    Mongo = v;
  }
}, 0);
// import "./schemas.js";
// export const Tasks = new Mongo.Collection('Property');
// import SimpleSchema from "simpl-schema";
// SimpleSchema.extendOptions(['autoform']);
module.runSetters(Collections = {});
Collections.Properties = new Mongo.Collection("Properties");
Collections.Bids = new Mongo.Collection("Bids");
Collections.Auctions = new Mongo.Collection("Auctions");
Collections.Agents = new Mongo.Collection("Agents");
Collections.Config = new Mongo.Collection("Config");
Collections.PropertyManage = new Mongo.Collection("PropertyManage");
Collections.ActivityHistory = new Mongo.Collection("ActivityHistory");
Collections.Areas = new Mongo.Collection("Areas");
Collections.Blogs = new Mongo.Collection("Blogs");
Collections.EmailEnquiries = new Mongo.Collection("EmailEnquiries");
Collections.EmailRequests = new Mongo.Collection("EmailRequests");
Collections.Properties.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.Properties.before.update(function (userId, doc, fieldNames, modifier, options) {
  var skip = false;
  if (Array.isArray(fieldNames)) if (fieldNames.indexOf('auctionHistory') != -1) {
    if (modifier['$set']['auctionId'] == "" && modifier['$set']['rent'] == "") skip = true; //This is for deactivate
  }

  if (!skip) {
    modifier.$set = modifier.$set || {};
    modifier.$set.updatedAt = new Date();
  }
});
Collections.Bids.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.Bids.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.Auctions.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.Auctions.before.update(function (userId, doc, fieldNames, modifier, options) {
  var skip = false;
  if (Array.isArray(fieldNames)) if (fieldNames.length == 1 && fieldNames.indexOf('views') != -1) {
    // console.log('Its just view, so skipping')
    skip = true;
  }
  if (fieldNames['isArchived'] == true) skip = true; //This is for deactivate

  if (!skip) {
    modifier.$set = modifier.$set || {};
    modifier.$set.updatedAt = new Date();
  }
});
Collections.Agents.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.Agents.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.Config.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.Config.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.PropertyManage.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.PropertyManage.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.ActivityHistory.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.ActivityHistory.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.Areas.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.Areas.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.Blogs.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.Blogs.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.EmailEnquiries.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.EmailEnquiries.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});
Collections.EmailRequests.before.insert(function (userId, doc) {
  doc.createdAt = new Date();
  doc.updatedAt = new Date();
});
Collections.EmailRequests.before.update(function (userId, doc, fieldNames, modifier, options) {
  modifier.$set = modifier.$set || {};
  modifier.$set.updatedAt = new Date();
});

if (Meteor.isClient) {
  Collections.PA_AvgOffer = new Mongo.Collection("avgOffer");
}

if (Meteor.isServer) {
  Collections.propertyAlerts = new Mongo.Collection("propertyAlerts");
  Collections.propertyAlerts.before.insert(function (userId, doc) {
    if (userId) doc.userId = userId;
    doc.createdAt = new Date();
    doc.updatedAt = new Date();
  });
  Collections.propertyAlerts.before.update(function (userId, doc, fieldNames, modifier, options) {
    modifier.$set = modifier.$set || {};
    modifier.$set.updatedAt = new Date();
  });
} // Collections.Auctions.attachSchema(Schema.Auctions);
// Collections.Properties.attachSchema(Schema.Properties);
// Collections.Bids.attachSchema(Schema.Bids);


UI.registerHelper("retCollectionProperties", function () {
  return Collections.Properties;
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"profile.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/profile.js                                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./collections.js");
var check;
module.link("meteor/check", {
  check: function (v) {
    check = v;
  }
}, 0);
Meteor.methods({
  updateReferenceFile: function (args) {
    // check([], []);
    console.log("server method updateReferenceFile called");
    var userId = Meteor.userId();
    var p1 = '';
    var p2 = '';

    switch (args[0]) {
      case "Resume":
        p1 = "hasResume";
        p2 = "resume";
        break;

      case "Work Reference":
        p1 = "hasWorkRef";
        p2 = "workRef";
        break;

      case "Landlord Reference":
        p1 = "hasLandlordRef";
        p2 = "landlordRef";
        break;

      case "Financial Reference":
        p1 = "hasFinancialRef";
        p2 = "financialRef";
        break;

      case "Government ID":
        p1 = "hasGovtID";
        p2 = "govtID";
        break;

      case "Passport":
        p1 = "hasPassport";
        p2 = "passport";
        break;

      case "PPS":
        p1 = "hasPPS";
        p2 = "PPS";
        break;
    }

    if (p1 && p2) {
      p1 = "profile.references." + p1;
      p2 = "profile.references." + p2;
      var setObj = {};
      setObj[p1] = true;
      setObj[p2] = args[1];
      console.log(p1);
      console.log(p2);
      console.log(setObj);
      Meteor.users.update(userId, {
        $set: setObj
      });
    }

    return {
      status: 'Success'
    };
  },
  updateMobile: function (newMobile) {
    // check(newMobile, []);
    console.log("server method updateMobile called");
    var userId = Meteor.userId();
    Meteor.users.update({
      "_id": userId
    }, {
      $set: {
        "profile.mobile": newMobile,
        "profile.isMobileVerified": false
      }
    });
    return {
      status: 'Success'
    };
  },
  updateEmployerName: function (newEmp) {
    check(newEmp, String);

    if (!newEmp.length || newEmp.length < 2) {
      throw new Meteor.Error(500, 'Invalid employee name', 'Employee name cannot be less then 2 characters.');
    }

    console.log("server method updateEmployerName called: " + newEmp);
    var userId = Meteor.userId();
    Meteor.users.update({
      "_id": userId
    }, {
      $set: {
        "profile.references.employerName": newEmp
      }
    });
    return {
      status: 'Success'
    };
  },
  updateEmployerTakeHome: function (salary) {
    check(salary, Number);

    if (salary < 0 || salary > Number.MAX_VALUE) {
      throw new Meteor.Error(500, 'Invalid employee take home', 'Employee take home salary cannot be less then 0 or too large.');
    }

    console.log("server method updateEmployerTakeHome called: " + salary);
    var userId = Meteor.userId();
    Meteor.users.update({
      "_id": userId
    }, {
      $set: {
        "profile.references.employerTakeHome": salary
      }
    });
    return {
      status: 'Success'
    };
  },
  sendOTP: function (args) {
    check(args, Match.Any);
    console.log("server method sendOTP called");

    if (!isLoggedOn()) {
      throw new Meteor.Error(500, 'Error 500: Login needed', 'Please login before you request.');
    }

    var user = Meteor.user();

    if (user.profile.isMobileVerified) {
      throw new Meteor.Error(500, 'Error 500: Mobile already verified. ', 'Your mobile is already verified.');
    } //DON'T need below code as we will be using this method for both send and RESEND.
    //if(user.profile.OTPValue){
    //  var today = new Date();
    //  var OTPSentOn = new Date(user.profile.OTPSentOn);
    //  var diffMs = (OTPSentOn - today); // milliseconds between now & Christmas
    //  var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); // minutes
    //  if(diffMins > 15){//OTP has expired
    //
    //  }else{//OTP previous OTP is still valid.
    //
    //  }
    //}


    var newOTP = Math.floor(100000 + Math.random() * 900000);
    var userEmail = user.profile.email;
    var username = user.profile.name; //TODO separate SMS sending in an this.unblock method

    /* Send OTP via email */

    Meteor.call("sendNotificationEmail", {
      template: "otpEmail",
      user: {
        profile: {
          username: username
        }
      },
      otp: newOTP,
      subject: "IBidMyHome OTP: Verify your mobile number",
      mailTo: user.profile.email
    });
    /* Send OTP via mobile*/

    var OPTsmsText = 'Your OTP is: ' + newOTP;
    var APIURL = 'http://atrans.smscuppa.com/sendsms.jsp?user=mybids&password=mybids&mobiles=' + user.profile.mobile + '&general=' + OPTsmsText + '&senderid=MYBIDS&version=3';
    var APIURL = 'http://atrans.smscuppa.com/sendsms.jsp';
    var options = {
      "params": {
        "user": "mybids",
        "password": "mybids",
        "mobiles": user.profile.mobile,
        "sms": OPTsmsText,
        "senderid": "MYBIDS",
        "version": "3"
      },
      "headers": {//"X-API-KEY" : APIKey,
        //"X-Auth-Token" : AUTHToken
      }
    };
    var response = HTTP.get(APIURL, options);
    Meteor.users.update({
      "_id": user._id
    }, {
      $currentDate: {
        "profile.OTPSentOn": {
          $type: "timestamp"
        }
      },
      $set: {
        "profile.OTPValue": newOTP
      }
    });
    return {
      status: 'Success'
    };
  },
  verifyOTP: function (args) {
    check(args, Match.Any);
    var otp = args[0];
    console.log("server method verifyOTP called");

    if (!isLoggedOn()) {
      throw new Meteor.Error(500, 'Error 500: Login needed', 'Please login before you request.');
    }

    var user = Meteor.user();

    if (user.profile.OTPValue) {
      var today = new Date();
      var OTPSentOn = new Date(user.profile.OTPSentOn);
      var diffMs = OTPSentOn - today; // milliseconds between now & Christmas

      var diffMins = Math.round(diffMs % 86400000 % 3600000 / 60000); // minutes

      if (diffMins > 15) {
        //OTP has expired
        throw new Meteor.Error(500, 'Error 500: OTP has expired', 'Your OTP has expired.');
      } else {//OTP previous OTP is still valid.
      }
    } else {
      throw new Meteor.Error(500, 'Error 500: OTP is not valid', 'You need an OTP to verify.');
    }

    if (user.profile.OTPValue == otp) {
      Meteor.users.update({
        "_id": user._id
      }, {
        $set: {
          "profile.isMobileVerified": true
        }
      });
    } else {
      throw new Meteor.Error(500, 'Error 500: OTP is not valid', 'OTP entered is wrong.');
    }

    return {
      status: 'Success'
    };
  }
});

function randomString(length, chars) {
  var mask = '';
  if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';
  if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  if (chars.indexOf('#') > -1) mask += '0123456789';
  if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:";\'<>?,./|\\';
  var result = '';

  for (var i = length; i > 0; --i) {
    result += mask[Math.floor(Math.random() * mask.length)];
  }

  return result;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"properties.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/properties.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./collections.js");
var check;
module.link("meteor/check", {
  check: function (v) {
    check = v;
  }
}, 0);
// import TokenGen from 'token-gen';
Meteor.methods({
  addProperty: function (data) {
    console.log("common method addProperty called");
    var userId = Meteor.userId();
    console.log(userId);

    if (!userId) {
      throw new Meteor.Error('not-authorized');
    }

    var doc = {
      "address": {
        "address": getA(data, 'address.address'),
        "county": getA(data, 'address.county'),
        "area": getA(data, 'address.area'),
        "country": "Ireland"
      },
      "type": getA(data, 'type'),
      "baths": parseInt(getA(data, 'baths')),
      "furnished": getA(data, 'furnished') == "true" ? true : false,
      "contacts": [{
        "name": getA(data, 'contacts.0.name'),
        "phone": getA(data, 'contacts.0.phone'),
        "email": getA(data, 'contacts.0.email')
      }],
      "about": getA(data, 'about'),
      "amenities": getA(data, 'amenities'),
      "createdByAgent": userId,
      "isArchived": false,
      "createdAt": new Date(),
      "updatedAt": new Date()
    };
    var slug = '';
    if (doc.type) slug = doc.type;
    if (doc.address.address) slug += '-' + doc.address.address;
    if (doc.address.area) slug += '-' + doc.address.area;
    if (doc.address.county) slug += '-' + doc.address.county;
    doc.slug = slugify(slug); // {name: "bedrooms.0.ensuite", value: "on"}
    // 8
    // :
    // {name: "bedrooms.0.bedType", value: "single"}
    // "bedrooms" : [
    //     {
    //         "bedType" : "double",
    //         "ensuite" : true
    //     },
    //     {
    //         "bedType" : "single",
    //         "ensuite" : false
    //     }
    // ],

    var isImported = getA(data, 'isImported');

    if (isImported == 'true') {
      doc['isImported'] = true;
      var url = getA(data, 'url');

      if (url) {
        doc.importData = {
          'url': url,
          'lastCheckedDate': new Date()
        };
      }
    }

    var numBedRoomCount = getA(data, 'numBedRoomCount');

    if (numBedRoomCount) {
      var bedrooms = [];

      for (var i = 0; i < numBedRoomCount; i++) {
        var bne = "bedrooms." + i + ".ensuite";
        var bnt = "bedrooms." + i + ".bedType";
        var tmp = {};
        if (getA(data, bne)) tmp.ensuite = true;else tmp.ensuite = false;
        tmp.bedType = getA(data, bnt);
        bedrooms.push(tmp);
      }

      doc['bedrooms'] = bedrooms;
      doc['bedCount'] = bedrooms.length;
    } else {
      doc['bedrooms'] = [];
      doc['bedCount'] = '1'; //default 1
    }

    var docId = Collections.Properties.insert(doc); //, {validationContext: 'create'}, function(err, res) {
    //     if (err) {
    //         throw new Meteor.Error(400, Collections.Properties.simpleSchema().namedContext('create').invalidKeys());
    //     }
    //     return res;
    // });

    Meteor.call('addManageProperty', docId); //Don't show meteor error as users can also enable this later.

    return docId;
  }
});

Array.prototype.pushUnique = function (item) {
  if (this.indexOf(item) == -1) {
    //if(jQuery.inArray(item, this) == -1) {
    this.push(item);
    return true;
  }

  return false;
};

function getA(arr, find) {
  if (!Array.isArray(arr)) return;
  var eles = [];

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]['name'] == find) eles.push(arr[i]['value']);
  }

  if (find == 'amenities') return eles;
  if (eles.lenght > 1) return eles;
  if (eles.lenght == 0) return false;
  return eles[0];
}

function slugify(text) {
  if (!text) return '';
  var a = 'àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;';
  var b = 'aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------';
  var p = new RegExp(a.split('').join('|'), 'g');
  return text.toString().toLowerCase().replace(/\s+/g, '-') // Replace spaces with -
  .replace(p, function (c) {
    return b.charAt(a.indexOf(c));
  }) // Replace special chars
  .replace(/&/g, '-and-') // Replace & with 'and'
  .replace(/[^\w\-]+/g, '') // Remove all non-word chars
  .replace(/\-\-+/g, '-') // Replace multiple - with single -
  .replace(/^-+/, '') // Trim - from start of text
  .replace(/-+$/, ''); // Trim - from end of text
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publications.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/publications.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./collections.js");

if (Meteor.isClient) {} //PUBLICATIONS


if (Meteor.isServer) {
  Meteor.publish("PropertyManage", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    return Collections.PropertyManage.find(parameters.find, parameters.options);
  });
  Meteor.publish("ActivityHistory", function (terms) {
    // console.log('ActivityHistory');
    return Collections.ActivityHistory.find({
      propertyId: terms.id
    }, {
      limit: terms.limit,
      sort: {
        createdAt: -1
      }
    });
  });
  Meteor.publish("avgOffer", function (auctionId) {
    // console.log("Subscribed: auctionId: "+auctionId)
    // var self = this;
    // var handle = Collections.Bids.aggregate([
    //     { $match : { "auctionId" : auctionId } },
    //     { $group : {
    //             '_id': this.userId,
    //             'avgOffer': {
    //                 // In this case, we're running summation.
    //                 $avg: '$yourBid'
    //             }
    //         }
    //     }
    // ]).forEach(function(data) {
    //     self.added('avgOffer', 'first', data);
    // });
    ReactiveAggregate(this, Collections.Bids, [{
      $match: {
        "auctionId": auctionId
      }
    }, {
      $group: {
        '_id': this.userId,
        'avgOffer': {
          // In this case, we're running summation.
          $avg: '$yourBid'
        }
      }
    }], {
      clientCollection: "avgOffer"
    });
  });
  Meteor.publish("Property", function (terms) {
    // console.log('Property');
    var parameters = queryConstructor(terms); // console.log(parameters.find)
    // console.log(parameters.options)
    // console.log(Collections.Properties.find(parameters.find, parameters.options).count())

    if (parameters.fail) {
      return [];
      this.ready();
    }

    return Collections.Properties.find(parameters.find, parameters.options);
  });
  Meteor.publish("userData", function () {
    if (!this.userId) return []; //Need to login
    // 'services.password':1,Don use this , we have a method for this

    return Meteor.users.find({
      _id: this.userId
    }, {
      limit: 1,
      fields: {
        'services.facebook.id': 1,
        'services.twitter.screenName': 1,
        'services.linkedin.publicProfileUrl': 1,
        'services.google.id': 1,
        'createdAt': 1,
        'lastLoginDate': 1,
        'profile': 1,
        'isSA': 1
      }
    });
  });
  Meteor.publish("userDataUsername", function (username) {
    if (!username) return [];
    var ret = Meteor.users.find({
      "profile.username": username
    }, {
      limit: 1,
      fields: {
        'createdAt': 1,
        'lastLoginDate': 1,
        'profile.name': 1,
        'profile.email': 1,
        'profile.role': 1,
        'profile.picture': 1,
        'profile.mobile': 1,
        'profile.isPublic': 1,
        'profile.username': 1
      }
    });
    var user = ret.fetch(); // console.log(username)
    // console.log(user)

    if (!user.length) {
      return [];
    }

    try {
      if (user[0].profile.isPublic) {
        //If public then include social info as well.
        return Meteor.users.find({
          "profile.username": username
        }, {
          limit: 1,
          fields: {
            'createdAt': 1,
            'lastLoginDate': 1,
            'profile': 1,
            'services.facebook.id': 1,
            'services.twitter.screenName': 1,
            'services.linkedin.publicProfileUrl': 1,
            'services.google.id': 1
          }
        });
      }
    } catch (e) {
      console.log(e);
    }

    return ret;
  });
  Meteor.publish("allUserData", function () {
    return Meteor.users.find({}, {
      fields: {
        'createdAt': 1,
        'lastLoginDate': 1,
        'profile': 1,
        'services.facebook.id': 1,
        'services.twitter.screenName': 1,
        'services.linkedin.publicProfileUrl': 1,
        'services.google.id': 1
      }
    }); //fields: {'nested.things': 1}
  });
  Meteor.publish("tenants", function (pageno) {
    var pg = 1;

    try {
      pg = parseInt(pageno);
    } catch (e) {}

    if (isNaN(pg)) pg = 1;
    var resperpage = 10;
    var skip = (pg - 1) * resperpage;
    return Meteor.users.find({
      "profile.isPublic": true
    }, {
      skip: skip,
      limit: resperpage,
      fields: {
        'createdAt': 1,
        'lastLoginDate': 1,
        'profile.name': 1,
        'profile.email': 1,
        'profile.role': 1,
        'profile.picture': 1,
        'profile.mobile': 1,
        'profile.isPublic': 1,
        'services.facebook.id': 1,
        'services.twitter.screenName': 1,
        'services.linkedin.publicProfileUrl': 1,
        'services.google.id': 1 // 'profile.username':1,

      }
    });
  });
  Meteor.publish("browseLettings", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    var auctions = [],
        properties = [];
    parameters.options.fields = {
      address: 1,
      createdByAgent: 1,
      type: 1,
      createdAt: 1,
      updatedAt: 1,
      isArchived: 1,
      auctionId: 1,
      slug: 1,
      bedCount: 1,
      baths: 1,
      rent: 1,
      rentType: 1,
      gallery: 1
    }; // console.log('property key is')
    // console.log(parameters.propertykey)

    if (parameters.propertykey) if (parameters.propertykey.length > 0) {
      console.log('inside propertykey');
      auctions = Collections.Auctions.find({
        lettingAuctionCode: {
          $in: parameters.propertykey
        },
        isArchived: false
      }, parameters.options);
      var tmp = auctions.fetch();
      var propertyIds = [];

      for (var i = 0; i < tmp.length; i++) {
        propertyIds.push(tmp[i].propertyId);
        if (i > parameters.options.limit) break;
      }

      properties = [];

      if (propertyIds.length) {
        properties = Collections.Properties.find({
          _id: {
            $in: propertyIds
          }
        }, {
          limit: parameters.options.limit,
          sort: parameters.options.sort
        });
      }

      if (!propertyIds.length) return [];
      return [properties, auctions];
    }
    parameters.find.isArchived = false;
    parameters.find.auctionId = {
      $exists: true,
      $gt: ""
    }; //if we don' put $gt, then its also giving results of records with empty vals - but we don' need deactivated properties

    if (parameters.minRent && parameters.maxRent) {
      parameters.find.rent = {
        $gte: parseInt(parameters.minRent),
        $lte: parseInt(parameters.maxRent)
      };
    } else if (parameters.minRent) {
      parameters.find.rent = {
        $gte: parseInt(parameters.minRent)
      };
    } else if (parameters.maxRent) {
      parameters.find.rent = {
        $lte: parseInt(parameters.maxRent)
      };
    }

    if (parameters.minBeds && parameters.maxBeds) {
      parameters.find.bedCount = {
        $gte: parseInt(parameters.minBeds),
        $lte: parseInt(parameters.maxBeds)
      };
    } else if (parameters.minBeds) {
      parameters.find.bedCount = {
        $gte: parseInt(parameters.minBeds)
      };
    } else if (parameters.maxBeds) {
      parameters.find.bedCount = {
        $lte: parseInt(parameters.maxBeds)
      };
    } else if (parameters.bedCount && !isNaN(parameters.bedCount)) {
      parameters.find.bedCount = parseInt(parameters.bedCount);
    } // console.log('In browseLettings start')
    // console.log(parameters.find)
    // console.log(parameters.options)
    // console.log(Collections.Properties.find(parameters.find, parameters.options).count())
    // console.log('In browseLettings end')


    properties = Collections.Properties.find(parameters.find, parameters.options);
    var tmp = properties.fetch();
    var propertyIds = [];

    for (var i = 0; i < tmp.length; i++) {
      propertyIds.push(tmp[i].auctionId);
      if (i > parameters.options.limit) break;
    }

    auctions = [];

    if (propertyIds.length) {
      auctions = Collections.Auctions.find({
        _id: {
          $in: propertyIds
        }
      }, {
        limit: parameters.options.limit,
        sort: parameters.options.sort
      });
    }

    if (!propertyIds.length) return properties;
    return [properties, auctions];
  });
  Meteor.publish("total-houses-for-rent-count", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    parameters.options.fields = {
      _id: 1
    };

    if (parameters.propertykey) {
      if (parameters.propertykey.length > 0) {
        Counts.publish(this, "total-houses-for-rent-count", Collections.Auctions.find({
          lettingAuctionCode: {
            $in: parameters.propertykey
          },
          isArchived: false
        }), parameters.options);
      }
    } else {
      parameters.find.isArchived = false;
      parameters.find.auctionId = {
        $exists: true,
        $gt: ""
      }; //if we don' put $gt, then its also giving results of records with empty vals - but we don' need deactivated properties

      if (parameters.minRent && parameters.maxRent) {
        parameters.find.rent = {
          $gte: parseInt(parameters.minRent),
          $lte: parseInt(parameters.maxRent)
        };
      } else if (parameters.minRent) {
        parameters.find.rent = {
          $gte: parseInt(parameters.minRent)
        };
      } else if (parameters.maxRent) {
        parameters.find.rent = {
          $lte: parseInt(parameters.maxRent)
        };
      }

      if (parameters.minBeds && parameters.maxBeds) {
        parameters.find.bedCount = {
          $gte: parseInt(parameters.minBeds),
          $lte: parseInt(parameters.maxBeds)
        };
      } else if (parameters.minBeds) {
        parameters.find.bedCount = {
          $gte: parseInt(parameters.minBeds)
        };
      } else if (parameters.maxBeds) {
        parameters.find.bedCount = {
          $lte: parseInt(parameters.maxBeds)
        };
      } else if (parameters.bedCount && !isNaN(parameters.bedCount)) {
        parameters.find.bedCount = parseInt(parameters.bedCount);
      } // console.log('In count start')
      // console.log(parameters.find)
      // console.log(parameters.options)
      // console.log(Collections.Properties.find(parameters.find, parameters.options).count())
      // console.log('In count end')


      Counts.publish(this, "total-houses-for-rent-count", Collections.Properties.find(parameters.find), parameters.options);
    }
  });
  Meteor.publish("viewLetting", function (key) {
    // var auctions = Collections.Auctions.find({lettingAuctionCode:key,isArchived:false},{
    var auctions = Collections.Auctions.find({
      lettingAuctionCode: key
    }, {
      limit: 1
    });
    var tmp = auctions.fetch();
    var properties = [],
        bids = [],
        mainProperty = {},
        relatedPropsTmp = [],
        maxRel = 5,
        //Max rel always needs to be 1 number higher than the req, due to the logic below.
    relPropIds = [],
        relAuctionIds = [],
        i = 0;

    try {
      relPropIds.push(tmp[0].propertyId);
      relAuctionIds.push(tmp[0]._id);
      bids = Collections.Bids.find({
        auctionId: tmp[0]._id
      }, {
        limit: 100,
        sort: {
          updatedAt: -1
        }
      }); //////// RELATED PROPS

      mainProperty = Collections.Properties.findOne({
        _id: tmp[0].propertyId
      });
      var notArr = [mainProperty._id];
      var filters = {
        "type": mainProperty.type,
        "address.county": mainProperty.address.county,
        "address.area": mainProperty.address.area,
        "auctionId": {
          $exists: true,
          $gt: ""
        },
        "isArchived": false,
        "_id": {
          $not: {
            $in: relPropIds
          }
        }
      };
      relatedPropsTmp = Collections.Properties.find(filters, {
        fields: {
          _id: 1,
          auctionId: 1
        },
        limit: maxRel
      }).fetch();

      for (i = 0; i < relatedPropsTmp.length; i++) {
        relPropIds.push(relatedPropsTmp[i]._id);
        relAuctionIds.push(relatedPropsTmp[i].auctionId);
      }

      if (relPropIds.length < maxRel) {
        delete filters["address.area"];
        filters["_id"] = {
          $not: {
            $in: relPropIds
          }
        };
        relatedPropsTmp = Collections.Properties.find(filters, {
          fields: {
            _id: 1,
            auctionId: 1
          },
          limit: maxRel - relPropIds.length
        }).fetch();

        for (i = 0; i < relatedPropsTmp.length; i++) {
          relPropIds.push(relatedPropsTmp[i]._id);
          relAuctionIds.push(relatedPropsTmp[i].auctionId);
        }
      }

      if (relPropIds.length < maxRel) {
        delete filters["address.county"];
        filters["_id"] = {
          $not: {
            $in: relPropIds
          }
        };
        relatedPropsTmp = Collections.Properties.find(filters, {
          fields: {
            _id: 1,
            auctionId: 1
          },
          limit: maxRel - relPropIds.length
        }).fetch();

        for (i = 0; i < relatedPropsTmp.length; i++) {
          relPropIds.push(relatedPropsTmp[i]._id);
          relAuctionIds.push(relatedPropsTmp[i].auctionId);
        }
      }

      if (relPropIds.length < maxRel) {
        delete filters["type"];
        filters["_id"] = {
          $not: {
            $in: relPropIds
          }
        };
        relatedPropsTmp = Collections.Properties.find(filters, {
          fields: {
            _id: 1,
            auctionId: 1
          },
          limit: maxRel - relPropIds.length
        }).fetch();

        for (i = 0; i < relatedPropsTmp.length; i++) {
          relPropIds.push(relatedPropsTmp[i]._id);
          relAuctionIds.push(relatedPropsTmp[i].auctionId);
        }
      }

      properties = Collections.Properties.find({
        _id: {
          $in: relPropIds
        }
      }, {
        limit: maxRel + 1
      });
      auctions = Collections.Auctions.find({
        _id: {
          $in: relAuctionIds
        }
      }, {
        limit: maxRel + 1
      });
    } catch (e) {
      console.log(e);
    }

    if (!tmp.length) return [];
    return [properties, auctions, bids];
  });

  var transformMyActiveAdvertisements = function (data) {
    // console.log('in transformMyActiveAdvertisements');
    // console.log(data.propertyId)
    data.property = Collections.Properties.findOne(data.propertyId, {
      fields: {
        address: 1,
        createdByAgent: 1,
        createdAt: 1,
        updatedAt: 1,
        isArchived: 1,
        auctionId: 1
      }
    });
    return data;
  };

  Meteor.publish("inviteToApply.MyActiveAdvertisements", function () {
    var _this = this;

    if (!this.userId) return []; //Need to login

    var self = this;
    var subHandle = Collections.Auctions.find().observeChanges({
      added: function (id, fields) {
        fields = transformMyActiveAdvertisements(fields);

        _this.added('Auctions', id, fields);
      },
      changed: function (id, fields) {
        _this.changed('Auctions', id, fields);
      },
      removed: function (id) {
        _this.removed('Auctions', id);
      }
    });
    this.ready();
    this.onStop(function () {
      subHandle.stop();
    });
    self.ready();
  });
  Meteor.publish("MyProperties", function (terms) {
    console.log('In MyProperties Publish ');
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    if (!this.userId) return [];
    find = {};
    find['createdByAgent'] = {
      $in: [this.userId, 'demoproperty']
    };
    find['isArchived'] = false;
    if (terms.onlyActive) find.auctionId = {
      $exists: true,
      $gt: ""
    };
    var properties = Collections.Properties.find(find, parameters.options);
    var relAuctionIds = [];
    var props = properties.fetch();

    for (var i = 0; i < props.length; i++) {
      if (props[i].auctionId) relAuctionIds.push(props[i].auctionId);
    }

    var auctions = Collections.Auctions.find({
      _id: {
        $in: relAuctionIds
      }
    }, {
      limit: parameters.options.limit ? parameters.options.limit + 2 : 22
    });
    var bids = Collections.Bids.find({
      auctionId: {
        $in: relAuctionIds
      }
    }, {
      limit: parameters.options.limit ? parameters.options.limit + 2 : 22
    });
    return [properties, auctions, bids];
    this.ready();
  });
  Meteor.publish("total-MyProperties", function (terms) {
    if (!this.userId) return [];
    find = {};
    find['createdByAgent'] = {
      $in: [this.userId, 'demoproperty']
    };
    find['isArchived'] = false;
    if (terms.onlyActive) find.auctionId = {
      $exists: true,
      $gt: ""
    };
    Counts.publish(this, "total-MyProperties", Collections.Properties.find(find));
  });
  Meteor.publish("PropertyApplications", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    if (!this.userId) return [];
    find = {
      _id: parameters.id
    };
    find['isArchived'] = false;
    var properties = Collections.Properties.find(find, {
      limit: 1
    });
    var tmp = properties.fetch();
    if (tmp.length == 0) return [];
    var auctionId = tmp[0].auctionId;
    var propertyId = tmp[0]._id; // console.log('In PropertyApplications start')
    // console.log(parameters)
    // console.log('Auctions')
    // console.log(Collections.Auctions.find({_id:auctionId,isArchived:false},{limit:1 } ).count())
    // console.log(Collections.Bids.find({auctionId:auctionId,isArchived:false},parameters.propertyApplications.options ).count())
    // console.log(Collections.EmailEnquiries.find({propertyId:propertyId,isArchived:false},parameters.emailEnquiries.options ).count())
    // console.log('In PropertyApplications end')

    var auctions = Collections.Auctions.find({
      _id: auctionId,
      isArchived: false
    }, {
      limit: 1
    });
    tmp = auctions.fetch();
    if (tmp.length == 0) return [];
    var bids = Collections.Bids.find({
      auctionId: auctionId,
      isArchived: false
    }, parameters.propertyApplications.options);
    var EmailEnquiries = Collections.EmailEnquiries.find({
      propertyId: propertyId,
      isArchived: false
    }, parameters.emailEnquiries.options);
    tmp = bids.fetch();
    var userIds = [];

    for (var j = 0; j < tmp.length; j++) {
      userIds.push(tmp[j].userId);
    }

    var users = Meteor.users.find({
      _id: this.userId
    });
    if (parameters.emailEnquiries) users = Meteor.users.find({
      _id: {
        $in: userIds
      }
    }, {
      limit: parameters.emailEnquiries.options.limit,
      fields: {
        'services.facebook.id': 1,
        'services.twitter.screenName': 1,
        'services.linkedin.publicProfileUrl': 1,
        'services.google.id': 1,
        'createdAt': 1,
        'lastLoginDate': 1,
        'profile': 1,
        'isSA': 1
      }
    }); // just need the limit from there.

    return [properties, auctions, bids, EmailEnquiries, users];
    this.ready();
  });
  Meteor.publish("total-PropertyApplications", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    if (!this.userId) return [];
    find = {
      _id: parameters.id
    };
    find['isArchived'] = false;
    var properties = Collections.Properties.find(find, {
      limit: 1
    });
    var tmp = properties.fetch();
    if (tmp.length == 0) return [];
    var auctionId = tmp[0].auctionId;
    var propertyId = tmp[0]._id;
    Counts.publish(this, "total-PropertyApplications", Collections.Bids.find({
      auctionId: auctionId,
      isArchived: false
    }), parameters.propertyApplications.options);
  });
  Meteor.publish("total-EmailEnquiries", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    if (!this.userId) return [];
    find = {
      _id: parameters.id
    };
    find['isArchived'] = false;
    var properties = Collections.Properties.find(find, {
      limit: 1
    });
    var tmp = properties.fetch();
    if (tmp.length == 0) return [];
    var auctionId = tmp[0].auctionId;
    var propertyId = tmp[0]._id;
    Counts.publish(this, "total-EmailEnquiries", Collections.EmailEnquiries.find({
      propertyId: propertyId,
      isArchived: false
    }), parameters.emailEnquiries.options);
  });
  Meteor.publish("Advertisement", function (advertisementId) {
    var validationSuccess = false;
    if (advertisementId.length > 12 && advertisementId.length < 20) validationSuccess = true;
    if (!validationSuccess) return [];else return Collections.Auctions.find({
      _id: advertisementId,
      isArchived: false
    }, {
      limit: 1
    });
    this.ready();
  });
  Meteor.publish("MyAdvertisements", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    if (!this.userId) return [];
    return Collections.Auctions.find({
      createdByAgent: {
        $in: [this.userId, 'demoproperty']
      },
      isArchived: false
    }, parameters.options);
    this.ready();
  });
  Meteor.publish("editProperty", function (propertyId) {
    if (!this.userId) return [];
    var auctions = Collections.Auctions.find({
      isArchived: false,
      propertyId: propertyId
    }, {
      transform: function (doc) {
        if (doc.createdByAgent != this.userId) {
          return {
            _id: doc._id,
            propertyId: doc.propertyId,
            createdByAgent: doc.createdByAgent
          };
        }
      },
      limit: 1
    });
    var properties = Collections.Properties.find({
      isArchived: false,
      _id: propertyId
    }, {
      transform: function (doc) {
        if (doc.createdByAgent != this.userId) {
          return {
            _id: doc._id,
            propertyId: doc.propertyId
          };
        }
      },
      limit: 1
    });
    return [auctions, properties];
  });
  Meteor.publish("propertyApplication", function (propertyId, auctionId) {
    if (!this.userId) return [];
    var properties = Collections.Properties.find({
      isArchived: false,
      _id: propertyId
    }, {
      transform: function (doc) {
        if (doc.createdByAgent != this.userId) {
          return {
            _id: doc._id,
            propertyId: doc.propertyId,
            invalidAgent: true
          };
        }
      },
      limit: 1
    });
    var auctionIDTmp = '';
    var invalidAgentProp = false;
    var tmp = properties.fetch();

    try {
      auctionIDTmp = tmp[0].auctionId;
      if (tmp[0].invalidAgent) invalidAgentProp = true;
    } catch (e) {}

    if (!tmp.length || invalidAgentProp) {
      //Property not found, no need to find auction
      console.log("invalidAgentProp: " + invalidAgentProp);
      console.log("tmp.length: " + tmp.length);
      return [];
    }

    if (auctionId) auctionIDTmp = auctionId;
    var auctions = Collections.Auctions.find({
      isArchived: false,
      _id: auctionIDTmp
    }, {
      transform: function (doc) {
        if (doc.createdByAgent != this.userId) {
          return {
            _id: doc._id,
            propertyId: doc.propertyId,
            createdByAgent: doc.createdByAgent
          };
        }
      },
      limit: 1
    });
    var tmp = properties.fetch();

    if (!tmp.length) {
      return [];
    }

    var bids = Collections.Bids.find({
      isArchived: false,
      _id: auctionIDTmp
    }, {
      transform: function (doc) {
        if (doc.createdByAgent != this.userId) {
          return {
            _id: doc._id,
            propertyId: doc.propertyId,
            createdByAgent: doc.createdByAgent
          };
        }
      },
      limit: 1
    });
    return [auctions, properties];
  });
  Meteor.publish("Areas", function (c1, c2, c3, c4, c5) {
    // For ireland
    // c1: Territory: like UK for ireland, its empty
    // c2: Country => Ireland
    // c3: County => Dublin / City
    // c4: Sub County => Dublin 1
    // c5: Area => Baltinglass
    // console.log('Vals are c3: '+c3)
    // return [];
    var selector = {},
        paramReceived = false;

    if (c1) {
      paramReceived = true;
      selector['Territory'] = c1;
    }

    if (c2) {
      paramReceived = true;
      selector['Country'] = c2;
    }

    if (c3) {
      paramReceived = true;
      selector['County'] = c3;
    }

    if (c4) {
      paramReceived = true;
      selector['Sub County'] = c4;
    }

    if (c5) {
      paramReceived = true;
      selector['Area'] = c5;
    }

    if (!paramReceived) {
      //Don't send all area info, for performance reasons. 
      // console.log('in if c3: '+c3)
      return [];
    } else {
      // console.log('in else c3: '+c3)
      // console.log(selector)
      return Collections.Areas.find(selector, {});
    }

    this.ready();
  });
  Meteor.publish("browseBlogs", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    parameters.find.isArchived = false;
    var Blogs = Collections.Blogs.find(parameters.find, parameters.options);
    return Blogs;
    this.ready();
  });
  Meteor.publish("total-blogs-count", function (terms) {
    var parameters = queryConstructor(terms);

    if (parameters.fail) {
      return [];
      this.ready();
    }

    parameters.find.isArchived = false;
    Counts.publish(this, "total-blogs-count", Collections.Blogs.find(parameters.find), {
      fields: {
        _id: 1
      }
    });
  });
  Meteor.publish("viewBlog", function (key) {
    if (!key) return [];
    var tmp = Collections.Blogs.findOne({
      slug: key
    }, {
      limit: 1
    });

    if (!tmp || !tmp._id) {
      return []; //Blog not found.
    }

    var notArr = [],
        Blogs = [],
        recentBlogsTmp = [],
        relBlogIds = [],
        i = 0,
        maxRecent = 4;

    try {
      notArr.push(tmp.wpId);
      relBlogIds.push(tmp._id);

      for (i = 0; i < tmp.related.length; i++) {
        notArr.push(tmp.related[i].wpId);
      }

      var filters = {
        "isArchived": false,
        "wpId": {
          $not: {
            $in: notArr
          }
        }
      };
      recentBlogsTmp = Collections.Blogs.find(filters, {
        fields: {
          _id: 1,
          wpId: 1
        },
        limit: maxRecent
      }).fetch();

      for (i = 0; i < recentBlogsTmp.length; i++) {
        relBlogIds.push(recentBlogsTmp[i]._id);
      }

      Blogs = Collections.Blogs.find({
        _id: {
          $in: relBlogIds
        }
      }, {
        limit: maxRecent + 1 // sort:{updatedAt : -1} // Not needed, anyway, it will send records to UI without order. and IDs are definitly specified.

      });
    } catch (e) {
      console.log(e);
    }

    return Blogs;
    this.ready();
  });
  Meteor.publish("Properties", function () {
    var Properties = Collections.Properties;
    var selector = {};
    return Properties.find(selector, {});
    this.ready();
  });
  Meteor.publish("Bids", function () {
    //if (this.userId) {
    //  let Projects = Collections.Bids;
    //  //let selector = {"userId":this.userId};
    //  let selector = {};//We need to query even when he isn't logged in.
    //  return Projects.find(selector, {});
    //}else {
    //    // Declare that no data is being published. If you leave this line
    //    // out, Meteor will never consider the subscription ready because
    //    // it thinks you're using the added/changed/removed interface where
    //    // you have to explicitly call this.ready().
    //    return [];
    //  }
    var Projects = Collections.Bids;
    var selector = {};
    return Projects.find(selector, {});
    this.ready();
  });
  Meteor.publish("MyBids", function () {
    if (this.userId) {
      var Projects = Collections.Bids;
      var selector = {
        "userId": this.userId
      }; //let selector = {};//We need to query even when he isn't logged in.

      return Projects.find(selector, {});
    } else {
      // Declare that no data is being published. If you leave this line
      // out, Meteor will never consider the subscription ready because
      // it thinks you're using the added/changed/removed interface where
      // you have to explicitly call this.ready().
      return [];
    }
  });
  Meteor.publish("Auctions", function () {
    var Projects = Collections.Auctions;
    var selector = {};
    return Projects.find(selector, {});
    this.ready();
  });
  Meteor.publish("Config", function () {
    var Projects = Collections.Config;
    var selector = {};
    return Projects.find(selector, {});
    this.ready();
  }); // Meteor.publish("Payments", function () {
  //
  //     if (this.userId) {
  //         let Payments = Collections.Payments;
  //         let selector = {"userId":this.userId};
  //         //let selector = {};//We need to query even when he isn't logged in.
  //         return Payments.find(selector, {});
  //
  //         this.ready();
  //     }else {
  //         let Payments = Collections.Payments;
  //         let selector = {};
  //         return Payments.find(selector, {});
  //
  //         this.ready();
  //     }
  // });
  //Meteor.publish("MyBids", function () {//NOT WORKING IN PUBLISH, HAS TO DO IN CLIENT
  //
  //  if (this.userId) {//userId is null if no user is logged in.
  //    let Bids = Collections.Bids;
  //    //const userId = Meteor.userId();
  //    let selector = {"userId":this.userId};
  //    return Bids.find(selector, {
  //      transform: function(doc) {
  //        doc.unit = Collections.Units.findOne({
  //          _id: doc.unitId
  //        });
  //        doc.auction = Collections.Auctions.findOne({
  //          _id: doc.auctionId
  //        });
  //        doc.project = Collections.Properties.findOne({
  //          _id: doc.unit.projectId
  //        });
  //        return doc;
  //      },
  //      sort: {
  //        createdAt: -1
  //      }
  //
  //    });
  //  } else {
  //    // Declare that no data is being published. If you leave this line
  //    // out, Meteor will never consider the subscription ready because
  //    // it thinks you're using the added/changed/removed interface where
  //    // you have to explicitly call this.ready().
  //    return [];
  //  }
  //  this.ready();
  //});
  // Meteor.publish('Meteor.users.initials', function ({ userIds }) {
  //     // Validate the arguments to be what we expect
  //     new SimpleSchema({
  //         userIds: { type: [String] }
  //     }).validate({ userIds });
  //
  //     // Select only the users that match the array of IDs passed in
  //     const selector = {
  //         _id: { $in: userIds }
  //     };
  //
  //     // Only return one field, `initials`
  //     const options = {
  //         fields: { initials: 1 }
  //     };
  //
  //     return Meteor.users.find(selector, options);
  // });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"lib":{"routing.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// lib/routing.js                                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var React;
module.link("react", {
  "default": function (v) {
    React = v;
  }
}, 0);
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 1);
var render;
module.link("react-dom", {
  render: function (v) {
    render = v;
  }
}, 2);
var mount;
module.link("react-mounter", {
  mount: function (v) {
    mount = v;
  }
}, 3);
if (Meteor.isClient) Session.set('subscriptionsReady', false); // Search 1000s of houses, apartments & properties for sale and to rent from all leading estate agents
//SpotMyCrib helps you find your dream house in the easiest way possible. You get to set your rent when you apply for the house, apartment or property online with leading estate agents/landlords in Ireland. Experience the safest, transparent and innovative rental process in Ireland.

generalDesc = "Find your dream house in the easiest way possible. Set your rent when you apply for the house, apartment or property online with leading estate agents/landlords in Ireland. Experience the safest, transparent and innovative rental process in Ireland. SpotMyCrib.";
FlowRouter.route('/', {
  name: "home",
  action: function () {
    var Home;
    module.link("../imports/reactui/pages/Home.jsx", {
      "default": function (v) {
        Home = v;
      }
    }, 4);
    if (Meteor.isClient) BlazeLayout.reset();
    clearMeta();
    DocHead.setTitle('SpotMyCrib - Safe and easy rentals');
    DocHead.addMeta({
      name: "description",
      content: generalDesc
    });
    mount(Home, {
      content: 'test'
    });
  }
});
FlowRouter.route('/rent/:slug/:key', {
  name: 'rent',
  action: function (params, queryParams) {
    var LettingDetail;
    module.link("../imports/reactui/pages/LettingDetail.jsx", {
      "default": function (v) {
        LettingDetail = v;
      }
    }, 5);
    if (Meteor.isClient) BlazeLayout.reset();
    mount(LettingDetail);
  }
});
FlowRouter.route('/blog/:pageno?', {
  name: 'bloghome',
  action: function (params, queryParams) {
    var BlogHome;
    module.link("../imports/reactui/pages/BlogHome.jsx", {
      "default": function (v) {
        BlogHome = v;
      }
    }, 6);
    if (Meteor.isClient) BlazeLayout.reset();
    clearMeta();
    DocHead.setTitle('Blog - SpotMyCrib - Property renting tips, management and much more');
    DocHead.addMeta({
      name: "description",
      content: "Browse through the latest property news, renting tips, management and much more."
    });
    mount(BlogHome);
  }
});
FlowRouter.route('/article/:slug', {
  name: 'blogdetail',
  action: function (params, queryParams) {
    var BlogDetail;
    module.link("../imports/reactui/pages/BlogDetail.jsx", {
      "default": function (v) {
        BlogDetail = v;
      }
    }, 7);
    if (Meteor.isClient) BlazeLayout.reset();
    mount(BlogDetail);
  }
});
FlowRouter.route('/letting/:key', {
  name: 'letting',
  action: function (params, queryParams) {
    var LettingDetail;
    module.link("../imports/reactui/pages/LettingDetail.jsx", {
      "default": function (v) {
        LettingDetail = v;
      }
    }, 8);
    if (Meteor.isClient) BlazeLayout.reset();
    mount(LettingDetail);
  }
});
FlowRouter.route('/advertisewithus/:pageno?', {
  name: "advertisewithus",
  action: function (params, queryParams) {
    var AdvertiseWithUs;
    module.link("../imports/reactui/pages/AdvertiseWithUs.jsx", {
      "default": function (v) {
        AdvertiseWithUs = v;
      }
    }, 9);
    var curStep = parseInt(params.pageno);
    if (!curStep) curStep = 1;
    clearMeta();
    var title = "Advertise with us";
    if (curStep == 2) title += ' (step 2 of 3)';
    if (curStep == 3) title += ' (step 3 of 3)';
    DocHead.setTitle(title + ' | SpotMyCrib');
    var description = 'List your property to rent in SpotMyCrib. Let thousands of verified tenants apply for your letting. Choose if you are a landlord, agent or the current tenant looking for a replacement so you can move.';
    DocHead.addMeta({
      name: "description",
      content: description
    });
    var curStepComponent = 'AwsStep1';

    switch (curStep) {
      case 1:
        //advertiseWithUsFormDelayedRan1st = false;
        curStepComponent = 'AwsStep1';
        break;

      case 2:
        curStepComponent = 'AwsStep2';
        break;

      case 3:
        curStepComponent = 'AwsStep3';
        break;
    }

    if (Meteor.isClient) BlazeLayout.reset();
    mount(AdvertiseWithUs, {
      curStepComponent: curStepComponent
    });
  }
});
FlowRouter.route('/b/:slug/:pageno?', {
  name: "b",
  action: function (params, queryParams) {
    var HousesForrent;
    module.link("../imports/reactui/pages/HousesForrent.jsx", {
      "default": function (v) {
        HousesForrent = v;
      }
    }, 10);
    if (Meteor.isClient) BlazeLayout.reset();

    if (!params.slug || params.slug.indexOf('-in-') == -1) {
      var prevRoute = {
        name: 'home',
        args: {
          scrollTo: 0
        }
      };
      if (Meteor.isClient) Session.set('prevRoute', prevRoute);
      FlowRouter.go('pagenotfound');
      return;
    }

    mount(HousesForrent);
  }
});
FlowRouter.route('/joinnow', {
  name: 'joinnow',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      clearMeta();
      DocHead.setTitle('Join Now | SpotMyCrib');
      var description = 'Login to your account or create an account in SpotMyCrib to apply for a letting, update your references and social profiles.';
      DocHead.addMeta({
        name: "description",
        content: description
      });
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'loginPageHorizontal'
      });
    } // BlazeLayout.render('loading');

  }
});
FlowRouter.route('/joinnow-landlord', {
  name: 'joinnowlandlord',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      clearMeta();
      DocHead.setTitle('Landlord Join Now | SpotMyCrib');
      var description = 'Login to your account or create an account in SpotMyCrib to manage your lettings and advertise your property.';
      DocHead.addMeta({
        name: "description",
        content: description
      });
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'loginPageHorizontal',
        dataContext: {
          isLandlordMode: true
        }
      });
    } // BlazeLayout.render('loading');

  }
});
var accountRoutes = FlowRouter.group({
  prefix: '/account',
  name: 'account',
  triggersEnter: [function (context, redirect) {// console.log('running account group triggers');
  }]
});
accountRoutes.route('/myproperies/:pageno?', {
  name: 'account/myProperties',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/myProperties.js");
      clearMeta();
      DocHead.setTitle('My properties | SpotMyCrib Admin');
      DocHead.addMeta({
        name: "description",
        content: "View list of your properties, activate them, print their keys, view their applications, etc."
      });
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'myProperties'
      });
    }
  }
});
accountRoutes.route('/editproperty/:id', {
  name: 'account/editproperty',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/editProperty.js");
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'editProperty'
      });
    }
  }
});
accountRoutes.route('/propertyapplications/:id/:pageno?', {
  name: 'account/propertyApplications',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/propertyApplications.js");
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'propertyApplications'
      });
    }
  }
});
accountRoutes.route('/manageproperty/:id/:pageno?', {
  name: 'account/propertyManage',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/propertyManage.js");
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'propertyManage'
      });
    }
  }
});
accountRoutes.route('/profile', {
  name: 'account/profile',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/profile.js");
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'profile'
      });
    }
  }
});
FlowRouter.route('/lettingprintview/:key', {
  name: 'lettingprintview',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/lettingprintview.js");
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactPlainLayout', {
        templateName: 'lettingprintview'
      });
    }
  }
});
FlowRouter.route('/tenant/:username', {
  name: 'tenant',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/tenant.js");
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'tenant'
      });
    }
  }
});
FlowRouter.route('/tenants/:pageno?', {
  name: 'tenants',
  action: function () {
    if (Meteor.isServer) return;

    if (Meteor.isClient) {
      module.link("../imports/ui/layout/layout.js");
      module.link("../imports/ui/templates/tenants.js");
      DocHead.setTitle('Tenant database | SpotMyCrib');
      var description = 'View list of interested tenant profiles, their references and social profiles. Invite them to apply for your letting advertisement.';
      DocHead.addMeta({
        name: "description",
        content: description
      });
      mount(function () {
        return /*#__PURE__*/React.createElement("span", null);
      });
      BlazeLayout.render('reactLayout', {
        templateName: 'tenants'
      });
    }
  }
});
FlowRouter.notFound = {
  triggersEnter: [function (context, redirect) {
    redirect('/notFound');
  }],
  action: function () {
    console.log('Route not found');
  }
};
FlowRouter.route('/notFound', {
  name: 'notFound',
  action: function () {
    var NotFound;
    module.link("../imports/reactui/layout/NotFound.jsx", {
      "default": function (v) {
        NotFound = v;
      }
    }, 11);
    if (Meteor.isClient) BlazeLayout.reset();
    clearMeta();
    DocHead.setTitle('Page Not Found | SpotMyCrib');
    DocHead.addMeta({
      name: "description",
      content: 'Could not find the page your are looking for, it might be removed. Please try again.'
    });
    mount(NotFound);
  }
});
FlowRouter.route('/about', {
  name: 'about',
  action: function () {
    var About;
    module.link("../imports/reactui/static/About.jsx", {
      "default": function (v) {
        About = v;
      }
    }, 12);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('about');
    mount(About);
  }
});
FlowRouter.route('/careers', {
  name: 'careers',
  action: function () {
    var Careers;
    module.link("../imports/reactui/static/Careers.jsx", {
      "default": function (v) {
        Careers = v;
      }
    }, 13);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('careers');
    mount(Careers);
  }
});
FlowRouter.route('/contactus', {
  name: 'contactus',
  action: function () {
    var ContactUs;
    module.link("../imports/reactui/static/ContactUs.jsx", {
      "default": function (v) {
        ContactUs = v;
      }
    }, 14);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('contactus');
    mount(ContactUs);
  }
});
FlowRouter.route('/cookiepolicy', {
  name: 'cookiepolicy',
  action: function () {
    var CookiePolicy;
    module.link("../imports/reactui/static/CookiePolicy.jsx", {
      "default": function (v) {
        CookiePolicy = v;
      }
    }, 15);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('cookiepolicy');
    mount(CookiePolicy);
  }
});
FlowRouter.route('/faqs', {
  name: 'faqs',
  action: function () {
    var Faqs;
    module.link("../imports/reactui/static/Faqs.jsx", {
      "default": function (v) {
        Faqs = v;
      }
    }, 16);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('faqs');
    mount(Faqs);
  }
});
FlowRouter.route('/gdpr', {
  name: 'gdpr',
  action: function () {
    var Gdpr;
    module.link("../imports/reactui/static/Gdpr.jsx", {
      "default": function (v) {
        Gdpr = v;
      }
    }, 17);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('gdpr');
    mount(Gdpr);
  }
});
FlowRouter.route('/howitworks', {
  name: 'howitworks',
  action: function () {
    var HowItWorks;
    module.link("../imports/reactui/static/HowItWorks.jsx", {
      "default": function (v) {
        HowItWorks = v;
      }
    }, 18);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('howitworks');
    mount(HowItWorks);
  }
});
FlowRouter.route('/privacy', {
  name: 'privacy',
  action: function () {
    var Privacy;
    module.link("../imports/reactui/static/Privacy.jsx", {
      "default": function (v) {
        Privacy = v;
      }
    }, 19);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('privacy');
    mount(Privacy);
  }
});
FlowRouter.route('/terms', {
  name: 'terms',
  action: function () {
    var Terms;
    module.link("../imports/reactui/static/Terms.jsx", {
      "default": function (v) {
        Terms = v;
      }
    }, 20);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('terms');
    mount(Terms);
  }
});
FlowRouter.route('/estateagent', {
  name: 'estateagent',
  action: function () {
    var EstateAgent;
    module.link("../imports/reactui/static/EstateAgent.jsx", {
      "default": function (v) {
        EstateAgent = v;
      }
    }, 21);
    if (Meteor.isClient) BlazeLayout.reset();
    setStaticPageMetaTags('estateagent');
    mount(EstateAgent);
  }
});
generalDesc = "Find your dream house in the easiest way possible. Set your rent when you apply for the house, apartment or property online with leading estate agents/landlords in Ireland. Experience the safest, transparent and innovative rental process in Ireland. SpotMyCrib.";

function setStaticPageMetaTags(pageName) {
  var title = '',
      desc = '';

  switch (pageName) {
    case 'about':
      title = 'About SpotMyCrib';
      desc = "Know more about SpotMyCrib and what inspires us to build the safest, transparent and innovative rental portal in Ireland. Learn more on how we operate and our values. Experience SpotMyCrib.";
      break;

    case 'terms':
      title = 'Terms of Service | SpotMyCrib';
      desc = 'Read our terms and conditions and learn more on how we operate and our values.';
      break;

    case 'faqs':
      title = 'FAQs | SpotMyCrib';
      desc = 'Frequently asked questions by tenants(users) and landlords/estate agents.';
      break;

    case 'privacy':
      title = 'Privacy policy | SpotMyCrib';
      desc = 'Find how we keep your data safe and secure. Read our cookie policy and much more on our privacy policy.';
      break;

    case 'contactus':
      title = 'Contact Us | SpotMyCrib';
      desc = 'Find our contact details and work timings here.';
      break;

    case 'howitworks':
      title = 'How it works | SpotMyCrib';
      desc = 'Find your next dream home fast, easy and simple way.';
      break;

    case 'careers':
      title = 'Careers | SpotMyCrib';
      desc = 'We are hiring! Work in the most innovative online real estate company. '; // import '../static/careers.js';

      break;

    case 'estateagent':
      title = 'Agents/Landlords | SpotMyCrib';
      desc = 'Learn on why you need next generation high tech automated property managment solution. Learn how SpotMyCrib can ease your life with tenant screening, digital leasing, online rent collection and much more. '; // import '../static/careers.js';

      break;

    case 'gdpr':
      title = 'Data Protection / EU GDPR | SpotMyCrib';
      desc = 'An overview of Data Protection and EU GDPR and how we are preparing for it at SpotMyCrib.';
      break;

    case 'cookiepolicy':
      title = 'Cookie Policy | SpotMyCrib';
      desc = 'An overview of our cookie policy and how we use them to provide you with best user experence.';
      break;

    default:
  }

  clearMeta();
  DocHead.setTitle(title);
  DocHead.addMeta({
    name: "description",
    content: desc
  }); ////////////Adding below code only for static

  if (Meteor.isClient) {
    setTimeout(function () {
      try {
        jQuery("html,body").animate({
          scrollTop: 0
        }, 250);
      } catch (e) {
        document.body.scrollTop = document.documentElement.scrollTop = 0;
      }
    }, 2000);
  }
} // FlowRouter.triggers.enter([function(){
//
// }]);
// FlowRouter.go('account/propertyApplications')
// tesing my properties from anonomoues tab to see if login works and if pubs work fine,
//     also if post login , will it automatically update pubs?
//     use ctrl+m to see the records returned by pubs
//FlowRouter.current().route.getName()  to FlowRouter.current().route.name
//Router to FlowRouter
// 1. all routes conversion
// 2. new react header and footer used in home page needs to work
// 3. react ssr work
// 4. performance tuning for pages that are using ssr
// 5. category pages
//
// FlowRouter.route("/", {
//   subscriptions: function() {
//     var selector = {category: {$ne: "private"}};
//     this.register('posts', Meteor.subscribe('posts', selector));
//   },
//   action: function() {
//     ReactLayout.render(BlogLayout, {
//       content: <PostList />
//     });
//   }
// });
// if(Meteor.isServer) {
//     WebApp.connectHandlers.use('/', function(req, res, next) {
//         if(isValidRoute(req.url))
//             return next();
//
//         res.writeHead(404);
//         res.end(SSR.render('404'));
//     });
//
//     var pathToRegexp = Meteor.npmRequire('path-to-regexp')
//
//     function isValidRoute(requestUrl) {
//         for(var i = 0; i < FlowRouter._routes.length; i++)
//             if(pathToRegexp(FlowRouter._routes[i].path).test(requestUrl))
//                 return true;
//
//         return false;
//     }
// }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"common":{"common.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// common/common.js                                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("../imports/api/publications.js");
module.link("../imports/api/profile.js");
module.link("../imports/api/properties.js");
var Meteor;
module.link("meteor/meteor", {
  Meteor: function (v) {
    Meteor = v;
  }
}, 0);
// import '../imports/ui/templates/accounts/signIn/signIn.js'
// import '../imports/ui/templates/accounts/signUp/signUp.js'
// import '../imports/ui/templates/accounts/forgot/forgot.js'
views = {};

views['propertyManage.view'] = function (terms) {
  try {
    // var id = Router.current().params.id
    return {
      find: {
        propertyId: terms.id
      },
      options: {
        limit: 1
      } // sort: {sort: {createdAt: -1}, limit: 1}

    };
  } catch (e) {
    return {
      find: {},
      options: {
        limit: 1
      },
      fail: true
    };
  }
};

views['property.view'] = function (terms) {
  try {
    return {
      find: {
        _id: terms.id
      },
      options: {
        limit: 1
      }
    };
  } catch (e) {
    return {
      find: {},
      options: {
        limit: 1
      },
      fail: true
    };
  }
};

views['PMactivityHistory.view'] = function (terms) {
  try {
    // var id = Router.current().params.id
    var lim = Session.get('resultsPerPage');
    if (!lim) lim = 100;
    return {
      find: {
        propertyId: terms.id
      },
      options: {
        limit: lim,
        sort: {
          createdAt: -1
        }
      } // sort: {sort: {createdAt: -1}, limit: 1}

    };
  } catch (e) {
    return {
      find: {},
      options: {
        limit: 1
      },
      fail: true
    };
  }
};

views['MyProperties.view'] = function (terms) {
  try {
    var resperpage = terms.resperpage;
    if (isNaN(resperpage)) resperpage = 20;
    if (!resperpage) resperpage = 20;
    if (resperpage < 0 || resperpage > 100) resperpage = 20;
    var pg = 1;

    try {
      pg = parseInt(terms.pageno);
    } catch (e) {}

    if (isNaN(pg)) pg = 1;
    var skip = (pg - 1) * resperpage;
    if (isNaN(skip)) skip = 0;
    return {
      find: {},
      options: {
        limit: parseInt(resperpage),
        sort: {
          updatedAt: -1
        },
        skip: parseInt(skip)
      }
    };
  } catch (e) {
    console.log(e);
    return {
      find: {},
      options: {
        limit: 1
      },
      fail: true
    };
  }
};

views['PropertyApplications.view'] = function (terms) {
  try {
    var originalPgSplit = null,
        validOriginalPgSplit = false;

    if (terms.pageno) {
      originalPgSplit = terms.pageno.toString().split('-');

      if (originalPgSplit.length == 2) {
        //if format issue, then reset issue.
        // if inside it means that format is correct, below if will correct data if required.
        validOriginalPgSplit = true;
        if (isNaN(originalPgSplit[0])) originalPgSplit[0] = 1; // if its not a number then reset it.

        if (isNaN(originalPgSplit[1])) originalPgSplit[1] = 1; // if its not a number then reset it.
      }
    }

    if (!validOriginalPgSplit) {
      //invalid originalPgSplit; reset it
      originalPgSplit = [1, 1];
    } //// for property applications


    var resperpage = terms.PAresperpage;
    if (isNaN(resperpage)) resperpage = 20;
    if (!resperpage) resperpage = 20;
    if (resperpage < 0 || resperpage > 100) resperpage = 20;
    var pg = originalPgSplit[0];
    var skip = (pg - 1) * resperpage;
    if (isNaN(skip)) skip = 0;
    var out = {
      id: terms.id,
      options: {
        limit: resperpage
      }
    };
    out.propertyApplications = {
      find: {},
      options: {
        limit: parseInt(resperpage),
        sort: {
          createdAt: -1
        },
        skip: parseInt(skip)
      }
    }; //// for Email Enquiries

    resperpage = terms.EEresperpage;
    if (isNaN(resperpage)) resperpage = 20;
    if (!resperpage) resperpage = 20;
    if (resperpage < 0 || resperpage > 100) resperpage = 20;
    pg = originalPgSplit[1];
    skip = (pg - 1) * resperpage;
    if (isNaN(skip)) skip = 0;
    out.emailEnquiries = {
      find: {},
      options: {
        limit: parseInt(resperpage),
        sort: {
          createdAt: -1
        },
        skip: parseInt(skip)
      }
    };
    return out;
  } catch (e) {
    console.log(e);
    return {
      propertyApplications: {
        find: {},
        options: {
          limit: 1
        },
        fail: true
      },
      emailEnquiries: {
        find: {},
        options: {
          limit: 1
        },
        fail: true
      },
      fail: true
    };
  }
};

views['MyAdvertisements.view'] = function (terms) {
  try {
    var resperpage = terms.resperpage;
    if (isNaN(resperpage)) resperpage = 20;
    if (!resperpage) resperpage = 20;
    if (resperpage < 0 || resperpage > 100) resperpage = 20;
    var pg = 1;

    try {
      pg = parseInt(terms.pageno);
    } catch (e) {}

    if (isNaN(pg)) pg = 1;
    var skip = (pg - 1) * resperpage;
    if (isNaN(skip)) skip = 0;
    return {
      find: {},
      options: {
        limit: parseInt(resperpage),
        sort: {
          updatedAt: -1
        },
        skip: parseInt(skip)
      }
    };
  } catch (e) {
    console.log(e);
    return {
      find: {},
      options: {
        limit: 1
      },
      fail: true
    };
  }
};

views['browseLettings.view'] = function (terms) {
  try {
    var resperpage = terms.resperpage;
    if (isNaN(resperpage)) resperpage = 20;
    if (!resperpage) resperpage = 20;
    if (resperpage < 0 || resperpage > 100) resperpage = 20;
    var slugData = getSlugData(terms.slug, terms.query);
    var find = {};
    if (slugData.area) find['address.area'] = slugData.area;
    if (slugData.county) find['address.county'] = slugData.county;
    if (slugData.propertyType) find['type'] = slugData.propertyType; //.toString().toLowerCase()
    // if(slugData.country) find.address.country=slugData.country;
    // console.log(slugData)

    var bedCount = null;
    if (slugData.bedCount && !isNaN(slugData.bedCount)) bedCount = parseInt(slugData.bedCount);
    var pg = 1;

    try {
      pg = parseInt(terms.pageno);
    } catch (e) {}

    if (isNaN(pg)) pg = 1;
    var skip = (pg - 1) * resperpage;
    if (isNaN(skip)) skip = 0;
    var sortOptions = {
      updatedAt: -1
    };
    if (slugData.luxurySort) sortOptions = {
      rentMonthly: -1
    };else if (slugData.cheapSort) sortOptions = {
      rentMonthly: 1
    };else if (slugData.mostRecentSort) sortOptions = {
      updatedAt: -1
    };else if (slugData.leastRecentSort) sortOptions = {
      updatedAt: 1
    };
    var tmp = [],
        validKeys = null;

    if (terms.propertykey) {
      validKeys = [];
      tmp = terms.propertykey.split('-');

      for (var i = 0; i < tmp.length; i++) {
        if (tmp[i].length == 5) validKeys.push(tmp[i].toUpperCase()); //This is the validation we are doing.
      }
    }

    return {
      find: find,
      propertykey: validKeys,
      minRent: slugData.minRent,
      maxRent: slugData.maxRent,
      minBeds: slugData.minBeds,
      maxBeds: slugData.maxBeds,
      bedCount: bedCount,
      options: {
        limit: parseInt(resperpage),
        sort: sortOptions,
        skip: parseInt(skip)
      }
    };
  } catch (e) {
    console.log(e);
    return {
      find: {},
      options: {
        limit: 1
      },
      fail: true
    };
  }
};

views['browseBlogs.view'] = function (terms) {
  try {
    var resperpage = terms.resperpage;
    if (isNaN(resperpage)) resperpage = 6;
    if (!resperpage) resperpage = 6;
    if (resperpage < 0 || resperpage > 100) resperpage = 6; // if(!terms.slug) throw 'Slug required';

    var find = {}; // if(terms.slug) find['slug']=slug

    var pg = 1;

    try {
      pg = parseInt(terms.pageno);
    } catch (e) {}

    if (isNaN(pg)) pg = 1;
    var skip = (pg - 1) * resperpage;
    if (isNaN(skip)) skip = 0;
    var sortOptions = {
      updatedAt: -1
    };
    return {
      find: find,
      options: {
        limit: parseInt(resperpage),
        sort: sortOptions,
        skip: parseInt(skip)
      }
    };
  } catch (e) {
    console.log(e);
    return {
      find: {},
      options: {
        limit: 1
      },
      fail: true
    };
  }
};

queryConstructor = function (terms) {
  var viewFunction = views[terms.viewName];
  var data = viewFunction(terms);

  if (data.options.limit > 100) {
    data.options.limit = 100;
  }

  return data;
}; //http://www.discovermeteor.com/blog/query-constructors/


function getSlugData(slug, query) {
  //This needs to be seperate on common.
  var propertyType = "";
  var county = "";
  var area = "";
  var maxRent = "";
  var minRent = "";
  var minBeds = "";
  var maxBeds = "";
  var country = "";
  var bedCount = "";
  var luxurySort = "";
  var cheapSort = "";
  var mostRecentSort = "";
  var leastRecentSort = "";
  var range = [{
    cur: "eur",
    min: 0,
    max: 10000
  }];
  var selectedCur = range[0];

  if (query) {
    if (query.minRent) minRent = query.minRent;
    if (query.maxRent) maxRent = query.maxRent;
    if (query.minBeds) minBeds = query.minBeds;
    if (query.maxBeds) maxBeds = query.maxBeds;
    if (query.bedCount) bedCount = query.bedCount;
    if (query.luxurySort) luxurySort = query.luxurySort;
    if (query.cheapSort) cheapSort = query.cheapSort;
    if (query.mostRecentSort) mostRecentSort = query.mostRecentSort;
    if (query.leastRecentSort) leastRecentSort = query.leastRecentSort;
  }

  if (!slug) {
    return {
      country: country,
      county: county,
      area: area,
      minRent: minRent,
      maxRent: maxRent,
      minBeds: minBeds,
      maxBeds: maxBeds,
      bedCount: bedCount,
      luxurySort: luxurySort,
      cheapSort: cheapSort,
      mostRecentSort: mostRecentSort,
      leastRecentSort: leastRecentSort,
      propertyType: propertyType
    };
  }

  if (slug.indexOf('-for-') != -1) {
    propertyType = slug.split('-for-')[0];
    propertyType = propertyType.split('-').join(' ');
  }

  if (slug.indexOf('-in-') != -1) {
    var tmp = slug.split('-in-')[1].split('-');

    switch (tmp.length) {
      case 3:
        country = tmp[2];
        county = tmp[1];
        area = tmp[0];
        break;

      case 2:
        country = tmp[1];
        county = tmp[0];
        break;

      case 1:
        country = tmp[0];
        break;
    }

    if (propertyType) propertyType = propertyType.replace(/_/g, ' ');
    if (county) county = titleCaseAllWords(county.replace(/_/g, ' '));
    if (country) country = titleCaseAllWords(country.replace(/_/g, ' '));
    if (area) area = titleCaseAllWords(area.replace(/_/g, ' '));
  }

  return {
    country: country,
    county: county,
    area: area,
    minRent: minRent,
    maxRent: maxRent,
    minBeds: minBeds,
    maxBeds: maxBeds,
    bedCount: bedCount,
    luxurySort: luxurySort,
    cheapSort: cheapSort,
    mostRecentSort: mostRecentSort,
    leastRecentSort: leastRecentSort,
    propertyType: propertyType
  };
}

function titleCaseAllWords(str) {
  if (!str) return;
  return str.split(' ').map(function (str) {
    return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
  }).join(' '); // var words = str.split(' ')
  // for(var i=0;i<words.length;i++){
  //
  // }
  // return str.charAt(0).toUpperCase() + str.toLowerCase().substring(1);
}

cdnPath = function (url) {
  if (Meteor.settings.public.CDN_ENABLED) {
    return CDN.get_cdn_url() + url; // if(Meteor.isDevelopment || !process.env.GALAXY_APP_VERSION_ID) return `http://d30nklzkhaqiiz.cloudfront.net${url}`;
    //
    // if(url.indexOf('?')!=-1)return `http://d30nklzkhaqiiz.cloudfront.net${url}?_g_app_v_=${process.env.GALAXY_APP_VERSION_ID}`;
    // else return `http://d30nklzkhaqiiz.cloudfront.net${url}&_g_app_v_=${process.env.GALAXY_APP_VERSION_ID}`;
  }

  return url;
};

clearMeta = function () {
  addLangLink();
  if (!Meteor.isClient) return;
  var arr_elms = [];
  arr_elms = document.head.getElementsByTagName("meta"); // This var is reactive

  var c = 0;

  while (arr_elms[c]) {
    //First 3 are default and useful
    // console.log(arr_elms[3])
    if (arr_elms[c].name == "description") document.head.removeChild(arr_elms[c]);
    c++;
  } // console.log('Removed: '+c);
  ///Below code removed extra link hreflang 's


  arr_elms = [];
  arr_elms = document.head.getElementsByTagName("link"); // This var is reactive

  c = 0;

  while (arr_elms[c]) {
    //First 3 are default and useful
    if (arr_elms[c].hreflang) document.head.removeChild(arr_elms[c]);
    c++;
  }
};

addLangLink = function () {
  try {
    // <link rel="alternate" href="https://www.spotmycrib.ie/" hreflang="en-ie" />
    var currentURL = FlowRouter.url(FlowRouter.current().route.name, FlowRouter.current().params, FlowRouter.current().queryParams);
    var linkInfo = {
      rel: "alternate",
      hreflang: "en-ie",
      href: currentURL
    };
    DocHead.addLink(linkInfo);
    if (FlowRouter.current().route.name != 'letting') DocHead.addMeta({
      rel: "canonical",
      href: currentURL
    }); // console.log('In addLang');
  } catch (e) {}
};

fbq = function () {}; //Replacement for FB pixel code
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},{
  "extensions": [
    ".js",
    ".json",
    ".html",
    ".css",
    ".less",
    ".jsx"
  ]
});

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/compatibility/plugins/nouislider/js/nouislider.min.js                                                        //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!
 * Materialize v0.97.3 (http://materializecss.com)
 * Copyright 2014-2015 Materialize
 * MIT License (https://raw.githubusercontent.com/Dogfalo/materialize/master/LICENSE)
 */
/*!
 * Materialize v0.97.2 (http://materializecss.com)
 * Copyright 2014-2015 Materialize
 * MIT License (https://raw.githubusercontent.com/Dogfalo/materialize/master/LICENSE)
 */
/*!
 * Materialize v0.97.1 (http://materializecss.com)
 * Copyright 2014-2015 Materialize
 * MIT License (https://raw.githubusercontent.com/Dogfalo/materialize/master/LICENSE)
 */
// wNumb
(function(){function r(b){return b.split("").reverse().join("")}function s(b,f,c){if((b[f]||b[c])&&b[f]===b[c])throw Error(f);}function v(b,f,c,d,e,p,q,k,l,h,n,a){q=a;var m,g=n="";p&&(a=p(a));if("number"!==typeof a||!isFinite(a))return!1;b&&0===parseFloat(a.toFixed(b))&&(a=0);0>a&&(m=!0,a=Math.abs(a));b&&(p=Math.pow(10,b),a=(Math.round(a*p)/p).toFixed(b));a=a.toString();-1!==a.indexOf(".")&&(b=a.split("."),a=b[0],c&&(n=c+b[1]));f&&(a=r(a).match(/.{1,3}/g),a=r(a.join(r(f))));m&&k&&(g+=k);d&&(g+=d);
m&&l&&(g+=l);g=g+a+n;e&&(g+=e);h&&(g=h(g,q));return g}function w(b,f,c,d,e,h,q,k,l,r,n,a){var m;b="";n&&(a=n(a));if(!a||"string"!==typeof a)return!1;k&&a.substring(0,k.length)===k&&(a=a.replace(k,""),m=!0);d&&a.substring(0,d.length)===d&&(a=a.replace(d,""));l&&a.substring(0,l.length)===l&&(a=a.replace(l,""),m=!0);e&&a.slice(-1*e.length)===e&&(a=a.slice(0,-1*e.length));f&&(a=a.split(f).join(""));c&&(a=a.replace(c,"."));m&&(b+="-");b=Number((b+a).replace(/[^0-9\.\-.]/g,""));q&&(b=q(b));return"number"===
typeof b&&isFinite(b)?b:!1}function x(b){var f,c,d,e={};for(f=0;f<h.length;f+=1)c=h[f],d=b[c],void 0===d?e[c]="negative"!==c||e.negativeBefore?"mark"===c&&"."!==e.thousand?".":!1:"-":"decimals"===c?0<d&&8>d&&(e[c]=d):"encoder"===c||"decoder"===c||"edit"===c||"undo"===c?"function"===typeof d&&(e[c]=d):"string"===typeof d&&(e[c]=d);s(e,"mark","thousand");s(e,"prefix","negative");s(e,"prefix","negativeBefore");return e}function u(b,f,c){var d,e=[];for(d=0;d<h.length;d+=1)e.push(b[h[d]]);e.push(c);return f.apply("",
e)}function t(b){if(!(this instanceof t))return new t(b);"object"===typeof b&&(b=x(b),this.to=function(f){return u(b,v,f)},this.from=function(f){return u(b,w,f)})}var h="decimals thousand mark prefix postfix encoder decoder negativeBefore negative edit undo".split(" ");window.wNumb=t})();


/*! nouislider - 8.0.2 - 2015-07-06 13:22:09 */

/*jslint browser: true */
/*jslint white: true */

(function (factory) {

    if ( typeof define === 'function' && define.amd ) {

        // AMD. Register as an anonymous module.
        define([], factory);

    } else if ( typeof exports === 'object' ) {

        var fs = require('fs');

        // Node/CommonJS
        module.exports = factory();
        module.exports.css = function () {
            return fs.readFileSync(__dirname + '/nouislider.min.css', 'utf8');
        };

    } else {

        // Browser globals
        window.noUiSlider = factory();
    }

}(function( ){

	'use strict';


	// Removes duplicates from an array.
	function unique(array) {
		return array.filter(function(a){
			return !this[a] ? this[a] = true : false;
		}, {});
	}

	// Round a value to the closest 'to'.
	function closest ( value, to ) {
		return Math.round(value / to) * to;
	}

	// Current position of an element relative to the document.
	function offset ( elem ) {

	var rect = elem.getBoundingClientRect(),
		doc = elem.ownerDocument,
		win = doc.defaultView || doc.parentWindow,
		docElem = doc.documentElement,
		xOff = win.pageXOffset;

		// getBoundingClientRect contains left scroll in Chrome on Android.
		// I haven't found a feature detection that proves this. Worst case
		// scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
		if ( /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) ) {
			xOff = 0;
		}

		return {
			top: rect.top + win.pageYOffset - docElem.clientTop,
			left: rect.left + xOff - docElem.clientLeft
		};
	}

	// Checks whether a value is numerical.
	function isNumeric ( a ) {
		return typeof a === 'number' && !isNaN( a ) && isFinite( a );
	}

	// Rounds a number to 7 supported decimals.
	function accurateNumber( number ) {
		var p = Math.pow(10, 7);
		return Number((Math.round(number*p)/p).toFixed(7));
	}

	// Sets a class and removes it after [duration] ms.
	function addClassFor ( element, className, duration ) {
		addClass(element, className);
		setTimeout(function(){
			removeClass(element, className);
		}, duration);
	}

	// Limits a value to 0 - 100
	function limit ( a ) {
		return Math.max(Math.min(a, 100), 0);
	}

	// Wraps a variable as an array, if it isn't one yet.
	function asArray ( a ) {
		return Array.isArray(a) ? a : [a];
	}

	// Counts decimals
	function countDecimals ( numStr ) {
		var pieces = numStr.split(".");
		return pieces.length > 1 ? pieces[1].length : 0;
	}

	// http://youmightnotneedjquery.com/#add_class
	function addClass ( el, className ) {
		if ( el.classList ) {
			el.classList.add(className);
		} else {
			el.className += ' ' + className;
		}
	}

	// http://youmightnotneedjquery.com/#remove_class
	function removeClass ( el, className ) {
		if ( el.classList ) {
			el.classList.remove(className);
		} else {
			el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
		}
	}

	// http://youmightnotneedjquery.com/#has_class
	function hasClass ( el, className ) {
		if ( el.classList ) {
			el.classList.contains(className);
		} else {
			new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
		}
	}


	var
	// Determine the events to bind. IE11 implements pointerEvents without
	// a prefix, which breaks compatibility with the IE10 implementation.
	/** @const */
	actions = window.navigator.pointerEnabled ? {
		start: 'pointerdown',
		move: 'pointermove',
		end: 'pointerup'
	} : window.navigator.msPointerEnabled ? {
		start: 'MSPointerDown',
		move: 'MSPointerMove',
		end: 'MSPointerUp'
	} : {
		start: 'mousedown touchstart',
		move: 'mousemove touchmove',
		end: 'mouseup touchend'
	},
	// Re-usable list of classes;
	/** @const */
	Classes = [
/*  0 */  'noUi-target'
/*  1 */ ,'noUi-base'
/*  2 */ ,'noUi-origin'
/*  3 */ ,'noUi-handle'
/*  4 */ ,'noUi-horizontal'
/*  5 */ ,'noUi-vertical'
/*  6 */ ,'noUi-background'
/*  7 */ ,'noUi-connect'
/*  8 */ ,'noUi-ltr'
/*  9 */ ,'noUi-rtl'
/* 10 */ ,'noUi-dragable'
/* 11 */ ,''
/* 12 */ ,'noUi-state-drag'
/* 13 */ ,''
/* 14 */ ,'noUi-state-tap'
/* 15 */ ,'noUi-active'
/* 16 */ ,''
/* 17 */ ,'noUi-stacking'
	];


// Value calculation

	// Determine the size of a sub-range in relation to a full range.
	function subRangeRatio ( pa, pb ) {
		return (100 / (pb - pa));
	}

	// (percentage) How many percent is this value of this range?
	function fromPercentage ( range, value ) {
		return (value * 100) / ( range[1] - range[0] );
	}

	// (percentage) Where is this value on this range?
	function toPercentage ( range, value ) {
		return fromPercentage( range, range[0] < 0 ?
			value + Math.abs(range[0]) :
				value - range[0] );
	}

	// (value) How much is this percentage on this range?
	function isPercentage ( range, value ) {
		return ((value * ( range[1] - range[0] )) / 100) + range[0];
	}


// Range conversion

	function getJ ( value, arr ) {

		var j = 1;

		while ( value >= arr[j] ){
			j += 1;
		}

		return j;
	}

	// (percentage) Input a value, find where, on a scale of 0-100, it applies.
	function toStepping ( xVal, xPct, value ) {

		if ( value >= xVal.slice(-1)[0] ){
			return 100;
		}

		var j = getJ( value, xVal ), va, vb, pa, pb;

		va = xVal[j-1];
		vb = xVal[j];
		pa = xPct[j-1];
		pb = xPct[j];

		return pa + (toPercentage([va, vb], value) / subRangeRatio (pa, pb));
	}

	// (value) Input a percentage, find where it is on the specified range.
	function fromStepping ( xVal, xPct, value ) {

		// There is no range group that fits 100
		if ( value >= 100 ){
			return xVal.slice(-1)[0];
		}

		var j = getJ( value, xPct ), va, vb, pa, pb;

		va = xVal[j-1];
		vb = xVal[j];
		pa = xPct[j-1];
		pb = xPct[j];

		return isPercentage([va, vb], (value - pa) * subRangeRatio (pa, pb));
	}

	// (percentage) Get the step that applies at a certain value.
	function getStep ( xPct, xSteps, snap, value ) {

		if ( value === 100 ) {
			return value;
		}

		var j = getJ( value, xPct ), a, b;

		// If 'snap' is set, steps are used as fixed points on the slider.
		if ( snap ) {

			a = xPct[j-1];
			b = xPct[j];

			// Find the closest position, a or b.
			if ((value - a) > ((b-a)/2)){
				return b;
			}

			return a;
		}

		if ( !xSteps[j-1] ){
			return value;
		}

		return xPct[j-1] + closest(
			value - xPct[j-1],
			xSteps[j-1]
		);
	}


// Entry parsing

	function handleEntryPoint ( index, value, that ) {

		var percentage;

		// Wrap numerical input in an array.
		if ( typeof value === "number" ) {
			value = [value];
		}

		// Reject any invalid input, by testing whether value is an array.
		if ( Object.prototype.toString.call( value ) !== '[object Array]' ){
			throw new Error("noUiSlider: 'range' contains invalid value.");
		}

		// Covert min/max syntax to 0 and 100.
		if ( index === 'min' ) {
			percentage = 0;
		} else if ( index === 'max' ) {
			percentage = 100;
		} else {
			percentage = parseFloat( index );
		}

		// Check for correct input.
		if ( !isNumeric( percentage ) || !isNumeric( value[0] ) ) {
			throw new Error("noUiSlider: 'range' value isn't numeric.");
		}

		// Store values.
		that.xPct.push( percentage );
		that.xVal.push( value[0] );

		// NaN will evaluate to false too, but to keep
		// logging clear, set step explicitly. Make sure
		// not to override the 'step' setting with false.
		if ( !percentage ) {
			if ( !isNaN( value[1] ) ) {
				that.xSteps[0] = value[1];
			}
		} else {
			that.xSteps.push( isNaN(value[1]) ? false : value[1] );
		}
	}

	function handleStepPoint ( i, n, that ) {

		// Ignore 'false' stepping.
		if ( !n ) {
			return true;
		}

		// Factor to range ratio
		that.xSteps[i] = fromPercentage([
			 that.xVal[i]
			,that.xVal[i+1]
		], n) / subRangeRatio (
			that.xPct[i],
			that.xPct[i+1] );
	}


// Interface

	// The interface to Spectrum handles all direction-based
	// conversions, so the above values are unaware.

	function Spectrum ( entry, snap, direction, singleStep ) {

		this.xPct = [];
		this.xVal = [];
		this.xSteps = [ singleStep || false ];
		this.xNumSteps = [ false ];

		this.snap = snap;
		this.direction = direction;

		var index, ordered = [ /* [0, 'min'], [1, '50%'], [2, 'max'] */ ];

		// Map the object keys to an array.
		for ( index in entry ) {
			if ( entry.hasOwnProperty(index) ) {
				ordered.push([entry[index], index]);
			}
		}

		// Sort all entries by value (numeric sort).
		ordered.sort(function(a, b) { return a[0] - b[0]; });

		// Convert all entries to subranges.
		for ( index = 0; index < ordered.length; index++ ) {
			handleEntryPoint(ordered[index][1], ordered[index][0], this);
		}

		// Store the actual step values.
		// xSteps is sorted in the same order as xPct and xVal.
		this.xNumSteps = this.xSteps.slice(0);

		// Convert all numeric steps to the percentage of the subrange they represent.
		for ( index = 0; index < this.xNumSteps.length; index++ ) {
			handleStepPoint(index, this.xNumSteps[index], this);
		}
	}

	Spectrum.prototype.getMargin = function ( value ) {
		return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;
	};

	Spectrum.prototype.toStepping = function ( value ) {

		value = toStepping( this.xVal, this.xPct, value );

		// Invert the value if this is a right-to-left slider.
		if ( this.direction ) {
			value = 100 - value;
		}

		return value;
	};

	Spectrum.prototype.fromStepping = function ( value ) {

		// Invert the value if this is a right-to-left slider.
		if ( this.direction ) {
			value = 100 - value;
		}

		return accurateNumber(fromStepping( this.xVal, this.xPct, value ));
	};

	Spectrum.prototype.getStep = function ( value ) {

		// Find the proper step for rtl sliders by search in inverse direction.
		// Fixes issue #262.
		if ( this.direction ) {
			value = 100 - value;
		}

		value = getStep(this.xPct, this.xSteps, this.snap, value );

		if ( this.direction ) {
			value = 100 - value;
		}

		return value;
	};

	Spectrum.prototype.getApplicableStep = function ( value ) {

		// If the value is 100%, return the negative step twice.
		var j = getJ(value, this.xPct), offset = value === 100 ? 2 : 1;
		return [this.xNumSteps[j-2], this.xVal[j-offset], this.xNumSteps[j-offset]];
	};

	// Outside testing
	Spectrum.prototype.convert = function ( value ) {
		return this.getStep(this.toStepping(value));
	};

/*	Every input option is tested and parsed. This'll prevent
	endless validation in internal methods. These tests are
	structured with an item for every option available. An
	option can be marked as required by setting the 'r' flag.
	The testing function is provided with three arguments:
		- The provided value for the option;
		- A reference to the options object;
		- The name for the option;

	The testing function returns false when an error is detected,
	or true when everything is OK. It can also modify the option
	object, to make sure all values can be correctly looped elsewhere. */

	var defaultFormatter = { 'to': function( value ){
		return value.toFixed(2);
	}, 'from': Number };

	function testStep ( parsed, entry ) {

		if ( !isNumeric( entry ) ) {
			throw new Error("noUiSlider: 'step' is not numeric.");
		}

		// The step option can still be used to set stepping
		// for linear sliders. Overwritten if set in 'range'.
		parsed.singleStep = entry;
	}

	function testRange ( parsed, entry ) {

		// Filter incorrect input.
		if ( typeof entry !== 'object' || Array.isArray(entry) ) {
			throw new Error("noUiSlider: 'range' is not an object.");
		}

		// Catch missing start or end.
		if ( entry.min === undefined || entry.max === undefined ) {
			throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");
		}

		parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.dir, parsed.singleStep);
	}

	function testStart ( parsed, entry ) {

		entry = asArray(entry);

		// Validate input. Values aren't tested, as the public .val method
		// will always provide a valid location.
		if ( !Array.isArray( entry ) || !entry.length || entry.length > 2 ) {
			throw new Error("noUiSlider: 'start' option is incorrect.");
		}

		// Store the number of handles.
		parsed.handles = entry.length;

		// When the slider is initialized, the .val method will
		// be called with the start options.
		parsed.start = entry;
	}

	function testSnap ( parsed, entry ) {

		// Enforce 100% stepping within subranges.
		parsed.snap = entry;

		if ( typeof entry !== 'boolean' ){
			throw new Error("noUiSlider: 'snap' option must be a boolean.");
		}
	}

	function testAnimate ( parsed, entry ) {

		// Enforce 100% stepping within subranges.
		parsed.animate = entry;

		if ( typeof entry !== 'boolean' ){
			throw new Error("noUiSlider: 'animate' option must be a boolean.");
		}
	}

	function testConnect ( parsed, entry ) {

		if ( entry === 'lower' && parsed.handles === 1 ) {
			parsed.connect = 1;
		} else if ( entry === 'upper' && parsed.handles === 1 ) {
			parsed.connect = 2;
		} else if ( entry === true && parsed.handles === 2 ) {
			parsed.connect = 3;
		} else if ( entry === false ) {
			parsed.connect = 0;
		} else {
			throw new Error("noUiSlider: 'connect' option doesn't match handle count.");
		}
	}

	function testOrientation ( parsed, entry ) {

		// Set orientation to an a numerical value for easy
		// array selection.
		switch ( entry ){
		  case 'horizontal':
			parsed.ort = 0;
			break;
		  case 'vertical':
			parsed.ort = 1;
			break;
		  default:
			throw new Error("noUiSlider: 'orientation' option is invalid.");
		}
	}

	function testMargin ( parsed, entry ) {

		if ( !isNumeric(entry) ){
			throw new Error("noUiSlider: 'margin' option must be numeric.");
		}

		parsed.margin = parsed.spectrum.getMargin(entry);

		if ( !parsed.margin ) {
			throw new Error("noUiSlider: 'margin' option is only supported on linear sliders.");
		}
	}

	function testLimit ( parsed, entry ) {

		if ( !isNumeric(entry) ){
			throw new Error("noUiSlider: 'limit' option must be numeric.");
		}

		parsed.limit = parsed.spectrum.getMargin(entry);

		if ( !parsed.limit ) {
			throw new Error("noUiSlider: 'limit' option is only supported on linear sliders.");
		}
	}

	function testDirection ( parsed, entry ) {

		// Set direction as a numerical value for easy parsing.
		// Invert connection for RTL sliders, so that the proper
		// handles get the connect/background classes.
		switch ( entry ) {
		  case 'ltr':
			parsed.dir = 0;
			break;
		  case 'rtl':
			parsed.dir = 1;
			parsed.connect = [0,2,1,3][parsed.connect];
			break;
		  default:
			throw new Error("noUiSlider: 'direction' option was not recognized.");
		}
	}

	function testBehaviour ( parsed, entry ) {

		// Make sure the input is a string.
		if ( typeof entry !== 'string' ) {
			throw new Error("noUiSlider: 'behaviour' must be a string containing options.");
		}

		// Check if the string contains any keywords.
		// None are required.
		var tap = entry.indexOf('tap') >= 0,
			drag = entry.indexOf('drag') >= 0,
			fixed = entry.indexOf('fixed') >= 0,
			snap = entry.indexOf('snap') >= 0;

		parsed.events = {
			tap: tap || snap,
			drag: drag,
			fixed: fixed,
			snap: snap
		};
	}

	function testFormat ( parsed, entry ) {

		parsed.format = entry;

		// Any object with a to and from method is supported.
		if ( typeof entry.to === 'function' && typeof entry.from === 'function' ) {
			return true;
		}

		throw new Error( "noUiSlider: 'format' requires 'to' and 'from' methods.");
	}

	// Test all developer settings and parse to assumption-safe values.
	function testOptions ( options ) {

		var parsed = {
			margin: 0,
			limit: 0,
			animate: true,
			format: defaultFormatter
		}, tests;

		// Tests are executed in the order they are presented here.
		tests = {
			'step': { r: false, t: testStep },
			'start': { r: true, t: testStart },
			'connect': { r: true, t: testConnect },
			'direction': { r: true, t: testDirection },
			'snap': { r: false, t: testSnap },
			'animate': { r: false, t: testAnimate },
			'range': { r: true, t: testRange },
			'orientation': { r: false, t: testOrientation },
			'margin': { r: false, t: testMargin },
			'limit': { r: false, t: testLimit },
			'behaviour': { r: true, t: testBehaviour },
			'format': { r: false, t: testFormat }
		};

		var defaults = {
			'connect': false,
			'direction': 'ltr',
			'behaviour': 'tap',
			'orientation': 'horizontal'
		};

		// Set defaults where applicable.
		Object.keys(defaults).forEach(function ( name ) {
			if ( options[name] === undefined ) {
				options[name] = defaults[name];
			}
		});

		// Run all options through a testing mechanism to ensure correct
		// input. It should be noted that options might get modified to
		// be handled properly. E.g. wrapping integers in arrays.
		Object.keys(tests).forEach(function( name ){

			var test = tests[name];

			// If the option isn't set, but it is required, throw an error.
			if ( options[name] === undefined ) {

				if ( test.r ) {
					throw new Error("noUiSlider: '" + name + "' is required.");
				}

				return true;
			}

			test.t( parsed, options[name] );
		});

		// Forward pips options
		parsed.pips = options.pips;

		// Pre-define the styles.
		parsed.style = parsed.ort ? 'top' : 'left';

		return parsed;
	}


	// Delimit proposed values for handle positions.
	function getPositions ( a, b, delimit ) {

		// Add movement to current position.
		var c = a + b[0], d = a + b[1];

		// Only alter the other position on drag,
		// not on standard sliding.
		if ( delimit ) {
			if ( c < 0 ) {
				d += Math.abs(c);
			}
			if ( d > 100 ) {
				c -= ( d - 100 );
			}

			// Limit values to 0 and 100.
			return [limit(c), limit(d)];
		}

		return [c,d];
	}

	// Provide a clean event with standardized offset values.
	function fixEvent ( e ) {

		// Prevent scrolling and panning on touch events, while
		// attempting to slide. The tap event also depends on this.
		e.preventDefault();

		// Filter the event to register the type, which can be
		// touch, mouse or pointer. Offset changes need to be
		// made on an event specific basis.
		var touch = e.type.indexOf('touch') === 0,
			mouse = e.type.indexOf('mouse') === 0,
			pointer = e.type.indexOf('pointer') === 0,
			x,y, event = e;

		// IE10 implemented pointer events with a prefix;
		if ( e.type.indexOf('MSPointer') === 0 ) {
			pointer = true;
		}

		if ( touch ) {
			// noUiSlider supports one movement at a time,
			// so we can select the first 'changedTouch'.
			x = e.changedTouches[0].pageX;
			y = e.changedTouches[0].pageY;
		}

		if ( mouse || pointer ) {
			x = e.clientX + window.pageXOffset;
			y = e.clientY + window.pageYOffset;
		}

		event.points = [x, y];
		event.cursor = mouse || pointer; // Fix #435

		return event;
	}

	// Append a handle to the base.
	function addHandle ( direction, index ) {

		var origin = document.createElement('div'),
			handle = document.createElement('div'),
			additions = [ '-lower', '-upper' ];

		if ( direction ) {
			additions.reverse();
		}

		addClass(handle, Classes[3]);
		addClass(handle, Classes[3] + additions[index]);

		addClass(origin, Classes[2]);
		origin.appendChild(handle);

		return origin;
	}

	// Add the proper connection classes.
	function addConnection ( connect, target, handles ) {

		// Apply the required connection classes to the elements
		// that need them. Some classes are made up for several
		// segments listed in the class list, to allow easy
		// renaming and provide a minor compression benefit.
		switch ( connect ) {
			case 1:	addClass(target, Classes[7]);
					addClass(handles[0], Classes[6]);
					break;
			case 3: addClass(handles[1], Classes[6]);
					/* falls through */
			case 2: addClass(handles[0], Classes[7]);
					/* falls through */
			case 0: addClass(target, Classes[6]);
					break;
		}
	}

	// Add handles to the slider base.
	function addHandles ( nrHandles, direction, base ) {

		var index, handles = [];

		// Append handles.
		for ( index = 0; index < nrHandles; index += 1 ) {

			// Keep a list of all added handles.
			handles.push( base.appendChild(addHandle( direction, index )) );
		}

		return handles;
	}

	// Initialize a single slider.
	function addSlider ( direction, orientation, target ) {

		// Apply classes and data to the target.
		addClass(target, Classes[0]);
		addClass(target, Classes[8 + direction]);
		addClass(target, Classes[4 + orientation]);

		var div = document.createElement('div');
		addClass(div, Classes[1]);
		target.appendChild(div);
		return div;
	}


function closure ( target, options ){

	// All variables local to 'closure' are prefixed with 'scope_'
	var scope_Target = target,
		scope_Locations = [-1, -1],
		scope_Base,
		scope_Handles,
		scope_Spectrum = options.spectrum,
		scope_Values = [],
		scope_Events = {};


	function getGroup ( mode, values, stepped ) {

		// Use the range.
		if ( mode === 'range' || mode === 'steps' ) {
			return scope_Spectrum.xVal;
		}

		if ( mode === 'count' ) {

			// Divide 0 - 100 in 'count' parts.
			var spread = ( 100 / (values-1) ), v, i = 0;
			values = [];

			// List these parts and have them handled as 'positions'.
			while ((v=i++*spread) <= 100 ) {
				values.push(v);
			}

			mode = 'positions';
		}

		if ( mode === 'positions' ) {

			// Map all percentages to on-range values.
			return values.map(function( value ){
				return scope_Spectrum.fromStepping( stepped ? scope_Spectrum.getStep( value ) : value );
			});
		}

		if ( mode === 'values' ) {

			// If the value must be stepped, it needs to be converted to a percentage first.
			if ( stepped ) {

				return values.map(function( value ){

					// Convert to percentage, apply step, return to value.
					return scope_Spectrum.fromStepping( scope_Spectrum.getStep( scope_Spectrum.toStepping( value ) ) );
				});

			}

			// Otherwise, we can simply use the values.
			return values;
		}
	}

	function generateSpread ( density, mode, group ) {

		var originalSpectrumDirection = scope_Spectrum.direction,
			indexes = {},
			firstInRange = scope_Spectrum.xVal[0],
			lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length-1],
			ignoreFirst = false,
			ignoreLast = false,
			prevPct = 0;

		// This function loops the spectrum in an ltr linear fashion,
		// while the toStepping method is direction aware. Trick it into
		// believing it is ltr.
		scope_Spectrum.direction = 0;

		// Create a copy of the group, sort it and filter away all duplicates.
		group = unique(group.slice().sort(function(a, b){ return a - b; }));

		// Make sure the range starts with the first element.
		if ( group[0] !== firstInRange ) {
			group.unshift(firstInRange);
			ignoreFirst = true;
		}

		// Likewise for the last one.
		if ( group[group.length - 1] !== lastInRange ) {
			group.push(lastInRange);
			ignoreLast = true;
		}

		group.forEach(function ( current, index ) {

			// Get the current step and the lower + upper positions.
			var step, i, q,
				low = current,
				high = group[index+1],
				newPct, pctDifference, pctPos, type,
				steps, realSteps, stepsize;

			// When using 'steps' mode, use the provided steps.
			// Otherwise, we'll step on to the next subrange.
			if ( mode === 'steps' ) {
				step = scope_Spectrum.xNumSteps[ index ];
			}

			// Default to a 'full' step.
			if ( !step ) {
				step = high-low;
			}

			// Low can be 0, so test for false. If high is undefined,
			// we are at the last subrange. Index 0 is already handled.
			if ( low === false || high === undefined ) {
				return;
			}

			// Find all steps in the subrange.
			for ( i = low; i <= high; i += step ) {

				// Get the percentage value for the current step,
				// calculate the size for the subrange.
				newPct = scope_Spectrum.toStepping( i );
				pctDifference = newPct - prevPct;

				steps = pctDifference / density;
				realSteps = Math.round(steps);

				// This ratio represents the ammount of percentage-space a point indicates.
				// For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-devided.
				// Round the percentage offset to an even number, then divide by two
				// to spread the offset on both sides of the range.
				stepsize = pctDifference/realSteps;

				// Divide all points evenly, adding the correct number to this subrange.
				// Run up to <= so that 100% gets a point, event if ignoreLast is set.
				for ( q = 1; q <= realSteps; q += 1 ) {

					// The ratio between the rounded value and the actual size might be ~1% off.
					// Correct the percentage offset by the number of points
					// per subrange. density = 1 will result in 100 points on the
					// full range, 2 for 50, 4 for 25, etc.
					pctPos = prevPct + ( q * stepsize );
					indexes[pctPos.toFixed(5)] = ['x', 0];
				}

				// Determine the point type.
				type = (group.indexOf(i) > -1) ? 1 : ( mode === 'steps' ? 2 : 0 );

				// Enforce the 'ignoreFirst' option by overwriting the type for 0.
				if ( !index && ignoreFirst ) {
					type = 0;
				}

				if ( !(i === high && ignoreLast)) {
					// Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
					indexes[newPct.toFixed(5)] = [i, type];
				}

				// Update the percentage count.
				prevPct = newPct;
			}
		});

		// Reset the spectrum.
		scope_Spectrum.direction = originalSpectrumDirection;

		return indexes;
	}

	function addMarking ( spread, filterFunc, formatter ) {

		var style = ['horizontal', 'vertical'][options.ort],
			element = document.createElement('div');

		addClass(element, 'noUi-pips');
		addClass(element, 'noUi-pips-' + style);

		function getSize( type ){
			return [ '-normal', '-large', '-sub' ][type];
		}

		function getTags( offset, source, values ) {
			return 'class="' + source + ' ' +
				source + '-' + style + ' ' +
				source + getSize(values[1]) +
				'" style="' + options.style + ': ' + offset + '%"';
		}

		function addSpread ( offset, values ){

			if ( scope_Spectrum.direction ) {
				offset = 100 - offset;
			}

			// Apply the filter function, if it is set.
			values[1] = (values[1] && filterFunc) ? filterFunc(values[0], values[1]) : values[1];

			// Add a marker for every point
			element.innerHTML += '<div ' + getTags(offset, 'noUi-marker', values) + '></div>';

			// Values are only appended for points marked '1' or '2'.
			if ( values[1] ) {
				element.innerHTML += '<div '+getTags(offset, 'noUi-value', values)+'>' + formatter.to(values[0]) + '</div>';
			}
		}

		// Append all points.
		Object.keys(spread).forEach(function(a){
			addSpread(a, spread[a]);
		});

		return element;
	}

	function pips ( grid ) {

	var mode = grid.mode,
		density = grid.density || 1,
		filter = grid.filter || false,
		values = grid.values || false,
		stepped = grid.stepped || false,
		group = getGroup( mode, values, stepped ),
		spread = generateSpread( density, mode, group ),
		format = grid.format || {
			to: Math.round
		};

		return scope_Target.appendChild(addMarking(
			spread,
			filter,
			format
		));
	}


	// Shorthand for base dimensions.
	function baseSize ( ) {
		return scope_Base['offset' + ['Width', 'Height'][options.ort]];
	}

	// External event handling
	function fireEvent ( event, handleNumber ) {

		if ( handleNumber !== undefined ) {
			handleNumber = Math.abs(handleNumber - options.dir);
		}

		Object.keys(scope_Events).forEach(function( targetEvent ) {

			var eventType = targetEvent.split('.')[0];

			if ( event === eventType ) {
				scope_Events[targetEvent].forEach(function( callback ) {
					// .reverse is in place
					// Return values as array, so arg_1[arg_2] is always valid.
					callback( asArray(valueGet()), handleNumber, inSliderOrder(Array.prototype.slice.call(scope_Values)) );
				});
			}
		});
	}

	// Returns the input array, respecting the slider direction configuration.
	function inSliderOrder ( values ) {

		// If only one handle is used, return a single value.
		if ( values.length === 1 ){
			return values[0];
		}

		if ( options.dir ) {
			return values.reverse();
		}

		return values;
	}


	// Handler for attaching events trough a proxy.
	function attach ( events, element, callback, data ) {

		// This function can be used to 'filter' events to the slider.
		// element is a node, not a nodeList

		var method = function ( e ){

			if ( scope_Target.hasAttribute('disabled') ) {
				return false;
			}

			// Stop if an active 'tap' transition is taking place.
			if ( hasClass(scope_Target, Classes[14]) ) {
				return false;
			}

			e = fixEvent(e);

			// Ignore right or middle clicks on start #454
			if ( events === actions.start && e.buttons !== undefined && e.buttons > 1 ) {
				return false;
			}

			e.calcPoint = e.points[ options.ort ];

			// Call the event handler with the event [ and additional data ].
			callback ( e, data );

		}, methods = [];

		// Bind a closure on the target for every event type.
		events.split(' ').forEach(function( eventName ){
			element.addEventListener(eventName, method, false);
			methods.push([eventName, method]);
		});

		return methods;
	}

	// Handle movement on document for handle and range drag.
	function move ( event, data ) {

		var handles = data.handles || scope_Handles, positions, state = false,
			proposal = ((event.calcPoint - data.start) * 100) / baseSize(),
			handleNumber = handles[0] === scope_Handles[0] ? 0 : 1, i;

		// Calculate relative positions for the handles.
		positions = getPositions( proposal, data.positions, handles.length > 1);

		state = setHandle ( handles[0], positions[handleNumber], handles.length === 1 );

		if ( handles.length > 1 ) {

			state = setHandle ( handles[1], positions[handleNumber?0:1], false ) || state;

			if ( state ) {
				// fire for both handles
				for ( i = 0; i < data.handles.length; i++ ) {
					fireEvent('slide', i);
				}
			}
		} else if ( state ) {
			// Fire for a single handle
			fireEvent('slide', handleNumber);
		}
	}

	// Unbind move events on document, call callbacks.
	function end ( event, data ) {

		// The handle is no longer active, so remove the class.
		var active = scope_Base.getElementsByClassName(Classes[15]),
			handleNumber = data.handles[0] === scope_Handles[0] ? 0 : 1;

		if ( active.length ) {
			removeClass(active[0], Classes[15]);
		}

		// Remove cursor styles and text-selection events bound to the body.
		if ( event.cursor ) {
			document.body.style.cursor = '';
			document.body.removeEventListener('selectstart', document.body.noUiListener);
		}

		var d = document.documentElement;

		// Unbind the move and end events, which are added on 'start'.
		d.noUiListeners.forEach(function( c ) {
			d.removeEventListener(c[0], c[1]);
		});

		// Remove dragging class.
		removeClass(scope_Target, Classes[12]);

		// Fire the change and set events.
		fireEvent('set', handleNumber);
		fireEvent('change', handleNumber);
	}

	// Bind move events on document.
	function start ( event, data ) {

		var d = document.documentElement;

		// Mark the handle as 'active' so it can be styled.
		if ( data.handles.length === 1 ) {
			addClass(data.handles[0].children[0], Classes[15]);

			// Support 'disabled' handles
			if ( data.handles[0].hasAttribute('disabled') ) {
				return false;
			}
		}

		// A drag should never propagate up to the 'tap' event.
		event.stopPropagation();

		// Attach the move and end events.
		var moveEvent = attach(actions.move, d, move, {
			start: event.calcPoint,
			handles: data.handles,
			positions: [
				scope_Locations[0],
				scope_Locations[scope_Handles.length - 1]
			]
		}), endEvent = attach(actions.end, d, end, {
			handles: data.handles
		});

		d.noUiListeners = moveEvent.concat(endEvent);

		// Text selection isn't an issue on touch devices,
		// so adding cursor styles can be skipped.
		if ( event.cursor ) {

			// Prevent the 'I' cursor and extend the range-drag cursor.
			document.body.style.cursor = getComputedStyle(event.target).cursor;

			// Mark the target with a dragging state.
			if ( scope_Handles.length > 1 ) {
				addClass(scope_Target, Classes[12]);
			}

			var f = function(){
				return false;
			};

			document.body.noUiListener = f;

			// Prevent text selection when dragging the handles.
			document.body.addEventListener('selectstart', f, false);
		}
	}

	// Move closest handle to tapped location.
	function tap ( event ) {

		var location = event.calcPoint, total = 0, handleNumber, to;

		// The tap event shouldn't propagate up and cause 'edge' to run.
		event.stopPropagation();

		// Add up the handle offsets.
		scope_Handles.forEach(function(a){
			total += offset(a)[ options.style ];
		});

		// Find the handle closest to the tapped position.
		handleNumber = ( location < total/2 || scope_Handles.length === 1 ) ? 0 : 1;

		location -= offset(scope_Base)[ options.style ];

		// Calculate the new position.
		to = ( location * 100 ) / baseSize();

		if ( !options.events.snap ) {
			// Flag the slider as it is now in a transitional state.
			// Transition takes 300 ms, so re-enable the slider afterwards.
			addClassFor( scope_Target, Classes[14], 300 );
		}

		// Support 'disabled' handles
		if ( scope_Handles[handleNumber].hasAttribute('disabled') ) {
			return false;
		}

		// Find the closest handle and calculate the tapped point.
		// The set handle to the new position.
		setHandle( scope_Handles[handleNumber], to );

		fireEvent('slide', handleNumber);
		fireEvent('set', handleNumber);
		fireEvent('change', handleNumber);

		if ( options.events.snap ) {
			start(event, { handles: [scope_Handles[total]] });
		}
	}

	// Attach events to several slider parts.
	function events ( behaviour ) {

		var i, drag;

		// Attach the standard drag event to the handles.
		if ( !behaviour.fixed ) {

			for ( i = 0; i < scope_Handles.length; i += 1 ) {

				// These events are only bound to the visual handle
				// element, not the 'real' origin element.
				attach ( actions.start, scope_Handles[i].children[0], start, {
					handles: [ scope_Handles[i] ]
				});
			}
		}

		// Attach the tap event to the slider base.
		if ( behaviour.tap ) {

			attach ( actions.start, scope_Base, tap, {
				handles: scope_Handles
			});
		}

		// Make the range dragable.
		if ( behaviour.drag ){

			drag = [scope_Base.getElementsByClassName( Classes[7] )[0]];
			addClass(drag[0], Classes[10]);

			// When the range is fixed, the entire range can
			// be dragged by the handles. The handle in the first
			// origin will propagate the start event upward,
			// but it needs to be bound manually on the other.
			if ( behaviour.fixed ) {
				drag.push(scope_Handles[(drag[0] === scope_Handles[0] ? 1 : 0)].children[0]);
			}

			drag.forEach(function( element ) {
				attach ( actions.start, element, start, {
					handles: scope_Handles
				});
			});
		}
	}


	// Test suggested values and apply margin, step.
	function setHandle ( handle, to, noLimitOption ) {

		var trigger = handle !== scope_Handles[0] ? 1 : 0,
			lowerMargin = scope_Locations[0] + options.margin,
			upperMargin = scope_Locations[1] - options.margin,
			lowerLimit = scope_Locations[0] + options.limit,
			upperLimit = scope_Locations[1] - options.limit;

		// For sliders with multiple handles,
		// limit movement to the other handle.
		// Apply the margin option by adding it to the handle positions.
		if ( scope_Handles.length > 1 ) {
			to = trigger ? Math.max( to, lowerMargin ) : Math.min( to, upperMargin );
		}

		// The limit option has the opposite effect, limiting handles to a
		// maximum distance from another. Limit must be > 0, as otherwise
		// handles would be unmoveable. 'noLimitOption' is set to 'false'
		// for the .val() method, except for pass 4/4.
		if ( noLimitOption !== false && options.limit && scope_Handles.length > 1 ) {
			to = trigger ? Math.min ( to, lowerLimit ) : Math.max( to, upperLimit );
		}

		// Handle the step option.
		to = scope_Spectrum.getStep( to );

		// Limit to 0/100 for .val input, trim anything beyond 7 digits, as
		// JavaScript has some issues in its floating point implementation.
		to = limit(parseFloat(to.toFixed(7)));

		// Return false if handle can't move.
		if ( to === scope_Locations[trigger] ) {
			return false;
		}

		// Set the handle to the new position.
		handle.style[options.style] = to + '%';

		// Force proper handle stacking
		if ( !handle.previousSibling ) {
			removeClass(handle, Classes[17]);
			if ( to > 50 ) {
				addClass(handle, Classes[17]);
			}
		}

		// Update locations.
		scope_Locations[trigger] = to;

		// Convert the value to the slider stepping/range.
		scope_Values[trigger] = scope_Spectrum.fromStepping( to );

		fireEvent('update', trigger);

		return true;
	}

	// Loop values from value method and apply them.
	function setValues ( count, values ) {

		var i, trigger, to;

		// With the limit option, we'll need another limiting pass.
		if ( options.limit ) {
			count += 1;
		}

		// If there are multiple handles to be set run the setting
		// mechanism twice for the first handle, to make sure it
		// can be bounced of the second one properly.
		for ( i = 0; i < count; i += 1 ) {

			trigger = i%2;

			// Get the current argument from the array.
			to = values[trigger];

			// Setting with null indicates an 'ignore'.
			// Inputting 'false' is invalid.
			if ( to !== null && to !== false ) {

				// If a formatted number was passed, attemt to decode it.
				if ( typeof to === 'number' ) {
					to = String(to);
				}

				to = options.format.from( to );

				// Request an update for all links if the value was invalid.
				// Do so too if setting the handle fails.
				if ( to === false || isNaN(to) || setHandle( scope_Handles[trigger], scope_Spectrum.toStepping( to ), i === (3 - options.dir) ) === false ) {
					fireEvent('update', trigger);
				}
			}
		}
	}

	// Set the slider value.
	function valueSet ( input ) {

		var count, values = asArray( input ), i;

		// The RTL settings is implemented by reversing the front-end,
		// internal mechanisms are the same.
		if ( options.dir && options.handles > 1 ) {
			values.reverse();
		}

		// Animation is optional.
		// Make sure the initial values where set before using animated placement.
		if ( options.animate && scope_Locations[0] !== -1 ) {
			addClassFor( scope_Target, Classes[14], 300 );
		}

		// Determine how often to set the handles.
		count = scope_Handles.length > 1 ? 3 : 1;

		if ( values.length === 1 ) {
			count = 1;
		}

		setValues ( count, values );

		// Fire the 'set' event for both handles.
		for ( i = 0; i < scope_Handles.length; i++ ) {
			fireEvent('set', i);
		}
	}

	// Get the slider value.
	function valueGet ( ) {

		var i, retour = [];

		// Get the value from all handles.
		for ( i = 0; i < options.handles; i += 1 ){
			retour[i] = options.format.to( scope_Values[i] );
		}

		return inSliderOrder( retour );
	}

	// Removes classes from the root and empties it.
	function destroy ( ) {
		Classes.forEach(function(cls){
			if ( !cls ) { return; } // Ignore empty classes
			removeClass(scope_Target, cls);
		});
		scope_Target.innerHTML = '';
		delete scope_Target.noUiSlider;
	}

	// Get the current step size for the slider.
	function getCurrentStep ( ) {

		// Check all locations, map them to their stepping point.
		// Get the step point, then find it in the input list.
		var retour = scope_Locations.map(function( location, index ){

			var step = scope_Spectrum.getApplicableStep( location ),

				// As per #391, the comparison for the decrement step can have some rounding issues.
				// Round the value to the precision used in the step.
				stepDecimals = countDecimals(String(step[2])),

				// Get the current numeric value
				value = scope_Values[index],

				// To move the slider 'one step up', the current step value needs to be added.
				// Use null if we are at the maximum slider value.
				increment = location === 100 ? null : step[2],

				// Going 'one step down' might put the slider in a different sub-range, so we
				// need to switch between the current or the previous step.
				prev = Number((value - step[2]).toFixed(stepDecimals)),

				// If the value fits the step, return the current step value. Otherwise, use the
				// previous step. Return null if the slider is at its minimum value.
				decrement = location === 0 ? null : (prev >= step[1]) ? step[2] : (step[0] || false);

			return [decrement, increment];
		});

		// Return values in the proper order.
		return inSliderOrder( retour );
	}

	// Attach an event to this slider, possibly including a namespace
	function bindEvent ( namespacedEvent, callback ) {
		scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
		scope_Events[namespacedEvent].push(callback);

		// If the event bound is 'update,' fire it immediately for all handles.
		if ( namespacedEvent.split('.')[0] === 'update' ) {
			scope_Handles.forEach(function(a, index){
				fireEvent('update', index);
			});
		}
	}

	// Undo attachment of event
	function removeEvent ( namespacedEvent ) {

		var event = namespacedEvent.split('.')[0],
			namespace = namespacedEvent.substring(event.length);

		Object.keys(scope_Events).forEach(function( bind ){

			var tEvent = bind.split('.')[0],
				tNamespace = bind.substring(tEvent.length);

			if ( (!event || event === tEvent) && (!namespace || namespace === tNamespace) ) {
				delete scope_Events[bind];
			}
		});
	}


	// Throw an error if the slider was already initialized.
	if ( scope_Target.noUiSlider ) {
		throw new Error('Slider was already initialized.');
	}


	// Create the base element, initialise HTML and set classes.
	// Add handles and links.
	scope_Base = addSlider( options.dir, options.ort, scope_Target );
	scope_Handles = addHandles( options.handles, options.dir, scope_Base );

	// Set the connect classes.
	addConnection ( options.connect, scope_Target, scope_Handles );

	// Attach user events.
	events( options.events );

	if ( options.pips ) {
		pips(options.pips);
	}

	return {
		destroy: destroy,
		steps: getCurrentStep,
		on: bindEvent,
		off: removeEvent,
		get: valueGet,
		set: valueSet
	};

}


	// Run the standard initializer
	function initialize ( target, originalOptions ) {

		if ( !target.nodeName ) {
			throw new Error('noUiSlider.create requires a single element.');
		}

		// Test the options and create the slider environment;
		var options = testOptions( originalOptions, target ),
			slider = closure( target, options );

		// Use the public value method to set the start values.
		slider.set(options.start);

		target.noUiSlider = slider;

		if (originalOptions.tooltips === true || originalOptions.tooltips === undefined) {
			// Tooltips
			var tipHandles = target.getElementsByClassName('noUi-handle'),
				tooltips = [];

			// Add divs to the slider handles.
			for ( var i = 0; i < tipHandles.length; i++ ){
				tooltips[i] = document.createElement('div');
				tipHandles[i].appendChild(tooltips[i]);
			// Add a class for styling
			tooltips[i].className += 'range-label';
			// Add additional markup
			tooltips[i].innerHTML = '<span></span>';
			// Replace the tooltip reference with the span we just added
			tooltips[i] = tooltips[i].getElementsByTagName('span')[0];
			}


			// When the slider changes, write the value to the tooltips.
			target.noUiSlider.on('update', function( values, handle ){

				tooltips[handle].innerHTML = values[handle];
			});
		}
	}

	// Use an object instead of a function for future expansibility;
	return {
		create: initialize
	};

}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


require("/client/accounts/forgot/template.forgot.js");
require("/client/accounts/signIn/template.signIn.js");
require("/client/accounts/signUp/template.signUp.js");
require("/client/accounts/template.general.js");
require("/client/template.main.js");
require("/lib/routing.js");
require("/client/accounts/forgot/forgot.js");
require("/client/accounts/signIn/signIn.js");
require("/client/accounts/signUp/signUp.js");
require("/client/accounts/countries.js");
require("/client/accounts/general.js");
require("/client/accounts/helpers.js");
require("/client/accounts/validation.js");
require("/common/common.js");
require("/client/main.js");